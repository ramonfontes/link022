/*
Package ocstruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/alpha/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- /mnt/external/git/openconfig/public/release/models/wifi/openconfig-access-points.yang
	- /mnt/external/git/openconfig/public/release/models/wifi/openconfig-ap-manager.yang
	- /mnt/external/git/openconfig/public/release/models/wifi/openconfig-wifi-mac.yang
	- /mnt/external/git/openconfig/public/release/models/wifi/openconfig-wifi-phy.yang
	- /mnt/external/git/openconfig/public/release/models/wifi/openconfig-wifi-types.yang
	- ../models/gasket.yang
Imported modules were sourced from:
	- /mnt/external/git/openconfig/public/release/models/...
	- /mnt/external/git/openconfig/yang/standard/ietf/RFC/...
	- ../models/gasket.yang/...
*/
package ocstruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	AccessPoints	*OpenconfigAccessPoints_AccessPoints	`path:"access-points" module:"openconfig-access-points"`
	Components	*OpenconfigPlatform_Components	`path:"components" module:"openconfig-platform"`
	Gasket	*OpenconfigGasket_Gasket	`path:"gasket" module:"openconfig-gasket"`
	JoinedAps	*OpenconfigApManager_JoinedAps	`path:"joined-aps" module:"openconfig-ap-manager"`
	Messages	*OpenconfigMessages_Messages	`path:"messages" module:"openconfig-messages"`
	ProvisionAps	*OpenconfigApManager_ProvisionAps	`path:"provision-aps" module:"openconfig-ap-manager"`
	Radios	*OpenconfigWifiPhy_Radios	`path:"radios" module:"openconfig-wifi-phy"`
	Ssids	*OpenconfigWifiMac_Ssids	`path:"ssids" module:"openconfig-wifi-mac"`
	System	*OpenconfigSystem_System	`path:"system" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints represents the /openconfig-access-points/access-points YANG schema element.
type OpenconfigAccessPoints_AccessPoints struct {
	AccessPoint	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint	`path:"access-point" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints) IsYANGGoStruct() {}

// NewAccessPoint creates a new entry in the AccessPoint list of the
// OpenconfigAccessPoints_AccessPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints) NewAccessPoint(Hostname string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessPoint", key)
	}

	t.AccessPoint[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint{
		Hostname: &Hostname,
	}

	return t.AccessPoint[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint represents the /openconfig-access-points/access-points/access-point YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint struct {
	AssignedApManagers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers	`path:"assigned-ap-managers" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Config	`path:"config" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	Radios	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios	`path:"radios" module:"openconfig-access-points"`
	Ssids	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids	`path:"ssids" module:"openconfig-access-points"`
	System	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System	`path:"system" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers struct {
	ApManager	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager	`path:"ap-manager" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) IsYANGGoStruct() {}

// NewApManager creates a new entry in the ApManager list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) NewApManager(Id string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApManager == nil {
		t.ApManager = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApManager[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApManager", key)
	}

	t.ApManager[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager{
		Id: &Id,
	}

	return t.ApManager[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config	`path:"config" module:"openconfig-access-points"`
	Id	*string	`path:"id" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config struct {
	ApManagerIpv4Address	*string	`path:"ap-manager-ipv4-address" module:"openconfig-access-points"`
	ApManagerIpv6Address	[]string	`path:"ap-manager-ipv6-address" module:"openconfig-access-points"`
	Fqdn	*string	`path:"fqdn" module:"openconfig-access-points"`
	Id	*string	`path:"id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State struct {
	ApManagerIpv4Address	*string	`path:"ap-manager-ipv4-address" module:"openconfig-access-points"`
	ApManagerIpv6Address	[]string	`path:"ap-manager-ipv6-address" module:"openconfig-access-points"`
	Fqdn	*string	`path:"fqdn" module:"openconfig-access-points"`
	Id	*string	`path:"id" module:"openconfig-access-points"`
	Joined	*bool	`path:"joined" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Config represents the /openconfig-access-points/access-points/access-point/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Config struct {
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios represents the /openconfig-access-points/access-points/access-point/radios YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios struct {
	Radio	map[OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio	`path:"radio" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) IsYANGGoStruct() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Key represents the key for list Radio of element /openconfig-access-points/access-points/access-point/radios.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Key struct {
	Id	uint8	`path:"id"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency"`
}

// NewRadio creates a new entry in the Radio list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) NewRadio(Id uint8, OperatingFrequency E_OpenconfigWifiTypes_OPERATING_FREQUENCY) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radio == nil {
		t.Radio = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Key{
		Id: Id,
		OperatingFrequency: OperatingFrequency,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radio[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radio", key)
	}

	t.Radio[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio{
		Id: &Id,
		OperatingFrequency: OperatingFrequency,
	}

	return t.Radio[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio represents the /openconfig-access-points/access-points/access-point/radios/radio YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config	`path:"config" module:"openconfig-access-points"`
	Id	*uint8	`path:"id" module:"openconfig-access-points"`
	Neighbors	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors	`path:"neighbors" module:"openconfig-access-points"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}


	return map[string]interface{}{
		"id": *t.Id,
		"operating-frequency": t.OperatingFrequency,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config represents the /openconfig-access-points/access-points/access-point/radios/radio/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"openconfig-access-points"`
	AntennaGain	*int8	`path:"antenna-gain" module:"openconfig-access-points"`
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-access-points"`
	BssColoring	*bool	`path:"bss-coloring" module:"openconfig-access-points"`
	Channel	*uint8	`path:"channel" module:"openconfig-access-points"`
	ChannelWidth	*uint8	`path:"channel-width" module:"openconfig-access-points"`
	Dca	*bool	`path:"dca" module:"openconfig-access-points"`
	Dtp	*bool	`path:"dtp" module:"openconfig-access-points"`
	DtpMax	*int8	`path:"dtp-max" module:"openconfig-access-points"`
	DtpMin	*int8	`path:"dtp-min" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	Id	*uint8	`path:"id" module:"openconfig-access-points"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-access-points"`
	Scanning	*bool	`path:"scanning" module:"openconfig-access-points"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"openconfig-access-points"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"openconfig-access-points"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"openconfig-access-points"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"openconfig-access-points"`
	TransmitEirp	*uint8	`path:"transmit-eirp" module:"openconfig-access-points"`
	TransmitPower	*int8	`path:"transmit-power" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors struct {
	Neighbor	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor	`path:"neighbor" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) NewNeighbor(Bssid string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor)
	}

	key := Bssid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor{
		Bssid: &Bssid,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors/neighbor YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor struct {
	Bssid	*string	`path:"bssid" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors/neighbor/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State struct {
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-access-points"`
	Bssid	*string	`path:"bssid" module:"openconfig-access-points"`
	Channel	*uint16	`path:"channel" module:"openconfig-access-points"`
	LastSeen	*uint64	`path:"last-seen" module:"openconfig-access-points"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode	`path:"opmode" module:"openconfig-access-points"`
	PrimaryChannel	*uint16	`path:"primary-channel" module:"openconfig-access-points"`
	Rssi	*int8	`path:"rssi" module:"openconfig-access-points"`
	Ssid	*string	`path:"ssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State represents the /openconfig-access-points/access-points/access-point/radios/radio/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"openconfig-access-points"`
	AllowedRegulatoryChannels	[]uint8	`path:"allowed-regulatory-channels" module:"openconfig-access-points"`
	AntennaGain	*int8	`path:"antenna-gain" module:"openconfig-access-points"`
	BaseRadioMac	*string	`path:"base-radio-mac" module:"openconfig-access-points"`
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-access-points"`
	BssColoring	*bool	`path:"bss-coloring" module:"openconfig-access-points"`
	Channel	*uint8	`path:"channel" module:"openconfig-access-points"`
	ChannelChangeReason	E_OpenconfigWifiTypes_CHANGE_REASON_TYPE	`path:"channel-change-reason" module:"openconfig-access-points"`
	ChannelWidth	*uint8	`path:"channel-width" module:"openconfig-access-points"`
	Counters	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters	`path:"counters" module:"openconfig-access-points"`
	Dca	*bool	`path:"dca" module:"openconfig-access-points"`
	DfsHitTime	*uint64	`path:"dfs-hit-time" module:"openconfig-access-points"`
	Dtp	*bool	`path:"dtp" module:"openconfig-access-points"`
	DtpMax	*int8	`path:"dtp-max" module:"openconfig-access-points"`
	DtpMin	*int8	`path:"dtp-min" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	Id	*uint8	`path:"id" module:"openconfig-access-points"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-access-points"`
	RxDot11ChannelUtilization	*uint8	`path:"rx-dot11-channel-utilization" module:"openconfig-access-points"`
	RxNoiseChannelUtilization	*uint8	`path:"rx-noise-channel-utilization" module:"openconfig-access-points"`
	Scanning	*bool	`path:"scanning" module:"openconfig-access-points"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"openconfig-access-points"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"openconfig-access-points"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"openconfig-access-points"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"openconfig-access-points"`
	SoftwareSelectable	*bool	`path:"software-selectable" module:"openconfig-access-points"`
	SupportedChannels	[]uint8	`path:"supported-channels" module:"openconfig-access-points"`
	TotalChannelUtilization	*uint8	`path:"total-channel-utilization" module:"openconfig-access-points"`
	TransmitEirp	*uint8	`path:"transmit-eirp" module:"openconfig-access-points"`
	TransmitPower	*int8	`path:"transmit-power" module:"openconfig-access-points"`
	TxDot11ChannelUtilization	*uint8	`path:"tx-dot11-channel-utilization" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters represents the /openconfig-access-points/access-points/access-point/radios/radio/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters struct {
	FailedFcsFrames	*uint64	`path:"failed-fcs-frames" module:"openconfig-access-points"`
	NoiseFloor	*int8	`path:"noise-floor" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids represents the /openconfig-access-points/access-points/access-point/ssids YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids struct {
	Ssid	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid	`path:"ssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) IsYANGGoStruct() {}

// NewSsid creates a new entry in the Ssid list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) NewSsid(Name string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ssid == nil {
		t.Ssid = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ssid", key)
	}

	t.Ssid[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid{
		Name: &Name,
	}

	return t.Ssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid represents the /openconfig-access-points/access-points/access-point/ssids/ssid YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid struct {
	BandSteering	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering	`path:"band-steering" module:"openconfig-access-points"`
	Bssids	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids	`path:"bssids" module:"openconfig-access-points"`
	Clients	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients	`path:"clients" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config	`path:"config" module:"openconfig-access-points"`
	Dot11R	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R	`path:"dot11r" module:"openconfig-access-points"`
	Dot11V	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V	`path:"dot11v" module:"openconfig-access-points"`
	Dot1XTimers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers	`path:"dot1x-timers" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State	`path:"state" module:"openconfig-access-points"`
	Wmm	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm	`path:"wmm" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config struct {
	BandSteering	*bool	`path:"band-steering" module:"openconfig-access-points"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State struct {
	BandSteering	*bool	`path:"band-steering" module:"openconfig-access-points"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids struct {
	Bssid	map[OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid	`path:"bssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids) IsYANGGoStruct() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_Key represents the key for list Bssid of element /openconfig-access-points/access-points/access-point/ssids/ssid/bssids.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_Key struct {
	RadioId	uint8	`path:"radio-id"`
	Bssid	string	`path:"bssid"`
}

// NewBssid creates a new entry in the Bssid list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids) NewBssid(RadioId uint8, Bssid string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bssid == nil {
		t.Bssid = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_Key{
		RadioId: RadioId,
		Bssid: Bssid,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bssid", key)
	}

	t.Bssid[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid{
		RadioId: &RadioId,
		Bssid: &Bssid,
	}

	return t.Bssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid struct {
	Bssid	*string	`path:"bssid" module:"openconfig-access-points"`
	RadioId	*uint8	`path:"radio-id" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	if t.RadioId == nil {
		return nil, fmt.Errorf("nil value for key RadioId")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
		"radio-id": *t.RadioId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State struct {
	Bssid	*string	`path:"bssid" module:"openconfig-access-points"`
	Counters	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters	`path:"counters" module:"openconfig-access-points"`
	NumAssociatedClients	*uint8	`path:"num-associated-clients" module:"openconfig-access-points"`
	RadioId	*uint8	`path:"radio-id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters struct {
	BssChannelUtilization	*uint8	`path:"bss-channel-utilization" module:"openconfig-access-points"`
	RxBssDot11ChannelUtilization	*uint8	`path:"rx-bss-dot11-channel-utilization" module:"openconfig-access-points"`
	RxBytesData	*uint64	`path:"rx-bytes-data" module:"openconfig-access-points"`
	RxControl	*uint64	`path:"rx-control" module:"openconfig-access-points"`
	RxDataDist	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist	`path:"rx-data-dist" module:"openconfig-access-points"`
	RxDataWmm	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm	`path:"rx-data-wmm" module:"openconfig-access-points"`
	RxMcs	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs	`path:"rx-mcs" module:"openconfig-access-points"`
	RxMgmt	*uint64	`path:"rx-mgmt" module:"openconfig-access-points"`
	RxRetries	*uint64	`path:"rx-retries" module:"openconfig-access-points"`
	RxRetriesData	*uint64	`path:"rx-retries-data" module:"openconfig-access-points"`
	RxRetriesSubframe	*uint64	`path:"rx-retries-subframe" module:"openconfig-access-points"`
	TxBssDot11ChannelUtilization	*uint8	`path:"tx-bss-dot11-channel-utilization" module:"openconfig-access-points"`
	TxBytesData	*uint64	`path:"tx-bytes-data" module:"openconfig-access-points"`
	TxControl	*uint64	`path:"tx-control" module:"openconfig-access-points"`
	TxDataDist	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist	`path:"tx-data-dist" module:"openconfig-access-points"`
	TxDataWmm	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm	`path:"tx-data-wmm" module:"openconfig-access-points"`
	TxMcs	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs	`path:"tx-mcs" module:"openconfig-access-points"`
	TxMgmt	*uint64	`path:"tx-mgmt" module:"openconfig-access-points"`
	TxRetries	*uint64	`path:"tx-retries" module:"openconfig-access-points"`
	TxRetriesData	*uint64	`path:"tx-retries-data" module:"openconfig-access-points"`
	TxRetriesSubframe	*uint64	`path:"tx-retries-subframe" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/rx-data-dist YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist struct {
	Rx_0_64	*uint64	`path:"rx-0-64" module:"openconfig-access-points"`
	Rx_1025_2048	*uint64	`path:"rx-1025-2048" module:"openconfig-access-points"`
	Rx_129_256	*uint64	`path:"rx-129-256" module:"openconfig-access-points"`
	Rx_131073_262144	*uint64	`path:"rx-131073-262144" module:"openconfig-access-points"`
	Rx_16385_32768	*uint64	`path:"rx-16385-32768" module:"openconfig-access-points"`
	Rx_2049_4096	*uint64	`path:"rx-2049-4096" module:"openconfig-access-points"`
	Rx_257_512	*uint64	`path:"rx-257-512" module:"openconfig-access-points"`
	Rx_262145_524288	*uint64	`path:"rx-262145-524288" module:"openconfig-access-points"`
	Rx_32769_65536	*uint64	`path:"rx-32769-65536" module:"openconfig-access-points"`
	Rx_4097_8192	*uint64	`path:"rx-4097-8192" module:"openconfig-access-points"`
	Rx_513_1024	*uint64	`path:"rx-513-1024" module:"openconfig-access-points"`
	Rx_524289_1048576	*uint64	`path:"rx-524289-1048576" module:"openconfig-access-points"`
	Rx_65_128	*uint64	`path:"rx-65-128" module:"openconfig-access-points"`
	Rx_65537_131072	*uint64	`path:"rx-65537-131072" module:"openconfig-access-points"`
	Rx_8193_16384	*uint64	`path:"rx-8193-16384" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/rx-data-wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm struct {
	Be	*uint64	`path:"be" module:"openconfig-access-points"`
	Bk	*uint64	`path:"bk" module:"openconfig-access-points"`
	Vi	*uint64	`path:"vi" module:"openconfig-access-points"`
	Vo	*uint64	`path:"vo" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/rx-mcs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"openconfig-access-points"`
	Mcs1	*uint64	`path:"mcs1" module:"openconfig-access-points"`
	Mcs10	*uint64	`path:"mcs10" module:"openconfig-access-points"`
	Mcs11	*uint64	`path:"mcs11" module:"openconfig-access-points"`
	Mcs2	*uint64	`path:"mcs2" module:"openconfig-access-points"`
	Mcs3	*uint64	`path:"mcs3" module:"openconfig-access-points"`
	Mcs4	*uint64	`path:"mcs4" module:"openconfig-access-points"`
	Mcs5	*uint64	`path:"mcs5" module:"openconfig-access-points"`
	Mcs6	*uint64	`path:"mcs6" module:"openconfig-access-points"`
	Mcs7	*uint64	`path:"mcs7" module:"openconfig-access-points"`
	Mcs8	*uint64	`path:"mcs8" module:"openconfig-access-points"`
	Mcs9	*uint64	`path:"mcs9" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/tx-data-dist YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist struct {
	Tx_0_64	*uint64	`path:"tx-0-64" module:"openconfig-access-points"`
	Tx_1025_2048	*uint64	`path:"tx-1025-2048" module:"openconfig-access-points"`
	Tx_129_256	*uint64	`path:"tx-129-256" module:"openconfig-access-points"`
	Tx_131073_262144	*uint64	`path:"tx-131073-262144" module:"openconfig-access-points"`
	Tx_16385_32768	*uint64	`path:"tx-16385-32768" module:"openconfig-access-points"`
	Tx_2049_4096	*uint64	`path:"tx-2049-4096" module:"openconfig-access-points"`
	Tx_257_512	*uint64	`path:"tx-257-512" module:"openconfig-access-points"`
	Tx_262145_524288	*uint64	`path:"tx-262145-524288" module:"openconfig-access-points"`
	Tx_32769_65536	*uint64	`path:"tx-32769-65536" module:"openconfig-access-points"`
	Tx_4097_8192	*uint64	`path:"tx-4097-8192" module:"openconfig-access-points"`
	Tx_513_1024	*uint64	`path:"tx-513-1024" module:"openconfig-access-points"`
	Tx_524289_1048576	*uint64	`path:"tx-524289-1048576" module:"openconfig-access-points"`
	Tx_65_128	*uint64	`path:"tx-65-128" module:"openconfig-access-points"`
	Tx_65537_131072	*uint64	`path:"tx-65537-131072" module:"openconfig-access-points"`
	Tx_8193_16384	*uint64	`path:"tx-8193-16384" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/tx-data-wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm struct {
	Be	*uint64	`path:"be" module:"openconfig-access-points"`
	Bk	*uint64	`path:"bk" module:"openconfig-access-points"`
	Vi	*uint64	`path:"vi" module:"openconfig-access-points"`
	Vo	*uint64	`path:"vo" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs represents the /openconfig-access-points/access-points/access-point/ssids/ssid/bssids/bssid/state/counters/tx-mcs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"openconfig-access-points"`
	Mcs1	*uint64	`path:"mcs1" module:"openconfig-access-points"`
	Mcs10	*uint64	`path:"mcs10" module:"openconfig-access-points"`
	Mcs11	*uint64	`path:"mcs11" module:"openconfig-access-points"`
	Mcs2	*uint64	`path:"mcs2" module:"openconfig-access-points"`
	Mcs3	*uint64	`path:"mcs3" module:"openconfig-access-points"`
	Mcs4	*uint64	`path:"mcs4" module:"openconfig-access-points"`
	Mcs5	*uint64	`path:"mcs5" module:"openconfig-access-points"`
	Mcs6	*uint64	`path:"mcs6" module:"openconfig-access-points"`
	Mcs7	*uint64	`path:"mcs7" module:"openconfig-access-points"`
	Mcs8	*uint64	`path:"mcs8" module:"openconfig-access-points"`
	Mcs9	*uint64	`path:"mcs9" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients struct {
	Client	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client	`path:"client" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) IsYANGGoStruct() {}

// NewClient creates a new entry in the Client list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) NewClient(Mac string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Client", key)
	}

	t.Client[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client{
		Mac: &Mac,
	}

	return t.Client[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client struct {
	ClientCapabilities	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities	`path:"client-capabilities" module:"openconfig-access-points"`
	ClientConnection	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection	`path:"client-connection" module:"openconfig-access-points"`
	ClientRf	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf	`path:"client-rf" module:"openconfig-access-points"`
	Dot11KNeighbors	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors	`path:"dot11k-neighbors" module:"openconfig-access-points"`
	Mac	*string	`path:"mac" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-capabilities YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-capabilities/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	ChannelSupport	[]uint8	`path:"channel-support" module:"openconfig-access-points"`
	ClientCapabilities	[]E_OpenconfigWifiTypes_CLIENT_CAPABILITIES	`path:"client-capabilities" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-connection YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection struct {
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-connection/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	ClientState	E_OpenconfigWifiTypes_CLIENT_STATE	`path:"client-state" module:"openconfig-access-points"`
	ConnectionTime	*uint64	`path:"connection-time" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Addresses	[]string	`path:"ipv6-addresses" module:"openconfig-access-points"`
	OperatingSystem	*string	`path:"operating-system" module:"openconfig-access-points"`
	Username	*string	`path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-rf YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf struct {
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-rf/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State struct {
	ConnectionMode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode	`path:"connection-mode" module:"openconfig-access-points"`
	Frequency	*uint8	`path:"frequency" module:"openconfig-access-points"`
	PhyRate	*uint16	`path:"phy-rate" module:"openconfig-access-points"`
	Rssi	*int8	`path:"rssi" module:"openconfig-access-points"`
	Snr	*uint8	`path:"snr" module:"openconfig-access-points"`
	Ss	*uint8	`path:"ss" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/dot11k-neighbors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/dot11k-neighbors/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	ChannelLoadReport	*uint8	`path:"channel-load-report" module:"openconfig-access-points"`
	NeighborAntenna	*uint8	`path:"neighbor-antenna" module:"openconfig-access-points"`
	NeighborBssid	*string	`path:"neighbor-bssid" module:"openconfig-access-points"`
	NeighborChannel	*uint8	`path:"neighbor-channel" module:"openconfig-access-points"`
	NeighborRssi	*int8	`path:"neighbor-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State struct {
	Counters	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters	`path:"counters" module:"openconfig-access-points"`
	Mac	*string	`path:"mac" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters struct {
	RxBytes	*uint64	`path:"rx-bytes" module:"openconfig-access-points"`
	RxRetries	*uint64	`path:"rx-retries" module:"openconfig-access-points"`
	TxBytes	*uint64	`path:"tx-bytes" module:"openconfig-access-points"`
	TxRetries	*uint64	`path:"tx-retries" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"openconfig-access-points"`
	BasicDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-2g" module:"openconfig-access-points"`
	BasicDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-5g" module:"openconfig-access-points"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"openconfig-access-points"`
	Csa	*bool	`path:"csa" module:"openconfig-access-points"`
	DefaultVlan	*uint16	`path:"default-vlan" module:"openconfig-access-points"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"openconfig-access-points"`
	Dot11K	*bool	`path:"dot11k" module:"openconfig-access-points"`
	Dva	*bool	`path:"dva" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"openconfig-access-points"`
	Hidden	*bool	`path:"hidden" module:"openconfig-access-points"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"openconfig-access-points"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"openconfig-access-points"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Okc	*bool	`path:"okc" module:"openconfig-access-points"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-access-points"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"openconfig-access-points"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"openconfig-access-points"`
	QbssLoad	*bool	`path:"qbss-load" module:"openconfig-access-points"`
	ServerGroup	*string	`path:"server-group" module:"openconfig-access-points"`
	StationIsolation	*bool	`path:"station-isolation" module:"openconfig-access-points"`
	SupportedDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-2g" module:"openconfig-access-points"`
	SupportedDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-5g" module:"openconfig-access-points"`
	VlanList	[]uint16	`path:"vlan-list" module:"openconfig-access-points"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config struct {
	Dot11R	*bool	`path:"dot11r" module:"openconfig-access-points"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"openconfig-access-points"`
	Dot11RMethod	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"openconfig-access-points"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State struct {
	Dot11R	*bool	`path:"dot11r" module:"openconfig-access-points"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"openconfig-access-points"`
	Dot11RMethod	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"openconfig-access-points"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"openconfig-access-points"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"openconfig-access-points"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"openconfig-access-points"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"openconfig-access-points"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"openconfig-access-points"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"openconfig-access-points"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"openconfig-access-points"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"openconfig-access-points"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"openconfig-access-points"`
	BasicDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-2g" module:"openconfig-access-points"`
	BasicDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-5g" module:"openconfig-access-points"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"openconfig-access-points"`
	Csa	*bool	`path:"csa" module:"openconfig-access-points"`
	DefaultVlan	*uint16	`path:"default-vlan" module:"openconfig-access-points"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"openconfig-access-points"`
	Dot11K	*bool	`path:"dot11k" module:"openconfig-access-points"`
	Dva	*bool	`path:"dva" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"openconfig-access-points"`
	Hidden	*bool	`path:"hidden" module:"openconfig-access-points"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"openconfig-access-points"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"openconfig-access-points"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Okc	*bool	`path:"okc" module:"openconfig-access-points"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-access-points"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"openconfig-access-points"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"openconfig-access-points"`
	QbssLoad	*bool	`path:"qbss-load" module:"openconfig-access-points"`
	ServerGroup	*string	`path:"server-group" module:"openconfig-access-points"`
	StationIsolation	*bool	`path:"station-isolation" module:"openconfig-access-points"`
	SupportedDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-2g" module:"openconfig-access-points"`
	SupportedDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-5g" module:"openconfig-access-points"`
	VlanList	[]uint16	`path:"vlan-list" module:"openconfig-access-points"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"openconfig-access-points"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"openconfig-access-points"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"openconfig-access-points"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"openconfig-access-points"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"openconfig-access-points"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"openconfig-access-points"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"openconfig-access-points"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"openconfig-access-points"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System represents the /openconfig-access-points/access-points/access-point/system YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System struct {
	Aaa	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa	`path:"aaa" module:"openconfig-access-points"`
	Alarms	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms	`path:"alarms" module:"openconfig-access-points"`
	Clock	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock	`path:"clock" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config	`path:"config" module:"openconfig-access-points"`
	Cpus	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus	`path:"cpus" module:"openconfig-access-points"`
	Dns	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns	`path:"dns" module:"openconfig-access-points"`
	License	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License	`path:"license" module:"openconfig-access-points"`
	Logging	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging	`path:"logging" module:"openconfig-access-points"`
	Memory	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory	`path:"memory" module:"openconfig-access-points"`
	Messages	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages	`path:"messages" module:"openconfig-access-points"`
	MountPoints	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints	`path:"mount-points" module:"openconfig-access-points"`
	Ntp	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp	`path:"ntp" module:"openconfig-access-points"`
	Processes	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes	`path:"processes" module:"openconfig-access-points"`
	SshServer	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer	`path:"ssh-server" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State	`path:"state" module:"openconfig-access-points"`
	TelnetServer	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer	`path:"telnet-server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa represents the /openconfig-access-points/access-points/access-point/system/aaa YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa struct {
	Accounting	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting	`path:"accounting" module:"openconfig-access-points"`
	Authentication	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication	`path:"authentication" module:"openconfig-access-points"`
	Authorization	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization	`path:"authorization" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config	`path:"config" module:"openconfig-access-points"`
	ServerGroups	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups	`path:"server-groups" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config	`path:"config" module:"openconfig-access-points"`
	Events	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events	`path:"events" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config struct {
	AccountingMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event	`path:"event" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config	`path:"config" module:"openconfig-access-points"`
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
	Record	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
	Record	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State struct {
	AccountingMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication struct {
	AdminUser	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser	`path:"admin-user" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State	`path:"state" module:"openconfig-access-points"`
	Users	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users	`path:"users" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-access-points"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-access-points"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-access-points"`
	AdminUsername	*string	`path:"admin-username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config struct {
	AuthenticationMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State struct {
	AuthenticationMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users struct {
	User	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User	`path:"user" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State	`path:"state" module:"openconfig-access-points"`
	Username	*string	`path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config struct {
	Password	*string	`path:"password" module:"openconfig-access-points"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-access-points"`
	Role	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union	`path:"role" module:"openconfig-access-points"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-access-points"`
	Username	*string	`path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State struct {
	Password	*string	`path:"password" module:"openconfig-access-points"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-access-points"`
	Role	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union	`path:"role" module:"openconfig-access-points"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-access-points"`
	Username	*string	`path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config	`path:"config" module:"openconfig-access-points"`
	Events	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events	`path:"events" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config struct {
	AuthorizationMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event	`path:"event" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config	`path:"config" module:"openconfig-access-points"`
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State struct {
	AuthorizationMethod	[]OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups struct {
	ServerGroup	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup	`path:"server-group" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config	`path:"config" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Servers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers	`path:"servers" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config struct {
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	Server	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server	`path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config	`path:"config" module:"openconfig-access-points"`
	Radius	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius	`path:"radius" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State	`path:"state" module:"openconfig-access-points"`
	Tacacs	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs	`path:"tacacs" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-access-points"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-access-points"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-access-points"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-access-points"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-access-points"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-access-points"`
	Counters	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters	`path:"counters" module:"openconfig-access-points"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-access-points"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-access-points"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	AccessAccepts	*uint64	`path:"access-accepts" module:"openconfig-access-points"`
	AccessRejects	*uint64	`path:"access-rejects" module:"openconfig-access-points"`
	RetriedAccessRequests	*uint64	`path:"retried-access-requests" module:"openconfig-access-points"`
	TimeoutAccessRequests	*uint64	`path:"timeout-access-requests" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	ConnectionAborts	*uint64	`path:"connection-aborts" module:"openconfig-access-points"`
	ConnectionCloses	*uint64	`path:"connection-closes" module:"openconfig-access-points"`
	ConnectionFailures	*uint64	`path:"connection-failures" module:"openconfig-access-points"`
	ConnectionOpens	*uint64	`path:"connection-opens" module:"openconfig-access-points"`
	ConnectionTimeouts	*uint64	`path:"connection-timeouts" module:"openconfig-access-points"`
	ErrorsReceived	*uint64	`path:"errors-received" module:"openconfig-access-points"`
	MessagesReceived	*uint64	`path:"messages-received" module:"openconfig-access-points"`
	MessagesSent	*uint64	`path:"messages-sent" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-access-points"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-access-points"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State struct {
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State represents the /openconfig-access-points/access-points/access-point/system/aaa/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms represents the /openconfig-access-points/access-points/access-point/system/alarms YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms struct {
	Alarm	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm	`path:"alarm" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) NewAlarm(Id string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config	`path:"config" module:"openconfig-access-points"`
	Id	*string	`path:"id" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State struct {
	Id	*string	`path:"id" module:"openconfig-access-points"`
	Resource	*string	`path:"resource" module:"openconfig-access-points"`
	Severity	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY	`path:"severity" module:"openconfig-access-points"`
	Text	*string	`path:"text" module:"openconfig-access-points"`
	TimeCreated	*uint64	`path:"time-created" module:"openconfig-access-points"`
	TypeId	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union	`path:"type-id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock represents the /openconfig-access-points/access-points/access-point/system/clock YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config represents the /openconfig-access-points/access-points/access-point/system/clock/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State represents the /openconfig-access-points/access-points/access-point/system/clock/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config represents the /openconfig-access-points/access-points/access-point/system/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config struct {
	DomainName	*string	`path:"domain-name" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-access-points"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus represents the /openconfig-access-points/access-points/access-point/system/cpus YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus struct {
	Cpu	map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu	`path:"cpu" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) NewCpu(Index OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu struct {
	Index	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/cpus/cpu/index within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index is used when /openconfig-access-points/access-points/access-point/system/cpus/cpu/index
// is to be set to a E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-access-points/access-points/access-point/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32	uint32
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State struct {
	HardwareInterrupt	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt	`path:"hardware-interrupt" module:"openconfig-access-points"`
	Idle	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle	`path:"idle" module:"openconfig-access-points"`
	Index	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-access-points"`
	Kernel	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel	`path:"kernel" module:"openconfig-access-points"`
	Nice	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice	`path:"nice" module:"openconfig-access-points"`
	SoftwareInterrupt	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt	`path:"software-interrupt" module:"openconfig-access-points"`
	Total	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total	`path:"total" module:"openconfig-access-points"`
	User	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User	`path:"user" module:"openconfig-access-points"`
	Wait	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait	`path:"wait" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/total YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait struct {
	Avg	*uint8	`path:"avg" module:"openconfig-access-points"`
	Instant	*uint8	`path:"instant" module:"openconfig-access-points"`
	Interval	*uint64	`path:"interval" module:"openconfig-access-points"`
	Max	*uint8	`path:"max" module:"openconfig-access-points"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-access-points"`
	Min	*uint8	`path:"min" module:"openconfig-access-points"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns represents the /openconfig-access-points/access-points/access-point/system/dns YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config	`path:"config" module:"openconfig-access-points"`
	HostEntries	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries	`path:"host-entries" module:"openconfig-access-points"`
	Servers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers	`path:"servers" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config represents the /openconfig-access-points/access-points/access-point/system/dns/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config struct {
	Search	[]string	`path:"search" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries struct {
	HostEntry	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry	`path:"host-entry" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config	`path:"config" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config struct {
	Alias	[]string	`path:"alias" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State struct {
	Alias	[]string	`path:"alias" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers represents the /openconfig-access-points/access-points/access-point/system/dns/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers struct {
	Server	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server	`path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State represents the /openconfig-access-points/access-points/access-point/system/dns/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State struct {
	Search	[]string	`path:"search" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License represents the /openconfig-access-points/access-points/access-point/system/license YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License struct {
	Licenses	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses	`path:"licenses" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses represents the /openconfig-access-points/access-points/access-point/system/license/licenses YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses struct {
	License	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License	`path:"license" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses) NewLicense(LicenseId string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License represents the /openconfig-access-points/access-points/access-point/system/license/licenses/license YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config	`path:"config" module:"openconfig-access-points"`
	LicenseId	*string	`path:"license-id" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config represents the /openconfig-access-points/access-points/access-point/system/license/licenses/license/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config struct {
	Active	*bool	`path:"active" module:"openconfig-access-points"`
	LicenseData	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union	`path:"license-data" module:"openconfig-access-points"`
	LicenseId	*string	`path:"license-id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/license/licenses/license/config/license-data within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_Binary is used when /openconfig-access-points/access-points/access-point/system/license/licenses/license/config/license-data
// is to be set to a Binary value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_Binary
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_Binary) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_String is used when /openconfig-access-points/access-points/access-point/system/license/licenses/license/config/license-data
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_Config_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State represents the /openconfig-access-points/access-points/access-point/system/license/licenses/license/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State struct {
	Active	*bool	`path:"active" module:"openconfig-access-points"`
	Description	*string	`path:"description" module:"openconfig-access-points"`
	ExpirationDate	*uint64	`path:"expiration-date" module:"openconfig-access-points"`
	Expired	*bool	`path:"expired" module:"openconfig-access-points"`
	InUse	*bool	`path:"in-use" module:"openconfig-access-points"`
	IssueDate	*uint64	`path:"issue-date" module:"openconfig-access-points"`
	LicenseData	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union	`path:"license-data" module:"openconfig-access-points"`
	LicenseId	*string	`path:"license-id" module:"openconfig-access-points"`
	Valid	*bool	`path:"valid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/license/licenses/license/state/license-data within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_Binary is used when /openconfig-access-points/access-points/access-point/system/license/licenses/license/state/license-data
// is to be set to a Binary value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_Binary
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_Binary) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_String is used when /openconfig-access-points/access-points/access-point/system/license/licenses/license/state/license-data
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union() {}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_License_Licenses_License_State_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging represents the /openconfig-access-points/access-points/access-point/system/logging YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging struct {
	Console	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console	`path:"console" module:"openconfig-access-points"`
	RemoteServers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers	`path:"remote-servers" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console represents the /openconfig-access-points/access-points/access-point/system/logging/console YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config	`path:"config" module:"openconfig-access-points"`
	Selectors	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors	`path:"selectors" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config represents the /openconfig-access-points/access-points/access-point/system/logging/console/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors struct {
	Selector	map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector	`path:"selector" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-access-points/access-points/access-point/system/logging/console/selectors.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config	`path:"config" module:"openconfig-access-points"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State represents the /openconfig-access-points/access-points/access-point/system/logging/console/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers struct {
	RemoteServer	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer	`path:"remote-server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config	`path:"config" module:"openconfig-access-points"`
	Host	*string	`path:"host" module:"openconfig-access-points"`
	Selectors	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors	`path:"selectors" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config struct {
	Host	*string	`path:"host" module:"openconfig-access-points"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	Selector	map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector	`path:"selector" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config	`path:"config" module:"openconfig-access-points"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-access-points"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State struct {
	Host	*string	`path:"host" module:"openconfig-access-points"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-access-points"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory represents the /openconfig-access-points/access-points/access-point/system/memory YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config represents the /openconfig-access-points/access-points/access-point/system/memory/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State represents the /openconfig-access-points/access-points/access-point/system/memory/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State struct {
	Counters	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters	`path:"counters" module:"openconfig-access-points"`
	Free	*uint64	`path:"free" module:"openconfig-access-points"`
	Physical	*uint64	`path:"physical" module:"openconfig-access-points"`
	Reserved	*uint64	`path:"reserved" module:"openconfig-access-points"`
	Used	*uint64	`path:"used" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters represents the /openconfig-access-points/access-points/access-point/system/memory/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters struct {
	CorrectableEccErrors	*uint64	`path:"correctable-ecc-errors" module:"openconfig-access-points"`
	TotalEccErrors	*uint64	`path:"total-ecc-errors" module:"openconfig-access-points"`
	UncorrectableEccErrors	*uint64	`path:"uncorrectable-ecc-errors" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages represents the /openconfig-access-points/access-points/access-point/system/messages YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config	`path:"config" module:"openconfig-access-points"`
	DebugEntries	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries	`path:"debug-entries" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config represents the /openconfig-access-points/access-points/access-point/system/messages/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config struct {
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries represents the /openconfig-access-points/access-points/access-point/system/messages/debug-entries YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries struct {
	DebugService	map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService	`path:"debug-service" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService represents the /openconfig-access-points/access-points/access-point/system/messages/debug-entries/debug-service YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config	`path:"config" module:"openconfig-access-points"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config represents the /openconfig-access-points/access-points/access-point/system/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State represents the /openconfig-access-points/access-points/access-point/system/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State represents the /openconfig-access-points/access-points/access-point/system/messages/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State struct {
	Message	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message	`path:"message" module:"openconfig-access-points"`
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message represents the /openconfig-access-points/access-points/access-point/system/messages/state/message YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message struct {
	AppName	*string	`path:"app-name" module:"openconfig-access-points"`
	Msg	*string	`path:"msg" module:"openconfig-access-points"`
	Msgid	*string	`path:"msgid" module:"openconfig-access-points"`
	Priority	*uint8	`path:"priority" module:"openconfig-access-points"`
	Procid	*string	`path:"procid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints represents the /openconfig-access-points/access-points/access-point/system/mount-points YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints struct {
	MountPoint	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint	`path:"mount-point" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints) IsYANGGoStruct() {}

// NewMountPoint creates a new entry in the MountPoint list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints) NewMountPoint(Name string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint represents the /openconfig-access-points/access-points/access-point/system/mount-points/mount-point YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint struct {
	Name	*string	`path:"name" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State represents the /openconfig-access-points/access-points/access-point/system/mount-points/mount-point/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State struct {
	Available	*uint64	`path:"available" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Size	*uint64	`path:"size" module:"openconfig-access-points"`
	StorageComponent	*string	`path:"storage-component" module:"openconfig-access-points"`
	Utilized	*uint64	`path:"utilized" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_MountPoints_MountPoint_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp represents the /openconfig-access-points/access-points/access-point/system/ntp YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config	`path:"config" module:"openconfig-access-points"`
	NtpKeys	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys	`path:"ntp-keys" module:"openconfig-access-points"`
	Servers	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers	`path:"servers" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config struct {
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys struct {
	NtpKey	map[uint16]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey	`path:"ntp-key" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config	`path:"config" module:"openconfig-access-points"`
	KeyId	*uint16	`path:"key-id" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-access-points"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-access-points"`
	KeyValue	*string	`path:"key-value" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-access-points"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-access-points"`
	KeyValue	*string	`path:"key-value" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers represents the /openconfig-access-points/access-points/access-point/system/ntp/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers struct {
	Server	map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server	`path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	AssociationType	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-access-points"`
	Iburst	*bool	`path:"iburst" module:"openconfig-access-points"`
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
	Prefer	*bool	`path:"prefer" module:"openconfig-access-points"`
	Version	*uint8	`path:"version" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-access-points"`
	AssociationType	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-access-points"`
	Iburst	*bool	`path:"iburst" module:"openconfig-access-points"`
	Offset	*uint64	`path:"offset" module:"openconfig-access-points"`
	PollInterval	*uint32	`path:"poll-interval" module:"openconfig-access-points"`
	Port	*uint16	`path:"port" module:"openconfig-access-points"`
	Prefer	*bool	`path:"prefer" module:"openconfig-access-points"`
	RootDelay	*uint32	`path:"root-delay" module:"openconfig-access-points"`
	RootDispersion	*uint64	`path:"root-dispersion" module:"openconfig-access-points"`
	Stratum	*uint8	`path:"stratum" module:"openconfig-access-points"`
	Version	*uint8	`path:"version" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State represents the /openconfig-access-points/access-points/access-point/system/ntp/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State struct {
	AuthMismatch	*uint64	`path:"auth-mismatch" module:"openconfig-access-points"`
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-access-points"`
	Enabled	*bool	`path:"enabled" module:"openconfig-access-points"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes represents the /openconfig-access-points/access-points/access-point/system/processes YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes struct {
	Process	map[uint64]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process	`path:"process" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) NewProcess(Pid uint64) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process represents the /openconfig-access-points/access-points/access-point/system/processes/process YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process struct {
	Pid	*uint64	`path:"pid" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State represents the /openconfig-access-points/access-points/access-point/system/processes/process/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State struct {
	Args	[]string	`path:"args" module:"openconfig-access-points"`
	CpuUsageSystem	*uint64	`path:"cpu-usage-system" module:"openconfig-access-points"`
	CpuUsageUser	*uint64	`path:"cpu-usage-user" module:"openconfig-access-points"`
	CpuUtilization	*uint8	`path:"cpu-utilization" module:"openconfig-access-points"`
	MemoryUsage	*uint64	`path:"memory-usage" module:"openconfig-access-points"`
	MemoryUtilization	*uint8	`path:"memory-utilization" module:"openconfig-access-points"`
	Name	*string	`path:"name" module:"openconfig-access-points"`
	Pid	*uint64	`path:"pid" module:"openconfig-access-points"`
	StartTime	*uint64	`path:"start-time" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer represents the /openconfig-access-points/access-points/access-point/system/ssh-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config represents the /openconfig-access-points/access-points/access-point/system/ssh-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-access-points"`
	ProtocolVersion	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-access-points"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State represents the /openconfig-access-points/access-points/access-point/system/ssh-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-access-points"`
	ProtocolVersion	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-access-points"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State represents the /openconfig-access-points/access-points/access-point/system/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State struct {
	BootTime	*uint64	`path:"boot-time" module:"openconfig-access-points"`
	CurrentDatetime	*string	`path:"current-datetime" module:"openconfig-access-points"`
	DomainName	*string	`path:"domain-name" module:"openconfig-access-points"`
	Hostname	*string	`path:"hostname" module:"openconfig-access-points"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-access-points"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer represents the /openconfig-access-points/access-points/access-point/system/telnet-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer struct {
	Config	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config	`path:"config" module:"openconfig-access-points"`
	State	*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State	`path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config represents the /openconfig-access-points/access-points/access-point/system/telnet-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-access-points"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State represents the /openconfig-access-points/access-points/access-point/system/telnet-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-access-points"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-access-points"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_JoinedAps represents the /openconfig-ap-manager/joined-aps YANG schema element.
type OpenconfigApManager_JoinedAps struct {
	JoinedAp	map[string]*OpenconfigApManager_JoinedAps_JoinedAp	`path:"joined-ap" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_JoinedAps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_JoinedAps) IsYANGGoStruct() {}

// NewJoinedAp creates a new entry in the JoinedAp list of the
// OpenconfigApManager_JoinedAps struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigApManager_JoinedAps) NewJoinedAp(Hostname string) (*OpenconfigApManager_JoinedAps_JoinedAp, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.JoinedAp == nil {
		t.JoinedAp = make(map[string]*OpenconfigApManager_JoinedAps_JoinedAp)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.JoinedAp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list JoinedAp", key)
	}

	t.JoinedAp[key] = &OpenconfigApManager_JoinedAps_JoinedAp{
		Hostname: &Hostname,
	}

	return t.JoinedAp[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_JoinedAps) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_JoinedAps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_JoinedAps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_JoinedAps_JoinedAp represents the /openconfig-ap-manager/joined-aps/joined-ap YANG schema element.
type OpenconfigApManager_JoinedAps_JoinedAp struct {
	Hostname	*string	`path:"hostname" module:"openconfig-ap-manager"`
	State	*OpenconfigApManager_JoinedAps_JoinedAp_State	`path:"state" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_JoinedAps_JoinedAp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_JoinedAps_JoinedAp) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigApManager_JoinedAps_JoinedAp struct, which is a YANG list entry.
func (t *OpenconfigApManager_JoinedAps_JoinedAp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_JoinedAps_JoinedAp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_JoinedAps_JoinedAp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_JoinedAps_JoinedAp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_JoinedAps_JoinedAp_State represents the /openconfig-ap-manager/joined-aps/joined-ap/state YANG schema element.
type OpenconfigApManager_JoinedAps_JoinedAp_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-ap-manager"`
	Hostname	*string	`path:"hostname" module:"openconfig-ap-manager"`
	Ipv4	*string	`path:"ipv4" module:"openconfig-ap-manager"`
	Ipv6	*string	`path:"ipv6" module:"openconfig-ap-manager"`
	Mac	*string	`path:"mac" module:"openconfig-ap-manager"`
	Model	*string	`path:"model" module:"openconfig-ap-manager"`
	Opstate	E_OpenconfigWifiTypes_AP_STATE	`path:"opstate" module:"openconfig-ap-manager"`
	PowerSource	E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource	`path:"power-source" module:"openconfig-ap-manager"`
	Serial	*string	`path:"serial" module:"openconfig-ap-manager"`
	SoftwareVersion	*string	`path:"software-version" module:"openconfig-ap-manager"`
	Uptime	*uint32	`path:"uptime" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_JoinedAps_JoinedAp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_JoinedAps_JoinedAp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_JoinedAps_JoinedAp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_JoinedAps_JoinedAp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_JoinedAps_JoinedAp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_ProvisionAps represents the /openconfig-ap-manager/provision-aps YANG schema element.
type OpenconfigApManager_ProvisionAps struct {
	ProvisionAp	map[string]*OpenconfigApManager_ProvisionAps_ProvisionAp	`path:"provision-ap" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_ProvisionAps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_ProvisionAps) IsYANGGoStruct() {}

// NewProvisionAp creates a new entry in the ProvisionAp list of the
// OpenconfigApManager_ProvisionAps struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigApManager_ProvisionAps) NewProvisionAp(Mac string) (*OpenconfigApManager_ProvisionAps_ProvisionAp, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ProvisionAp == nil {
		t.ProvisionAp = make(map[string]*OpenconfigApManager_ProvisionAps_ProvisionAp)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ProvisionAp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ProvisionAp", key)
	}

	t.ProvisionAp[key] = &OpenconfigApManager_ProvisionAps_ProvisionAp{
		Mac: &Mac,
	}

	return t.ProvisionAp[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_ProvisionAps) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_ProvisionAps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_ProvisionAps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_ProvisionAps_ProvisionAp represents the /openconfig-ap-manager/provision-aps/provision-ap YANG schema element.
type OpenconfigApManager_ProvisionAps_ProvisionAp struct {
	Config	*OpenconfigApManager_ProvisionAps_ProvisionAp_Config	`path:"config" module:"openconfig-ap-manager"`
	Mac	*string	`path:"mac" module:"openconfig-ap-manager"`
	State	*OpenconfigApManager_ProvisionAps_ProvisionAp_State	`path:"state" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_ProvisionAps_ProvisionAp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_ProvisionAps_ProvisionAp) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigApManager_ProvisionAps_ProvisionAp struct, which is a YANG list entry.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_ProvisionAps_ProvisionAp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_ProvisionAps_ProvisionAp_Config represents the /openconfig-ap-manager/provision-aps/provision-ap/config YANG schema element.
type OpenconfigApManager_ProvisionAps_ProvisionAp_Config struct {
	CountryCode	*string	`path:"country-code" module:"openconfig-ap-manager"`
	Hostname	*string	`path:"hostname" module:"openconfig-ap-manager"`
	Mac	*string	`path:"mac" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_ProvisionAps_ProvisionAp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_ProvisionAps_ProvisionAp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_ProvisionAps_ProvisionAp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigApManager_ProvisionAps_ProvisionAp_State represents the /openconfig-ap-manager/provision-aps/provision-ap/state YANG schema element.
type OpenconfigApManager_ProvisionAps_ProvisionAp_State struct {
	CountryCode	*string	`path:"country-code" module:"openconfig-ap-manager"`
	Hostname	*string	`path:"hostname" module:"openconfig-ap-manager"`
	Mac	*string	`path:"mac" module:"openconfig-ap-manager"`
}

// IsYANGGoStruct ensures that OpenconfigApManager_ProvisionAps_ProvisionAp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigApManager_ProvisionAps_ProvisionAp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigApManager_ProvisionAps_ProvisionAp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigApManager_ProvisionAps_ProvisionAp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigGasket_Gasket represents the /openconfig-gasket/gasket YANG schema element.
type OpenconfigGasket_Gasket struct {
	CtrlInterface	*string	`path:"ctrl-interface" module:"openconfig-gasket"`
	RadiusAttribute	*string	`path:"radius-attribute" module:"openconfig-gasket"`
}

// IsYANGGoStruct ensures that OpenconfigGasket_Gasket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigGasket_Gasket) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigGasket_Gasket) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigGasket_Gasket"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigGasket_Gasket) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages represents the /openconfig-messages/messages YANG schema element.
type OpenconfigMessages_Messages struct {
	Config	*OpenconfigMessages_Messages_Config	`path:"config" module:"openconfig-messages"`
	DebugEntries	*OpenconfigMessages_Messages_DebugEntries	`path:"debug-entries" module:"openconfig-messages"`
	State	*OpenconfigMessages_Messages_State	`path:"state" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_Config represents the /openconfig-messages/messages/config YANG schema element.
type OpenconfigMessages_Messages_Config struct {
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries represents the /openconfig-messages/messages/debug-entries YANG schema element.
type OpenconfigMessages_Messages_DebugEntries struct {
	DebugService	map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigMessages_Messages_DebugEntries_DebugService	`path:"debug-service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigMessages_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigMessages_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigMessages_Messages_DebugEntries_DebugService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigMessages_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigMessages_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService represents the /openconfig-messages/messages/debug-entries/debug-service YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService struct {
	Config	*OpenconfigMessages_Messages_DebugEntries_DebugService_Config	`path:"config" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
	State	*OpenconfigMessages_Messages_DebugEntries_DebugService_State	`path:"state" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigMessages_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService_Config represents the /openconfig-messages/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService_Config struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_DebugEntries_DebugService_State represents the /openconfig-messages/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigMessages_Messages_DebugEntries_DebugService_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-messages"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_State represents the /openconfig-messages/messages/state YANG schema element.
type OpenconfigMessages_Messages_State struct {
	Message	*OpenconfigMessages_Messages_State_Message	`path:"message" module:"openconfig-messages"`
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigMessages_Messages_State_Message represents the /openconfig-messages/messages/state/message YANG schema element.
type OpenconfigMessages_Messages_State_Message struct {
	AppName	*string	`path:"app-name" module:"openconfig-messages"`
	Msg	*string	`path:"msg" module:"openconfig-messages"`
	Msgid	*string	`path:"msgid" module:"openconfig-messages"`
	Priority	*uint8	`path:"priority" module:"openconfig-messages"`
	Procid	*string	`path:"procid" module:"openconfig-messages"`
}

// IsYANGGoStruct ensures that OpenconfigMessages_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigMessages_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigMessages_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigMessages_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigMessages_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	Component	map[string]*OpenconfigPlatform_Components_Component	`path:"component" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	Backplane	*OpenconfigPlatform_Components_Component_Backplane	`path:"backplane" module:"openconfig-platform"`
	Chassis	*OpenconfigPlatform_Components_Component_Chassis	`path:"chassis" module:"openconfig-platform"`
	Config	*OpenconfigPlatform_Components_Component_Config	`path:"config" module:"openconfig-platform"`
	Cpu	*OpenconfigPlatform_Components_Component_Cpu	`path:"cpu" module:"openconfig-platform"`
	Fabric	*OpenconfigPlatform_Components_Component_Fabric	`path:"fabric" module:"openconfig-platform"`
	Fan	*OpenconfigPlatform_Components_Component_Fan	`path:"fan" module:"openconfig-platform"`
	IntegratedCircuit	*OpenconfigPlatform_Components_Component_IntegratedCircuit	`path:"integrated-circuit" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	Port	*OpenconfigPlatform_Components_Component_Port	`path:"port" module:"openconfig-platform"`
	PowerSupply	*OpenconfigPlatform_Components_Component_PowerSupply	`path:"power-supply" module:"openconfig-platform"`
	Properties	*OpenconfigPlatform_Components_Component_Properties	`path:"properties" module:"openconfig-platform"`
	SoftwareModule	*OpenconfigPlatform_Components_Component_SoftwareModule	`path:"software-module" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_State	`path:"state" module:"openconfig-platform"`
	Storage	*OpenconfigPlatform_Components_Component_Storage	`path:"storage" module:"openconfig-platform"`
	Subcomponents	*OpenconfigPlatform_Components_Component_Subcomponents	`path:"subcomponents" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	Config	*OpenconfigPlatform_Components_Component_Backplane_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Backplane_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane_Config represents the /openconfig-platform/components/component/backplane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Backplane_State represents the /openconfig-platform/components/component/backplane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis struct {
	Config	*OpenconfigPlatform_Components_Component_Chassis_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Chassis_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis_Config represents the /openconfig-platform/components/component/chassis/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Chassis_State represents the /openconfig-platform/components/component/chassis/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	Config	*OpenconfigPlatform_Components_Component_Cpu_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Cpu_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	Config	*OpenconfigPlatform_Components_Component_Fabric_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Fabric_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	Config	*OpenconfigPlatform_Components_Component_Fan_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Fan_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	Config	*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_IntegratedCircuit_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	Config	*OpenconfigPlatform_Components_Component_Port_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Port_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply struct {
	Config	*OpenconfigPlatform_Components_Component_PowerSupply_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_PowerSupply_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply_Config represents the /openconfig-platform/components/component/power-supply/config YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_PowerSupply_State represents the /openconfig-platform/components/component/power-supply/state YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties represents the /openconfig-platform/components/component/properties YANG schema element.
type OpenconfigPlatform_Components_Component_Properties struct {
	Property	map[string]*OpenconfigPlatform_Components_Component_Properties_Property	`path:"property" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// OpenconfigPlatform_Components_Component_Properties struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Properties) NewProperty(Name string) (*OpenconfigPlatform_Components_Component_Properties_Property, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &OpenconfigPlatform_Components_Component_Properties_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property struct {
	Config	*OpenconfigPlatform_Components_Component_Properties_Property_Config	`path:"config" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Properties_Property_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Properties_Property struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
	Value	OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union	`path:"value" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool struct {
	Bool	bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 struct {
	Float64	float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 struct {
	Int64	int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String struct {
	String	string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 struct {
	Uint64	uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	Configurable	*bool	`path:"configurable" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	Value	OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union	`path:"value" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool struct {
	Bool	bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 struct {
	Float64	float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 struct {
	Int64	int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String struct {
	String	string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 struct {
	Uint64	uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_SoftwareModule represents the /openconfig-platform/components/component/software-module YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule struct {
	Config	*OpenconfigPlatform_Components_Component_SoftwareModule_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_SoftwareModule_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_SoftwareModule_Config represents the /openconfig-platform/components/component/software-module/config YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_SoftwareModule_State represents the /openconfig-platform/components/component/software-module/state YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"openconfig-platform"`
	Description	*string	`path:"description" module:"openconfig-platform"`
	Empty	*bool	`path:"empty" module:"openconfig-platform"`
	EquipmentFailure	*bool	`path:"equipment-failure" module:"openconfig-alarms"`
	EquipmentMismatch	*bool	`path:"equipment-mismatch" module:"openconfig-alarms"`
	FirmwareVersion	*string	`path:"firmware-version" module:"openconfig-platform"`
	HardwareVersion	*string	`path:"hardware-version" module:"openconfig-platform"`
	Id	*string	`path:"id" module:"openconfig-platform"`
	Location	*string	`path:"location" module:"openconfig-platform"`
	Memory	*OpenconfigPlatform_Components_Component_State_Memory	`path:"memory" module:"openconfig-platform"`
	MfgDate	*string	`path:"mfg-date" module:"openconfig-platform"`
	MfgName	*string	`path:"mfg-name" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	OperStatus	E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS	`path:"oper-status" module:"openconfig-platform"`
	Parent	*string	`path:"parent" module:"openconfig-platform"`
	PartNo	*string	`path:"part-no" module:"openconfig-platform"`
	Pcie	*OpenconfigPlatform_Components_Component_State_Pcie	`path:"pcie" module:"openconfig-platform"`
	Removable	*bool	`path:"removable" module:"openconfig-platform"`
	SerialNo	*string	`path:"serial-no" module:"openconfig-platform"`
	SoftwareVersion	*string	`path:"software-version" module:"openconfig-platform"`
	Temperature	*OpenconfigPlatform_Components_Component_State_Temperature	`path:"temperature" module:"openconfig-platform"`
	Type	OpenconfigPlatform_Components_Component_State_Type_Union	`path:"type" module:"openconfig-platform"`
	UsedPower	*uint32	`path:"used-power" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	Is_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}


// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	Available	*uint64	`path:"available" module:"openconfig-platform"`
	Utilized	*uint64	`path:"utilized" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Pcie represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie struct {
	CorrectableErrors	*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors	`path:"correctable-errors" module:"openconfig-platform"`
	FatalErrors	*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors	`path:"fatal-errors" module:"openconfig-platform"`
	NonFatalErrors	*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors	`path:"non-fatal-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors struct {
	AdvisoryNonFatalErrors	*uint64	`path:"advisory-non-fatal-errors" module:"openconfig-platform"`
	BadDllpErrors	*uint64	`path:"bad-dllp-errors" module:"openconfig-platform"`
	BadTlpErrors	*uint64	`path:"bad-tlp-errors" module:"openconfig-platform"`
	HdrLogOverflowErrors	*uint64	`path:"hdr-log-overflow-errors" module:"openconfig-platform"`
	InternalErrors	*uint64	`path:"internal-errors" module:"openconfig-platform"`
	ReceiverErrors	*uint64	`path:"receiver-errors" module:"openconfig-platform"`
	RelayRolloverErrors	*uint64	`path:"relay-rollover-errors" module:"openconfig-platform"`
	ReplayTimeoutErrors	*uint64	`path:"replay-timeout-errors" module:"openconfig-platform"`
	TotalErrors	*uint64	`path:"total-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors struct {
	AcsViolationErrors	*uint64	`path:"acs-violation-errors" module:"openconfig-platform"`
	AtomicOpBlockedErrors	*uint64	`path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	BlockedTlpErrors	*uint64	`path:"blocked-tlp-errors" module:"openconfig-platform"`
	CompletionAbortErrors	*uint64	`path:"completion-abort-errors" module:"openconfig-platform"`
	CompletionTimeoutErrors	*uint64	`path:"completion-timeout-errors" module:"openconfig-platform"`
	DataLinkErrors	*uint64	`path:"data-link-errors" module:"openconfig-platform"`
	EcrcErrors	*uint64	`path:"ecrc-errors" module:"openconfig-platform"`
	FlowControlProtocolErrors	*uint64	`path:"flow-control-protocol-errors" module:"openconfig-platform"`
	InternalErrors	*uint64	`path:"internal-errors" module:"openconfig-platform"`
	MalformedTlpErrors	*uint64	`path:"malformed-tlp-errors" module:"openconfig-platform"`
	PoisonedTlpErrors	*uint64	`path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ReceiverOverflowErrors	*uint64	`path:"receiver-overflow-errors" module:"openconfig-platform"`
	SurpriseDownErrors	*uint64	`path:"surprise-down-errors" module:"openconfig-platform"`
	TlpPrefixBlockedErrors	*uint64	`path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	TotalErrors	*uint64	`path:"total-errors" module:"openconfig-platform"`
	UndefinedErrors	*uint64	`path:"undefined-errors" module:"openconfig-platform"`
	UnexpectedCompletionErrors	*uint64	`path:"unexpected-completion-errors" module:"openconfig-platform"`
	UnsupportedRequestErrors	*uint64	`path:"unsupported-request-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors struct {
	AcsViolationErrors	*uint64	`path:"acs-violation-errors" module:"openconfig-platform"`
	AtomicOpBlockedErrors	*uint64	`path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	BlockedTlpErrors	*uint64	`path:"blocked-tlp-errors" module:"openconfig-platform"`
	CompletionAbortErrors	*uint64	`path:"completion-abort-errors" module:"openconfig-platform"`
	CompletionTimeoutErrors	*uint64	`path:"completion-timeout-errors" module:"openconfig-platform"`
	DataLinkErrors	*uint64	`path:"data-link-errors" module:"openconfig-platform"`
	EcrcErrors	*uint64	`path:"ecrc-errors" module:"openconfig-platform"`
	FlowControlProtocolErrors	*uint64	`path:"flow-control-protocol-errors" module:"openconfig-platform"`
	InternalErrors	*uint64	`path:"internal-errors" module:"openconfig-platform"`
	MalformedTlpErrors	*uint64	`path:"malformed-tlp-errors" module:"openconfig-platform"`
	PoisonedTlpErrors	*uint64	`path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ReceiverOverflowErrors	*uint64	`path:"receiver-overflow-errors" module:"openconfig-platform"`
	SurpriseDownErrors	*uint64	`path:"surprise-down-errors" module:"openconfig-platform"`
	TlpPrefixBlockedErrors	*uint64	`path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	TotalErrors	*uint64	`path:"total-errors" module:"openconfig-platform"`
	UndefinedErrors	*uint64	`path:"undefined-errors" module:"openconfig-platform"`
	UnexpectedCompletionErrors	*uint64	`path:"unexpected-completion-errors" module:"openconfig-platform"`
	UnsupportedRequestErrors	*uint64	`path:"unsupported-request-errors" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	AlarmSeverity	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY	`path:"alarm-severity" module:"openconfig-platform"`
	AlarmStatus	*bool	`path:"alarm-status" module:"openconfig-platform"`
	AlarmThreshold	*uint32	`path:"alarm-threshold" module:"openconfig-platform"`
	Avg	*float64	`path:"avg" module:"openconfig-platform"`
	Instant	*float64	`path:"instant" module:"openconfig-platform"`
	Interval	*uint64	`path:"interval" module:"openconfig-platform"`
	Max	*float64	`path:"max" module:"openconfig-platform"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-platform"`
	Min	*float64	`path:"min" module:"openconfig-platform"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	Config	*OpenconfigPlatform_Components_Component_Storage_Config	`path:"config" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Storage_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	Subcomponent	map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent	`path:"subcomponent" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	Config	*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config	`path:"config" module:"openconfig-platform"`
	Name	*string	`path:"name" module:"openconfig-platform"`
	State	*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State	`path:"state" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	Name	*string	`path:"name" module:"openconfig-platform"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System represents the /openconfig-system/system YANG schema element.
type OpenconfigSystem_System struct {
	Aaa	*OpenconfigSystem_System_Aaa	`path:"aaa" module:"openconfig-system"`
	Alarms	*OpenconfigSystem_System_Alarms	`path:"alarms" module:"openconfig-system"`
	Clock	*OpenconfigSystem_System_Clock	`path:"clock" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Config	`path:"config" module:"openconfig-system"`
	Cpus	*OpenconfigSystem_System_Cpus	`path:"cpus" module:"openconfig-system"`
	Dns	*OpenconfigSystem_System_Dns	`path:"dns" module:"openconfig-system"`
	License	*OpenconfigSystem_System_License	`path:"license" module:"openconfig-system"`
	Logging	*OpenconfigSystem_System_Logging	`path:"logging" module:"openconfig-system"`
	Memory	*OpenconfigSystem_System_Memory	`path:"memory" module:"openconfig-system"`
	Messages	*OpenconfigSystem_System_Messages	`path:"messages" module:"openconfig-system"`
	MountPoints	*OpenconfigSystem_System_MountPoints	`path:"mount-points" module:"openconfig-system"`
	Ntp	*OpenconfigSystem_System_Ntp	`path:"ntp" module:"openconfig-system"`
	Processes	*OpenconfigSystem_System_Processes	`path:"processes" module:"openconfig-system"`
	SshServer	*OpenconfigSystem_System_SshServer	`path:"ssh-server" module:"openconfig-system"`
	State	*OpenconfigSystem_System_State	`path:"state" module:"openconfig-system"`
	TelnetServer	*OpenconfigSystem_System_TelnetServer	`path:"telnet-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type OpenconfigSystem_System_Aaa struct {
	Accounting	*OpenconfigSystem_System_Aaa_Accounting	`path:"accounting" module:"openconfig-system"`
	Authentication	*OpenconfigSystem_System_Aaa_Authentication	`path:"authentication" module:"openconfig-system"`
	Authorization	*OpenconfigSystem_System_Aaa_Authorization	`path:"authorization" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_Config	`path:"config" module:"openconfig-system"`
	ServerGroups	*OpenconfigSystem_System_Aaa_ServerGroups	`path:"server-groups" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting struct {
	Config	*OpenconfigSystem_System_Aaa_Accounting_Config	`path:"config" module:"openconfig-system"`
	Events	*OpenconfigSystem_System_Aaa_Accounting_Events	`path:"events" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Accounting_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Config represents the /openconfig-system/system/aaa/accounting/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Config struct {
	AccountingMethod	[]OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Accounting_Events represents the /openconfig-system/system/aaa/accounting/events YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event	`path:"event" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Accounting_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event struct {
	Config	*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config	`path:"config" module:"openconfig-system"`
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-system/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	Record	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_Events_Event_State represents the /openconfig-system/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	Record	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record	`path:"record" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Accounting_State represents the /openconfig-system/system/aaa/accounting/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_State struct {
	AccountingMethod	[]OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union	`path:"accounting-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication struct {
	AdminUser	*OpenconfigSystem_System_Aaa_Authentication_AdminUser	`path:"admin-user" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_Authentication_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_State	`path:"state" module:"openconfig-system"`
	Users	*OpenconfigSystem_System_Aaa_Authentication_Users	`path:"users" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser struct {
	Config	*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-system/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-system"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_AdminUser_State represents the /openconfig-system/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_State struct {
	AdminPassword	*string	`path:"admin-password" module:"openconfig-system"`
	AdminPasswordHashed	*string	`path:"admin-password-hashed" module:"openconfig-system"`
	AdminUsername	*string	`path:"admin-username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Config represents the /openconfig-system/system/aaa/authentication/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Config struct {
	AuthenticationMethod	[]OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_State represents the /openconfig-system/system/aaa/authentication/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_State struct {
	AuthenticationMethod	[]OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union	`path:"authentication-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_Users represents the /openconfig-system/system/aaa/authentication/users YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users struct {
	User	map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User	`path:"user" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigSystem_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigSystem_System_Aaa_Authentication_Users_User, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigSystem_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Users_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User struct {
	Config	*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authentication_Users_User_State	`path:"state" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config represents the /openconfig-system/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config struct {
	Password	*string	`path:"password" module:"openconfig-system"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-system"`
	Role	OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union	`path:"role" module:"openconfig-system"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authentication_Users_User_State represents the /openconfig-system/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State struct {
	Password	*string	`path:"password" module:"openconfig-system"`
	PasswordHashed	*string	`path:"password-hashed" module:"openconfig-system"`
	Role	OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union	`path:"role" module:"openconfig-system"`
	SshKey	*string	`path:"ssh-key" module:"openconfig-system"`
	Username	*string	`path:"username" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization struct {
	Config	*OpenconfigSystem_System_Aaa_Authorization_Config	`path:"config" module:"openconfig-system"`
	Events	*OpenconfigSystem_System_Aaa_Authorization_Events	`path:"events" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authorization_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Config represents the /openconfig-system/system/aaa/authorization/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Config struct {
	AuthorizationMethod	[]OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Authorization_Events represents the /openconfig-system/system/aaa/authorization/events YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events struct {
	Event	map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event	`path:"event" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Authorization_Events_Event, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event struct {
	Config	*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config	`path:"config" module:"openconfig-system"`
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-system/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_Events_Event_State represents the /openconfig-system/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_State struct {
	EventType	E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE	`path:"event-type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_Authorization_State represents the /openconfig-system/system/aaa/authorization/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_State struct {
	AuthorizationMethod	[]OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union	`path:"authorization-method" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE	E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {}

// To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}


// OpenconfigSystem_System_Aaa_Config represents the /openconfig-system/system/aaa/config YANG schema element.
type OpenconfigSystem_System_Aaa_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups represents the /openconfig-system/system/aaa/server-groups YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups struct {
	ServerGroup	map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup	`path:"server-group" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigSystem_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config	`path:"config" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-system/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config struct {
	Name	*string	`path:"name" module:"openconfig-system"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-system/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	Radius	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius	`path:"radius" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State	`path:"state" module:"openconfig-system"`
	Tacacs	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs	`path:"tacacs" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-system"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-system"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	AcctPort	*uint16	`path:"acct-port" module:"openconfig-system"`
	AuthPort	*uint16	`path:"auth-port" module:"openconfig-system"`
	Counters	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters	`path:"counters" module:"openconfig-system"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	AccessAccepts	*uint64	`path:"access-accepts" module:"openconfig-system"`
	AccessRejects	*uint64	`path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests	*uint64	`path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests	*uint64	`path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	ConnectionAborts	*uint64	`path:"connection-aborts" module:"openconfig-system"`
	ConnectionCloses	*uint64	`path:"connection-closes" module:"openconfig-system"`
	ConnectionFailures	*uint64	`path:"connection-failures" module:"openconfig-system"`
	ConnectionOpens	*uint64	`path:"connection-opens" module:"openconfig-system"`
	ConnectionTimeouts	*uint64	`path:"connection-timeouts" module:"openconfig-system"`
	ErrorsReceived	*uint64	`path:"errors-received" module:"openconfig-system"`
	MessagesReceived	*uint64	`path:"messages-received" module:"openconfig-system"`
	MessagesSent	*uint64	`path:"messages-sent" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	Config	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	Port	*uint16	`path:"port" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	Port	*uint16	`path:"port" module:"openconfig-system"`
	SecretKey	*string	`path:"secret-key" module:"openconfig-system"`
	SecretKeyHashed	*string	`path:"secret-key-hashed" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-system/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State struct {
	Name	*string	`path:"name" module:"openconfig-system"`
	Type	E_OpenconfigAaaTypes_AAA_SERVER_TYPE	`path:"type" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Aaa_State represents the /openconfig-system/system/aaa/state YANG schema element.
type OpenconfigSystem_System_Aaa_State struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms represents the /openconfig-system/system/alarms YANG schema element.
type OpenconfigSystem_System_Alarms struct {
	Alarm	map[string]*OpenconfigSystem_System_Alarms_Alarm	`path:"alarm" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigSystem_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Alarms) NewAlarm(Id string) (*OpenconfigSystem_System_Alarms_Alarm, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigSystem_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm struct {
	Config	*OpenconfigSystem_System_Alarms_Alarm_Config	`path:"config" module:"openconfig-system"`
	Id	*string	`path:"id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Alarms_Alarm_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm_Config represents the /openconfig-system/system/alarms/alarm/config YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Alarms_Alarm_State represents the /openconfig-system/system/alarms/alarm/state YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_State struct {
	Id	*string	`path:"id" module:"openconfig-system"`
	Resource	*string	`path:"resource" module:"openconfig-system"`
	Severity	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY	`path:"severity" module:"openconfig-system"`
	Text	*string	`path:"text" module:"openconfig-system"`
	TimeCreated	*uint64	`path:"time-created" module:"openconfig-system"`
	TypeId	OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union	`path:"type-id" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {}

// To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}


// OpenconfigSystem_System_Clock represents the /openconfig-system/system/clock YANG schema element.
type OpenconfigSystem_System_Clock struct {
	Config	*OpenconfigSystem_System_Clock_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Clock_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Clock_Config represents the /openconfig-system/system/clock/config YANG schema element.
type OpenconfigSystem_System_Clock_Config struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Clock_State represents the /openconfig-system/system/clock/state YANG schema element.
type OpenconfigSystem_System_Clock_State struct {
	TimezoneName	*string	`path:"timezone-name" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Config represents the /openconfig-system/system/config YANG schema element.
type OpenconfigSystem_System_Config struct {
	DomainName	*string	`path:"domain-name" module:"openconfig-system"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-system"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus represents the /openconfig-system/system/cpus YANG schema element.
type OpenconfigSystem_System_Cpus struct {
	Cpu	map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu	`path:"cpu" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigSystem_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Cpus) NewCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) (*OpenconfigSystem_System_Cpus_Cpu, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigSystem_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu struct {
	Index	OpenconfigSystem_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Cpus_Cpu_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/index within the YANG schema.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32	uint32
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigSystem_System_Cpus_Cpu_State represents the /openconfig-system/system/cpus/cpu/state YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State struct {
	HardwareInterrupt	*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt	`path:"hardware-interrupt" module:"openconfig-system"`
	Idle	*OpenconfigSystem_System_Cpus_Cpu_State_Idle	`path:"idle" module:"openconfig-system"`
	Index	OpenconfigSystem_System_Cpus_Cpu_State_Index_Union	`path:"index" module:"openconfig-system"`
	Kernel	*OpenconfigSystem_System_Cpus_Cpu_State_Kernel	`path:"kernel" module:"openconfig-system"`
	Nice	*OpenconfigSystem_System_Cpus_Cpu_State_Nice	`path:"nice" module:"openconfig-system"`
	SoftwareInterrupt	*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt	`path:"software-interrupt" module:"openconfig-system"`
	Total	*OpenconfigSystem_System_Cpus_Cpu_State_Total	`path:"total" module:"openconfig-system"`
	User	*OpenconfigSystem_System_Cpus_Cpu_State_User	`path:"user" module:"openconfig-system"`
	Wait	*OpenconfigSystem_System_Cpus_Cpu_State_Wait	`path:"wait" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}


// OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Idle struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Kernel struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Nice struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Total struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_User struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Cpus_Cpu_State_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Wait struct {
	Avg	*uint8	`path:"avg" module:"openconfig-system"`
	Instant	*uint8	`path:"instant" module:"openconfig-system"`
	Interval	*uint64	`path:"interval" module:"openconfig-system"`
	Max	*uint8	`path:"max" module:"openconfig-system"`
	MaxTime	*uint64	`path:"max-time" module:"openconfig-system"`
	Min	*uint8	`path:"min" module:"openconfig-system"`
	MinTime	*uint64	`path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns represents the /openconfig-system/system/dns YANG schema element.
type OpenconfigSystem_System_Dns struct {
	Config	*OpenconfigSystem_System_Dns_Config	`path:"config" module:"openconfig-system"`
	HostEntries	*OpenconfigSystem_System_Dns_HostEntries	`path:"host-entries" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Dns_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Config represents the /openconfig-system/system/dns/config YANG schema element.
type OpenconfigSystem_System_Dns_Config struct {
	Search	[]string	`path:"search" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries represents the /openconfig-system/system/dns/host-entries YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries struct {
	HostEntry	map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry	`path:"host-entry" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigSystem_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigSystem_System_Dns_HostEntries_HostEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigSystem_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry struct {
	Config	*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config	`path:"config" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-system/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config struct {
	Alias	[]string	`path:"alias" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-system"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_HostEntries_HostEntry_State represents the /openconfig-system/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_State struct {
	Alias	[]string	`path:"alias" module:"openconfig-system"`
	Hostname	*string	`path:"hostname" module:"openconfig-system"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-system"`
	Ipv6Address	[]string	`path:"ipv6-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers represents the /openconfig-system/system/dns/servers YANG schema element.
type OpenconfigSystem_System_Dns_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Dns_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_Servers) NewServer(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Dns_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Dns_Servers_Server_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server_Config represents the /openconfig-system/system/dns/servers/server/config YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_Servers_Server_State represents the /openconfig-system/system/dns/servers/server/state YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Dns_State represents the /openconfig-system/system/dns/state YANG schema element.
type OpenconfigSystem_System_Dns_State struct {
	Search	[]string	`path:"search" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License represents the /openconfig-system/system/license YANG schema element.
type OpenconfigSystem_System_License struct {
	Licenses	*OpenconfigSystem_System_License_Licenses	`path:"licenses" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses represents the /openconfig-system/system/license/licenses YANG schema element.
type OpenconfigSystem_System_License_Licenses struct {
	License	map[string]*OpenconfigSystem_System_License_Licenses_License	`path:"license" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// OpenconfigSystem_System_License_Licenses struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_License_Licenses) NewLicense(LicenseId string) (*OpenconfigSystem_System_License_Licenses_License, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*OpenconfigSystem_System_License_Licenses_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &OpenconfigSystem_System_License_Licenses_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type OpenconfigSystem_System_License_Licenses_License struct {
	Config	*OpenconfigSystem_System_License_Licenses_License_Config	`path:"config" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_License_Licenses_License_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_License_Licenses_License struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_License_Licenses_License_Config represents the /openconfig-system/system/license/licenses/license/config YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_Config struct {
	Active	*bool	`path:"active" module:"openconfig-system"`
	LicenseData	OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union	`path:"license-data" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/config/license-data within the YANG schema.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface {
	Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union()
}

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary is used when /openconfig-system/system/license/licenses/license/config/license-data
// is to be set to a Binary value.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary) Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {}

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String is used when /openconfig-system/system/license/licenses/license/config/license-data
// is to be set to a string value.
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String) Is_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {}

// To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigSystem_System_License_Licenses_License_State represents the /openconfig-system/system/license/licenses/license/state YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_State struct {
	Active	*bool	`path:"active" module:"openconfig-system"`
	Description	*string	`path:"description" module:"openconfig-system"`
	ExpirationDate	*uint64	`path:"expiration-date" module:"openconfig-system"`
	Expired	*bool	`path:"expired" module:"openconfig-system"`
	InUse	*bool	`path:"in-use" module:"openconfig-system"`
	IssueDate	*uint64	`path:"issue-date" module:"openconfig-system"`
	LicenseData	OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union	`path:"license-data" module:"openconfig-system"`
	LicenseId	*string	`path:"license-id" module:"openconfig-system"`
	Valid	*bool	`path:"valid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/state/license-data within the YANG schema.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface {
	Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union()
}

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary is used when /openconfig-system/system/license/licenses/license/state/license-data
// is to be set to a Binary value.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary struct {
	Binary	Binary
}

// Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary) Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {}

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String is used when /openconfig-system/system/license/licenses/license/state/license-data
// is to be set to a string value.
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String struct {
	String	string
}

// Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (*OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String) Is_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {}

// To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_State) To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_Binary{v}, nil
	case string:
		return &OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}


// OpenconfigSystem_System_Logging represents the /openconfig-system/system/logging YANG schema element.
type OpenconfigSystem_System_Logging struct {
	Console	*OpenconfigSystem_System_Logging_Console	`path:"console" module:"openconfig-system"`
	RemoteServers	*OpenconfigSystem_System_Logging_RemoteServers	`path:"remote-servers" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type OpenconfigSystem_System_Logging_Console struct {
	Config	*OpenconfigSystem_System_Logging_Console_Config	`path:"config" module:"openconfig-system"`
	Selectors	*OpenconfigSystem_System_Logging_Console_Selectors	`path:"selectors" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_Console_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Config represents the /openconfig-system/system/logging/console/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors represents the /openconfig-system/system/logging/console/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors struct {
	Selector	map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector	`path:"selector" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console/selectors.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Console_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector struct {
	Config	*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config	`path:"config" module:"openconfig-system"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-system/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_Selectors_Selector_State represents the /openconfig-system/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_Console_State represents the /openconfig-system/system/logging/console/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_State struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers represents the /openconfig-system/system/logging/remote-servers YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers struct {
	RemoteServer	map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer	`path:"remote-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigSystem_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct {
	Config	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config	`path:"config" module:"openconfig-system"`
	Host	*string	`path:"host" module:"openconfig-system"`
	Selectors	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors	`path:"selectors" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config struct {
	Host	*string	`path:"host" module:"openconfig-system"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	Selector	map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector	`path:"selector" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server/selectors.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	Config	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config	`path:"config" module:"openconfig-system"`
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	Facility	E_OpenconfigSystemLogging_SYSLOG_FACILITY	`path:"facility" module:"openconfig-system"`
	Severity	E_OpenconfigSystemLogging_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-system/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State struct {
	Host	*string	`path:"host" module:"openconfig-system"`
	RemotePort	*uint16	`path:"remote-port" module:"openconfig-system"`
	SourceAddress	*string	`path:"source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory represents the /openconfig-system/system/memory YANG schema element.
type OpenconfigSystem_System_Memory struct {
	Config	*OpenconfigSystem_System_Memory_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Memory_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory_Config represents the /openconfig-system/system/memory/config YANG schema element.
type OpenconfigSystem_System_Memory_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory_State represents the /openconfig-system/system/memory/state YANG schema element.
type OpenconfigSystem_System_Memory_State struct {
	Counters	*OpenconfigSystem_System_Memory_State_Counters	`path:"counters" module:"openconfig-system"`
	Free	*uint64	`path:"free" module:"openconfig-system"`
	Physical	*uint64	`path:"physical" module:"openconfig-system"`
	Reserved	*uint64	`path:"reserved" module:"openconfig-system"`
	Used	*uint64	`path:"used" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Memory_State_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type OpenconfigSystem_System_Memory_State_Counters struct {
	CorrectableEccErrors	*uint64	`path:"correctable-ecc-errors" module:"openconfig-system"`
	TotalEccErrors	*uint64	`path:"total-ecc-errors" module:"openconfig-system"`
	UncorrectableEccErrors	*uint64	`path:"uncorrectable-ecc-errors" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages represents the /openconfig-system/system/messages YANG schema element.
type OpenconfigSystem_System_Messages struct {
	Config	*OpenconfigSystem_System_Messages_Config	`path:"config" module:"openconfig-system"`
	DebugEntries	*OpenconfigSystem_System_Messages_DebugEntries	`path:"debug-entries" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Messages_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_Config represents the /openconfig-system/system/messages/config YANG schema element.
type OpenconfigSystem_System_Messages_Config struct {
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries represents the /openconfig-system/system/messages/debug-entries YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries struct {
	DebugService	map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService	`path:"debug-service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigSystem_System_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigSystem_System_Messages_DebugEntries_DebugService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigSystem_System_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService struct {
	Config	*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config	`path:"config" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config represents the /openconfig-system/system/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_DebugEntries_DebugService_State represents the /openconfig-system/system/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_State struct {
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	Service	E_OpenconfigMessages_DEBUG_SERVICE	`path:"service" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_State represents the /openconfig-system/system/messages/state YANG schema element.
type OpenconfigSystem_System_Messages_State struct {
	Message	*OpenconfigSystem_System_Messages_State_Message	`path:"message" module:"openconfig-system"`
	Severity	E_OpenconfigMessages_SyslogSeverity	`path:"severity" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Messages_State_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type OpenconfigSystem_System_Messages_State_Message struct {
	AppName	*string	`path:"app-name" module:"openconfig-system"`
	Msg	*string	`path:"msg" module:"openconfig-system"`
	Msgid	*string	`path:"msgid" module:"openconfig-system"`
	Priority	*uint8	`path:"priority" module:"openconfig-system"`
	Procid	*string	`path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_MountPoints represents the /openconfig-system/system/mount-points YANG schema element.
type OpenconfigSystem_System_MountPoints struct {
	MountPoint	map[string]*OpenconfigSystem_System_MountPoints_MountPoint	`path:"mount-point" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints) IsYANGGoStruct() {}

// NewMountPoint creates a new entry in the MountPoint list of the
// OpenconfigSystem_System_MountPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_MountPoints) NewMountPoint(Name string) (*OpenconfigSystem_System_MountPoints_MountPoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*OpenconfigSystem_System_MountPoints_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &OpenconfigSystem_System_MountPoints_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_MountPoints_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type OpenconfigSystem_System_MountPoints_MountPoint struct {
	Name	*string	`path:"name" module:"openconfig-system"`
	State	*OpenconfigSystem_System_MountPoints_MountPoint_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints_MountPoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_MountPoints_MountPoint struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_MountPoints_MountPoint_State represents the /openconfig-system/system/mount-points/mount-point/state YANG schema element.
type OpenconfigSystem_System_MountPoints_MountPoint_State struct {
	Available	*uint64	`path:"available" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Size	*uint64	`path:"size" module:"openconfig-system"`
	StorageComponent	*string	`path:"storage-component" module:"openconfig-system"`
	Utilized	*uint64	`path:"utilized" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints_MountPoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints_MountPoint_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints_MountPoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints_MountPoint_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type OpenconfigSystem_System_Ntp struct {
	Config	*OpenconfigSystem_System_Ntp_Config	`path:"config" module:"openconfig-system"`
	NtpKeys	*OpenconfigSystem_System_Ntp_NtpKeys	`path:"ntp-keys" module:"openconfig-system"`
	Servers	*OpenconfigSystem_System_Ntp_Servers	`path:"servers" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Config represents the /openconfig-system/system/ntp/config YANG schema element.
type OpenconfigSystem_System_Ntp_Config struct {
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-system"`
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys represents the /openconfig-system/system/ntp/ntp-keys YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys struct {
	NtpKey	map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey	`path:"ntp-key" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigSystem_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct {
	Config	*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config	`path:"config" module:"openconfig-system"`
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-system"`
	KeyValue	*string	`path:"key-value" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State struct {
	KeyId	*uint16	`path:"key-id" module:"openconfig-system"`
	KeyType	E_OpenconfigSystem_NTP_AUTH_TYPE	`path:"key-type" module:"openconfig-system"`
	KeyValue	*string	`path:"key-value" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers represents the /openconfig-system/system/ntp/servers YANG schema element.
type OpenconfigSystem_System_Ntp_Servers struct {
	Server	map[string]*OpenconfigSystem_System_Ntp_Servers_Server	`path:"server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_Servers) NewServer(Address string) (*OpenconfigSystem_System_Ntp_Servers_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	Config	*OpenconfigSystem_System_Ntp_Servers_Server_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Ntp_Servers_Server_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server_Config represents the /openconfig-system/system/ntp/servers/server/config YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_Config struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	AssociationType	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-system"`
	Iburst	*bool	`path:"iburst" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	Prefer	*bool	`path:"prefer" module:"openconfig-system"`
	Version	*uint8	`path:"version" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_Servers_Server_State represents the /openconfig-system/system/ntp/servers/server/state YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_State struct {
	Address	*string	`path:"address" module:"openconfig-system"`
	AssociationType	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType	`path:"association-type" module:"openconfig-system"`
	Iburst	*bool	`path:"iburst" module:"openconfig-system"`
	Offset	*uint64	`path:"offset" module:"openconfig-system"`
	PollInterval	*uint32	`path:"poll-interval" module:"openconfig-system"`
	Port	*uint16	`path:"port" module:"openconfig-system"`
	Prefer	*bool	`path:"prefer" module:"openconfig-system"`
	RootDelay	*uint32	`path:"root-delay" module:"openconfig-system"`
	RootDispersion	*uint64	`path:"root-dispersion" module:"openconfig-system"`
	Stratum	*uint8	`path:"stratum" module:"openconfig-system"`
	Version	*uint8	`path:"version" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Ntp_State represents the /openconfig-system/system/ntp/state YANG schema element.
type OpenconfigSystem_System_Ntp_State struct {
	AuthMismatch	*uint64	`path:"auth-mismatch" module:"openconfig-system"`
	EnableNtpAuth	*bool	`path:"enable-ntp-auth" module:"openconfig-system"`
	Enabled	*bool	`path:"enabled" module:"openconfig-system"`
	NtpSourceAddress	*string	`path:"ntp-source-address" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes represents the /openconfig-system/system/processes YANG schema element.
type OpenconfigSystem_System_Processes struct {
	Process	map[uint64]*OpenconfigSystem_System_Processes_Process	`path:"process" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigSystem_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Processes) NewProcess(Pid uint64) (*OpenconfigSystem_System_Processes_Process, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigSystem_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes_Process represents the /openconfig-system/system/processes/process YANG schema element.
type OpenconfigSystem_System_Processes_Process struct {
	Pid	*uint64	`path:"pid" module:"openconfig-system"`
	State	*OpenconfigSystem_System_Processes_Process_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_Processes_Process_State represents the /openconfig-system/system/processes/process/state YANG schema element.
type OpenconfigSystem_System_Processes_Process_State struct {
	Args	[]string	`path:"args" module:"openconfig-system"`
	CpuUsageSystem	*uint64	`path:"cpu-usage-system" module:"openconfig-system"`
	CpuUsageUser	*uint64	`path:"cpu-usage-user" module:"openconfig-system"`
	CpuUtilization	*uint8	`path:"cpu-utilization" module:"openconfig-system"`
	MemoryUsage	*uint64	`path:"memory-usage" module:"openconfig-system"`
	MemoryUtilization	*uint8	`path:"memory-utilization" module:"openconfig-system"`
	Name	*string	`path:"name" module:"openconfig-system"`
	Pid	*uint64	`path:"pid" module:"openconfig-system"`
	StartTime	*uint64	`path:"start-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type OpenconfigSystem_System_SshServer struct {
	Config	*OpenconfigSystem_System_SshServer_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_SshServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer_Config represents the /openconfig-system/system/ssh-server/config YANG schema element.
type OpenconfigSystem_System_SshServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ProtocolVersion	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_SshServer_State represents the /openconfig-system/system/ssh-server/state YANG schema element.
type OpenconfigSystem_System_SshServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	ProtocolVersion	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion	`path:"protocol-version" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_State represents the /openconfig-system/system/state YANG schema element.
type OpenconfigSystem_System_State struct {
	BootTime	*uint64	`path:"boot-time" module:"openconfig-system"`
	CurrentDatetime	*string	`path:"current-datetime" module:"openconfig-system"`
	DomainName	*string	`path:"domain-name" module:"openconfig-system"`
	LoginBanner	*string	`path:"login-banner" module:"openconfig-system"`
	MotdBanner	*string	`path:"motd-banner" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type OpenconfigSystem_System_TelnetServer struct {
	Config	*OpenconfigSystem_System_TelnetServer_Config	`path:"config" module:"openconfig-system"`
	State	*OpenconfigSystem_System_TelnetServer_State	`path:"state" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer_Config represents the /openconfig-system/system/telnet-server/config YANG schema element.
type OpenconfigSystem_System_TelnetServer_Config struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigSystem_System_TelnetServer_State represents the /openconfig-system/system/telnet-server/state YANG schema element.
type OpenconfigSystem_System_TelnetServer_State struct {
	Enable	*bool	`path:"enable" module:"openconfig-system"`
	RateLimit	*uint16	`path:"rate-limit" module:"openconfig-system"`
	SessionLimit	*uint16	`path:"session-limit" module:"openconfig-system"`
	Timeout	*uint16	`path:"timeout" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids represents the /openconfig-wifi-mac/ssids YANG schema element.
type OpenconfigWifiMac_Ssids struct {
	Ssid	map[string]*OpenconfigWifiMac_Ssids_Ssid	`path:"ssid" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids) IsYANGGoStruct() {}

// NewSsid creates a new entry in the Ssid list of the
// OpenconfigWifiMac_Ssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWifiMac_Ssids) NewSsid(Name string) (*OpenconfigWifiMac_Ssids_Ssid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ssid == nil {
		t.Ssid = make(map[string]*OpenconfigWifiMac_Ssids_Ssid)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ssid", key)
	}

	t.Ssid[key] = &OpenconfigWifiMac_Ssids_Ssid{
		Name: &Name,
	}

	return t.Ssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid represents the /openconfig-wifi-mac/ssids/ssid YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid struct {
	BandSteering	*OpenconfigWifiMac_Ssids_Ssid_BandSteering	`path:"band-steering" module:"openconfig-wifi-mac"`
	Bssids	*OpenconfigWifiMac_Ssids_Ssid_Bssids	`path:"bssids" module:"openconfig-wifi-mac"`
	Clients	*OpenconfigWifiMac_Ssids_Ssid_Clients	`path:"clients" module:"openconfig-wifi-mac"`
	Config	*OpenconfigWifiMac_Ssids_Ssid_Config	`path:"config" module:"openconfig-wifi-mac"`
	Dot11R	*OpenconfigWifiMac_Ssids_Ssid_Dot11R	`path:"dot11r" module:"openconfig-wifi-mac"`
	Dot11V	*OpenconfigWifiMac_Ssids_Ssid_Dot11V	`path:"dot11v" module:"openconfig-wifi-mac"`
	Dot1XTimers	*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers	`path:"dot1x-timers" module:"openconfig-wifi-mac"`
	Name	*string	`path:"name" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_State	`path:"state" module:"openconfig-wifi-mac"`
	Wmm	*OpenconfigWifiMac_Ssids_Ssid_Wmm	`path:"wmm" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigWifiMac_Ssids_Ssid struct, which is a YANG list entry.
func (t *OpenconfigWifiMac_Ssids_Ssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_BandSteering represents the /openconfig-wifi-mac/ssids/ssid/band-steering YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_BandSteering struct {
	Config	*OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config	`path:"config" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_BandSteering_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_BandSteering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_BandSteering) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_BandSteering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config represents the /openconfig-wifi-mac/ssids/ssid/band-steering/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config struct {
	BandSteering	*bool	`path:"band-steering" module:"openconfig-wifi-mac"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_BandSteering_State represents the /openconfig-wifi-mac/ssids/ssid/band-steering/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_BandSteering_State struct {
	BandSteering	*bool	`path:"band-steering" module:"openconfig-wifi-mac"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_BandSteering_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_BandSteering_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_BandSteering_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_BandSteering_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids represents the /openconfig-wifi-mac/ssids/ssid/bssids YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids struct {
	Bssid	map[OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_Key]*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid	`path:"bssid" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids) IsYANGGoStruct() {}

// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_Key represents the key for list Bssid of element /openconfig-wifi-mac/ssids/ssid/bssids.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_Key struct {
	RadioId	uint8	`path:"radio-id"`
	Bssid	string	`path:"bssid"`
}

// NewBssid creates a new entry in the Bssid list of the
// OpenconfigWifiMac_Ssids_Ssid_Bssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids) NewBssid(RadioId uint8, Bssid string) (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bssid == nil {
		t.Bssid = make(map[OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_Key]*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid)
	}

	key := OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_Key{
		RadioId: RadioId,
		Bssid: Bssid,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bssid", key)
	}

	t.Bssid[key] = &OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid{
		RadioId: &RadioId,
		Bssid: &Bssid,
	}

	return t.Bssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid struct {
	Bssid	*string	`path:"bssid" module:"openconfig-wifi-mac"`
	RadioId	*uint8	`path:"radio-id" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid struct, which is a YANG list entry.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	if t.RadioId == nil {
		return nil, fmt.Errorf("nil value for key RadioId")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
		"radio-id": *t.RadioId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State struct {
	Bssid	*string	`path:"bssid" module:"openconfig-wifi-mac"`
	Counters	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters	`path:"counters" module:"openconfig-wifi-mac"`
	NumAssociatedClients	*uint8	`path:"num-associated-clients" module:"openconfig-wifi-mac"`
	RadioId	*uint8	`path:"radio-id" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters struct {
	BssChannelUtilization	*uint8	`path:"bss-channel-utilization" module:"openconfig-wifi-mac"`
	RxBssDot11ChannelUtilization	*uint8	`path:"rx-bss-dot11-channel-utilization" module:"openconfig-wifi-mac"`
	RxBytesData	*uint64	`path:"rx-bytes-data" module:"openconfig-wifi-mac"`
	RxControl	*uint64	`path:"rx-control" module:"openconfig-wifi-mac"`
	RxDataDist	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist	`path:"rx-data-dist" module:"openconfig-wifi-mac"`
	RxDataWmm	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm	`path:"rx-data-wmm" module:"openconfig-wifi-mac"`
	RxMcs	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs	`path:"rx-mcs" module:"openconfig-wifi-mac"`
	RxMgmt	*uint64	`path:"rx-mgmt" module:"openconfig-wifi-mac"`
	RxRetries	*uint64	`path:"rx-retries" module:"openconfig-wifi-mac"`
	RxRetriesData	*uint64	`path:"rx-retries-data" module:"openconfig-wifi-mac"`
	RxRetriesSubframe	*uint64	`path:"rx-retries-subframe" module:"openconfig-wifi-mac"`
	TxBssDot11ChannelUtilization	*uint8	`path:"tx-bss-dot11-channel-utilization" module:"openconfig-wifi-mac"`
	TxBytesData	*uint64	`path:"tx-bytes-data" module:"openconfig-wifi-mac"`
	TxControl	*uint64	`path:"tx-control" module:"openconfig-wifi-mac"`
	TxDataDist	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist	`path:"tx-data-dist" module:"openconfig-wifi-mac"`
	TxDataWmm	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm	`path:"tx-data-wmm" module:"openconfig-wifi-mac"`
	TxMcs	*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs	`path:"tx-mcs" module:"openconfig-wifi-mac"`
	TxMgmt	*uint64	`path:"tx-mgmt" module:"openconfig-wifi-mac"`
	TxRetries	*uint64	`path:"tx-retries" module:"openconfig-wifi-mac"`
	TxRetriesData	*uint64	`path:"tx-retries-data" module:"openconfig-wifi-mac"`
	TxRetriesSubframe	*uint64	`path:"tx-retries-subframe" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/rx-data-dist YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist struct {
	Rx_0_64	*uint64	`path:"rx-0-64" module:"openconfig-wifi-mac"`
	Rx_1025_2048	*uint64	`path:"rx-1025-2048" module:"openconfig-wifi-mac"`
	Rx_129_256	*uint64	`path:"rx-129-256" module:"openconfig-wifi-mac"`
	Rx_131073_262144	*uint64	`path:"rx-131073-262144" module:"openconfig-wifi-mac"`
	Rx_16385_32768	*uint64	`path:"rx-16385-32768" module:"openconfig-wifi-mac"`
	Rx_2049_4096	*uint64	`path:"rx-2049-4096" module:"openconfig-wifi-mac"`
	Rx_257_512	*uint64	`path:"rx-257-512" module:"openconfig-wifi-mac"`
	Rx_262145_524288	*uint64	`path:"rx-262145-524288" module:"openconfig-wifi-mac"`
	Rx_32769_65536	*uint64	`path:"rx-32769-65536" module:"openconfig-wifi-mac"`
	Rx_4097_8192	*uint64	`path:"rx-4097-8192" module:"openconfig-wifi-mac"`
	Rx_513_1024	*uint64	`path:"rx-513-1024" module:"openconfig-wifi-mac"`
	Rx_524289_1048576	*uint64	`path:"rx-524289-1048576" module:"openconfig-wifi-mac"`
	Rx_65_128	*uint64	`path:"rx-65-128" module:"openconfig-wifi-mac"`
	Rx_65537_131072	*uint64	`path:"rx-65537-131072" module:"openconfig-wifi-mac"`
	Rx_8193_16384	*uint64	`path:"rx-8193-16384" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/rx-data-wmm YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm struct {
	Be	*uint64	`path:"be" module:"openconfig-wifi-mac"`
	Bk	*uint64	`path:"bk" module:"openconfig-wifi-mac"`
	Vi	*uint64	`path:"vi" module:"openconfig-wifi-mac"`
	Vo	*uint64	`path:"vo" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/rx-mcs YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"openconfig-wifi-mac"`
	Mcs1	*uint64	`path:"mcs1" module:"openconfig-wifi-mac"`
	Mcs10	*uint64	`path:"mcs10" module:"openconfig-wifi-mac"`
	Mcs11	*uint64	`path:"mcs11" module:"openconfig-wifi-mac"`
	Mcs2	*uint64	`path:"mcs2" module:"openconfig-wifi-mac"`
	Mcs3	*uint64	`path:"mcs3" module:"openconfig-wifi-mac"`
	Mcs4	*uint64	`path:"mcs4" module:"openconfig-wifi-mac"`
	Mcs5	*uint64	`path:"mcs5" module:"openconfig-wifi-mac"`
	Mcs6	*uint64	`path:"mcs6" module:"openconfig-wifi-mac"`
	Mcs7	*uint64	`path:"mcs7" module:"openconfig-wifi-mac"`
	Mcs8	*uint64	`path:"mcs8" module:"openconfig-wifi-mac"`
	Mcs9	*uint64	`path:"mcs9" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_RxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/tx-data-dist YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist struct {
	Tx_0_64	*uint64	`path:"tx-0-64" module:"openconfig-wifi-mac"`
	Tx_1025_2048	*uint64	`path:"tx-1025-2048" module:"openconfig-wifi-mac"`
	Tx_129_256	*uint64	`path:"tx-129-256" module:"openconfig-wifi-mac"`
	Tx_131073_262144	*uint64	`path:"tx-131073-262144" module:"openconfig-wifi-mac"`
	Tx_16385_32768	*uint64	`path:"tx-16385-32768" module:"openconfig-wifi-mac"`
	Tx_2049_4096	*uint64	`path:"tx-2049-4096" module:"openconfig-wifi-mac"`
	Tx_257_512	*uint64	`path:"tx-257-512" module:"openconfig-wifi-mac"`
	Tx_262145_524288	*uint64	`path:"tx-262145-524288" module:"openconfig-wifi-mac"`
	Tx_32769_65536	*uint64	`path:"tx-32769-65536" module:"openconfig-wifi-mac"`
	Tx_4097_8192	*uint64	`path:"tx-4097-8192" module:"openconfig-wifi-mac"`
	Tx_513_1024	*uint64	`path:"tx-513-1024" module:"openconfig-wifi-mac"`
	Tx_524289_1048576	*uint64	`path:"tx-524289-1048576" module:"openconfig-wifi-mac"`
	Tx_65_128	*uint64	`path:"tx-65-128" module:"openconfig-wifi-mac"`
	Tx_65537_131072	*uint64	`path:"tx-65537-131072" module:"openconfig-wifi-mac"`
	Tx_8193_16384	*uint64	`path:"tx-8193-16384" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/tx-data-wmm YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm struct {
	Be	*uint64	`path:"be" module:"openconfig-wifi-mac"`
	Bk	*uint64	`path:"bk" module:"openconfig-wifi-mac"`
	Vi	*uint64	`path:"vi" module:"openconfig-wifi-mac"`
	Vo	*uint64	`path:"vo" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs represents the /openconfig-wifi-mac/ssids/ssid/bssids/bssid/state/counters/tx-mcs YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"openconfig-wifi-mac"`
	Mcs1	*uint64	`path:"mcs1" module:"openconfig-wifi-mac"`
	Mcs10	*uint64	`path:"mcs10" module:"openconfig-wifi-mac"`
	Mcs11	*uint64	`path:"mcs11" module:"openconfig-wifi-mac"`
	Mcs2	*uint64	`path:"mcs2" module:"openconfig-wifi-mac"`
	Mcs3	*uint64	`path:"mcs3" module:"openconfig-wifi-mac"`
	Mcs4	*uint64	`path:"mcs4" module:"openconfig-wifi-mac"`
	Mcs5	*uint64	`path:"mcs5" module:"openconfig-wifi-mac"`
	Mcs6	*uint64	`path:"mcs6" module:"openconfig-wifi-mac"`
	Mcs7	*uint64	`path:"mcs7" module:"openconfig-wifi-mac"`
	Mcs8	*uint64	`path:"mcs8" module:"openconfig-wifi-mac"`
	Mcs9	*uint64	`path:"mcs9" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Bssids_Bssid_State_Counters_TxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients represents the /openconfig-wifi-mac/ssids/ssid/clients YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients struct {
	Client	map[string]*OpenconfigWifiMac_Ssids_Ssid_Clients_Client	`path:"client" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients) IsYANGGoStruct() {}

// NewClient creates a new entry in the Client list of the
// OpenconfigWifiMac_Ssids_Ssid_Clients struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients) NewClient(Mac string) (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[string]*OpenconfigWifiMac_Ssids_Ssid_Clients_Client)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Client", key)
	}

	t.Client[key] = &OpenconfigWifiMac_Ssids_Ssid_Clients_Client{
		Mac: &Mac,
	}

	return t.Client[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client represents the /openconfig-wifi-mac/ssids/ssid/clients/client YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client struct {
	ClientCapabilities	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities	`path:"client-capabilities" module:"openconfig-wifi-mac"`
	ClientConnection	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection	`path:"client-connection" module:"openconfig-wifi-mac"`
	ClientRf	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf	`path:"client-rf" module:"openconfig-wifi-mac"`
	Dot11KNeighbors	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors	`path:"dot11k-neighbors" module:"openconfig-wifi-mac"`
	Mac	*string	`path:"mac" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigWifiMac_Ssids_Ssid_Clients_Client struct, which is a YANG list entry.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-capabilities YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	State	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-capabilities/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	ChannelSupport	[]uint8	`path:"channel-support" module:"openconfig-wifi-mac"`
	ClientCapabilities	[]E_OpenconfigWifiTypes_CLIENT_CAPABILITIES	`path:"client-capabilities" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-connection YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection struct {
	State	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-connection/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	ClientState	E_OpenconfigWifiTypes_CLIENT_STATE	`path:"client-state" module:"openconfig-wifi-mac"`
	ConnectionTime	*uint64	`path:"connection-time" module:"openconfig-wifi-mac"`
	Hostname	*string	`path:"hostname" module:"openconfig-wifi-mac"`
	Ipv4Address	[]string	`path:"ipv4-address" module:"openconfig-wifi-mac"`
	Ipv6Addresses	[]string	`path:"ipv6-addresses" module:"openconfig-wifi-mac"`
	OperatingSystem	*string	`path:"operating-system" module:"openconfig-wifi-mac"`
	Username	*string	`path:"username" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientConnection_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-rf YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf struct {
	State	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State represents the /openconfig-wifi-mac/ssids/ssid/clients/client/client-rf/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State struct {
	ConnectionMode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode	`path:"connection-mode" module:"openconfig-wifi-mac"`
	Frequency	*uint8	`path:"frequency" module:"openconfig-wifi-mac"`
	PhyRate	*uint16	`path:"phy-rate" module:"openconfig-wifi-mac"`
	Rssi	*int8	`path:"rssi" module:"openconfig-wifi-mac"`
	Snr	*uint8	`path:"snr" module:"openconfig-wifi-mac"`
	Ss	*uint8	`path:"ss" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_ClientRf_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors represents the /openconfig-wifi-mac/ssids/ssid/clients/client/dot11k-neighbors YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	State	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State represents the /openconfig-wifi-mac/ssids/ssid/clients/client/dot11k-neighbors/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	ChannelLoadReport	*uint8	`path:"channel-load-report" module:"openconfig-wifi-mac"`
	NeighborAntenna	*uint8	`path:"neighbor-antenna" module:"openconfig-wifi-mac"`
	NeighborBssid	*string	`path:"neighbor-bssid" module:"openconfig-wifi-mac"`
	NeighborChannel	*uint8	`path:"neighbor-channel" module:"openconfig-wifi-mac"`
	NeighborRssi	*int8	`path:"neighbor-rssi" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State represents the /openconfig-wifi-mac/ssids/ssid/clients/client/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State struct {
	Counters	*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters	`path:"counters" module:"openconfig-wifi-mac"`
	Mac	*string	`path:"mac" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters represents the /openconfig-wifi-mac/ssids/ssid/clients/client/state/counters YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters struct {
	RxBytes	*uint64	`path:"rx-bytes" module:"openconfig-wifi-mac"`
	RxRetries	*uint64	`path:"rx-retries" module:"openconfig-wifi-mac"`
	TxBytes	*uint64	`path:"tx-bytes" module:"openconfig-wifi-mac"`
	TxRetries	*uint64	`path:"tx-retries" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Clients_Client_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Config represents the /openconfig-wifi-mac/ssids/ssid/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Config struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"openconfig-wifi-mac"`
	BasicDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-2g" module:"openconfig-wifi-mac"`
	BasicDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-5g" module:"openconfig-wifi-mac"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"openconfig-wifi-mac"`
	Csa	*bool	`path:"csa" module:"openconfig-wifi-mac"`
	DefaultVlan	*uint16	`path:"default-vlan" module:"openconfig-wifi-mac"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"openconfig-wifi-mac"`
	Dot11K	*bool	`path:"dot11k" module:"openconfig-wifi-mac"`
	Dva	*bool	`path:"dva" module:"openconfig-wifi-mac"`
	Enabled	*bool	`path:"enabled" module:"openconfig-wifi-mac"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"openconfig-wifi-mac"`
	Hidden	*bool	`path:"hidden" module:"openconfig-wifi-mac"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"openconfig-wifi-mac"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"openconfig-wifi-mac"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"openconfig-wifi-mac"`
	Name	*string	`path:"name" module:"openconfig-wifi-mac"`
	Okc	*bool	`path:"okc" module:"openconfig-wifi-mac"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-wifi-mac"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"openconfig-wifi-mac"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"openconfig-wifi-mac"`
	QbssLoad	*bool	`path:"qbss-load" module:"openconfig-wifi-mac"`
	ServerGroup	*string	`path:"server-group" module:"openconfig-wifi-mac"`
	StationIsolation	*bool	`path:"station-isolation" module:"openconfig-wifi-mac"`
	SupportedDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-2g" module:"openconfig-wifi-mac"`
	SupportedDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-5g" module:"openconfig-wifi-mac"`
	VlanList	[]uint16	`path:"vlan-list" module:"openconfig-wifi-mac"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11R represents the /openconfig-wifi-mac/ssids/ssid/dot11r YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11R struct {
	Config	*OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config	`path:"config" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Dot11R_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11R implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11R) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11R"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config represents the /openconfig-wifi-mac/ssids/ssid/dot11r/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config struct {
	Dot11R	*bool	`path:"dot11r" module:"openconfig-wifi-mac"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"openconfig-wifi-mac"`
	Dot11RMethod	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"openconfig-wifi-mac"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11R_State represents the /openconfig-wifi-mac/ssids/ssid/dot11r/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11R_State struct {
	Dot11R	*bool	`path:"dot11r" module:"openconfig-wifi-mac"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"openconfig-wifi-mac"`
	Dot11RMethod	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"openconfig-wifi-mac"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11R_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11R_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11R_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11R_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11V represents the /openconfig-wifi-mac/ssids/ssid/dot11v YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11V struct {
	Config	*OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config	`path:"config" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Dot11V_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11V implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11V) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11V"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config represents the /openconfig-wifi-mac/ssids/ssid/dot11v/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"openconfig-wifi-mac"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"openconfig-wifi-mac"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"openconfig-wifi-mac"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot11V_State represents the /openconfig-wifi-mac/ssids/ssid/dot11v/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot11V_State struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"openconfig-wifi-mac"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"openconfig-wifi-mac"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"openconfig-wifi-mac"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot11V_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot11V_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot11V_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot11V_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers represents the /openconfig-wifi-mac/ssids/ssid/dot1x-timers YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers struct {
	Config	*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config	`path:"config" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config represents the /openconfig-wifi-mac/ssids/ssid/dot1x-timers/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"openconfig-wifi-mac"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State represents the /openconfig-wifi-mac/ssids/ssid/dot1x-timers/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"openconfig-wifi-mac"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Dot1XTimers_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_State represents the /openconfig-wifi-mac/ssids/ssid/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_State struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"openconfig-wifi-mac"`
	BasicDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-2g" module:"openconfig-wifi-mac"`
	BasicDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates-5g" module:"openconfig-wifi-mac"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"openconfig-wifi-mac"`
	Csa	*bool	`path:"csa" module:"openconfig-wifi-mac"`
	DefaultVlan	*uint16	`path:"default-vlan" module:"openconfig-wifi-mac"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"openconfig-wifi-mac"`
	Dot11K	*bool	`path:"dot11k" module:"openconfig-wifi-mac"`
	Dva	*bool	`path:"dva" module:"openconfig-wifi-mac"`
	Enabled	*bool	`path:"enabled" module:"openconfig-wifi-mac"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"openconfig-wifi-mac"`
	Hidden	*bool	`path:"hidden" module:"openconfig-wifi-mac"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"openconfig-wifi-mac"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"openconfig-wifi-mac"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"openconfig-wifi-mac"`
	Name	*string	`path:"name" module:"openconfig-wifi-mac"`
	Okc	*bool	`path:"okc" module:"openconfig-wifi-mac"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-wifi-mac"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"openconfig-wifi-mac"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"openconfig-wifi-mac"`
	QbssLoad	*bool	`path:"qbss-load" module:"openconfig-wifi-mac"`
	ServerGroup	*string	`path:"server-group" module:"openconfig-wifi-mac"`
	StationIsolation	*bool	`path:"station-isolation" module:"openconfig-wifi-mac"`
	SupportedDataRates_2G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-2g" module:"openconfig-wifi-mac"`
	SupportedDataRates_5G	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates-5g" module:"openconfig-wifi-mac"`
	VlanList	[]uint16	`path:"vlan-list" module:"openconfig-wifi-mac"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Wmm represents the /openconfig-wifi-mac/ssids/ssid/wmm YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Wmm struct {
	Config	*OpenconfigWifiMac_Ssids_Ssid_Wmm_Config	`path:"config" module:"openconfig-wifi-mac"`
	State	*OpenconfigWifiMac_Ssids_Ssid_Wmm_State	`path:"state" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Wmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Wmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Wmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Wmm_Config represents the /openconfig-wifi-mac/ssids/ssid/wmm/config YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Wmm_Config struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"openconfig-wifi-mac"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"openconfig-wifi-mac"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"openconfig-wifi-mac"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"openconfig-wifi-mac"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Wmm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Wmm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Wmm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiMac_Ssids_Ssid_Wmm_State represents the /openconfig-wifi-mac/ssids/ssid/wmm/state YANG schema element.
type OpenconfigWifiMac_Ssids_Ssid_Wmm_State struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"openconfig-wifi-mac"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"openconfig-wifi-mac"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"openconfig-wifi-mac"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"openconfig-wifi-mac"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"openconfig-wifi-mac"`
}

// IsYANGGoStruct ensures that OpenconfigWifiMac_Ssids_Ssid_Wmm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiMac_Ssids_Ssid_Wmm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiMac_Ssids_Ssid_Wmm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiMac_Ssids_Ssid_Wmm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios represents the /openconfig-wifi-phy/radios YANG schema element.
type OpenconfigWifiPhy_Radios struct {
	Radio	map[OpenconfigWifiPhy_Radios_Radio_Key]*OpenconfigWifiPhy_Radios_Radio	`path:"radio" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios) IsYANGGoStruct() {}

// OpenconfigWifiPhy_Radios_Radio_Key represents the key for list Radio of element /openconfig-wifi-phy/radios.
type OpenconfigWifiPhy_Radios_Radio_Key struct {
	Id	uint8	`path:"id"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency"`
}

// NewRadio creates a new entry in the Radio list of the
// OpenconfigWifiPhy_Radios struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWifiPhy_Radios) NewRadio(Id uint8, OperatingFrequency E_OpenconfigWifiTypes_OPERATING_FREQUENCY) (*OpenconfigWifiPhy_Radios_Radio, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radio == nil {
		t.Radio = make(map[OpenconfigWifiPhy_Radios_Radio_Key]*OpenconfigWifiPhy_Radios_Radio)
	}

	key := OpenconfigWifiPhy_Radios_Radio_Key{
		Id: Id,
		OperatingFrequency: OperatingFrequency,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radio[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radio", key)
	}

	t.Radio[key] = &OpenconfigWifiPhy_Radios_Radio{
		Id: &Id,
		OperatingFrequency: OperatingFrequency,
	}

	return t.Radio[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio represents the /openconfig-wifi-phy/radios/radio YANG schema element.
type OpenconfigWifiPhy_Radios_Radio struct {
	Config	*OpenconfigWifiPhy_Radios_Radio_Config	`path:"config" module:"openconfig-wifi-phy"`
	Id	*uint8	`path:"id" module:"openconfig-wifi-phy"`
	Neighbors	*OpenconfigWifiPhy_Radios_Radio_Neighbors	`path:"neighbors" module:"openconfig-wifi-phy"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-wifi-phy"`
	State	*OpenconfigWifiPhy_Radios_Radio_State	`path:"state" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigWifiPhy_Radios_Radio struct, which is a YANG list entry.
func (t *OpenconfigWifiPhy_Radios_Radio) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}


	return map[string]interface{}{
		"id": *t.Id,
		"operating-frequency": t.OperatingFrequency,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_Config represents the /openconfig-wifi-phy/radios/radio/config YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_Config struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"openconfig-wifi-phy"`
	AntennaGain	*int8	`path:"antenna-gain" module:"openconfig-wifi-phy"`
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-wifi-phy"`
	BssColoring	*bool	`path:"bss-coloring" module:"openconfig-wifi-phy"`
	Channel	*uint8	`path:"channel" module:"openconfig-wifi-phy"`
	ChannelWidth	*uint8	`path:"channel-width" module:"openconfig-wifi-phy"`
	Dca	*bool	`path:"dca" module:"openconfig-wifi-phy"`
	Dtp	*bool	`path:"dtp" module:"openconfig-wifi-phy"`
	DtpMax	*int8	`path:"dtp-max" module:"openconfig-wifi-phy"`
	DtpMin	*int8	`path:"dtp-min" module:"openconfig-wifi-phy"`
	Enabled	*bool	`path:"enabled" module:"openconfig-wifi-phy"`
	Id	*uint8	`path:"id" module:"openconfig-wifi-phy"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-wifi-phy"`
	Scanning	*bool	`path:"scanning" module:"openconfig-wifi-phy"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"openconfig-wifi-phy"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"openconfig-wifi-phy"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"openconfig-wifi-phy"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"openconfig-wifi-phy"`
	TransmitEirp	*uint8	`path:"transmit-eirp" module:"openconfig-wifi-phy"`
	TransmitPower	*int8	`path:"transmit-power" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_Neighbors represents the /openconfig-wifi-phy/radios/radio/neighbors YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_Neighbors struct {
	Neighbor	map[string]*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor	`path:"neighbor" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_Neighbors) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigWifiPhy_Radios_Radio_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors) NewNeighbor(Bssid string) (*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor)
	}

	key := Bssid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor{
		Bssid: &Bssid,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor represents the /openconfig-wifi-phy/radios/radio/neighbors/neighbor YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor struct {
	Bssid	*string	`path:"bssid" module:"openconfig-wifi-phy"`
	State	*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State	`path:"state" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State represents the /openconfig-wifi-phy/radios/radio/neighbors/neighbor/state YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State struct {
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-wifi-phy"`
	Bssid	*string	`path:"bssid" module:"openconfig-wifi-phy"`
	Channel	*uint16	`path:"channel" module:"openconfig-wifi-phy"`
	LastSeen	*uint64	`path:"last-seen" module:"openconfig-wifi-phy"`
	Opmode	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode	`path:"opmode" module:"openconfig-wifi-phy"`
	PrimaryChannel	*uint16	`path:"primary-channel" module:"openconfig-wifi-phy"`
	Rssi	*int8	`path:"rssi" module:"openconfig-wifi-phy"`
	Ssid	*string	`path:"ssid" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_State represents the /openconfig-wifi-phy/radios/radio/state YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_State struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"openconfig-wifi-phy"`
	AllowedRegulatoryChannels	[]uint8	`path:"allowed-regulatory-channels" module:"openconfig-wifi-phy"`
	AntennaGain	*int8	`path:"antenna-gain" module:"openconfig-wifi-phy"`
	BaseRadioMac	*string	`path:"base-radio-mac" module:"openconfig-wifi-phy"`
	BssColorId	*uint8	`path:"bss-color-id" module:"openconfig-wifi-phy"`
	BssColoring	*bool	`path:"bss-coloring" module:"openconfig-wifi-phy"`
	Channel	*uint8	`path:"channel" module:"openconfig-wifi-phy"`
	ChannelChangeReason	E_OpenconfigWifiTypes_CHANGE_REASON_TYPE	`path:"channel-change-reason" module:"openconfig-wifi-phy"`
	ChannelWidth	*uint8	`path:"channel-width" module:"openconfig-wifi-phy"`
	Counters	*OpenconfigWifiPhy_Radios_Radio_State_Counters	`path:"counters" module:"openconfig-wifi-phy"`
	Dca	*bool	`path:"dca" module:"openconfig-wifi-phy"`
	DfsHitTime	*uint64	`path:"dfs-hit-time" module:"openconfig-wifi-phy"`
	Dtp	*bool	`path:"dtp" module:"openconfig-wifi-phy"`
	DtpMax	*int8	`path:"dtp-max" module:"openconfig-wifi-phy"`
	DtpMin	*int8	`path:"dtp-min" module:"openconfig-wifi-phy"`
	Enabled	*bool	`path:"enabled" module:"openconfig-wifi-phy"`
	Id	*uint8	`path:"id" module:"openconfig-wifi-phy"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"openconfig-wifi-phy"`
	RxDot11ChannelUtilization	*uint8	`path:"rx-dot11-channel-utilization" module:"openconfig-wifi-phy"`
	RxNoiseChannelUtilization	*uint8	`path:"rx-noise-channel-utilization" module:"openconfig-wifi-phy"`
	Scanning	*bool	`path:"scanning" module:"openconfig-wifi-phy"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"openconfig-wifi-phy"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"openconfig-wifi-phy"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"openconfig-wifi-phy"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"openconfig-wifi-phy"`
	SoftwareSelectable	*bool	`path:"software-selectable" module:"openconfig-wifi-phy"`
	SupportedChannels	[]uint8	`path:"supported-channels" module:"openconfig-wifi-phy"`
	TotalChannelUtilization	*uint8	`path:"total-channel-utilization" module:"openconfig-wifi-phy"`
	TransmitEirp	*uint8	`path:"transmit-eirp" module:"openconfig-wifi-phy"`
	TransmitPower	*int8	`path:"transmit-power" module:"openconfig-wifi-phy"`
	TxDot11ChannelUtilization	*uint8	`path:"tx-dot11-channel-utilization" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OpenconfigWifiPhy_Radios_Radio_State_Counters represents the /openconfig-wifi-phy/radios/radio/state/counters YANG schema element.
type OpenconfigWifiPhy_Radios_Radio_State_Counters struct {
	FailedFcsFrames	*uint64	`path:"failed-fcs-frames" module:"openconfig-wifi-phy"`
	NoiseFloor	*int8	`path:"noise-floor" module:"openconfig-wifi-phy"`
}

// IsYANGGoStruct ensures that OpenconfigWifiPhy_Radios_Radio_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigWifiPhy_Radios_Radio_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigWifiPhy_Radios_Radio_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigWifiPhy_Radios_Radio_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigWifiPhy_Radios_Radio_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (e E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND corresponds to the value AAA_ACCOUNTING_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN corresponds to the value AAA_ACCOUNTING_EVENT_LOGIN of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 2
)


// E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (e E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND corresponds to the value AAA_AUTHORIZATION_EVENT_COMMAND of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG corresponds to the value AAA_AUTHORIZATION_EVENT_CONFIG of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 2
)


// E_OpenconfigAaaTypes_AAA_METHOD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_METHOD_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_METHOD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (e E_OpenconfigAaaTypes_AAA_METHOD_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_METHOD_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 0
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL corresponds to the value LOCAL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 1
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL corresponds to the value RADIUS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 2
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL corresponds to the value TACACS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 3
)


// E_OpenconfigAaaTypes_AAA_SERVER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_SERVER_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_SERVER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (e E_OpenconfigAaaTypes_AAA_SERVER_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_AAA_SERVER_TYPE")
}

const (
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 0
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS corresponds to the value RADIUS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 1
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS corresponds to the value TACACS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 2
)


// E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES. An additional value named
// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (e E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES")
}

const (
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 0
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN corresponds to the value SYSTEM_ROLE_ADMIN of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 1
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_OPEN corresponds to the value OPEN of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_OPEN E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA2_PERSONAL corresponds to the value WPA2_PERSONAL of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA2_PERSONAL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA2_ENTERPRISE corresponds to the value WPA2_ENTERPRISE of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA2_ENTERPRISE E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 3
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA_PERSONAL corresponds to the value WPA_PERSONAL of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA_PERSONAL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 4
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA_ENTERPRISE corresponds to the value WPA_ENTERPRISE of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WPA_ENTERPRISE E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 5
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WEP corresponds to the value WEP of OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode_WEP E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode = 6
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A corresponds to the value A of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B corresponds to the value B of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G corresponds to the value G of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 3
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N corresponds to the value N of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 4
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC corresponds to the value AC of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 5
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AX corresponds to the value AX of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AX E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 6
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_OPEN corresponds to the value OPEN of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_OPEN E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL corresponds to the value WPA2_PERSONAL of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE corresponds to the value WPA2_ENTERPRISE of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 3
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA corresponds to the value OVA of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS corresponds to the value ODS of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 2
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP corresponds to the value START_STOP of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_STOP corresponds to the value STOP of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_STOP E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 2
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_ALL corresponds to the value ALL of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_ALL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 1
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_SERVER corresponds to the value SERVER of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_SERVER E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_PEER corresponds to the value PEER of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_PEER E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_POOL corresponds to the value POOL of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_POOL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 3
)


// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion.
func (e E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion")
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V2 corresponds to the value V2 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V2 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1 corresponds to the value V1 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1_V2 corresponds to the value V1_V2 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1_V2 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 3
)


// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (e E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY")
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)


// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (e E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID")
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS corresponds to the value AIS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT corresponds to the value EQPT of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS corresponds to the value LOS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS corresponds to the value OTS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 4
)


// E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource is a derived int64 type which is used to represent
// the enumerated node OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource. An additional value named
// OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource int64

// IsYANGGoEnum ensures that OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource implements the yang.GoEnum
// interface. This ensures that OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource.
func (E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource.
func (e E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource")
}

const (
	// OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_UNSET corresponds to the value UNSET of OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource
	OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_UNSET E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource = 0
	// OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_AT corresponds to the value AT of OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource
	OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_AT E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource = 1
	// OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_AF corresponds to the value AF of OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource
	OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_AF E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource = 2
	// OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_PLUG corresponds to the value PLUG of OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource
	OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource_PLUG E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource = 3
)


// E_OpenconfigMessages_DEBUG_SERVICE is a derived int64 type which is used to represent
// the enumerated node OpenconfigMessages_DEBUG_SERVICE. An additional value named
// OpenconfigMessages_DEBUG_SERVICE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigMessages_DEBUG_SERVICE int64

// IsYANGGoEnum ensures that OpenconfigMessages_DEBUG_SERVICE implements the yang.GoEnum
// interface. This ensures that OpenconfigMessages_DEBUG_SERVICE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigMessages_DEBUG_SERVICE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigMessages_DEBUG_SERVICE.
func (E_OpenconfigMessages_DEBUG_SERVICE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigMessages_DEBUG_SERVICE.
func (e E_OpenconfigMessages_DEBUG_SERVICE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigMessages_DEBUG_SERVICE")
}

const (
	// OpenconfigMessages_DEBUG_SERVICE_UNSET corresponds to the value UNSET of OpenconfigMessages_DEBUG_SERVICE
	OpenconfigMessages_DEBUG_SERVICE_UNSET E_OpenconfigMessages_DEBUG_SERVICE = 0
)


// E_OpenconfigMessages_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigMessages_SyslogSeverity. An additional value named
// OpenconfigMessages_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigMessages_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigMessages_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigMessages_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigMessages_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigMessages_SyslogSeverity.
func (E_OpenconfigMessages_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigMessages_SyslogSeverity.
func (e E_OpenconfigMessages_SyslogSeverity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigMessages_SyslogSeverity")
}

const (
	// OpenconfigMessages_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_UNSET E_OpenconfigMessages_SyslogSeverity = 0
	// OpenconfigMessages_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_EMERGENCY E_OpenconfigMessages_SyslogSeverity = 1
	// OpenconfigMessages_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_ALERT E_OpenconfigMessages_SyslogSeverity = 2
	// OpenconfigMessages_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_CRITICAL E_OpenconfigMessages_SyslogSeverity = 3
	// OpenconfigMessages_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_ERROR E_OpenconfigMessages_SyslogSeverity = 4
	// OpenconfigMessages_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_WARNING E_OpenconfigMessages_SyslogSeverity = 5
	// OpenconfigMessages_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_NOTICE E_OpenconfigMessages_SyslogSeverity = 6
	// OpenconfigMessages_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_INFORMATIONAL E_OpenconfigMessages_SyslogSeverity = 7
	// OpenconfigMessages_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigMessages_SyslogSeverity
	OpenconfigMessages_SyslogSeverity_DEBUG E_OpenconfigMessages_SyslogSeverity = 8
)


// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (e E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS")
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)


// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
)


// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (e E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT")
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_BOOT_LOADER corresponds to the value BOOT_LOADER of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_BOOT_LOADER E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE corresponds to the value OPERATING_SYSTEM_UPDATE of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_SOFTWARE_MODULE corresponds to the value SOFTWARE_MODULE of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_SOFTWARE_MODULE E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 4
)


// E_OpenconfigSystemLogging_SYSLOG_FACILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SYSLOG_FACILITY. An additional value named
// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SYSLOG_FACILITY int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SYSLOG_FACILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SYSLOG_FACILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SYSLOG_FACILITY.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystemLogging_SYSLOG_FACILITY.
func (e E_OpenconfigSystemLogging_SYSLOG_FACILITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystemLogging_SYSLOG_FACILITY")
}

const (
	// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET E_OpenconfigSystemLogging_SYSLOG_FACILITY = 0
	// OpenconfigSystemLogging_SYSLOG_FACILITY_ALL corresponds to the value ALL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_ALL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 1
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT corresponds to the value AUDIT of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT E_OpenconfigSystemLogging_SYSLOG_FACILITY = 2
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH corresponds to the value AUTH of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH E_OpenconfigSystemLogging_SYSLOG_FACILITY = 3
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV corresponds to the value AUTHPRIV of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV E_OpenconfigSystemLogging_SYSLOG_FACILITY = 4
	// OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE corresponds to the value CONSOLE of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE E_OpenconfigSystemLogging_SYSLOG_FACILITY = 5
	// OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL corresponds to the value KERNEL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 6
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 corresponds to the value LOCAL0 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 7
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 corresponds to the value LOCAL1 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 8
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 corresponds to the value LOCAL2 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 9
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 corresponds to the value LOCAL3 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 10
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 corresponds to the value LOCAL4 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 11
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 corresponds to the value LOCAL5 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 12
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 corresponds to the value LOCAL6 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 13
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 corresponds to the value LOCAL7 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 14
	// OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL corresponds to the value MAIL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 15
	// OpenconfigSystemLogging_SYSLOG_FACILITY_NTP corresponds to the value NTP of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_NTP E_OpenconfigSystemLogging_SYSLOG_FACILITY = 16
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG corresponds to the value SYSLOG of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG E_OpenconfigSystemLogging_SYSLOG_FACILITY = 17
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON corresponds to the value SYSTEM_DAEMON of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON E_OpenconfigSystemLogging_SYSLOG_FACILITY = 18
	// OpenconfigSystemLogging_SYSLOG_FACILITY_USER corresponds to the value USER of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_USER E_OpenconfigSystemLogging_SYSLOG_FACILITY = 19
)


// E_OpenconfigSystemLogging_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SyslogSeverity. An additional value named
// OpenconfigSystemLogging_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SyslogSeverity.
func (E_OpenconfigSystemLogging_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystemLogging_SyslogSeverity.
func (e E_OpenconfigSystemLogging_SyslogSeverity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystemLogging_SyslogSeverity")
}

const (
	// OpenconfigSystemLogging_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_UNSET E_OpenconfigSystemLogging_SyslogSeverity = 0
	// OpenconfigSystemLogging_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_EMERGENCY E_OpenconfigSystemLogging_SyslogSeverity = 1
	// OpenconfigSystemLogging_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ALERT E_OpenconfigSystemLogging_SyslogSeverity = 2
	// OpenconfigSystemLogging_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_CRITICAL E_OpenconfigSystemLogging_SyslogSeverity = 3
	// OpenconfigSystemLogging_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ERROR E_OpenconfigSystemLogging_SyslogSeverity = 4
	// OpenconfigSystemLogging_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_WARNING E_OpenconfigSystemLogging_SyslogSeverity = 5
	// OpenconfigSystemLogging_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_NOTICE E_OpenconfigSystemLogging_SyslogSeverity = 6
	// OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL E_OpenconfigSystemLogging_SyslogSeverity = 7
	// OpenconfigSystemLogging_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_DEBUG E_OpenconfigSystemLogging_SyslogSeverity = 8
)


// E_OpenconfigSystem_NTP_AUTH_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_NTP_AUTH_TYPE. An additional value named
// OpenconfigSystem_NTP_AUTH_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_NTP_AUTH_TYPE int64

// IsYANGGoEnum ensures that OpenconfigSystem_NTP_AUTH_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_NTP_AUTH_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_NTP_AUTH_TYPE.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigSystem_NTP_AUTH_TYPE.
func (e E_OpenconfigSystem_NTP_AUTH_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigSystem_NTP_AUTH_TYPE")
}

const (
	// OpenconfigSystem_NTP_AUTH_TYPE_UNSET corresponds to the value UNSET of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_UNSET E_OpenconfigSystem_NTP_AUTH_TYPE = 0
	// OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 corresponds to the value NTP_AUTH_MD5 of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 E_OpenconfigSystem_NTP_AUTH_TYPE = 1
)


// E_OpenconfigWifiTypes_AP_STATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_AP_STATE. An additional value named
// OpenconfigWifiTypes_AP_STATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_AP_STATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_AP_STATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_AP_STATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_AP_STATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_AP_STATE.
func (E_OpenconfigWifiTypes_AP_STATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_AP_STATE.
func (e E_OpenconfigWifiTypes_AP_STATE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_AP_STATE")
}

const (
	// OpenconfigWifiTypes_AP_STATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_AP_STATE
	OpenconfigWifiTypes_AP_STATE_UNSET E_OpenconfigWifiTypes_AP_STATE = 0
	// OpenconfigWifiTypes_AP_STATE_DOWN corresponds to the value DOWN of OpenconfigWifiTypes_AP_STATE
	OpenconfigWifiTypes_AP_STATE_DOWN E_OpenconfigWifiTypes_AP_STATE = 1
	// OpenconfigWifiTypes_AP_STATE_UP corresponds to the value UP of OpenconfigWifiTypes_AP_STATE
	OpenconfigWifiTypes_AP_STATE_UP E_OpenconfigWifiTypes_AP_STATE = 2
	// OpenconfigWifiTypes_AP_STATE_UPGRADING corresponds to the value UPGRADING of OpenconfigWifiTypes_AP_STATE
	OpenconfigWifiTypes_AP_STATE_UPGRADING E_OpenconfigWifiTypes_AP_STATE = 3
)


// E_OpenconfigWifiTypes_CHANGE_REASON_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CHANGE_REASON_TYPE. An additional value named
// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CHANGE_REASON_TYPE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CHANGE_REASON_TYPE.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_CHANGE_REASON_TYPE.
func (e E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_CHANGE_REASON_TYPE")
}

const (
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 0
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL corresponds to the value BETTER_CHANNEL of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 1
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS corresponds to the value DFS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 2
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS corresponds to the value ERRORS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 3
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE corresponds to the value NOISE of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 4
)


// E_OpenconfigWifiTypes_CLIENT_CAPABILITIES is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_CAPABILITIES. An additional value named
// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_CAPABILITIES int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_CAPABILITIES.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_CLIENT_CAPABILITIES.
func (e E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_CLIENT_CAPABILITIES")
}

const (
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 0
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R corresponds to the value DOT_11R of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 1
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V corresponds to the value DOT_11V of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 2
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE corresponds to the value MU_BEAMFORMEE of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 3
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER corresponds to the value MU_BEAMFORMER of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 4
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_OFDMA corresponds to the value OFDMA of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_OFDMA E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 5
)


// E_OpenconfigWifiTypes_CLIENT_STATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_STATE. An additional value named
// OpenconfigWifiTypes_CLIENT_STATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_STATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_STATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_STATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_STATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_STATE.
func (E_OpenconfigWifiTypes_CLIENT_STATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_CLIENT_STATE.
func (e E_OpenconfigWifiTypes_CLIENT_STATE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_CLIENT_STATE")
}

const (
	// OpenconfigWifiTypes_CLIENT_STATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_UNSET E_OpenconfigWifiTypes_CLIENT_STATE = 0
	// OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED corresponds to the value ASSOCIATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED E_OpenconfigWifiTypes_CLIENT_STATE = 1
	// OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED corresponds to the value AUTHENTICATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED E_OpenconfigWifiTypes_CLIENT_STATE = 2
	// OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED corresponds to the value BLACKLISTED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED E_OpenconfigWifiTypes_CLIENT_STATE = 3
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE corresponds to the value DHCP_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 4
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD corresponds to the value DHCP_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 5
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT corresponds to the value L2AUTH_FAILURE_REJECT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT E_OpenconfigWifiTypes_CLIENT_STATE = 6
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT corresponds to the value L2AUTH_FAILURE_TIMEOUT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT E_OpenconfigWifiTypes_CLIENT_STATE = 7
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD corresponds to the value L2AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 8
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE corresponds to the value L3AUTH_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 9
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD corresponds to the value L3AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 10
	// OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE corresponds to the value POWERSAVE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE E_OpenconfigWifiTypes_CLIENT_STATE = 11
)


// E_OpenconfigWifiTypes_DATA_RATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_DATA_RATE. An additional value named
// OpenconfigWifiTypes_DATA_RATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_DATA_RATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_DATA_RATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_DATA_RATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_DATA_RATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_DATA_RATE.
func (E_OpenconfigWifiTypes_DATA_RATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_DATA_RATE.
func (e E_OpenconfigWifiTypes_DATA_RATE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_DATA_RATE")
}

const (
	// OpenconfigWifiTypes_DATA_RATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_UNSET E_OpenconfigWifiTypes_DATA_RATE = 0
	// OpenconfigWifiTypes_DATA_RATE_RATE_11MB corresponds to the value RATE_11MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_11MB E_OpenconfigWifiTypes_DATA_RATE = 1
	// OpenconfigWifiTypes_DATA_RATE_RATE_12MB corresponds to the value RATE_12MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_12MB E_OpenconfigWifiTypes_DATA_RATE = 2
	// OpenconfigWifiTypes_DATA_RATE_RATE_18MB corresponds to the value RATE_18MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_18MB E_OpenconfigWifiTypes_DATA_RATE = 3
	// OpenconfigWifiTypes_DATA_RATE_RATE_1MB corresponds to the value RATE_1MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_1MB E_OpenconfigWifiTypes_DATA_RATE = 4
	// OpenconfigWifiTypes_DATA_RATE_RATE_24MB corresponds to the value RATE_24MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_24MB E_OpenconfigWifiTypes_DATA_RATE = 5
	// OpenconfigWifiTypes_DATA_RATE_RATE_2MB corresponds to the value RATE_2MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_2MB E_OpenconfigWifiTypes_DATA_RATE = 6
	// OpenconfigWifiTypes_DATA_RATE_RATE_36MB corresponds to the value RATE_36MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_36MB E_OpenconfigWifiTypes_DATA_RATE = 7
	// OpenconfigWifiTypes_DATA_RATE_RATE_48MB corresponds to the value RATE_48MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_48MB E_OpenconfigWifiTypes_DATA_RATE = 8
	// OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB corresponds to the value RATE_5_5MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB E_OpenconfigWifiTypes_DATA_RATE = 9
	// OpenconfigWifiTypes_DATA_RATE_RATE_54MB corresponds to the value RATE_54MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_54MB E_OpenconfigWifiTypes_DATA_RATE = 10
	// OpenconfigWifiTypes_DATA_RATE_RATE_6MB corresponds to the value RATE_6MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_6MB E_OpenconfigWifiTypes_DATA_RATE = 11
	// OpenconfigWifiTypes_DATA_RATE_RATE_9MB corresponds to the value RATE_9MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_9MB E_OpenconfigWifiTypes_DATA_RATE = 12
)


// E_OpenconfigWifiTypes_OPERATING_FREQUENCY is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_OPERATING_FREQUENCY. An additional value named
// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_OPERATING_FREQUENCY int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_OPERATING_FREQUENCY.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigWifiTypes_OPERATING_FREQUENCY.
func (e E_OpenconfigWifiTypes_OPERATING_FREQUENCY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigWifiTypes_OPERATING_FREQUENCY")
}

const (
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 0
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ corresponds to the value FREQ_2GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 1
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ corresponds to the value FREQ_2_5_GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 2
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ corresponds to the value FREQ_5GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE": {
		1: {Name: "AAA_ACCOUNTING_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_ACCOUNTING_EVENT_LOGIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE": {
		1: {Name: "AAA_AUTHORIZATION_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_AUTHORIZATION_EVENT_CONFIG", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_METHOD_TYPE": {
		1: {Name: "LOCAL", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "RADIUS_ALL", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "TACACS_ALL", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_SERVER_TYPE": {
		1: {Name: "RADIUS", DefiningModule: "openconfig-aaa"},
		2: {Name: "TACACS", DefiningModule: "openconfig-aaa"},
	},
	"E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES": {
		1: {Name: "SYSTEM_ROLE_ADMIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode": {
		1: {Name: "OPEN"},
		2: {Name: "WPA2_PERSONAL"},
		3: {Name: "WPA2_ENTERPRISE"},
		4: {Name: "WPA_PERSONAL"},
		5: {Name: "WPA_ENTERPRISE"},
		6: {Name: "WEP"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "G"},
		4: {Name: "N"},
		5: {Name: "AC"},
		6: {Name: "AX"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode": {
		1: {Name: "OPEN"},
		2: {Name: "WPA2_PERSONAL"},
		3: {Name: "WPA2_ENTERPRISE"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod": {
		1: {Name: "OVA"},
		2: {Name: "ODS"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record": {
		1: {Name: "START_STOP"},
		2: {Name: "STOP"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index": {
		1: {Name: "ALL"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType": {
		1: {Name: "SERVER"},
		2: {Name: "PEER"},
		3: {Name: "POOL"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion": {
		1: {Name: "V2"},
		2: {Name: "V1"},
		3: {Name: "V1_V2"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID": {
		1: {Name: "AIS", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "EQPT", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "LOS", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "OTS", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource": {
		1: {Name: "AT"},
		2: {Name: "AF"},
		3: {Name: "PLUG"},
	},
	"E_OpenconfigMessages_DEBUG_SERVICE": {
	},
	"E_OpenconfigMessages_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1: {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3: {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4: {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5: {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6: {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7: {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8: {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9: {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		11: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		12: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		13: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		14: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "BOOT_LOADER", DefiningModule: "openconfig-platform-types"},
		2: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
		3: {Name: "OPERATING_SYSTEM_UPDATE", DefiningModule: "openconfig-platform-types"},
		4: {Name: "SOFTWARE_MODULE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigSystemLogging_SYSLOG_FACILITY": {
		1: {Name: "ALL", DefiningModule: "openconfig-system-logging"},
		2: {Name: "AUDIT", DefiningModule: "openconfig-system-logging"},
		3: {Name: "AUTH", DefiningModule: "openconfig-system-logging"},
		4: {Name: "AUTHPRIV", DefiningModule: "openconfig-system-logging"},
		5: {Name: "CONSOLE", DefiningModule: "openconfig-system-logging"},
		6: {Name: "KERNEL", DefiningModule: "openconfig-system-logging"},
		7: {Name: "LOCAL0", DefiningModule: "openconfig-system-logging"},
		8: {Name: "LOCAL1", DefiningModule: "openconfig-system-logging"},
		9: {Name: "LOCAL2", DefiningModule: "openconfig-system-logging"},
		10: {Name: "LOCAL3", DefiningModule: "openconfig-system-logging"},
		11: {Name: "LOCAL4", DefiningModule: "openconfig-system-logging"},
		12: {Name: "LOCAL5", DefiningModule: "openconfig-system-logging"},
		13: {Name: "LOCAL6", DefiningModule: "openconfig-system-logging"},
		14: {Name: "LOCAL7", DefiningModule: "openconfig-system-logging"},
		15: {Name: "MAIL", DefiningModule: "openconfig-system-logging"},
		16: {Name: "NTP", DefiningModule: "openconfig-system-logging"},
		17: {Name: "SYSLOG", DefiningModule: "openconfig-system-logging"},
		18: {Name: "SYSTEM_DAEMON", DefiningModule: "openconfig-system-logging"},
		19: {Name: "USER", DefiningModule: "openconfig-system-logging"},
	},
	"E_OpenconfigSystemLogging_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigSystem_NTP_AUTH_TYPE": {
		1: {Name: "NTP_AUTH_MD5", DefiningModule: "openconfig-system"},
	},
	"E_OpenconfigWifiTypes_AP_STATE": {
		1: {Name: "DOWN", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "UP", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "UPGRADING", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CHANGE_REASON_TYPE": {
		1: {Name: "BETTER_CHANNEL", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DFS", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "ERRORS", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "NOISE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_CAPABILITIES": {
		1: {Name: "DOT_11R", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DOT_11V", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "MU_BEAMFORMEE", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "MU_BEAMFORMER", DefiningModule: "openconfig-wifi-types"},
		5: {Name: "OFDMA", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_STATE": {
		1: {Name: "ASSOCIATED", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "AUTHENTICATED", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "BLACKLISTED", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "DHCP_FAILURE", DefiningModule: "openconfig-wifi-types"},
		5: {Name: "DHCP_REQD", DefiningModule: "openconfig-wifi-types"},
		6: {Name: "L2AUTH_FAILURE_REJECT", DefiningModule: "openconfig-wifi-types"},
		7: {Name: "L2AUTH_FAILURE_TIMEOUT", DefiningModule: "openconfig-wifi-types"},
		8: {Name: "L2AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		9: {Name: "L3AUTH_FAILURE", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "L3AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "POWERSAVE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_DATA_RATE": {
		1: {Name: "RATE_11MB", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "RATE_12MB", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "RATE_18MB", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "RATE_1MB", DefiningModule: "openconfig-wifi-types"},
		5: {Name: "RATE_24MB", DefiningModule: "openconfig-wifi-types"},
		6: {Name: "RATE_2MB", DefiningModule: "openconfig-wifi-types"},
		7: {Name: "RATE_36MB", DefiningModule: "openconfig-wifi-types"},
		8: {Name: "RATE_48MB", DefiningModule: "openconfig-wifi-types"},
		9: {Name: "RATE_5.5MB", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "RATE_54MB", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "RATE_6MB", DefiningModule: "openconfig-wifi-types"},
		12: {Name: "RATE_9MB", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_OPERATING_FREQUENCY": {
		1: {Name: "FREQ_2GHZ", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "FREQ_2_5_GHZ", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "FREQ_5GHZ", DefiningModule: "openconfig-wifi-types"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x6b, 0x53, 0x1b, 0x49,
		0xb6, 0xfd, 0xfd, 0xde, 0x9f, 0x42, 0xa1, 0x98, 0x88, 0x31, 0x27, 0x5c, 0xd6, 0x05, 0x49, 0x80,
		0x23, 0x4e, 0x9c, 0x90, 0x0d, 0xee, 0xe6, 0x19, 0xdb, 0x30, 0x40, 0xf7, 0x74, 0x8f, 0xcd, 0x28,
		0x0a, 0x29, 0x81, 0xfa, 0x5b, 0xaa, 0x52, 0x57, 0x95, 0x6c, 0x33, 0x36, 0xdf, 0xfd, 0x09, 0x95,
		0x2e, 0x5c, 0x65, 0xa4, 0xca, 0x9d, 0x59, 0x25, 0xe9, 0xe7, 0x17, 0xc6, 0x60, 0x94, 0x75, 0xc9,
		0xbd, 0x57, 0xae, 0xb5, 0x32, 0x73, 0xe7, 0xf7, 0x67, 0x85, 0x42, 0xa1, 0x50, 0xfc, 0xe0, 0xf6,
		0x54, 0xf1, 0x55, 0xa1, 0xd8, 0x51, 0x5f, 0xbc, 0xb6, 0x2a, 0xbe, 0x18, 0xfd, 0xf4, 0x1f, 0x9e,
		0xdf, 0x29, 0xbe, 0x2a, 0x54, 0xc6, 0xdf, 0xbe, 0x09, 0xfc, 0x73, 0xef, 0xa2, 0xf8, 0xaa, 0x50,
		0x1e, 0xff, 0x60, 0xd7, 0x0b, 0x8b, 0xaf, 0x0a, 0xa3, 0x26, 0x92, 0x1f, 0xb8, 0xed, 0xb6, 0x8a,
		0x22, 0xa7, 0x1f, 0x78, 0x7e, 0x1c, 0xdd, 0xf9, 0xaf, 0x3b, 0x57, 0xb9, 0xfb, 0x6b, 0x2f, 0xee,
		0xfe, 0xd2, 0xdd, 0x8b, 0x4e, 0x7f, 0x7c, 0xff, 0xe2, 0xd3, 0xff, 0x38, 0x0c, 0xd5, 0xb9, 0xf7,
		0xed, 0xc1, 0xc5, 0xe6, 0xbe, 0x60, 0xf2, 0x8b, 0xc7, 0xc1, 0x20, 0x6c, 0xab, 0x47, 0x1b, 0x19,
		0xdd, 0x94, 0xba, 0xfa, 0x1a, 0x84, 0xc3, 0xfb, 0x2a, 0xf6, 0x47, 0xd7, 0x7b, 0xf1, 0xf8, 0x2f,
		0xfe, 0xea, 0x46, 0xcd, 0xf0, 0x62, 0xd0, 0x53, 0x7e, 0x5c, 0x7c, 0x55, 0x88, 0xc3, 0x81, 0x9a,
		0xf1, 0x8b, 0xb7, 0x7e, 0xeb, 0xde, 0xed, 0x3d, 0xf8, 0xfd, 0xeb, 0x3b, 0x3f, 0xb9, 0xbe, 0xf7,
		0xfc, 0xf7, 0x3b, 0xe1, 0xd1, 0xce, 0x98, 0xfd, 0x64, 0x8f, 0xbd, 0xa2, 0x59, 0x0f, 0xf7, 0x78,
		0xd7, 0x3c, 0xd9, 0x45, 0xf3, 0x74, 0xd5, 0xc2, 0x5d, 0x36, 0x6f, 0xd7, 0x2d, 0xdc, 0x85, 0x0b,
		0x77, 0x65, 0x9a, 0x2e, 0x7d, 0xbc, 0x6b, 0x67, 0x74, 0xf1, 0x93, 0x5d, 0x7d, 0xd3, 0xe5, 0x51,
		0xe4, 0x5d, 0xf8, 0xaa, 0xe3, 0xb8, 0x7d, 0xa7, 0xe7, 0xfa, 0xee, 0x85, 0x0a, 0xa3, 0xa7, 0xdf,
		0xcc, 0xf4, 0x95, 0x3f, 0xf6, 0xe9, 0x27, 0x9e, 0xf9, 0xe7, 0x21, 0x31, 0x77, 0x68, 0x2c, 0x12,
		0x22, 0xa9, 0x43, 0x65, 0xd1, 0x90, 0x49, 0x1d, 0x3a, 0xa9, 0x43, 0x48, 0x27, 0x94, 0x7e, 0x1e,
		0x52, 0x4f, 0x84, 0xd6, 0xdc, 0x21, 0x76, 0x13, 0x6a, 0xd3, 0x18, 0x99, 0xff, 0x3d, 0x4e, 0x3b,
		0xec, 0xe6, 0xb3, 0x73, 0xbe, 0x8f, 0xf9, 0xc2, 0x6c, 0xe1, 0x70, 0x4b, 0x13, 0x76, 0xda, 0xe1,
		0x97, 0x36, 0x0c, 0xb5, 0xc3, 0x51, 0x3b, 0x2c, 0x25, 0xc2, 0x73, 0xbe, 0x30, 0x9d, 0x33, 0x5c,
		0x17, 0x0e, 0xdb, 0xe9, 0x07, 0xda, 0x93, 0x08, 0x59, 0xf0, 0xdd, 0x4f, 0x3a, 0x7d, 0xfc, 0xf9,
		0x05, 0xdf, 0xdb, 0x62, 0x61, 0x9c, 0x3a, 0x9c, 0x75, 0xc2, 0x5a, 0x2c, 0xbc, 0x75, 0xc3, 0x5c,
		0x2c, 0xdc, 0xc5, 0xc2, 0x5e, 0x32, 0xfc, 0x17, 0x4b, 0x83, 0x05, 0xd3, 0x21, 0x75, 0x5a, 0x3c,
		0x82, 0xee, 0x8e, 0xd7, 0xff, 0x52, 0x73, 0xdc, 0x4e, 0x27, 0x54, 0x51, 0x94, 0xbe, 0x13, 0x1f,
		0x42, 0xff, 0xdd, 0x86, 0x53, 0xf6, 0xc4, 0x38, 0xa1, 0xca, 0x29, 0x3f, 0x9e, 0x36, 0xb1, 0x24,
		0x12, 0x4c, 0x3c, 0xd1, 0xa4, 0x12, 0x4e, 0x3c, 0xf1, 0xc4, 0x13, 0xd0, 0x44, 0x22, 0xa6, 0x4b,
		0xc8, 0x94, 0x89, 0x39, 0x7d, 0x80, 0x93, 0xab, 0xbe, 0x92, 0x89, 0x1e, 0x81, 0x6c, 0xba, 0x33,
		0x44, 0x6d, 0x6b, 0xb4, 0x71, 0xe8, 0xc6, 0xb1, 0x0a, 0xfd, 0xe2, 0xab, 0xc2, 0x47, 0xbd, 0xfe,
		0x7d, 0xfe, 0xb1, 0xec, 0xec, 0x9c, 0xfe, 0xf8, 0x58, 0x71, 0x76, 0x4e, 0x47, 0xff, 0xac, 0x24,
		0x5f, 0xbe, 0x57, 0xaf, 0x7f, 0x54, 0x3f, 0x96, 0x9d, 0xda, 0xf8, 0xa7, 0xd5, 0xfa, 0xc7, 0xb2,
		0x53, 0x3f, 0xdd, 0x78, 0xfe, 0xe9, 0xd3, 0xcb, 0x45, 0x3f, 0xb3, 0xf1, 0x7d, 0xf3, 0x3a, 0x7d,
		0xb8, 0x9c, 0xea, 0xbc, 0xa6, 0x83, 0xe3, 0xfd, 0x3f, 0xc4, 0xde, 0xd5, 0x7f, 0x9e, 0xdb, 0x7a,
		0x5b, 0x1b, 0x7f, 0xd3, 0x78, 0x5f, 0xcf, 0xec, 0x24, 0x65, 0x8a, 0x84, 0xbc, 0x37, 0x36, 0x35,
		0x4c, 0x0d, 0x7a, 0x0d, 0x06, 0x3d, 0x06, 0x3d, 0x06, 0x3d, 0xa1, 0x41, 0xaf, 0xb1, 0x7a, 0x83,
		0x5e, 0x82, 0xc9, 0xae, 0x73, 0xde, 0x74, 0xde, 0x9e, 0x7e, 0xaf, 0xbc, 0xa8, 0x5d, 0xbf, 0xda,
		0xf8, 0xbe, 0x75, 0x7d, 0xff, 0x87, 0x3f, 0x1e, 0xfb, 0xb5, 0xca, 0x8b, 0xad, 0xeb, 0x57, 0x33,
		0xfe, 0xa7, 0x71, 0xfd, 0x6a, 0xce, 0x36, 0xea, 0xd7, 0xcf, 0x1f, 0xfc, 0xea, 0xf0, 0xe7, 0xd5,
		0x59, 0x1f, 0xa8, 0xcd, 0xf8, 0xc0, 0xe6, 0xac, 0x0f, 0x6c, 0xce, 0xf8, 0xc0, 0xcc, 0x5b, 0xaa,
		0xce, 0xf8, 0x40, 0xfd, 0xfa, 0xc7, 0x83, 0xdf, 0x7f, 0xfe, 0xf8, 0xaf, 0x36, 0xae, 0x37, 0x7e,
		0xcc, 0xfa, 0xbf, 0xad, 0xeb, 0x1f, 0xaf, 0x36, 0x36, 0x56, 0x88, 0x06, 0x10, 0x3e, 0xf6, 0xc3,
		0xc7, 0x3e, 0x2d, 0x4a, 0x09, 0xc0, 0xef, 0xbc, 0x28, 0x6e, 0xc6, 0x71, 0xa8, 0x07, 0xc2, 0xef,
		0x3d, 0x7f, 0xaf, 0xab, 0x86, 0x23, 0x51, 0x94, 0x9e, 0x4c, 0x8c, 0x5a, 0x72, 0xbf, 0xdd, 0x6a,
		0xa9, 0xb2, 0x5d, 0xab, 0x35, 0xb6, 0x6a, 0xb5, 0xf2, 0xd6, 0xe6, 0x56, 0x79, 0xa7, 0x5e, 0xaf,
		0x34, 0x2a, 0x75, 0x8d, 0xc6, 0x0f, 0xc2, 0x8e, 0x0a, 0x55, 0xe7, 0xf5, 0x55, 0xf1, 0x55, 0xc1,
		0x1f, 0x74, 0xbb, 0x39, 0x26, 0xa0, 0xe7, 0x7f, 0x75, 0x7c, 0x7d, 0xb6, 0x99, 0xb4, 0x02, 0xb5,
		0x84, 0x5a, 0x42, 0x2d, 0x35, 0xa2, 0xa7, 0x13, 0xf4, 0x5c, 0xcf, 0x77, 0xfc, 0xe1, 0xb7, 0x19,
		0x33, 0xcb, 0x77, 0xca, 0xbf, 0x88, 0x2f, 0xb5, 0xa9, 0x81, 0x5e, 0xf4, 0x4e, 0x20, 0x5f, 0x3b,
		0x0d, 0x84, 0xb0, 0xe6, 0x41, 0x73, 0xbf, 0xbb, 0xdd, 0x81, 0x5a, 0x7c, 0x72, 0x65, 0x66, 0x7b,
		0x6f, 0x43, 0xb7, 0x1d, 0x7b, 0x81, 0xbf, 0xeb, 0x5d, 0x78, 0xa3, 0x11, 0x4e, 0xbb, 0xdd, 0xeb,
		0x17, 0x02, 0x5d, 0xe0, 0x7e, 0xcb, 0x7d, 0x17, 0x54, 0xeb, 0x9b, 0x39, 0xee, 0x84, 0x67, 0xd9,
		0x7c, 0xfa, 0x34, 0x1f, 0xda, 0xf2, 0xf9, 0xf3, 0x8f, 0xae, 0xf3, 0xdf, 0xa6, 0xf3, 0xef, 0xb2,
		0xb3, 0xd3, 0x3a, 0xbd, 0xf5, 0xcd, 0xa7, 0x4f, 0x4e, 0xeb, 0x74, 0xe3, 0x7b, 0xf9, 0x45, 0xa3,
		0x72, 0xbd, 0xf1, 0x7f, 0x37, 0x3f, 0x3f, 0xfd, 0xf4, 0xe9, 0xe5, 0xc6, 0xff, 0xa4, 0xf9, 0xd4,
		0xff, 0x6d, 0xfc, 0x18, 0x7e, 0x76, 0x45, 0x54, 0x95, 0xfd, 0x17, 0xb7, 0xa2, 0x36, 0xab, 0xd7,
		0xd1, 0xe7, 0xb8, 0x5e, 0x07, 0x86, 0x0b, 0xc3, 0x85, 0xe1, 0xea, 0x44, 0x4f, 0x14, 0x87, 0x9e,
		0x7f, 0x21, 0x42, 0x6e, 0x6d, 0xa1, 0x8d, 0xd1, 0xc5, 0x12, 0x4d, 0xdf, 0x0f, 0x62, 0x77, 0xc8,
		0x36, 0xd2, 0xad, 0x99, 0x88, 0xda, 0x97, 0xaa, 0xe7, 0xf6, 0xdd, 0x84, 0xaa, 0x17, 0x4b, 0x41,
		0x5f, 0xf9, 0xa3, 0x55, 0x42, 0xce, 0x9d, 0x40, 0x2b, 0xcd, 0xfe, 0xae, 0xf4, 0xd8, 0x0a, 0xcc,
		0xd2, 0xcd, 0xbf, 0x4b, 0xa9, 0x56, 0x1d, 0x8d, 0x6e, 0x2e, 0x0e, 0x07, 0xed, 0xd8, 0x1f, 0x77,
		0xfd, 0xc1, 0xf4, 0xde, 0x9a, 0xc9, 0xe5, 0x0f, 0x93, 0x7b, 0x69, 0xcd, 0xfa, 0xa6, 0xd5, 0x1c,
		0xdf, 0x57, 0xb3, 0xff, 0x7e, 0x7c, 0x57, 0xad, 0xe9, 0x3f, 0x5b, 0x63, 0x48, 0x7c, 0x66, 0xa6,
		0x27, 0x17, 0xe8, 0xc5, 0x34, 0x23, 0x4b, 0xfa, 0x11, 0x25, 0xe5, 0x48, 0xc2, 0x62, 0x2e, 0x16,
		0x73, 0xa5, 0xc3, 0xa7, 0xd4, 0xc8, 0x3f, 0xed, 0xfd, 0xae, 0x72, 0xcf, 0x43, 0x75, 0x9e, 0xa6,
		0xdf, 0x27, 0x50, 0xbf, 0x95, 0xe2, 0xb3, 0x87, 0x63, 0x48, 0x7c, 0xf9, 0x72, 0x0c, 0x60, 0x25,
		0xaf, 0x93, 0x07, 0xb8, 0x88, 0x62, 0x37, 0x56, 0xe9, 0x11, 0x63, 0xf4, 0x71, 0xcb, 0x2b, 0x40,
		0xab, 0x80, 0x06, 0xa0, 0xb1, 0xc0, 0x8d, 0xb2, 0x02, 0x14, 0x3d, 0x87, 0x9e, 0x5b, 0x0b, 0x3d,
		0xc7, 0x0a, 0x50, 0x56, 0x80, 0xb2, 0x02, 0x54, 0xcb, 0x9a, 0x64, 0x05, 0x28, 0x83, 0x1e, 0x83,
		0xde, 0x92, 0x0d, 0x7a, 0xac, 0x00, 0x65, 0x09, 0x1f, 0x2b, 0x40, 0x1f, 0xd0, 0x00, 0xc2, 0x87,
		0x15, 0xa0, 0x33, 0x63, 0x84, 0x15, 0xa0, 0xf9, 0x24, 0xa0, 0xac, 0x00, 0x85, 0x5a, 0x42, 0x2d,
		0x0b, 0xac, 0x00, 0xbd, 0x07, 0xd7, 0xac, 0x00, 0x9d, 0xa3, 0x39, 0x56, 0x80, 0xe6, 0xa6, 0x0b,
		0x58, 0x01, 0x2a, 0x2d, 0x11, 0x58, 0x01, 0x9a, 0xb9, 0xaa, 0x62, 0x05, 0xa8, 0x10, 0xcb, 0x65,
		0x05, 0x28, 0x0c, 0x17, 0x86, 0xcb, 0x0a, 0x50, 0x3b, 0x68, 0xf3, 0xff, 0x02, 0xcf, 0x57, 0x02,
		0x88, 0x33, 0x6e, 0x07, 0xd4, 0x01, 0x75, 0x40, 0x1d, 0x8d, 0xe8, 0x39, 0x0b, 0x82, 0xae, 0x72,
		0x7d, 0x09, 0xd8, 0xa9, 0xb0, 0xf0, 0xdc, 0xce, 0xc2, 0xf3, 0x34, 0x6b, 0x1d, 0x0b, 0x86, 0xd7,
		0x9d, 0x1f, 0x27, 0xf7, 0x64, 0x6a, 0x1d, 0xa9, 0x68, 0x79, 0xd2, 0x7f, 0xa8, 0xab, 0x85, 0x38,
		0x6b, 0x3a, 0x7f, 0x3e, 0xbd, 0x1f, 0x2f, 0xea, 0xbf, 0xa7, 0xf3, 0xdb, 0xe7, 0x7d, 0x95, 0x29,
		0x93, 0xc5, 0x42, 0x92, 0x14, 0x17, 0x5a, 0x7a, 0x6c, 0x2a, 0x2d, 0xe6, 0x4b, 0x88, 0x6b, 0xc3,
		0x65, 0xa4, 0x17, 0xec, 0x25, 0x53, 0xbd, 0x33, 0x4f, 0x31, 0x70, 0xe9, 0xae, 0xf8, 0x79, 0x07,
		0xcc, 0x7e, 0xad, 0x3f, 0x79, 0xa5, 0xf3, 0x56, 0x2b, 0x5e, 0xac, 0x3a, 0x31, 0xb5, 0xdb, 0x8d,
		0x50, 0xc0, 0x25, 0xa8, 0xdd, 0x7e, 0x19, 0x44, 0x93, 0x80, 0x5f, 0xb0, 0x72, 0xfb, 0xf4, 0x93,
		0x8b, 0xd5, 0x6d, 0x2f, 0x53, 0xb7, 0x9d, 0xba, 0xed, 0x22, 0xaa, 0x42, 0x63, 0x2f, 0x53, 0x9a,
		0x3d, 0x4c, 0xd3, 0xbd, 0x4b, 0xb7, 0xc6, 0xf9, 0x57, 0xfd, 0x30, 0xf8, 0xe2, 0x45, 0x5e, 0xe0,
		0x3b, 0x6e, 0x3f, 0x9a, 0xf5, 0x1f, 0xb7, 0x7f, 0x3e, 0xde, 0xf5, 0x74, 0xeb, 0x27, 0xd3, 0x3c,
		0x5a, 0xd7, 0xd1, 0x7a, 0xee, 0x9d, 0xac, 0x9a, 0xe3, 0xf3, 0x3c, 0x9b, 0x53, 0xd3, 0x8d, 0xc9,
		0x73, 0x83, 0xe8, 0xa2, 0xe0, 0x39, 0x27, 0x68, 0x32, 0x2e, 0x2f, 0xcb, 0xb8, 0x3c, 0x37, 0xc8,
		0xa5, 0x00, 0xb7, 0x45, 0x40, 0xed, 0x91, 0x8d, 0x98, 0xf3, 0xe1, 0x50, 0xba, 0x04, 0x09, 0xdd,
		0x8e, 0x17, 0x2c, 0x70, 0xfc, 0xd0, 0xf8, 0xf7, 0x97, 0x80, 0xb4, 0x06, 0x6d, 0xe7, 0xab, 0x77,
		0xee, 0x39, 0xfd, 0xcb, 0xab, 0xd5, 0x4b, 0x8d, 0xdb, 0x0f, 0x97, 0x17, 0xc2, 0x9a, 0x84, 0xc6,
		0xe2, 0x6c, 0x75, 0xf4, 0xb1, 0x15, 0x38, 0x62, 0x68, 0xb1, 0x80, 0x5b, 0x31, 0xa2, 0xba, 0x50,
		0x40, 0x9a, 0xa1, 0xa9, 0x1c, 0x2f, 0x24, 0x15, 0xd2, 0x42, 0xa1, 0x2d, 0x35, 0x83, 0x94, 0xf3,
		0xad, 0xe5, 0xa9, 0x42, 0xdf, 0xce, 0xa4, 0x45, 0xfa, 0x8d, 0xe5, 0xdd, 0x6e, 0xf0, 0x55, 0x75,
		0x9c, 0xf6, 0xa5, 0xeb, 0xfb, 0xaa, 0x2b, 0xb1, 0xb9, 0xee, 0x7e, 0x8b, 0x4c, 0xd1, 0x6a, 0xa6,
		0x95, 0x54, 0x7a, 0x89, 0xa7, 0x99, 0x78, 0xba, 0xc9, 0xa7, 0x5d, 0xba, 0xf4, 0x4b, 0x99, 0x86,
		0xe9, 0x8d, 0x94, 0xd9, 0x43, 0xcf, 0x38, 0x8b, 0x9c, 0x78, 0xd8, 0xa4, 0xfe, 0x24, 0xad, 0xce,
		0xce, 0x8d, 0x23, 0xd7, 0xbf, 0x50, 0x2c, 0x7b, 0xfe, 0x79, 0x73, 0x2c, 0x7b, 0xce, 0x4f, 0x17,
		0xd4, 0x56, 0x76, 0xd5, 0xf3, 0x0b, 0x52, 0xf0, 0xe9, 0xfe, 0xdf, 0x6c, 0x90, 0x83, 0xf4, 0x01,
		0x39, 0x98, 0x65, 0xff, 0xd7, 0xca, 0xe4, 0x20, 0x7d, 0x40, 0x0e, 0x66, 0xda, 0xff, 0x35, 0x72,
		0x90, 0x3e, 0x20, 0x07, 0x33, 0xed, 0xff, 0x6d, 0x72, 0x90, 0x3e, 0x20, 0x07, 0xb3, 0xec, 0xff,
		0x7a, 0x95, 0x1c, 0xa4, 0x0f, 0xc8, 0xc1, 0x4c, 0xfb, 0x1f, 0x4f, 0x86, 0x3e, 0x20, 0x07, 0x33,
		0xed, 0xff, 0x06, 0x9e, 0x0c, 0x7d, 0x40, 0x0e, 0x66, 0xdb, 0xff, 0x78, 0x32, 0xf4, 0x01, 0x39,
		0x98, 0x69, 0xff, 0x57, 0xca, 0x0c, 0x84, 0x74, 0x02, 0x59, 0x98, 0x75, 0x00, 0x30, 0x14, 0xd2,
		0x09, 0x64, 0x61, 0xd6, 0x01, 0xc0, 0x04, 0x05, 0x9d, 0x40, 0x16, 0x66, 0x1c, 0x00, 0x15, 0xa6,
		0x28, 0xe8, 0x04, 0xb2, 0x30, 0xeb, 0x00, 0x60, 0x92, 0x82, 0x4e, 0x20, 0x0b, 0x33, 0x0e, 0x80,
		0x2a, 0xee, 0x0c, 0x9d, 0x40, 0x16, 0x66, 0x1d, 0x00, 0xb8, 0x33, 0x74, 0x02, 0x59, 0x98, 0x75,
		0x00, 0xe0, 0xce, 0xd0, 0x09, 0x64, 0x61, 0xc6, 0x01, 0xb0, 0x89, 0x3b, 0x43, 0x27, 0x90, 0x85,
		0x59, 0x07, 0x00, 0xee, 0x0c, 0x9d, 0x40, 0x16, 0x66, 0x1c, 0x00, 0x6c, 0xec, 0xa5, 0x13, 0xc8,
		0xc2, 0xcc, 0x03, 0x00, 0x77, 0x86, 0x4e, 0x20, 0x0b, 0xb3, 0x0e, 0x80, 0x1d, 0xb2, 0x90, 0x4e,
		0x20, 0x0b, 0xb3, 0x0d, 0x80, 0x5c, 0x1f, 0x72, 0xbc, 0x2e, 0x59, 0xb8, 0xc2, 0x27, 0x4d, 0x93,
		0x85, 0x73, 0x05, 0xc0, 0x16, 0x59, 0x48, 0x27, 0x90, 0x85, 0xd9, 0x06, 0x40, 0x83, 0xf2, 0xa3,
		0x74, 0x02, 0x59, 0x98, 0x75, 0x00, 0xd4, 0xc9, 0x42, 0x3a, 0xc1, 0x5c, 0x16, 0xa6, 0xfe, 0xf4,
		0xa9, 0xd5, 0x6a, 0xe8, 0xa9, 0x8e, 0xcf, 0x7d, 0x2c, 0xe3, 0xd3, 0x1d, 0xa7, 0xfb, 0x58, 0xd8,
		0x8a, 0x1d, 0xaf, 0xfb, 0xa0, 0xf1, 0x54, 0xc7, 0xed, 0xea, 0xf7, 0x6c, 0x9a, 0xa3, 0xf8, 0x5d,
		0x3f, 0x56, 0xbe, 0xef, 0x3a, 0x17, 0xae, 0x06, 0x98, 0xde, 0x9c, 0xfb, 0x70, 0xbb, 0x35, 0xce,
		0x7c, 0xe0, 0xcc, 0x87, 0x45, 0x1b, 0xe4, 0xcc, 0x87, 0x71, 0xe4, 0x78, 0x7e, 0xbc, 0x2d, 0x71,
		0x1e, 0x3f, 0x47, 0x3d, 0x88, 0xbf, 0x98, 0xc7, 0x29, 0x06, 0xab, 0x33, 0x73, 0xc0, 0xf3, 0xaa,
		0x5b, 0xf0, 0x3c, 0x21, 0x9e, 0x67, 0x85, 0x7d, 0x9c, 0x45, 0x91, 0xd3, 0x0e, 0xba, 0x41, 0xe8,
		0x78, 0x1d, 0x7d, 0xf6, 0x71, 0xa7, 0x35, 0xd8, 0x07, 0xec, 0x03, 0xf6, 0x91, 0x32, 0x72, 0x06,
		0x42, 0xf4, 0x83, 0x93, 0xa6, 0x6c, 0x8d, 0x7c, 0x90, 0x8f, 0xac, 0xbb, 0xa0, 0xb1, 0x09, 0xf7,
		0x58, 0x4a, 0xee, 0xe1, 0xf9, 0x17, 0x82, 0xdc, 0x63, 0xd8, 0x5a, 0x4a, 0xfc, 0xde, 0x55, 0xe7,
		0xee, 0xa0, 0x9b, 0x8c, 0x3e, 0xc3, 0xc1, 0x0c, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0xa4, 0x4e, 0xc8,
		0x20, 0xe8, 0x2a, 0xd7, 0x97, 0xf0, 0x50, 0x2a, 0x39, 0x46, 0xb1, 0xf1, 0xd9, 0xa0, 0xfa, 0x00,
		0x36, 0x69, 0x08, 0xd0, 0x01, 0x74, 0x00, 0x1d, 0x74, 0x13, 0xba, 0x09, 0xdd, 0x64, 0xa7, 0x0b,
		0x98, 0x9c, 0x5f, 0x2e, 0xe1, 0x34, 0x66, 0x0a, 0xce, 0x57, 0xaf, 0x13, 0x5f, 0x8a, 0x11, 0x8f,
		0x71, 0x73, 0xfa, 0xd2, 0xa9, 0x5a, 0x86, 0xc3, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0x98, 0x35, 0xe1,
		0x30, 0x6c, 0xc2, 0xce, 0xbc, 0x0b, 0xaa, 0x75, 0x38, 0xcc, 0x52, 0x71, 0x98, 0x4e, 0xdb, 0xd5,
		0x67, 0x2e, 0xc3, 0x46, 0xb0, 0x7a, 0x61, 0x2c, 0x30, 0x96, 0x6c, 0x19, 0xcb, 0x9a, 0x58, 0xbd,
		0x9d, 0xb8, 0x2f, 0x80, 0x59, 0x71, 0x1f, 0xcc, 0x02, 0xb3, 0xc0, 0x2c, 0x30, 0xcb, 0x12, 0x66,
		0x39, 0x3d, 0x0d, 0x02, 0x7f, 0x1b, 0xb7, 0x92, 0x86, 0xf4, 0xb1, 0xab, 0x52, 0x07, 0xb9, 0x40,
		0x2e, 0x90, 0x2b, 0x6d, 0xe4, 0xb0, 0x33, 0xc1, 0xac, 0x3d, 0xc4, 0xce, 0x84, 0x15, 0x34, 0x88,
		0xd8, 0x99, 0x20, 0x67, 0x10, 0xa5, 0x44, 0x40, 0xf5, 0x2d, 0x0e, 0x5d, 0x67, 0xe0, 0x47, 0xb1,
		0x7b, 0xd6, 0xd5, 0xc4, 0xc2, 0xaf, 0x97, 0xca, 0xcf, 0x03, 0xfe, 0x4c, 0x30, 0xf9, 0xe5, 0xcb,
		0x52, 0x27, 0xee, 0x17, 0xfe, 0xb7, 0xf0, 0xf7, 0xe1, 0x48, 0xf7, 0xf7, 0xa2, 0x40, 0x56, 0x09,
		0x8d, 0xec, 0x8f, 0x8d, 0xf0, 0xc9, 0xdb, 0x13, 0x4a, 0x07, 0xe9, 0x71, 0xfe, 0xd1, 0xf1, 0xfe,
		0xfe, 0xeb, 0xc5, 0x92, 0x35, 0x25, 0x15, 0x24, 0x36, 0x21, 0x4f, 0x1a, 0xd2, 0x97, 0x0a, 0x9b,
		0x28, 0x05, 0x94, 0x02, 0x4a, 0x01, 0xa5, 0x80, 0x52, 0x40, 0x29, 0xa0, 0x14, 0x50, 0x0a, 0x28,
		0x05, 0x94, 0x02, 0x4a, 0x21, 0x6b, 0xa5, 0xa0, 0xfc, 0x61, 0x5e, 0x0a, 0x14, 0x0c, 0x98, 0x34,
		0xc4, 0x84, 0x28, 0x62, 0x01, 0xb1, 0x90, 0xad, 0x58, 0x58, 0x93, 0x09, 0x51, 0x89, 0x3a, 0x27,
		0x54, 0x37, 0x01, 0x6a, 0x80, 0x9a, 0xf4, 0x91, 0xc3, 0x0a, 0x77, 0xc3, 0xc6, 0x04, 0x2b, 0xdc,
		0x57, 0xce, 0x96, 0x60, 0x85, 0xfb, 0x92, 0x89, 0xa4, 0xa0, 0xaf, 0x42, 0x37, 0xf6, 0xfc, 0x0b,
		0xe7, 0x3c, 0x54, 0x7f, 0x0d, 0x94, 0xdf, 0xbe, 0xd2, 0x67, 0x1e, 0x8f, 0x35, 0x0a, 0x15, 0x81,
		0x8a, 0x40, 0x45, 0x52, 0x53, 0x79, 0xe5, 0xc7, 0x5e, 0x7c, 0x15, 0xaa, 0x73, 0x09, 0xe5, 0xa3,
		0xc3, 0x48, 0xf6, 0xc7, 0xb7, 0xf2, 0xda, 0x8d, 0x04, 0x62, 0x70, 0xf2, 0x80, 0x07, 0x87, 0x7b,
		0x47, 0xcd, 0x93, 0xfd, 0x0f, 0xbf, 0xb4, 0xde, 0x1e, 0xed, 0xfd, 0xf3, 0xb7, 0xbd, 0x0f, 0x6f,
		0xfe, 0xd4, 0x8d, 0xc6, 0x64, 0x48, 0x8a, 0xb4, 0xb9, 0x93, 0x0c, 0x7f, 0xba, 0xf3, 0xb0, 0xc3,
		0x47, 0x6c, 0x55, 0x7f, 0xf9, 0xf5, 0xdf, 0xc5, 0x3c, 0xf0, 0x0a, 0x23, 0x0f, 0xd7, 0xaa, 0xb7,
		0x56, 0xf9, 0xf9, 0xea, 0x32, 0x0f, 0xa7, 0xd5, 0xc2, 0xa9, 0x6d, 0x14, 0xb4, 0xc2, 0x47, 0xa2,
		0xb6, 0xeb, 0xfb, 0x22, 0xa5, 0xd6, 0xa6, 0x2d, 0x61, 0xdb, 0x42, 0x60, 0x20, 0x30, 0xd9, 0x12,
		0x98, 0x35, 0xb1, 0x6d, 0x27, 0x98, 0xe3, 0x74, 0xd4, 0xb9, 0x0a, 0x9d, 0x76, 0xd7, 0x1b, 0x9f,
		0x1c, 0x22, 0x84, 0x65, 0xf7, 0xda, 0x05, 0x92, 0x80, 0x24, 0x20, 0x29, 0x65, 0xe4, 0x60, 0xef,
		0xde, 0xf6, 0x16, 0xb1, 0x77, 0x33, 0x96, 0x29, 0xd8, 0xbb, 0xd9, 0xca, 0xa9, 0xd5, 0xb4, 0x77,
		0xef, 0x11, 0x87, 0x38, 0x74, 0xcf, 0xcf, 0xbd, 0xb6, 0x38, 0x21, 0x99, 0xb4, 0x0b, 0x21, 0x81,
		0x90, 0x40, 0x48, 0xd0, 0x48, 0xf3, 0x41, 0xd2, 0x57, 0xd5, 0xed, 0x3a, 0xb1, 0xd7, 0x53, 0x92,
		0x78, 0x74, 0xd3, 0x28, 0x60, 0x04, 0x18, 0x01, 0x46, 0x1a, 0xea, 0xa8, 0xd2, 0x10, 0xc0, 0xa2,
		0x06, 0xf2, 0x08, 0x79, 0xb4, 0x2e, 0x67, 0xfb, 0xd4, 0xeb, 0x9b, 0x08, 0xa4, 0xe5, 0x14, 0x48,
		0x9e, 0x1f, 0xab, 0xf0, 0x8b, 0xdb, 0x15, 0xe4, 0x22, 0xd3, 0x26, 0x61, 0x22, 0x30, 0x11, 0x98,
		0x88, 0x06, 0x13, 0xc1, 0xa7, 0x85, 0x88, 0x40, 0x44, 0xe6, 0xef, 0x02, 0x7c, 0xda, 0x25, 0xa3,
		0x21, 0x71, 0xe8, 0xfa, 0x51, 0xcf, 0x8b, 0x1d, 0xe5, 0x85, 0x02, 0xe5, 0x5b, 0xef, 0x36, 0x07,
		0xfd, 0x80, 0x7e, 0x40, 0x3f, 0xa0, 0x1f, 0xd0, 0x0f, 0xe8, 0x07, 0xf4, 0x03, 0xfa, 0xf1, 0x13,
		0xfa, 0xd1, 0x0f, 0xbe, 0xaa, 0x50, 0x90, 0x7f, 0x8c, 0xda, 0xd3, 0x5f, 0x81, 0xbb, 0x03, 0x89,
		0x81, 0xc4, 0x40, 0x62, 0xd2, 0x46, 0x0e, 0x25, 0xd6, 0xcc, 0x72, 0x18, 0x4a, 0xac, 0xad, 0x20,
		0x8b, 0xa1, 0xc4, 0x5a, 0x96, 0x2c, 0xe6, 0x99, 0xc1, 0x90, 0x2c, 0x36, 0x7d, 0x3f, 0x88, 0xdd,
		0x61, 0x97, 0xa4, 0x8a, 0xc2, 0x62, 0xd4, 0xbe, 0x54, 0x3d, 0xb7, 0xef, 0x26, 0x07, 0x9b, 0x16,
		0x4b, 0x41, 0x5f, 0xf9, 0xed, 0x84, 0x29, 0x38, 0x6e, 0xbb, 0xad, 0xa2, 0xc8, 0xe9, 0x07, 0x9e,
		0x1f, 0x47, 0xa5, 0xd9, 0xdf, 0x95, 0x42, 0xb7, 0xe3, 0x05, 0xd1, 0xe8, 0x4b, 0x69, 0xf4, 0xe1,
		0x62, 0x9a, 0xf9, 0xab, 0x38, 0x1c, 0xb4, 0x63, 0x7f, 0xb2, 0x8d, 0x72, 0x7a, 0x23, 0xcd, 0xe4,
		0x5a, 0x87, 0xc9, 0x85, 0x5b, 0xb3, 0xbe, 0x69, 0x1d, 0x25, 0x37, 0x31, 0xfa, 0xd2, 0x1a, 0x73,
		0x9d, 0x67, 0x66, 0xba, 0x69, 0x81, 0x2e, 0x4a, 0x53, 0xfd, 0x26, 0x7d, 0xd5, 0x9b, 0x94, 0xf0,
		0x91, 0x9a, 0x1a, 0xea, 0x50, 0x42, 0x21, 0x2a, 0xa8, 0x4b, 0x01, 0xc5, 0xa8, 0x9f, 0x18, 0xe5,
		0x93, 0xa3, 0x7a, 0x66, 0x81, 0x27, 0x35, 0xa5, 0x9b, 0xf6, 0x7c, 0x57, 0xb9, 0xe7, 0xe9, 0xb6,
		0x81, 0x4f, 0xc9, 0x4a, 0x8a, 0x61, 0xad, 0x78, 0x38, 0xc6, 0xba, 0x97, 0x2f, 0xc7, 0x60, 0x55,
		0xf2, 0x3a, 0x79, 0x80, 0x0a, 0x5f, 0x79, 0x17, 0x97, 0x67, 0x41, 0x18, 0xa5, 0x47, 0x8c, 0x9b,
		0x26, 0xd2, 0x01, 0x47, 0x05, 0xe0, 0x00, 0x38, 0x4c, 0x03, 0xc7, 0xae, 0x97, 0xce, 0x96, 0x99,
		0x46, 0xb7, 0xbe, 0xa9, 0x33, 0x6d, 0x49, 0xcf, 0x8a, 0xa9, 0xe8, 0x5a, 0x31, 0x55, 0xac, 0x18,
		0xac, 0x18, 0xcb, 0x56, 0x4c, 0xda, 0xf4, 0x9b, 0x36, 0x70, 0x16, 0x45, 0x1a, 0x35, 0x1d, 0x1f,
		0xc4, 0xdf, 0xa8, 0x39, 0xcd, 0x3e, 0x91, 0xd1, 0xcd, 0xda, 0x89, 0x29, 0x99, 0xa0, 0x86, 0x12,
		0x55, 0x3a, 0x61, 0x8d, 0x25, 0xae, 0xb1, 0x04, 0x36, 0x97, 0xc8, 0x42, 0x8e, 0x86, 0x66, 0xec,
		0x69, 0x7b, 0xad, 0x82, 0x44, 0x5d, 0x92, 0xb8, 0xff, 0x8c, 0xc8, 0x47, 0xb1, 0x1b, 0xab, 0xd2,
		0x08, 0x4a, 0x32, 0xb2, 0x93, 0x34, 0xba, 0xad, 0x98, 0xdc, 0xbe, 0x1c, 0xa4, 0x8e, 0x9a, 0x93,
		0x81, 0xd4, 0x0a, 0x90, 0x0a, 0xa4, 0xae, 0x3b, 0xa4, 0xea, 0x72, 0xa6, 0xdb, 0xdc, 0xc9, 0x69,
		0x07, 0xdd, 0x20, 0x74, 0x04, 0x28, 0xd4, 0x63, 0x54, 0xea, 0xa6, 0xf5, 0x17, 0xb9, 0x9c, 0x91,
		0xd0, 0x9d, 0x85, 0x36, 0x09, 0x0b, 0x86, 0xe1, 0xc1, 0x14, 0x4c, 0x18, 0x87, 0x0b, 0xe3, 0xb0,
		0x61, 0x1e, 0x3e, 0x64, 0x60, 0x44, 0x08, 0x4e, 0xe4, 0x99, 0xda, 0x83, 0xc8, 0xd5, 0x5d, 0xea,
		0x37, 0x0b, 0x06, 0xea, 0x82, 0x4d, 0xca, 0x4c, 0xa3, 0xdf, 0xff, 0x23, 0x9b, 0x53, 0x05, 0xe9,
		0x69, 0x76, 0xc3, 0xf8, 0xfa, 0xa0, 0xf9, 0xe9, 0x0c, 0xb0, 0xa1, 0xf6, 0x0d, 0xcc, 0x07, 0x1b,
		0xca, 0xb6, 0xbb, 0x5d, 0xea, 0x7e, 0x5b, 0xfa, 0x2e, 0x6d, 0x6c, 0x2e, 0x71, 0x9f, 0x3e, 0xcb,
		0x67, 0x6b, 0xa7, 0xcf, 0xf2, 0x71, 0x3f, 0x12, 0x0b, 0x53, 0x64, 0x7c, 0x3a, 0x23, 0x7e, 0x1d,
		0xec, 0x12, 0x76, 0x09, 0xbb, 0x5c, 0x5a, 0x76, 0xd9, 0x73, 0xdb, 0x8e, 0xdb, 0xe9, 0x84, 0x2a,
		0x8a, 0x0c, 0x70, 0xcc, 0xca, 0xb6, 0x60, 0x9b, 0x87, 0x6e, 0x1c, 0xab, 0xd0, 0x17, 0xa7, 0x99,
		0xc5, 0x8f, 0x65, 0x67, 0xc7, 0x75, 0xce, 0x9b, 0xce, 0xdb, 0xd3, 0xef, 0xd5, 0xeb, 0xe7, 0xaf,
		0xee, 0x7e, 0xbf, 0xf1, 0xbd, 0x7e, 0x2d, 0x17, 0x57, 0xa7, 0x92, 0x2f, 0xe4, 0xe0, 0x78, 0xff,
		0x0f, 0x63, 0x6f, 0xe5, 0x3f, 0x4f, 0xbf, 0x96, 0xbf, 0x15, 0x19, 0xad, 0x1f, 0x79, 0x73, 0xed,
		0x4b, 0xd7, 0xf7, 0x55, 0x57, 0x7e, 0xbc, 0x9e, 0x34, 0xcc, 0x88, 0xcd, 0x88, 0xcd, 0x88, 0xbd,
		0xc6, 0x7e, 0x90, 0x56, 0x0d, 0xac, 0x59, 0x38, 0xd0, 0xc0, 0x10, 0x5a, 0x4e, 0xf7, 0xa0, 0x8c,
		0x21, 0xb4, 0x72, 0x86, 0x90, 0x5c, 0xcd, 0x2e, 0x3c, 0xa1, 0xd5, 0x64, 0x99, 0x5d, 0x37, 0x8a,
		0x9d, 0x48, 0x29, 0x5f, 0x9e, 0x67, 0xde, 0x34, 0x0d, 0xd3, 0x84, 0x69, 0xc2, 0x34, 0xd7, 0x94,
		0x69, 0xc6, 0x5e, 0x4f, 0xc5, 0x5e, 0xfb, 0x73, 0xd4, 0xa8, 0x19, 0xa0, 0x9b, 0x92, 0xd6, 0xd0,
		0x6f, 0xfe, 0x68, 0x24, 0x2b, 0xfa, 0xae, 0x1f, 0x44, 0xaa, 0x1d, 0xf8, 0x1d, 0x51, 0x3b, 0x0b,
		0x3a, 0x0b, 0x9d, 0x85, 0xce, 0xa6, 0xef, 0xd2, 0xca, 0x76, 0xad, 0xd6, 0xd8, 0xaa, 0xd5, 0xca,
		0x5b, 0x9b, 0x5b, 0xe5, 0x9d, 0x7a, 0xbd, 0xd2, 0xa8, 0xc0, 0x6e, 0x61, 0xb7, 0x3f, 0xe9, 0xc6,
		0xa0, 0xdf, 0x0b, 0x3a, 0x4a, 0x9e, 0xda, 0x8e, 0xdb, 0x85, 0xd7, 0xc2, 0x6b, 0xe1, 0xb5, 0x6b,
		0xca, 0x6b, 0x95, 0x3f, 0xe8, 0x25, 0x47, 0xc1, 0x07, 0xbe, 0x89, 0x39, 0xcf, 0x9a, 0x60, 0x9b,
		0x7b, 0xfe, 0xa0, 0x37, 0x7c, 0x09, 0xf9, 0xea, 0x1a, 0xf5, 0x2d, 0x0e, 0x5d, 0x67, 0xe0, 0x47,
		0xb1, 0x7b, 0xd6, 0x15, 0xee, 0xa4, 0x50, 0x9d, 0xab, 0x50, 0xf9, 0xed, 0xa5, 0xa0, 0xdb, 0x93,
		0x88, 0x3a, 0x56, 0x09, 0xe7, 0x28, 0x54, 0xaa, 0x2f, 0x1b, 0x2f, 0x2b, 0x2f, 0x37, 0x0b, 0xc1,
		0x79, 0x21, 0xbe, 0x54, 0x85, 0xed, 0x72, 0xf5, 0x65, 0xa5, 0xe2, 0x54, 0xcb, 0x95, 0x46, 0x21,
		0xea, 0xab, 0xb6, 0x77, 0xee, 0xb5, 0x93, 0xb8, 0x7b, 0x59, 0x34, 0xc0, 0x14, 0x0d, 0x41, 0xe7,
		0x63, 0x10, 0x7a, 0xd3, 0x4b, 0x86, 0x68, 0x9c, 0x69, 0x34, 0x7d, 0x14, 0x55, 0x53, 0x74, 0x23,
		0xe4, 0x72, 0x09, 0xc9, 0x65, 0x3f, 0xf4, 0x7a, 0x6e, 0x78, 0xe5, 0x18, 0x9b, 0xa8, 0xbf, 0x7f,
		0x01, 0xe8, 0x26, 0x74, 0x13, 0xba, 0xb9, 0xa6, 0x74, 0x93, 0x09, 0x7b, 0x51, 0x3b, 0x0c, 0x87,
		0x33, 0x53, 0xef, 0x0b, 0x87, 0xf3, 0xd1, 0x2e, 0x65, 0xc2, 0x1e, 0xd6, 0xf9, 0x94, 0xb2, 0x8d,
		0x22, 0x4f, 0x9e, 0x6a, 0x26, 0xad, 0xc2, 0x2f, 0xe1, 0x97, 0xf0, 0xcb, 0x35, 0xe5, 0x97, 0x86,
		0xf6, 0x07, 0x57, 0x60, 0x97, 0x66, 0xa8, 0x48, 0xc5, 0xf4, 0x64, 0x6b, 0x75, 0x1b, 0x7e, 0xb9,
		0x6a, 0xfc, 0x52, 0xac, 0xec, 0x37, 0xec, 0x72, 0x35, 0xd9, 0xa5, 0x99, 0x1d, 0xc2, 0x6c, 0x10,
		0x86, 0x5d, 0xc2, 0x2e, 0xd7, 0x99, 0x5d, 0x46, 0x71, 0xe8, 0xf9, 0x17, 0x46, 0xf6, 0x06, 0xe7,
		0x05, 0x7d, 0x33, 0xad, 0x47, 0xa6, 0x79, 0xe8, 0xc3, 0xc3, 0x71, 0x40, 0xf8, 0x10, 0x88, 0x69,
		0x1d, 0xf2, 0xe9, 0xbf, 0x4a, 0x12, 0x35, 0x09, 0x0b, 0xc2, 0xc7, 0x44, 0x7c, 0x98, 0xdc, 0xe6,
		0xf4, 0x5f, 0xad, 0xe3, 0xe4, 0x36, 0xb3, 0x2a, 0x21, 0x69, 0xb5, 0x10, 0xf0, 0x3f, 0xd4, 0x95,
		0x6e, 0x3d, 0x8f, 0xe2, 0x3b, 0x2f, 0x8a, 0x9b, 0x71, 0xac, 0x59, 0x51, 0xf8, 0xbd, 0xe7, 0xef,
		0x75, 0xd5, 0x10, 0x79, 0x23, 0xbd, 0xa1, 0x79, 0xc8, 0xda, 0x6f, 0xb5, 0x24, 0xbb, 0x82, 0xb4,
		0x78, 0x10, 0x76, 0x54, 0xa8, 0x3a, 0xaf, 0x87, 0xaf, 0xcd, 0x1f, 0x74, 0xbb, 0x56, 0x7b, 0x4b,
		0x28, 0xe5, 0x2d, 0xa4, 0x7a, 0x51, 0xab, 0x10, 0xaa, 0xc1, 0xe4, 0x2e, 0x72, 0xe0, 0x8f, 0xc9,
		0x00, 0xc8, 0xf8, 0xcc, 0x9f, 0x69, 0x7f, 0xe7, 0xe1, 0x2c, 0x8f, 0xa0, 0x9f, 0xac, 0x15, 0xf4,
		0x2f, 0x9c, 0xf3, 0x50, 0xfd, 0x35, 0x50, 0x7e, 0xfb, 0x2a, 0xfd, 0xa9, 0x1e, 0x8f, 0x35, 0xc6,
		0xc1, 0x40, 0x86, 0x65, 0x0e, 0xe7, 0x7b, 0xa4, 0x05, 0xa8, 0x15, 0x3a, 0x18, 0xe8, 0xb1, 0xcc,
		0xcb, 0x01, 0xba, 0xa4, 0x2b, 0x17, 0xae, 0x55, 0x1e, 0x5c, 0xfb, 0x84, 0xa0, 0x2a, 0x08, 0x02,
		0x82, 0xcc, 0x79, 0x9b, 0xa9, 0x4f, 0x08, 0x72, 0xbb, 0xdd, 0xe0, 0xab, 0xea, 0x4c, 0x96, 0x50,
		0x46, 0xfa, 0x27, 0x05, 0x3d, 0x68, 0x91, 0xc3, 0x9b, 0x39, 0x31, 0x28, 0x73, 0x5f, 0x71, 0x59,
		0x0f, 0x6f, 0x9e, 0x64, 0x91, 0x13, 0x0f, 0x9b, 0xd4, 0x3f, 0xc5, 0xb9, 0xce, 0x29, 0xce, 0xa2,
		0x38, 0xf3, 0xa0, 0x39, 0xe1, 0xf2, 0xd1, 0x9c, 0xe1, 0xac, 0xd1, 0x05, 0xb5, 0x95, 0x3d, 0xc2,
		0xf9, 0x05, 0x29, 0xf8, 0x74, 0xff, 0x6f, 0x36, 0xc8, 0x41, 0xfa, 0x80, 0x1c, 0xcc, 0xb2, 0xff,
		0x6b, 0x65, 0x72, 0x90, 0x3e, 0x20, 0x07, 0x33, 0xed, 0xff, 0x1a, 0x39, 0x48, 0x1f, 0x90, 0x83,
		0x99, 0xf6, 0xff, 0x36, 0x39, 0x48, 0x1f, 0x90, 0x83, 0x59, 0xf6, 0x7f, 0xbd, 0x4a, 0x0e, 0xd2,
		0x07, 0xe4, 0x60, 0xa6, 0xfd, 0x8f, 0x27, 0x43, 0x1f, 0x90, 0x83, 0x99, 0xf6, 0x7f, 0x03, 0x4f,
		0x86, 0x3e, 0x20, 0x07, 0xb3, 0xed, 0x7f, 0x3c, 0x19, 0xfa, 0x80, 0x1c, 0xcc, 0xb4, 0xff, 0x2b,
		0x65, 0x06, 0x42, 0x3a, 0x81, 0x2c, 0xcc, 0x3a, 0x00, 0x18, 0x0a, 0xe9, 0x04, 0xb2, 0x30, 0xeb,
		0x00, 0x60, 0x82, 0x82, 0x4e, 0x20, 0x0b, 0x33, 0x0e, 0x80, 0x0a, 0x53, 0x14, 0x74, 0x02, 0x59,
		0x98, 0x75, 0x00, 0x30, 0x49, 0x41, 0x27, 0x90, 0x85, 0x19, 0x07, 0x40, 0x15, 0x77, 0x86, 0x4e,
		0x20, 0x0b, 0xb3, 0x0e, 0x00, 0xdc, 0x19, 0x3a, 0x81, 0x2c, 0xcc, 0x3a, 0x00, 0x70, 0x67, 0xe8,
		0x04, 0xb2, 0x30, 0xe3, 0x00, 0xd8, 0xc4, 0x9d, 0xa1, 0x13, 0xc8, 0xc2, 0xac, 0x03, 0x00, 0x77,
		0x86, 0x4e, 0x20, 0x0b, 0x33, 0x0e, 0x00, 0x36, 0xf6, 0xd2, 0x09, 0x64, 0x61, 0xe6, 0x01, 0x80,
		0x3b, 0x43, 0x27, 0x90, 0x85, 0x59, 0x07, 0xc0, 0x0e, 0x59, 0x48, 0x27, 0x90, 0x85, 0xd9, 0x06,
		0x40, 0x7d, 0x93, 0x2c, 0xa4, 0x13, 0xc8, 0xc2, 0x8c, 0x03, 0x60, 0x8b, 0x2c, 0xa4, 0x13, 0xc8,
		0xc2, 0x6c, 0x03, 0xa0, 0x41, 0xf9, 0x51, 0x3a, 0x81, 0x2c, 0xcc, 0x3a, 0x00, 0xea, 0x64, 0x21,
		0x9d, 0x60, 0x2e, 0x0b, 0x53, 0x7f, 0xfa, 0xd4, 0x6a, 0x35, 0x74, 0x8e, 0x3c, 0x33, 0xdf, 0xb3,
		0x29, 0xfa, 0x66, 0x7a, 0x52, 0x43, 0xa8, 0x2e, 0x06, 0x5d, 0x37, 0x0e, 0xc2, 0x2b, 0x03, 0xc7,
		0x40, 0x3c, 0xd6, 0x38, 0x27, 0x42, 0x70, 0x22, 0xc4, 0xa2, 0x0d, 0x72, 0x22, 0x04, 0x27, 0x42,
		0x2c, 0x39, 0x1d, 0x84, 0x0c, 0x66, 0xde, 0x05, 0xcc, 0xd4, 0xad, 0x75, 0x0a, 0xb2, 0x74, 0x8c,
		0x3e, 0x20, 0x07, 0xb3, 0xed, 0x7f, 0x16, 0x8e, 0xd1, 0x07, 0xe4, 0x60, 0xc6, 0xfd, 0xcf, 0xb2,
		0x31, 0xfa, 0x80, 0x1c, 0xcc, 0xb6, 0xff, 0xd9, 0xd2, 0x47, 0x1f, 0x90, 0x83, 0x99, 0xf6, 0x3f,
		0x27, 0x42, 0xd0, 0x07, 0xe4, 0x60, 0xc6, 0xfd, 0x8f, 0x27, 0x43, 0x1f, 0x90, 0x83, 0x99, 0xf6,
		0x3f, 0x27, 0x42, 0xd0, 0x07, 0xe4, 0x60, 0xc6, 0xfd, 0x8f, 0x27, 0x43, 0x1f, 0x90, 0x83, 0x99,
		0xf6, 0x3f, 0x27, 0x42, 0xd0, 0x09, 0x64, 0x61, 0xf6, 0x01, 0xc0, 0x50, 0x48, 0x27, 0x90, 0x85,
		0x59, 0x07, 0x00, 0x13, 0x14, 0x74, 0x02, 0x59, 0x98, 0x71, 0x00, 0x70, 0x22, 0x04, 0x9d, 0x40,
		0x16, 0x66, 0x1e, 0x00, 0x4c, 0x52, 0xd0, 0x09, 0x64, 0x61, 0xc6, 0x01, 0xc0, 0x89, 0x10, 0x74,
		0x02, 0x59, 0x98, 0x79, 0x00, 0xe0, 0xce, 0xd0, 0x09, 0x64, 0x61, 0xd6, 0x01, 0x80, 0x3b, 0x43,
		0x27, 0x90, 0x85, 0x19, 0x07, 0x00, 0x27, 0x42, 0xd0, 0x09, 0x64, 0x61, 0xe6, 0x01, 0x80, 0x3b,
		0x43, 0x27, 0x90, 0x85, 0x19, 0x07, 0x00, 0x1b, 0x7b, 0xe9, 0x04, 0xb2, 0x30, 0xf3, 0x00, 0xc0,
		0x9d, 0xa1, 0x13, 0xc8, 0xc2, 0xac, 0x03, 0x80, 0x13, 0x21, 0xe8, 0x04, 0xb2, 0x30, 0xe3, 0x00,
		0xe0, 0x44, 0x08, 0x3a, 0x81, 0x2c, 0xcc, 0x3c, 0x00, 0x38, 0x11, 0x82, 0x4e, 0x20, 0x0b, 0x33,
		0x0e, 0x00, 0x4e, 0x84, 0xa0, 0x13, 0xc8, 0xc2, 0xcc, 0x03, 0x80, 0x13, 0x21, 0xe8, 0x04, 0x83,
		0x59, 0xc8, 0x89, 0x10, 0x69, 0xc3, 0x96, 0x13, 0x21, 0x0a, 0x85, 0xa2, 0xeb, 0xc7, 0xca, 0xf7,
		0x5d, 0xe7, 0xc2, 0xd5, 0x00, 0xd3, 0x9b, 0x23, 0x20, 0x6e, 0xb7, 0xc6, 0x99, 0x0f, 0x9c, 0xf9,
		0xb0, 0x68, 0x83, 0x9c, 0xf9, 0x30, 0x8e, 0x1c, 0xcf, 0x8f, 0xb7, 0x05, 0x8e, 0x7a, 0xa8, 0x70,
		0xd4, 0x83, 0xf8, 0x8b, 0x79, 0x9c, 0x62, 0xb0, 0x3a, 0x33, 0x07, 0x3c, 0xaf, 0xba, 0x05, 0xcf,
		0x13, 0xe2, 0x79, 0x56, 0xd8, 0xc7, 0x99, 0x1b, 0x29, 0x27, 0x74, 0x3b, 0x5e, 0xe0, 0xf4, 0xdc,
		0xb6, 0x3e, 0xff, 0xb8, 0xd7, 0x1e, 0x0c, 0x04, 0x06, 0x02, 0x03, 0x49, 0x19, 0x39, 0x3d, 0xb7,
		0xed, 0xb8, 0x9d, 0x4e, 0xa8, 0xa2, 0x48, 0x82, 0x88, 0x68, 0x0c, 0x8f, 0xc5, 0x43, 0x37, 0x8e,
		0x55, 0xe8, 0x6b, 0x73, 0x91, 0xe2, 0xc7, 0xb2, 0xb3, 0xe3, 0x3a, 0xe7, 0x4d, 0xe7, 0xed, 0xe9,
		0xf7, 0xea, 0xf5, 0xf3, 0x57, 0x77, 0xbf, 0xdf, 0xf8, 0x5e, 0xbf, 0x4e, 0xdf, 0xcf, 0xa7, 0x3a,
		0x0f, 0x78, 0x70, 0xbc, 0xff, 0x87, 0xd8, 0x53, 0xfe, 0xe7, 0xe9, 0xc7, 0xfc, 0x5b, 0x71, 0x35,
		0xc7, 0x93, 0x28, 0x72, 0xda, 0x41, 0x37, 0x08, 0x1d, 0xaf, 0x23, 0x30, 0x9a, 0xdc, 0x6e, 0x8d,
		0xb1, 0x84, 0xb1, 0x84, 0xb1, 0x24, 0x65, 0xe4, 0x0c, 0x84, 0xe4, 0x2c, 0x27, 0x17, 0xda, 0x52,
		0x52, 0x88, 0xd9, 0xac, 0xbb, 0xa0, 0xb1, 0x89, 0x96, 0x5d, 0x4a, 0xee, 0xe1, 0xf9, 0x17, 0x82,
		0xdc, 0x63, 0xd8, 0x5a, 0x4a, 0xfc, 0xde, 0x55, 0xe7, 0xee, 0xa0, 0x9b, 0x8c, 0x3e, 0xc3, 0xc1,
		0x0c, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0xa4, 0x4e, 0xc8, 0x20, 0xe8, 0x2a, 0xd7, 0x97, 0x90, 0xc2,
		0x95, 0x1c, 0xa3, 0xd8, 0xf8, 0xac, 0x69, 0x7d, 0x00, 0x9b, 0x34, 0x04, 0xe8, 0x00, 0x3a, 0x80,
		0x0e, 0xba, 0x09, 0xdd, 0x84, 0x6e, 0xb2, 0xd3, 0x05, 0x2c, 0xf6, 0x5a, 0x2e, 0xe1, 0x34, 0x66,
		0x0a, 0xce, 0xf0, 0xeb, 0x85, 0x72, 0x42, 0xe5, 0x46, 0x81, 0x2f, 0x46, 0x40, 0xee, 0x35, 0x0b,
		0x1d, 0x81, 0x8e, 0x40, 0x47, 0x52, 0x46, 0x8e, 0xd7, 0x51, 0x7e, 0xec, 0xc5, 0x57, 0xa1, 0x3a,
		0x97, 0xd0, 0x41, 0x3a, 0xac, 0x64, 0x7f, 0x7c, 0x2b, 0xaf, 0xdd, 0x48, 0x20, 0x06, 0x27, 0x0f,
		0xf8, 0xe6, 0xd7, 0xe6, 0x87, 0x5f, 0xf6, 0x5a, 0x47, 0x7b, 0xcd, 0xe3, 0x83, 0x0f, 0xad, 0x93,
		0x3f, 0x0f, 0xf7, 0x74, 0x83, 0x31, 0x19, 0x95, 0x22, 0x6d, 0xfa, 0x24, 0x43, 0xa1, 0xee, 0x3c,
		0xeb, 0xeb, 0xbd, 0x93, 0x93, 0xbd, 0xa3, 0xd6, 0xf0, 0x91, 0x3f, 0xec, 0xbd, 0x2b, 0xe6, 0x81,
		0x5f, 0x08, 0x3f, 0xe1, 0xee, 0xdb, 0xe3, 0x55, 0x7c, 0xac, 0x0f, 0x07, 0xfb, 0xc7, 0x7b, 0xab,
		0xf8, 0x60, 0x7b, 0x47, 0x47, 0x07, 0x47, 0x12, 0x5d, 0xa6, 0xd5, 0xc2, 0xa9, 0x6d, 0x58, 0xb7,
		0x4a, 0xb2, 0xbe, 0x7a, 0x9d, 0xf8, 0x52, 0x8e, 0x5c, 0x8d, 0x9a, 0xd3, 0xf7, 0xa7, 0xab, 0x65,
		0x98, 0x19, 0xcc, 0x0c, 0x66, 0x86, 0x51, 0xb4, 0x26, 0x46, 0x11, 0x95, 0xd3, 0x32, 0xef, 0x82,
		0x6a, 0x1d, 0xa3, 0x68, 0xb9, 0x8c, 0xa2, 0x60, 0xe0, 0xc7, 0x2a, 0x8c, 0x04, 0xe8, 0xcb, 0xa4,
		0x25, 0x3d, 0xd2, 0x51, 0x81, 0x74, 0x40, 0x3a, 0x96, 0x8d, 0x74, 0xec, 0x7a, 0x9a, 0x9b, 0x70,
		0xcf, 0x5d, 0xaf, 0xab, 0x3a, 0xce, 0x79, 0x3b, 0x72, 0xce, 0x43, 0xb7, 0xa7, 0x22, 0x39, 0xff,
		0xe5, 0x61, 0xd3, 0x9a, 0x7d, 0x25, 0x33, 0x74, 0x68, 0x27, 0xac, 0x64, 0xe2, 0x1a, 0x4a, 0x60,
		0xe9, 0x44, 0x36, 0x96, 0xd0, 0xc6, 0x12, 0xdb, 0x5c, 0x82, 0x0b, 0x0d, 0xea, 0x9a, 0xb1, 0xa7,
		0xad, 0x36, 0x66, 0x0d, 0xa3, 0x8d, 0x9a, 0x44, 0xdc, 0x8d, 0x53, 0x55, 0x60, 0x1b, 0xa5, 0x90,
		0x12, 0x91, 0x75, 0xb9, 0xc4, 0x95, 0x89, 0x21, 0x7a, 0x6c, 0x4a, 0xa9, 0x98, 0x24, 0xcb, 0x82,
		0xca, 0xc5, 0x88, 0x82, 0xb1, 0xd5, 0x55, 0xb2, 0x65, 0x2c, 0xac, 0xf7, 0xde, 0xb3, 0x7c, 0xb4,
		0x72, 0x9a, 0x91, 0xf4, 0xd2, 0x88, 0xde, 0xa2, 0x1f, 0x78, 0x91, 0x72, 0xce, 0xbb, 0x41, 0x10,
		0xca, 0xb1, 0xb1, 0xdb, 0x8d, 0xc2, 0xc3, 0xe0, 0x61, 0xf0, 0xb0, 0x9c, 0xf2, 0x30, 0x4d, 0xf3,
		0x57, 0xc8, 0xd6, 0x80, 0x82, 0x55, 0x4c, 0x8d, 0xeb, 0x52, 0xc5, 0x45, 0x20, 0x61, 0x16, 0x48,
		0x98, 0x54, 0x11, 0x12, 0x38, 0x97, 0x05, 0xce, 0x65, 0xd5, 0x7a, 0x6b, 0xfa, 0x7e, 0x10, 0xbb,
		0xc3, 0xae, 0xd4, 0x73, 0xe0, 0xa2, 0xf6, 0xa5, 0xea, 0xb9, 0x7d, 0x37, 0x99, 0xc9, 0x2f, 0x96,
		0x82, 0xbe, 0xf2, 0xdb, 0x09, 0x33, 0x72, 0xdc, 0x76, 0x5b, 0x45, 0x91, 0xd3, 0x0f, 0x3c, 0x3f,
		0x8e, 0x4a, 0xb3, 0xbf, 0x2b, 0x25, 0x45, 0x52, 0xa2, 0xd1, 0x97, 0x52, 0x14, 0xbb, 0xb1, 0x2a,
		0x69, 0x9a, 0xe2, 0xa3, 0x3b, 0x8b, 0xc3, 0x41, 0x3b, 0xf6, 0xc7, 0xe3, 0xd2, 0xc1, 0xf4, 0xc6,
		0x9a, 0xc9, 0xb5, 0x0f, 0x93, 0x1b, 0x69, 0xcd, 0xfa, 0xa6, 0x75, 0x94, 0xdc, 0xd4, 0xe8, 0x4b,
		0xeb, 0x78, 0x78, 0x53, 0xad, 0x37, 0x93, 0x9b, 0xca, 0xf1, 0xbc, 0x44, 0xa7, 0xed, 0xea, 0x4f,
		0x49, 0x0c, 0x1b, 0x61, 0x9f, 0x1f, 0x93, 0x1a, 0xd9, 0x70, 0x6e, 0x56, 0x52, 0xac, 0xd9, 0x3e,
		0xbf, 0xce, 0x79, 0xe4, 0x5c, 0x7a, 0xb1, 0x13, 0x7b, 0x3d, 0x25, 0x00, 0x5e, 0xb7, 0x5b, 0x03,
		0x7e, 0x80, 0x1f, 0xe0, 0x27, 0x65, 0xe4, 0x0c, 0x33, 0x28, 0xf6, 0xda, 0x9f, 0x23, 0xad, 0x49,
		0x15, 0x81, 0xc9, 0x94, 0xe2, 0x6f, 0xfe, 0x48, 0x6c, 0x14, 0x7d, 0xd7, 0x0f, 0x22, 0xd5, 0x0e,
		0xfc, 0x8e, 0x16, 0x35, 0x64, 0x79, 0xd8, 0x02, 0x22, 0x92, 0xe5, 0x61, 0x99, 0x77, 0x81, 0xb9,
		0xc9, 0x14, 0xd6, 0x8b, 0x59, 0xe2, 0x38, 0x71, 0x5f, 0x80, 0xda, 0xc4, 0x7d, 0x74, 0x19, 0xc4,
		0x08, 0x62, 0x84, 0x2e, 0xb3, 0x84, 0x59, 0x4e, 0x4f, 0x63, 0x74, 0xbc, 0x8d, 0x5b, 0x49, 0x43,
		0xfa, 0xd8, 0x55, 0xa9, 0x83, 0x5c, 0x20, 0x17, 0xc8, 0x95, 0x36, 0x72, 0x38, 0xca, 0xc1, 0xac,
		0xf6, 0xe2, 0x28, 0x87, 0x55, 0x54, 0x5f, 0x1c, 0xe5, 0x20, 0x26, 0xb6, 0x52, 0x22, 0xa0, 0xfa,
		0x16, 0x87, 0xae, 0x33, 0xf0, 0xa3, 0xd8, 0x3d, 0xeb, 0x6a, 0x62, 0xe1, 0xd7, 0x4b, 0xe5, 0xe7,
		0x01, 0x7f, 0x26, 0x98, 0xfc, 0xf2, 0x65, 0xa9, 0x13, 0xf7, 0x0b, 0xff, 0x5b, 0xf8, 0xfb, 0x70,
		0xa4, 0xfb, 0x7b, 0xce, 0xd7, 0x6b, 0x25, 0x6f, 0x6f, 0x99, 0x56, 0x6b, 0xdd, 0x7f, 0xbd, 0xd8,
		0x1b, 0xa6, 0xa4, 0x82, 0xc4, 0xa9, 0x6d, 0x93, 0x86, 0xf4, 0xa5, 0xc2, 0x26, 0x4a, 0x01, 0xa5,
		0x80, 0x52, 0x40, 0x29, 0xa0, 0x14, 0x50, 0x0a, 0x28, 0x05, 0x94, 0x02, 0x4a, 0x01, 0xa5, 0x80,
		0x52, 0xc8, 0x5a, 0x29, 0x28, 0x7f, 0x98, 0x97, 0x02, 0x27, 0x62, 0x4d, 0x1a, 0x62, 0x42, 0x14,
		0xb1, 0x80, 0x58, 0xc8, 0x56, 0x2c, 0xac, 0xc9, 0x84, 0xa8, 0xc4, 0x41, 0x7e, 0x1c, 0xdf, 0x07,
		0xd4, 0x00, 0x35, 0xe9, 0x23, 0x87, 0xea, 0x82, 0x86, 0x8d, 0x09, 0x96, 0x8f, 0xae, 0x9c, 0x2d,
		0x41, 0x75, 0xc1, 0x25, 0x13, 0x49, 0x41, 0x5f, 0x85, 0x6e, 0xec, 0xf9, 0x17, 0xce, 0x79, 0xa8,
		0xfe, 0x1a, 0x28, 0xbf, 0x7d, 0xa5, 0xcf, 0x3c, 0x1e, 0x6b, 0x14, 0x2a, 0x02, 0x15, 0x81, 0x8a,
		0xa4, 0xa6, 0xf2, 0x2b, 0x7e, 0x04, 0xc5, 0xc1, 0xe1, 0xde, 0x51, 0xf3, 0x64, 0xff, 0xc3, 0x2f,
		0xad, 0xb7, 0x47, 0x7b, 0xff, 0xfc, 0x6d, 0xef, 0xc3, 0x9b, 0x3f, 0x57, 0xf7, 0x0c, 0x8a, 0xe1,
		0x23, 0xb6, 0xaa, 0xbf, 0xfc, 0xfa, 0xef, 0x55, 0x3c, 0xce, 0x60, 0xf4, 0x70, 0xad, 0x7a, 0x6b,
		0x95, 0x9f, 0xaf, 0x2e, 0xf3, 0x70, 0x9c, 0xd8, 0xf0, 0xe0, 0x35, 0x87, 0xdf, 0x9c, 0x4e, 0x10,
		0x57, 0x2a, 0xce, 0xe4, 0xac, 0x85, 0x41, 0xec, 0x75, 0xbd, 0xff, 0xea, 0x95, 0x8f, 0x98, 0x76,
		0xde, 0x4f, 0x5b, 0x87, 0xa1, 0xc0, 0x50, 0x60, 0x28, 0x29, 0x23, 0xa7, 0xaf, 0xc2, 0xb6, 0xf2,
		0x63, 0xf7, 0x42, 0xe1, 0x98, 0xe0, 0x98, 0xe0, 0x98, 0xcc, 0xdd, 0x05, 0x95, 0x72, 0x19, 0xc7,
		0x64, 0x99, 0x1c, 0x93, 0xf0, 0x9b, 0x33, 0x2a, 0x11, 0x6a, 0x8a, 0xa1, 0xcc, 0x6e, 0x1d, 0x86,
		0x02, 0x43, 0x81, 0xa1, 0xc0, 0x50, 0x60, 0x28, 0x30, 0x14, 0x18, 0x0a, 0x0c, 0x65, 0xc6, 0x6b,
		0x8e, 0xda, 0xae, 0xef, 0x7b, 0xfe, 0x85, 0x3e, 0x1b, 0x99, 0xb6, 0xc4, 0xd2, 0x37, 0x08, 0x0c,
		0x04, 0x26, 0x5b, 0x02, 0xb3, 0x26, 0x4b, 0xdf, 0x26, 0x98, 0xe3, 0x74, 0xd4, 0xb9, 0x0a, 0x9d,
		0x76, 0xd7, 0x53, 0x7e, 0x1c, 0xc9, 0x61, 0xd9, 0xbd, 0x76, 0x81, 0x24, 0x20, 0x09, 0x48, 0x4a,
		0x19, 0x39, 0x2c, 0x91, 0x43, 0x4e, 0x21, 0xa7, 0x16, 0xeb, 0x02, 0x96, 0xc8, 0x2d, 0xa9, 0x9c,
		0x1a, 0x13, 0x87, 0x38, 0x74, 0xcf, 0xcf, 0xbd, 0xb6, 0x38, 0x21, 0x99, 0xb4, 0x0b, 0x21, 0x81,
		0x90, 0x40, 0x48, 0xd0, 0x48, 0xf3, 0x41, 0xd2, 0x57, 0xd5, 0xed, 0x0a, 0x95, 0xb3, 0x7f, 0xac,
		0x51, 0xc0, 0x08, 0x30, 0x02, 0x8c, 0x34, 0xd4, 0x51, 0xa5, 0x21, 0x80, 0x45, 0x0d, 0xe4, 0x11,
		0xf2, 0x68, 0x4d, 0xe4, 0x51, 0xa3, 0x5e, 0xdf, 0x44, 0x20, 0x2d, 0xa7, 0x40, 0xf2, 0xfc, 0x58,
		0x85, 0x5f, 0xdc, 0xae, 0x20, 0x17, 0x99, 0x36, 0x09, 0x13, 0x81, 0x89, 0xc0, 0x44, 0x34, 0x98,
		0x08, 0x3e, 0x2d, 0x44, 0x04, 0x22, 0x32, 0x7f, 0x17, 0xe0, 0xd3, 0x2e, 0x1b, 0x0d, 0x09, 0xce,
		0xe3, 0xaf, 0x6e, 0xa8, 0x9c, 0x48, 0x75, 0x55, 0x5b, 0xaf, 0x28, 0xdb, 0x0d, 0x11, 0x79, 0xa4,
		0x51, 0xa8, 0x08, 0x54, 0x04, 0x2a, 0x92, 0x32, 0x72, 0xd6, 0xc5, 0xa1, 0x1d, 0xf4, 0xfb, 0x41,
		0x18, 0xab, 0xce, 0x64, 0x21, 0xbf, 0xc4, 0x0a, 0x96, 0x87, 0x6d, 0x02, 0x45, 0x40, 0x11, 0x50,
		0x94, 0x32, 0x72, 0x26, 0x59, 0xe4, 0xc4, 0xc3, 0x26, 0x51, 0x47, 0x4b, 0xa3, 0x8e, 0x2a, 0xa8,
		0xa3, 0xcc, 0xbb, 0xa0, 0xb6, 0xb2, 0xe2, 0xe8, 0x05, 0x29, 0xf8, 0x74, 0xff, 0x6f, 0x36, 0xc8,
		0x41, 0xfa, 0x80, 0x1c, 0xcc, 0xb2, 0xff, 0x6b, 0xb8, 0x84, 0xf4, 0x01, 0x39, 0x98, 0x6d, 0xff,
		0xd7, 0xc8, 0x41, 0xfa, 0x80, 0x1c, 0xcc, 0xb4, 0xff, 0x39, 0x8f, 0x88, 0x3e, 0x20, 0x07, 0x33,
		0xed, 0xff, 0x7a, 0x95, 0x1c, 0xa4, 0x0f, 0xc8, 0xc1, 0x4c, 0xfb, 0x1f, 0x4f, 0x86, 0x3e, 0x20,
		0x07, 0x33, 0xed, 0xff, 0x06, 0x9e, 0x0c, 0x7d, 0x40, 0x0e, 0x66, 0xdb, 0xff, 0x78, 0x32, 0xf4,
		0x01, 0x39, 0x98, 0x69, 0xff, 0xe7, 0xbb, 0x68, 0x1c, 0x95, 0xfb, 0xc8, 0xc2, 0xf5, 0xc8, 0x42,
		0x86, 0x42, 0x3a, 0x81, 0x2c, 0xcc, 0x3a, 0x00, 0x98, 0xa0, 0xa0, 0x13, 0xc8, 0xc2, 0x8c, 0x03,
		0xa0, 0xc2, 0x14, 0x05, 0x9d, 0x40, 0x16, 0x66, 0x1d, 0x00, 0x4c, 0x52, 0xd0, 0x09, 0x64, 0x61,
		0xc6, 0x01, 0x50, 0xc5, 0x9d, 0xa1, 0x13, 0xc8, 0xc2, 0xac, 0x03, 0x00, 0x77, 0x86, 0x4e, 0x20,
		0x0b, 0xb3, 0x0e, 0x00, 0xdc, 0x19, 0x3a, 0x81, 0x2c, 0xcc, 0x38, 0x00, 0x36, 0x71, 0x67, 0xe8,
		0x04, 0xb2, 0x30, 0xeb, 0x00, 0xc0, 0x9d, 0xa1, 0x13, 0xc8, 0xc2, 0x8c, 0x03, 0x80, 0x8d, 0xbd,
		0x74, 0x02, 0x59, 0x98, 0x79, 0x00, 0xe0, 0xce, 0xd0, 0x09, 0x64, 0x61, 0xd6, 0x01, 0xb0, 0x43,
		0x16, 0xd2, 0x09, 0x64, 0x61, 0xb6, 0x01, 0x50, 0xdf, 0x24, 0x0b, 0xe9, 0x04, 0xb2, 0x30, 0xe3,
		0x00, 0xd8, 0x22, 0x0b, 0xe9, 0x04, 0xb2, 0x30, 0xdb, 0x00, 0x68, 0x50, 0x7e, 0x94, 0x4e, 0x20,
		0x0b, 0xb3, 0x0e, 0x80, 0x3a, 0x59, 0x48, 0x27, 0x98, 0xcb, 0x42, 0xdb, 0x47, 0xa4, 0xa4, 0xac,
		0x86, 0xfe, 0xce, 0x8b, 0xe2, 0x66, 0x1c, 0x87, 0x7a, 0x15, 0xd1, 0xdf, 0x7b, 0xfe, 0x5e, 0x57,
		0xf5, 0x94, 0x3f, 0x7a, 0xf7, 0x1a, 0x75, 0xcc, 0xdf, 0xbb, 0xdf, 0x6e, 0xb5, 0x54, 0xd9, 0xae,
		0xd5, 0x1a, 0x5b, 0xb5, 0x5a, 0x79, 0x6b, 0x73, 0xab, 0xbc, 0x53, 0xaf, 0x57, 0x1a, 0x15, 0x9d,
		0x22, 0xe9, 0x07, 0x61, 0x47, 0x85, 0xaa, 0xf3, 0xfa, 0xaa, 0xf8, 0xaa, 0xe0, 0x0f, 0xba, 0xdd,
		0x1c, 0x9f, 0xff, 0x10, 0x07, 0xb1, 0xdb, 0x9d, 0x9c, 0xd3, 0xe0, 0x0c, 0x62, 0xaf, 0xeb, 0xfd,
		0xd7, 0x1d, 0x46, 0xb8, 0xfe, 0x31, 0x10, 0xb3, 0x9b, 0xe6, 0x34, 0x08, 0x4e, 0x83, 0x58, 0xb4,
		0x41, 0x4e, 0x83, 0x18, 0x47, 0x4e, 0x5f, 0x85, 0x6d, 0xe5, 0xc7, 0xee, 0x05, 0x47, 0x41, 0x2c,
		0x11, 0x0f, 0x64, 0xa6, 0x3c, 0x7b, 0x16, 0xb8, 0xc2, 0x55, 0x26, 0x56, 0xf2, 0xa0, 0xbc, 0x38,
		0x74, 0xfd, 0xa8, 0xe7, 0xc5, 0x8e, 0xf2, 0xc2, 0xbe, 0x00, 0x1f, 0xb9, 0xd3, 0x1c, 0x1c, 0x04,
		0x0e, 0x02, 0x07, 0x49, 0x19, 0x39, 0x9c, 0xd3, 0x0b, 0xfd, 0x80, 0x7e, 0x2c, 0xd6, 0x05, 0x9c,
		0xd3, 0xbb, 0xac, 0xf4, 0xa3, 0x1f, 0x7c, 0x55, 0xa1, 0x20, 0xff, 0x18, 0xb5, 0x97, 0x12, 0xc4,
		0x77, 0xd5, 0xb9, 0x3b, 0xe8, 0x26, 0x43, 0xd0, 0x0e, 0x24, 0x06, 0x12, 0x03, 0x89, 0x49, 0x1b,
		0x39, 0x42, 0x1c, 0xa6, 0x02, 0x87, 0x11, 0x7f, 0x31, 0x8f, 0xeb, 0x77, 0x36, 0xc0, 0xe6, 0xc0,
		0x44, 0xa9, 0x6e, 0xc1, 0x62, 0x96, 0x8a, 0xc5, 0x7c, 0x73, 0x3a, 0x41, 0x5c, 0xa9, 0x18, 0x9a,
		0xe3, 0xf9, 0x59, 0xeb, 0xb0, 0x13, 0xd8, 0x09, 0xec, 0x24, 0x65, 0xe4, 0x30, 0xcd, 0x83, 0xcf,
		0x02, 0x43, 0x49, 0xc3, 0x50, 0x98, 0xe6, 0xc9, 0x90, 0xa1, 0x3c, 0x33, 0x18, 0x92, 0xc5, 0xa6,
		0xef, 0x07, 0x71, 0x7a, 0xe6, 0x52, 0x8c, 0xda, 0x97, 0xaa, 0xe7, 0xf6, 0xdd, 0xf8, 0x72, 0x88,
		0xb0, 0xa5, 0xa0, 0xaf, 0xfc, 0x76, 0xc2, 0x16, 0x1c, 0xb7, 0xdd, 0x56, 0x51, 0xe4, 0xf4, 0x03,
		0xcf, 0x8f, 0xa3, 0xd2, 0xec, 0xef, 0x4a, 0xa1, 0xdb, 0xf1, 0x82, 0x68, 0xf4, 0xa5, 0x14, 0xc5,
		0x6e, 0x9c, 0x06, 0x9e, 0x8b, 0x51, 0x1c, 0x0e, 0xda, 0xb1, 0x3f, 0x86, 0xfa, 0x83, 0xe9, 0x7d,
		0x34, 0x93, 0x4b, 0x1d, 0x26, 0xd7, 0x6d, 0xcd, 0xfa, 0xa6, 0x75, 0x94, 0xdc, 0xc3, 0xe8, 0x4b,
		0xeb, 0x38, 0xb9, 0x87, 0x67, 0x66, 0x3a, 0x69, 0xbe, 0xdf, 0x9c, 0xb3, 0x1b, 0x87, 0xec, 0x23,
		0xd1, 0xdd, 0x9d, 0x42, 0xd0, 0x57, 0xa1, 0x1b, 0x7b, 0xfe, 0x85, 0x73, 0x1e, 0xaa, 0xbf, 0x06,
		0xca, 0x6f, 0xcf, 0x4b, 0x8f, 0xd2, 0x2d, 0x24, 0x4b, 0xbf, 0x70, 0x4c, 0x74, 0xa1, 0x58, 0xba,
		0x85, 0x61, 0xf3, 0xbe, 0xde, 0x94, 0xd9, 0x21, 0x9d, 0x15, 0x0b, 0xe4, 0x83, 0x60, 0x1e, 0xcc,
		0x97, 0x01, 0x4f, 0xc7, 0xf3, 0xcf, 0x7f, 0xe3, 0x89, 0xae, 0x58, 0xb4, 0x0b, 0xe4, 0x5e, 0xfd,
		0x1c, 0x2f, 0x5d, 0xe4, 0x65, 0xff, 0xfc, 0x35, 0xcf, 0x7e, 0x79, 0x3f, 0x79, 0x71, 0xc5, 0x28,
		0xf2, 0x3a, 0xd1, 0x93, 0xef, 0x6b, 0x4a, 0x8c, 0x47, 0xbf, 0xfe, 0x44, 0x47, 0xcc, 0x67, 0x41,
		0xcd, 0xad, 0x15, 0x17, 0xd1, 0x84, 0x0f, 0xb4, 0x5f, 0xcf, 0x6d, 0xcf, 0xd3, 0x3d, 0x0b, 0x6a,
		0xbc, 0xd4, 0x5a, 0x2e, 0xb5, 0x66, 0x7b, 0x54, 0x9b, 0x0d, 0x1f, 0xce, 0x70, 0x52, 0xed, 0x7a,
		0xe1, 0x9c, 0xd9, 0x14, 0x79, 0x9d, 0xf9, 0xdf, 0xdf, 0xed, 0x78, 0x9a, 0xf7, 0xd5, 0x2d, 0xe6,
		0x6c, 0x2e, 0x6c, 0x45, 0xa4, 0xb1, 0x1e, 0x52, 0x86, 0x9b, 0xae, 0xb5, 0xa0, 0x6d, 0x25, 0x68,
		0x5b, 0x07, 0xe9, 0xc3, 0xd1, 0x0c, 0xbb, 0x99, 0x37, 0x4c, 0xa7, 0x1f, 0x38, 0x73, 0xfd, 0x8e,
		0x13, 0xc5, 0x4a, 0x85, 0x9e, 0x7f, 0xb1, 0x78, 0x07, 0x4c, 0xfa, 0xfd, 0x6e, 0x33, 0x0b, 0xbe,
		0xc3, 0x74, 0x56, 0x7d, 0x6a, 0x8f, 0x4d, 0xc7, 0x5b, 0xd3, 0x0c, 0x74, 0x29, 0x2f, 0x4d, 0xcc,
		0x43, 0x13, 0xf3, 0xce, 0xf4, 0x13, 0xc1, 0x8e, 0x7a, 0x5b, 0x34, 0x41, 0xa6, 0x1f, 0x6c, 0x4f,
		0xa2, 0x4d, 0xd3, 0xac, 0x1e, 0xb7, 0xa3, 0x67, 0x4b, 0x57, 0x56, 0xc9, 0x96, 0x4e, 0x97, 0x42,
		0xd8, 0xd2, 0xe9, 0x53, 0x2c, 0x1b, 0x5b, 0x3a, 0x6d, 0xea, 0x09, 0x8d, 0x55, 0x46, 0xc6, 0x2e,
		0x43, 0x7e, 0xa2, 0x76, 0xa2, 0x4a, 0x26, 0xac, 0xa1, 0xc4, 0x95, 0x4e, 0x60, 0x63, 0x89, 0x6c,
		0x2c, 0xa1, 0xcd, 0x25, 0xb6, 0x90, 0xd3, 0xab, 0x19, 0x7b, 0xda, 0xf3, 0x50, 0x0f, 0x53, 0x35,
		0x08, 0xba, 0xca, 0xf5, 0x25, 0xa2, 0x6e, 0x32, 0x92, 0x56, 0x32, 0x32, 0xc3, 0x35, 0x5e, 0x6e,
		0x71, 0x02, 0x56, 0x4e, 0x18, 0x45, 0x9e, 0x1c, 0x10, 0xde, 0x6d, 0x16, 0x20, 0x04, 0x08, 0x01,
		0xc2, 0x9c, 0x02, 0xa1, 0xe6, 0xb2, 0x41, 0x21, 0x3d, 0x71, 0xa7, 0x29, 0x99, 0x29, 0xfa, 0xc9,
		0x1f, 0x99, 0x14, 0x28, 0x48, 0x4f, 0xd9, 0x1b, 0x78, 0x71, 0x77, 0x9a, 0x15, 0x5f, 0x66, 0x38,
		0x6d, 0xd9, 0xc0, 0x3c, 0xb2, 0x50, 0x7a, 0xdc, 0xed, 0x2c, 0xc1, 0xc9, 0x7d, 0xe1, 0xb1, 0xe8,
		0x27, 0x9d, 0xb5, 0xb5, 0x44, 0x9d, 0xf5, 0x2c, 0x1f, 0xad, 0x9c, 0x66, 0xc5, 0xbb, 0xac, 0x6a,
		0x5e, 0xcd, 0xc5, 0x02, 0x37, 0x8c, 0x4f, 0x7f, 0x8e, 0x2e, 0x99, 0xb2, 0x4a, 0xfe, 0x2e, 0xdd,
		0x51, 0xbc, 0x25, 0x2d, 0x47, 0xaa, 0xa0, 0x3f, 0xa9, 0x77, 0x3c, 0xbc, 0xb1, 0xe4, 0xef, 0xd6,
		0x6b, 0xd7, 0xef, 0x1c, 0x8f, 0xef, 0xab, 0x35, 0xa6, 0x7e, 0x39, 0x5e, 0xd6, 0x3a, 0x5a, 0x7a,
		0xa1, 0x6d, 0x09, 0xa6, 0x5d, 0xc1, 0x21, 0xea, 0x08, 0x56, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04,
		0x71, 0x04, 0x11, 0xc2, 0x08, 0x61, 0x1c, 0x41, 0x1c, 0x41, 0x1c, 0x41, 0x80, 0x10, 0x20, 0xc4,
		0x11, 0xc4, 0x11, 0xc4, 0x11, 0xc4, 0x11, 0xc4, 0x11, 0xc4, 0x11, 0x5c, 0x1b, 0x47, 0x50, 0xc7,
		0x90, 0x32, 0x68, 0x08, 0xa6, 0xd8, 0x65, 0xa4, 0xe1, 0x07, 0xae, 0xfa, 0x26, 0xb2, 0x59, 0xbd,
		0x6f, 0x7f, 0x2b, 0xd9, 0x8c, 0xfe, 0x36, 0xb6, 0x9f, 0x6c, 0x81, 0x85, 0xe9, 0x67, 0xf3, 0xed,
		0x0b, 0x99, 0x2d, 0x4f, 0xe7, 0xd9, 0x28, 0x22, 0x44, 0x25, 0x58, 0x10, 0xcd, 0x82, 0x68, 0x8b,
		0x0b, 0xa2, 0xcf, 0x16, 0xda, 0xe9, 0xf2, 0xf3, 0x0c, 0x61, 0xf2, 0x83, 0xc9, 0x8f, 0xec, 0xad,
		0x81, 0x65, 0x9b, 0xfc, 0xd0, 0x4a, 0x40, 0xd1, 0x44, 0x34, 0xe6, 0xf1, 0x55, 0xf1, 0xf8, 0xf0,
		0xf8, 0xf0, 0xf8, 0xc6, 0x91, 0xd7, 0x55, 0xee, 0x79, 0xa8, 0xce, 0x25, 0x6d, 0x3e, 0x01, 0x9f,
		0xa2, 0x78, 0x38, 0x96, 0x21, 0x2f, 0x5f, 0x8e, 0x94, 0x63, 0x69, 0x04, 0x25, 0x4b, 0x38, 0x8d,
		0x92, 0xec, 0x63, 0x77, 0x24, 0x51, 0x75, 0xda, 0x22, 0x93, 0x27, 0x00, 0x2b, 0xc0, 0x0a, 0xb0,
		0x6a, 0x01, 0xeb, 0x14, 0x4d, 0x96, 0x72, 0x8a, 0x5a, 0x67, 0xb1, 0xdc, 0x83, 0x2e, 0xd3, 0xf5,
		0x28, 0x0b, 0x72, 0x73, 0x36, 0xd0, 0x55, 0x50, 0x75, 0xf9, 0x51, 0x55, 0x57, 0x8f, 0x0a, 0xeb,
		0x52, 0x23, 0xfa, 0x54, 0x98, 0x4e, 0x89, 0xd3, 0x2a, 0x13, 0x40, 0x60, 0x18, 0x10, 0x4c, 0x01,
		0x83, 0x71, 0x80, 0x30, 0x0e, 0x14, 0xe6, 0x01, 0x43, 0x06, 0x38, 0x84, 0x00, 0x44, 0x9e, 0x9e,
		0x3d, 0x88, 0xdc, 0x9e, 0xdb, 0x76, 0xdc, 0x4e, 0x27, 0x54, 0x51, 0x24, 0x19, 0xb9, 0x13, 0x16,
		0x20, 0xb8, 0xc0, 0x62, 0x48, 0xdd, 0x62, 0x15, 0xfa, 0x62, 0xab, 0x5f, 0xa6, 0x0d, 0x7f, 0x2c,
		0x3b, 0x3b, 0xae, 0x73, 0xde, 0x74, 0xde, 0x9e, 0x7e, 0xaf, 0x5e, 0x3f, 0x7f, 0x75, 0xf7, 0xfb,
		0x8d, 0xef, 0xf5, 0x6b, 0xb9, 0xb8, 0x3a, 0x95, 0x7c, 0x21, 0x07, 0xc7, 0xfb, 0x7f, 0x18, 0x7b,
		0x2b, 0xff, 0x79, 0xfa, 0xb5, 0xfc, 0x4d, 0xf0, 0xbd, 0xe4, 0x64, 0xc5, 0x84, 0x44, 0x35, 0xdd,
		0x76, 0x30, 0xf0, 0x63, 0x15, 0x46, 0xf2, 0x03, 0xf6, 0xb4, 0xe5, 0x17, 0xb9, 0x3c, 0xd1, 0x41,
		0x8a, 0xb4, 0x33, 0x66, 0x33, 0x66, 0x2f, 0xfd, 0x98, 0x2d, 0x45, 0xfe, 0x6f, 0x8b, 0x00, 0xd1,
		0xc3, 0x1e, 0xe6, 0x91, 0x07, 0x82, 0xe7, 0x3f, 0x58, 0x12, 0x0e, 0xc6, 0x04, 0x84, 0x49, 0x50,
		0xb2, 0x04, 0x4e, 0xa6, 0x41, 0xca, 0x1a, 0x58, 0x59, 0x03, 0x2d, 0x7b, 0xe0, 0x25, 0x0b, 0x62,
		0xc2, 0x60, 0x66, 0x4e, 0x88, 0x3c, 0x88, 0x7c, 0x91, 0xf3, 0x31, 0x9e, 0xc2, 0x9a, 0xba, 0x81,
		0xa6, 0x65, 0x97, 0xe6, 0xdf, 0xff, 0x63, 0x26, 0x51, 0x0b, 0xa6, 0x96, 0xee, 0x5b, 0x02, 0xf9,
		0x07, 0x97, 0x11, 0x3e, 0xaf, 0x63, 0xe6, 0x75, 0x0c, 0xae, 0x1d, 0x37, 0x9c, 0xc2, 0x77, 0xbb,
		0xde, 0xfd, 0xb6, 0x72, 0x5d, 0x2f, 0x76, 0x4e, 0x48, 0x2e, 0x3a, 0xff, 0xd9, 0x72, 0xb4, 0x7a,
		0xfa, 0x2c, 0x9f, 0xf7, 0x27, 0xb9, 0x6b, 0x26, 0xfc, 0xe6, 0x0c, 0x19, 0xb1, 0xfc, 0xa9, 0x6b,
		0x4f, 0x8e, 0x89, 0x4f, 0x5e, 0x19, 0x46, 0x0e, 0x23, 0x87, 0x91, 0xc3, 0xc8, 0x61, 0xe4, 0x30,
		0x72, 0x18, 0x39, 0x8c, 0x1c, 0x46, 0x0e, 0x23, 0x5f, 0x13, 0x46, 0x7e, 0x15, 0xab, 0xc8, 0xe9,
		0xb8, 0xb1, 0x6b, 0x96, 0x7e, 0xdf, 0x5c, 0x06, 0xae, 0x0d, 0xd7, 0x86, 0x6b, 0xc3, 0xb5, 0x8d,
		0x44, 0xfe, 0x78, 0x82, 0xbf, 0x51, 0x33, 0x48, 0xb5, 0xb7, 0xa1, 0xda, 0x50, 0x6d, 0xa8, 0xf6,
		0x6a, 0x52, 0x6d, 0xad, 0x73, 0x6c, 0xe1, 0xde, 0x70, 0xef, 0x05, 0xb8, 0x77, 0x3b, 0xf0, 0xe3,
		0x30, 0xe8, 0x1a, 0x25, 0xde, 0x93, 0x6b, 0xc0, 0xba, 0x61, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac,
		0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd, 0xeb, 0xc9, 0xba, 0x3b, 0x6e, 0xec,
		0x3a, 0x1d, 0x2f, 0x8a, 0x8d, 0xf2, 0xee, 0x9b, 0xab, 0xbc, 0x58, 0x8a, 0x9a, 0xbe, 0x30, 0x6f,
		0x98, 0x37, 0xcc, 0x5b, 0x38, 0xf6, 0xa5, 0xb7, 0xb0, 0xdc, 0x86, 0xb1, 0xb2, 0xd3, 0xa8, 0x99,
		0x0b, 0xc9, 0x5b, 0x48, 0x96, 0x5c, 0xc8, 0x50, 0x9c, 0x98, 0xe5, 0x19, 0xc6, 0x40, 0xcd, 0x06,
		0xb8, 0x59, 0x06, 0x39, 0x5b, 0x60, 0x67, 0x1d, 0xf4, 0xac, 0x83, 0x9f, 0x7d, 0x10, 0x34, 0x4c,
		0x34, 0x0d, 0xe5, 0x8e, 0x31, 0x5b, 0xc2, 0xaa, 0x3d, 0x61, 0xc1, 0xa6, 0xb0, 0x64, 0x57, 0x98,
		0xb7, 0x2d, 0xac, 0xda, 0x17, 0x96, 0xb5, 0xac, 0x6d, 0x3b, 0x23, 0x0b, 0x21, 0x6b, 0xc1, 0xde,
		0xb0, 0x6a, 0x73, 0x64, 0x1d, 0x22, 0xf6, 0x6d, 0x8f, 0x4c, 0xa3, 0xe6, 0xd9, 0x72, 0xb6, 0x7e,
		0xba, 0x24, 0xf6, 0x8d, 0x81, 0xac, 0x1c, 0xd2, 0xff, 0x4a, 0xb9, 0x5a, 0x77, 0xaa, 0xe5, 0xda,
		0xb6, 0x15, 0xb1, 0x71, 0x73, 0x35, 0x14, 0x07, 0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0,
		0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03, 0xc5, 0xb1, 0x16, 0x8a, 0xa3, 0xba, 0xe3,
		0x54, 0xeb, 0x0d, 0x3b, 0x7a, 0x63, 0x7c, 0x2d, 0xd4, 0x06, 0x6a, 0x03, 0xb5, 0x81, 0xda, 0x40,
		0x6d, 0xa0, 0x36, 0x50, 0x1b, 0xa8, 0x0d, 0xd4, 0x06, 0x6a, 0x03, 0xb5, 0xb1, 0x16, 0x6a, 0x63,
		0xb3, 0x52, 0xde, 0xda, 0x74, 0xaa, 0x8d, 0x6a, 0xa5, 0x66, 0x67, 0x41, 0xd5, 0xdd, 0x2b, 0xa2,
		0x3c, 0x50, 0x1e, 0x28, 0x0f, 0x94, 0x07, 0xca, 0x03, 0xe5, 0x81, 0xf2, 0x40, 0x79, 0xa0, 0x3c,
		0x50, 0x1e, 0x28, 0x8f, 0xb5, 0x50, 0x1e, 0x8d, 0xcd, 0xed, 0xba, 0xb3, 0x59, 0xdd, 0x6a, 0x58,
		0x5a, 0x5b, 0x75, 0xeb, 0x7a, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40, 0x75,
		0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x63, 0x1d, 0x54, 0x47, 0xb5, 0x5c, 0xdb,
		0x71, 0x6a, 0xe5, 0x1d, 0x3b, 0xeb, 0xab, 0x6e, 0xae, 0x86, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50,
		0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0xd6, 0x42,
		0x71, 0xd4, 0xb7, 0x9c, 0x7a, 0xa5, 0x6a, 0x47, 0x6f, 0x8c, 0xaf, 0x85, 0xda, 0x40, 0x6d, 0xa0,
		0x36, 0x50, 0x1b, 0xa8, 0x0d, 0xd4, 0x06, 0x6a, 0x03, 0xb5, 0x81, 0xda, 0x40, 0x6d, 0xa0, 0x36,
		0xd6, 0x42, 0x6d, 0x34, 0xaa, 0x95, 0x5a, 0xdd, 0xa9, 0x57, 0x6b, 0xd5, 0x6d, 0x3b, 0xeb, 0xaa,
		0xee, 0x5e, 0x11, 0xe5, 0x81, 0xf2, 0x40, 0x79, 0xa0, 0x3c, 0x50, 0x1e, 0x28, 0x0f, 0x94, 0x07,
		0xca, 0x03, 0xe5, 0x81, 0xf2, 0x40, 0x79, 0xac, 0x83, 0xf2, 0xd8, 0xac, 0x6e, 0x35, 0x76, 0x9c,
		0x46, 0xbd, 0xbe, 0x69, 0x67, 0x6d, 0xd5, 0xed, 0xeb, 0xa1, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54,
		0x07, 0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40, 0x75, 0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x8e, 0x75, 0x50,
		0x1d, 0xb5, 0xf2, 0xce, 0x96, 0xb3, 0x5d, 0xd9, 0xb1, 0xb3, 0xbe, 0xea, 0xe6, 0x6a, 0x28, 0x0e,
		0x14, 0x07, 0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14,
		0x07, 0x8a, 0x63, 0x1d, 0x14, 0x47, 0xbd, 0xb2, 0xe9, 0x54, 0xca, 0x55, 0x3b, 0xc5, 0x72, 0xa7,
		0x17, 0x43, 0x6f, 0xa0, 0x37, 0xd0, 0x1b, 0xe8, 0x0d, 0xf4, 0x06, 0x7a, 0x03, 0xbd, 0x81, 0xde,
		0x40, 0x6f, 0xa0, 0x37, 0xd0, 0x1b, 0x6b, 0xa1, 0x37, 0xaa, 0xb5, 0xea, 0xf6, 0x8e, 0x53, 0x29,
		0xd7, 0xb6, 0xeb, 0x5b, 0x76, 0x96, 0x56, 0xdd, 0xbb, 0x24, 0xda, 0x03, 0xed, 0x81, 0xf6, 0x40,
		0x7b, 0xa0, 0x3d, 0xd0, 0x1e, 0x68, 0x0f, 0xb4, 0x07, 0xda, 0x03, 0xed, 0x81, 0xf6, 0x58, 0x07,
		0xed, 0xd1, 0xa8, 0x3b, 0x95, 0xaa, 0x9d, 0x6d, 0xe4, 0xe3, 0x4b, 0xa1, 0x35, 0xd0, 0x1a, 0x68,
		0x0d, 0xb4, 0x06, 0x5a, 0x03, 0xad, 0x81, 0xd6, 0x40, 0x6b, 0xa0, 0x35, 0xd0, 0x1a, 0x68, 0x8d,
		0xf5, 0xd0, 0x1a, 0xf5, 0xcd, 0xad, 0xd1, 0xe9, 0xe0, 0x55, 0x4b, 0x8a, 0xe3, 0xd6, 0x05, 0xd1,
		0x1d, 0xe8, 0x0e, 0x74, 0x07, 0xba, 0x03, 0xdd, 0x81, 0xee, 0x40, 0x77, 0xa0, 0x3b, 0xd0, 0x1d,
		0xe8, 0x0e, 0x74, 0xc7, 0x3a, 0xe8, 0x8e, 0xed, 0xca, 0xce, 0x66, 0x72, 0x38, 0xb8, 0x9d, 0x1d,
		0x1d, 0xb7, 0x2e, 0x87, 0xe6, 0x40, 0x73, 0xa0, 0x39, 0xd0, 0x1c, 0x68, 0x0e, 0x34, 0x07, 0x9a,
		0x03, 0xcd, 0x81, 0xe6, 0x40, 0x73, 0xa0, 0x39, 0xf2, 0xa5, 0x39, 0x9e, 0xe5, 0x38, 0xc7, 0x8b,
		0x4d, 0xdf, 0x0f, 0x62, 0x77, 0x18, 0x72, 0x46, 0xd2, 0xba, 0x18, 0xb5, 0x2f, 0x55, 0xcf, 0xed,
		0xbb, 0xf1, 0xe5, 0x70, 0xc4, 0x2f, 0x05, 0x7d, 0xe5, 0xb7, 0x13, 0xf6, 0xef, 0xb8, 0xed, 0xb6,
		0x8a, 0x22, 0xa7, 0x1f, 0x78, 0x7e, 0x1c, 0x95, 0x66, 0x7f, 0x57, 0x8a, 0x22, 0xaf, 0x13, 0x25,
		0x7f, 0x97, 0xce, 0x46, 0xff, 0x4e, 0xbe, 0x94, 0xa2, 0xd8, 0x8d, 0x55, 0x69, 0x4c, 0x22, 0xa2,
		0x52, 0xf8, 0xcd, 0xe9, 0xb8, 0xb1, 0xeb, 0x74, 0xbc, 0x28, 0x36, 0x40, 0x28, 0x8a, 0x51, 0x1c,
		0x0e, 0xda, 0xb1, 0x3f, 0xe6, 0x2e, 0x07, 0xd3, 0x07, 0x69, 0x26, 0xf7, 0x7a, 0x98, 0xdc, 0x78,
		0x6b, 0xd6, 0x37, 0xad, 0xe3, 0xe1, 0x8d, 0x27, 0x7f, 0xb7, 0x5e, 0x27, 0x0f, 0x31, 0xfa, 0xd2,
		0x3a, 0x1e, 0x3e, 0x44, 0xeb, 0xcd, 0xf8, 0x21, 0x5a, 0x47, 0xdf, 0x76, 0xdd, 0xd8, 0xdd, 0x1d,
		0x3e, 0xc2, 0xb3, 0x7c, 0x06, 0xa1, 0x60, 0x00, 0x16, 0x27, 0x5d, 0xf6, 0xb5, 0xd7, 0x13, 0x8f,
		0xbe, 0xdb, 0x82, 0x79, 0x7a, 0x11, 0xe1, 0xe4, 0x19, 0x8f, 0x4f, 0x15, 0xe1, 0x66, 0x4d, 0xc9,
		0x63, 0x93, 0xb2, 0xd8, 0x92, 0x1c, 0x36, 0x2d, 0x83, 0xad, 0xc9, 0x5f, 0x6b, 0xb2, 0xd7, 0x9e,
		0xdc, 0xcd, 0xf7, 0x40, 0xb7, 0xeb, 0x85, 0x66, 0x02, 0xff, 0x4c, 0x99, 0x37, 0xfd, 0xce, 0x14,
		0x4e, 0x9f, 0x75, 0x48, 0xb3, 0x0c, 0x6d, 0xb6, 0x20, 0xce, 0x3a, 0xd4, 0x59, 0x87, 0x3c, 0xfb,
		0xd0, 0x67, 0x56, 0xed, 0xe0, 0xf4, 0x2d, 0x02, 0x65, 0x38, 0x7d, 0xf3, 0xd8, 0x38, 0x38, 0x7d,
		0x4b, 0xed, 0xd9, 0xe0, 0xf4, 0x89, 0x84, 0x08, 0x4e, 0xdf, 0x32, 0xb4, 0xbe, 0xce, 0xab, 0x0b,
		0xce, 0x3e, 0x5b, 0x50, 0x17, 0x9f, 0x51, 0x17, 0xa8, 0x0b, 0xd4, 0x05, 0xea, 0x02, 0x75, 0x81,
		0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b, 0xd4, 0xc5, 0xea, 0xab, 0x8b, 0x2f, 0x9e,
		0x79, 0x75, 0xf1, 0xc5, 0x43, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b, 0xd4, 0x05, 0xea, 0x02,
		0x75, 0x81, 0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0x6b, 0xa0, 0x2e, 0x02, 0x0b, 0xea, 0x22,
		0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b, 0xd4, 0x05, 0xea, 0x02, 0x75, 0x81, 0xba, 0x40,
		0x5d, 0xa0, 0x2e, 0x50, 0x17, 0x39, 0x53, 0x17, 0xec, 0x81, 0xb4, 0xba, 0x07, 0x52, 0x7e, 0xaf,
		0x5b, 0xc1, 0xf2, 0x16, 0xc8, 0x7f, 0xf5, 0x7a, 0x6b, 0xb2, 0x03, 0xb2, 0xd7, 0x8e, 0x8c, 0x6e,
		0x7e, 0x1c, 0xb6, 0xcf, 0xbe, 0x47, 0xf6, 0x3d, 0xe6, 0x43, 0xf2, 0xb2, 0xef, 0xd1, 0xf2, 0xe0,
		0x66, 0x6c, 0xdf, 0x63, 0xaf, 0x1d, 0x95, 0xcd, 0xfb, 0x7b, 0xc9, 0x55, 0x70, 0xf8, 0x6c, 0xc3,
		0x9a, 0x65, 0x78, 0xb3, 0x05, 0x73, 0xd6, 0xe1, 0xce, 0x3a, 0xec, 0xd9, 0x87, 0x3f, 0xb3, 0x2a,
		0x07, 0x87, 0x6f, 0x11, 0x28, 0xc3, 0xe1, 0x9b, 0xc7, 0xbe, 0xc1, 0xe1, 0x5b, 0x6a, 0xaf, 0x06,
		0x87, 0x4f, 0x24, 0x44, 0x70, 0xf8, 0x96, 0xa1, 0xf5, 0x75, 0x5e, 0x3f, 0xd0, 0x6b, 0x47, 0x15,
		0x2b, 0x0a, 0xa3, 0x82, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a,
		0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0xd6, 0x43, 0x61, 0xd8, 0x99, 0xc4, 0xa8, 0x30,
		0x8b, 0x81, 0xc6, 0x40, 0x63, 0xa0, 0x31, 0xd0, 0x18, 0x68, 0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d,
		0x81, 0xc6, 0x40, 0x63, 0xac, 0x89, 0xc6, 0xb0, 0x34, 0x8d, 0xc1, 0x3c, 0x06, 0x1a, 0x03, 0x8d,
		0x81, 0xc6, 0x40, 0x63, 0xa0, 0x31, 0xd0, 0x18, 0x68, 0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d, 0xb1,
		0x1e, 0x1a, 0xa3, 0x6a, 0x45, 0x62, 0x54, 0x51, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85,
		0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0xc6, 0x5a, 0x28, 0x8c, 0x4d,
		0x2b, 0x0a, 0x63, 0x13, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14,
		0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xac, 0x85, 0xc2, 0xa8, 0x59, 0x51, 0x18, 0x35,
		0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14,
		0x06, 0x0a, 0x03, 0x85, 0xb1, 0x16, 0x0a, 0xa3, 0x6e, 0x45, 0x61, 0xd4, 0x51, 0x18, 0x28, 0x0c,
		0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14,
		0xc6, 0x5a, 0x28, 0x8c, 0x86, 0x15, 0x85, 0xd1, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c,
		0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x6b, 0xa1, 0x30,
		0xb6, 0xac, 0x28, 0x8c, 0x2d, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30,
		0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0xb1, 0x16, 0x0a, 0x63, 0xdb, 0x8a, 0xc2,
		0xd8, 0x46, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2,
		0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x6b, 0xa1, 0x30, 0x76, 0xac, 0x28, 0x8c, 0x1d, 0x14, 0x06,
		0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a,
		0x03, 0x85, 0x91, 0x33, 0x85, 0xf1, 0x2c, 0xc7, 0x39, 0x5e, 0x6c, 0xfa, 0x7e, 0x10, 0xbb, 0xc3,
		0x90, 0x33, 0x92, 0xd6, 0xc5, 0xa8, 0x7d, 0xa9, 0x7a, 0x6e, 0xdf, 0x8d, 0x2f, 0x87, 0x23, 0x7e,
		0x29, 0xe8, 0x2b, 0xbf, 0x9d, 0xb0, 0x7f, 0xc7, 0x6d, 0xb7, 0x55, 0x14, 0x39, 0xfd, 0xc0, 0xf3,
		0xe3, 0xa8, 0x34, 0xfb, 0xbb, 0x52, 0x14, 0x79, 0x9d, 0x28, 0xf9, 0xbb, 0x74, 0x36, 0xfa, 0x77,
		0xf2, 0xa5, 0x14, 0xc5, 0x6e, 0xac, 0x4a, 0x63, 0x12, 0x11, 0x95, 0xc2, 0x6f, 0x4e, 0xaf, 0x1d,
		0x19, 0xa0, 0x12, 0xc5, 0x28, 0x0e, 0x07, 0xed, 0xd8, 0x1f, 0xb3, 0x96, 0x83, 0xe9, 0x23, 0x34,
		0x93, 0xbb, 0x3c, 0x4c, 0x6e, 0xb9, 0x35, 0xeb, 0x9b, 0xd6, 0xf1, 0xf0, 0x96, 0x93, 0xbf, 0x5b,
		0xaf, 0x93, 0xdb, 0x1f, 0x7d, 0x69, 0x1d, 0x0f, 0x6f, 0xbf, 0xf5, 0x66, 0x7c, 0xfb, 0xad, 0xa3,
		0x6f, 0xef, 0xdb, 0x91, 0x2c, 0x07, 0x95, 0x8b, 0x3c, 0xc1, 0xa8, 0x2b, 0x0e, 0xfb, 0xe9, 0xa2,
		0x17, 0x8b, 0x87, 0xdb, 0x94, 0x56, 0x4e, 0x2e, 0x20, 0x9c, 0x29, 0x66, 0x06, 0x23, 0x63, 0x5a,
		0xd8, 0xa4, 0x06, 0xb6, 0xa4, 0x7d, 0x4d, 0x6b, 0x5e, 0x6b, 0x5a, 0xd7, 0x9a, 0xc6, 0xb5, 0xa7,
		0x6d, 0xf3, 0x3d, 0xaa, 0x19, 0xd3, 0xb0, 0x56, 0xb4, 0xab, 0x41, 0xcd, 0x6a, 0x58, 0xab, 0x1a,
		0x34, 0x0d, 0x6c, 0x68, 0x53, 0x4b, 0x82, 0xc3, 0x96, 0x16, 0xb5, 0xa9, 0x26, 0x0c, 0x6a, 0x4f,
		0x2b, 0x9a, 0xd3, 0x76, 0xd7, 0xdb, 0xd7, 0x98, 0x56, 0xa3, 0x61, 0x49, 0xb4, 0xd9, 0xe9, 0x7a,
		0xf0, 0xed, 0x50, 0xc5, 0xa1, 0xa7, 0x22, 0xa3, 0x94, 0x7b, 0x72, 0x0d, 0x58, 0x37, 0xac, 0x1b,
		0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x7b, 0xad,
		0x59, 0xb7, 0xd3, 0x71, 0x63, 0xd7, 0x06, 0xf5, 0x1e, 0x5d, 0x08, 0xfe, 0x0d, 0xff, 0x86, 0x7f,
		0xc3, 0xbf, 0xe1, 0xdf, 0xf0, 0x6f, 0xf8, 0x37, 0xfc, 0x1b, 0xfe, 0x0d, 0xff, 0x5e, 0x6f, 0xfe,
		0x1d, 0x0d, 0xce, 0xce, 0xc3, 0xd1, 0x00, 0x66, 0x9e, 0x83, 0x4f, 0x2f, 0x06, 0x0f, 0x87, 0x87,
		0xc3, 0xc3, 0xe1, 0xe1, 0xf0, 0x70, 0x78, 0x38, 0x3c, 0x1c, 0x1e, 0x0e, 0x0f, 0x87, 0x87, 0xaf,
		0x21, 0x0f, 0x8f, 0xbf, 0x39, 0x67, 0x51, 0xe4, 0x74, 0x82, 0xb8, 0x52, 0x71, 0xda, 0x97, 0xae,
		0xef, 0xab, 0xae, 0x33, 0x88, 0xbd, 0xae, 0xf7, 0x5f, 0x33, 0xbb, 0x0e, 0xa6, 0x63, 0xe4, 0x93,
		0x57, 0x86, 0xa1, 0xc3, 0xd0, 0x61, 0xe8, 0x30, 0x74, 0x23, 0x91, 0xdf, 0x57, 0x61, 0x5b, 0xf9,
		0xb1, 0x7b, 0xa1, 0x0c, 0x52, 0xf4, 0x3a, 0x14, 0x1d, 0x8a, 0x0e, 0x45, 0x5f, 0x4d, 0x8a, 0x5e,
		0x2e, 0xc3, 0xc8, 0x61, 0xe4, 0x66, 0x18, 0xf9, 0x55, 0x6c, 0x7c, 0x5d, 0xca, 0xdd, 0xcb, 0xc0,
		0xb5, 0xe1, 0xda, 0x70, 0x6d, 0xb8, 0xb6, 0x91, 0xc8, 0xc7, 0x0d, 0x87, 0x6a, 0x43, 0xb5, 0xa1,
		0xda, 0xa9, 0xa9, 0x36, 0x6e, 0x38, 0xdc, 0xdb, 0x16, 0xf7, 0x6e, 0x07, 0x7e, 0x1c, 0x06, 0x5d,
		0xa3, 0xc4, 0x7b, 0x72, 0x0d, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba,
		0x61, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x7b, 0x3d, 0x59, 0x77, 0xc7, 0x8d, 0x5d, 0xa7, 0xe3,
		0x45, 0xb1, 0x51, 0xde, 0x7d, 0x73, 0x15, 0x33, 0xcc, 0xbb, 0x02, 0xf3, 0x86, 0x79, 0xc3, 0xbc,
		0xf3, 0xcd, 0xbc, 0x77, 0xbd, 0xd0, 0x4c, 0xe0, 0xc7, 0xdf, 0x9c, 0xb2, 0xd3, 0xa8, 0x99, 0x3f,
		0x59, 0x64, 0x72, 0x21, 0x0e, 0x17, 0xb1, 0x0d, 0x6e, 0x96, 0x41, 0xce, 0x16, 0xd8, 0x59, 0x07,
		0x3d, 0xeb, 0xe0, 0x67, 0x1f, 0x04, 0x0d, 0x13, 0x4d, 0x0e, 0x17, 0xc9, 0xd6, 0xa6, 0xb0, 0x64,
		0x57, 0x98, 0xb7, 0x2d, 0xac, 0xda, 0x17, 0x96, 0xb5, 0xac, 0x6d, 0x3b, 0x23, 0x0b, 0x21, 0x6b,
		0xc1, 0xde, 0xb0, 0x6a, 0x73, 0x64, 0x1d, 0x22, 0x1c, 0x2e, 0xb2, 0x0c, 0xad, 0xaf, 0xf3, 0xf1,
		0x85, 0xf1, 0x37, 0xa7, 0x52, 0xae, 0xd6, 0x9d, 0x6a, 0xb9, 0xb6, 0x6d, 0x45, 0x6c, 0xdc, 0x5c,
		0x0d, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03,
		0xc5, 0x81, 0xe2, 0x40, 0x71, 0xac, 0x85, 0xe2, 0xa8, 0xee, 0x38, 0xd5, 0x7a, 0xc3, 0x8e, 0xde,
		0x18, 0x5f, 0x0b, 0xb5, 0x81, 0xda, 0x40, 0x6d, 0xa0, 0x36, 0x50, 0x1b, 0xa8, 0x0d, 0xd4, 0x06,
		0x6a, 0x03, 0xb5, 0x81, 0xda, 0x40, 0x6d, 0xac, 0x85, 0xda, 0xd8, 0xac, 0x94, 0xb7, 0x36, 0x9d,
		0x6a, 0xa3, 0x5a, 0xa9, 0xd9, 0x59, 0x50, 0x75, 0xf7, 0x8a, 0x28, 0x0f, 0x94, 0x07, 0xca, 0x03,
		0xe5, 0x81, 0xf2, 0x40, 0x79, 0xa0, 0x3c, 0x50, 0x1e, 0x28, 0x0f, 0x94, 0x07, 0xca, 0x63, 0x2d,
		0x94, 0x47, 0x63, 0x73, 0xbb, 0xee, 0x6c, 0x56, 0xb7, 0x1a, 0x96, 0xd6, 0x56, 0xdd, 0xba, 0x1e,
		0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40, 0x75, 0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa,
		0x03, 0xd5, 0x81, 0xea, 0x58, 0x07, 0xd5, 0x51, 0x2d, 0xd7, 0x76, 0x9c, 0x5a, 0x79, 0xc7, 0xce,
		0xfa, 0xaa, 0x9b, 0xab, 0xa1, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03, 0xc5, 0x81,
		0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50, 0x1c, 0x28, 0x8e, 0xb5, 0x50, 0x1c, 0xf5, 0x2d, 0xa7, 0x5e,
		0xa9, 0xda, 0xd1, 0x1b, 0xe3, 0x6b, 0xa1, 0x36, 0x50, 0x1b, 0xa8, 0x0d, 0xd4, 0x06, 0x6a, 0x03,
		0xb5, 0x81, 0xda, 0x40, 0x6d, 0xa0, 0x36, 0x50, 0x1b, 0xa8, 0x8d, 0xb5, 0x50, 0x1b, 0x8d, 0x6a,
		0xa5, 0x56, 0x77, 0xea, 0xd5, 0x5a, 0x75, 0xdb, 0xce, 0xba, 0xaa, 0xbb, 0x57, 0x44, 0x79, 0xa0,
		0x3c, 0x50, 0x1e, 0x28, 0x0f, 0x94, 0x07, 0xca, 0x03, 0xe5, 0x81, 0xf2, 0x40, 0x79, 0xa0, 0x3c,
		0x50, 0x1e, 0xeb, 0xa0, 0x3c, 0x36, 0xab, 0x5b, 0x8d, 0x1d, 0xa7, 0x51, 0xaf, 0x6f, 0xda, 0x59,
		0x5b, 0x75, 0xfb, 0x7a, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40, 0x75, 0xa0,
		0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x63, 0x1d, 0x54, 0x47, 0xad, 0xbc, 0xb3, 0xe5,
		0x6c, 0x57, 0x76, 0xec, 0xac, 0xaf, 0xba, 0xb9, 0x1a, 0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x40, 0x71,
		0xa0, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x58, 0x07, 0xc5,
		0x51, 0xaf, 0x6c, 0x3a, 0x95, 0x72, 0xd5, 0x4e, 0xb1, 0xdc, 0xe9, 0xc5, 0xd0, 0x1b, 0xe8, 0x0d,
		0xf4, 0x06, 0x7a, 0x03, 0xbd, 0x81, 0xde, 0x40, 0x6f, 0xa0, 0x37, 0xd0, 0x1b, 0xe8, 0x0d, 0xf4,
		0xc6, 0x5a, 0xe8, 0x8d, 0x6a, 0xad, 0xba, 0xbd, 0xe3, 0x54, 0xca, 0xb5, 0xed, 0xfa, 0x96, 0x9d,
		0xa5, 0x55, 0xf7, 0x2e, 0x89, 0xf6, 0x40, 0x7b, 0xa0, 0x3d, 0xd0, 0x1e, 0x68, 0x0f, 0xb4, 0x07,
		0xda, 0x03, 0xed, 0x81, 0xf6, 0x40, 0x7b, 0xa0, 0x3d, 0xd6, 0x41, 0x7b, 0x34, 0xea, 0x4e, 0xa5,
		0x6a, 0x67, 0x1b, 0xf9, 0xf8, 0x52, 0x68, 0x0d, 0xb4, 0x06, 0x5a, 0x03, 0xad, 0x81, 0xd6, 0x40,
		0x6b, 0xa0, 0x35, 0xd0, 0x1a, 0x68, 0x0d, 0xb4, 0x06, 0x5a, 0x63, 0x3d, 0xb4, 0x46, 0x7d, 0x73,
		0x6b, 0x74, 0x3a, 0x78, 0xd5, 0x92, 0xe2, 0xb8, 0x75, 0x41, 0x74, 0x07, 0xba, 0x03, 0xdd, 0x81,
		0xee, 0x40, 0x77, 0xa0, 0x3b, 0xd0, 0x1d, 0xe8, 0x0e, 0x74, 0x07, 0xba, 0x03, 0xdd, 0xb1, 0x0e,
		0xba, 0x63, 0xbb, 0xb2, 0xb3, 0x99, 0x1c, 0x0e, 0x6e, 0x67, 0x47, 0xc7, 0xad, 0xcb, 0xa1, 0x39,
		0xd0, 0x1c, 0x68, 0x0e, 0x34, 0x07, 0x9a, 0x03, 0xcd, 0x81, 0xe6, 0x40, 0x73, 0xa0, 0x39, 0xd0,
		0x1c, 0x68, 0x8e, 0x7c, 0x69, 0x8e, 0x67, 0x39, 0xce, 0xf1, 0x62, 0xd3, 0xf7, 0x83, 0xd8, 0x1d,
		0x86, 0x9c, 0x91, 0xb4, 0x2e, 0x46, 0xed, 0x4b, 0xd5, 0x73, 0xfb, 0x6e, 0x7c, 0x39, 0x1c, 0xf1,
		0x4b, 0x41, 0x5f, 0xf9, 0xed, 0x84, 0xfd, 0x3b, 0x6e, 0xbb, 0xad, 0xa2, 0xc8, 0xe9, 0x07, 0x9e,
		0x1f, 0x47, 0xa5, 0xd9, 0xdf, 0x95, 0xa2, 0xc8, 0xeb, 0x44, 0xc9, 0xdf, 0xa5, 0xb3, 0xd1, 0xbf,
		0x93, 0x2f, 0xa5, 0x28, 0x76, 0x63, 0x55, 0x1a, 0x93, 0x88, 0xa8, 0x14, 0x7f, 0x73, 0x3a, 0x6e,
		0xec, 0x3a, 0x1d, 0x2f, 0x8a, 0x0d, 0x10, 0x8a, 0x62, 0x14, 0x87, 0x83, 0x76, 0xec, 0x8f, 0xb9,
		0xcb, 0xc1, 0xf4, 0x41, 0x9a, 0xc9, 0xbd, 0x1e, 0x26, 0x37, 0xde, 0x9a, 0xf5, 0x4d, 0xeb, 0x78,
		0x78, 0xe3, 0xc9, 0xdf, 0xad, 0xd7, 0xc9, 0x43, 0x8c, 0xbe, 0xb4, 0x8e, 0x87, 0x0f, 0xd1, 0x7a,
		0x33, 0x7e, 0x88, 0xd6, 0xc9, 0xb7, 0x5d, 0x37, 0x76, 0x77, 0x87, 0x8f, 0xf0, 0x2c, 0x9f, 0x41,
		0x28, 0x18, 0x80, 0xc5, 0x49, 0x97, 0x7d, 0xed, 0xf5, 0xc4, 0xa3, 0xef, 0xb6, 0x60, 0x9e, 0x5e,
		0x44, 0x38, 0x79, 0xc6, 0xe3, 0x53, 0x45, 0xb8, 0x59, 0x53, 0xf2, 0xd8, 0xa4, 0x2c, 0xb6, 0x24,
		0x87, 0x4d, 0xcb, 0x60, 0x6b, 0xf2, 0xd7, 0x9a, 0xec, 0xb5, 0x27, 0x77, 0xf3, 0x3d, 0xd0, 0xed,
		0x7a, 0xa1, 0x99, 0xc0, 0x3f, 0x53, 0xe6, 0x4d, 0xbf, 0x33, 0x85, 0xd3, 0x67, 0x1d, 0xd2, 0x2c,
		0x43, 0x9b, 0x2d, 0x88, 0xb3, 0x0e, 0x75, 0xd6, 0x21, 0xcf, 0x3e, 0xf4, 0x99, 0x55, 0x3b, 0x38,
		0x7d, 0x8b, 0x40, 0x19, 0x4e, 0xdf, 0x3c, 0x36, 0x0e, 0x4e, 0xdf, 0x52, 0x7b, 0x36, 0x38, 0x7d,
		0x22, 0x21, 0x82, 0xd3, 0xb7, 0x0c, 0xad, 0xaf, 0xf3, 0xea, 0x82, 0xb3, 0xcf, 0x16, 0xd4, 0xc5,
		0x67, 0xd4, 0x05, 0xea, 0x02, 0x75, 0x81, 0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b,
		0xd4, 0x05, 0xea, 0x02, 0x75, 0xb1, 0xfa, 0xea, 0xe2, 0x8b, 0x67, 0x5e, 0x5d, 0x7c, 0xf1, 0x50,
		0x17, 0xa8, 0x0b, 0xd4, 0x05, 0xea, 0x02, 0x75, 0x81, 0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17,
		0xa8, 0x0b, 0xd4, 0xc5, 0x1a, 0xa8, 0x8b, 0xc0, 0x82, 0xba, 0x08, 0x50, 0x17, 0xa8, 0x0b, 0xd4,
		0x05, 0xea, 0x02, 0x75, 0x81, 0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b, 0xd4, 0x45,
		0xce, 0xd4, 0x05, 0x7b, 0x20, 0xad, 0xee, 0x81, 0x94, 0xdf, 0xeb, 0x56, 0xb0, 0xbc, 0x05, 0xf2,
		0x5f, 0xbd, 0xde, 0x9a, 0xec, 0x80, 0xec, 0xb5, 0x23, 0xa3, 0x9b, 0x1f, 0x87, 0xed, 0xb3, 0xef,
		0x91, 0x7d, 0x8f, 0xf9, 0x90, 0xbc, 0xec, 0x7b, 0xb4, 0x3c, 0xb8, 0x19, 0xdb, 0xf7, 0xd8, 0x6b,
		0x47, 0x65, 0xf3, 0xfe, 0x5e, 0x72, 0x15, 0x1c, 0x3e, 0xdb, 0xb0, 0x66, 0x19, 0xde, 0x6c, 0xc1,
		0x9c, 0x75, 0xb8, 0xb3, 0x0e, 0x7b, 0xf6, 0xe1, 0xcf, 0xac, 0xca, 0xc1, 0xe1, 0x5b, 0x04, 0xca,
		0x70, 0xf8, 0xe6, 0xb1, 0x6f, 0x70, 0xf8, 0x96, 0xda, 0xab, 0xc1, 0xe1, 0x13, 0x09, 0x11, 0x1c,
		0xbe, 0x65, 0x68, 0x7d, 0x9d, 0xd7, 0x0f, 0xf4, 0xda, 0x51, 0xc5, 0x8a, 0xc2, 0xa8, 0xa0, 0x30,
		0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50,
		0x18, 0x28, 0x8c, 0xf5, 0x50, 0x18, 0x76, 0x26, 0x31, 0x2a, 0xcc, 0x62, 0xa0, 0x31, 0xd0, 0x18,
		0x68, 0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d, 0x81, 0xc6, 0x40, 0x63, 0xa0, 0x31, 0xd0, 0x18, 0x6b,
		0xa2, 0x31, 0x2c, 0x4d, 0x63, 0x30, 0x8f, 0x81, 0xc6, 0x40, 0x63, 0xa0, 0x31, 0xd0, 0x18, 0x68,
		0x0c, 0x34, 0x06, 0x1a, 0x03, 0x8d, 0x81, 0xc6, 0x40, 0x63, 0xac, 0x87, 0xc6, 0xa8, 0x5a, 0x91,
		0x18, 0x55, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28,
		0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0xb1, 0x16, 0x0a, 0x63, 0xd3, 0x8a, 0xc2, 0xd8, 0x44, 0x61,
		0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0,
		0x30, 0x50, 0x18, 0x6b, 0xa1, 0x30, 0x6a, 0x56, 0x14, 0x46, 0x0d, 0x85, 0x81, 0xc2, 0x40, 0x61,
		0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xac,
		0x85, 0xc2, 0xa8, 0x5b, 0x51, 0x18, 0x75, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61,
		0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0xb1, 0x16, 0x0a, 0xa3, 0x61,
		0x45, 0x61, 0x34, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61,
		0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0xc6, 0x5a, 0x28, 0x8c, 0x2d, 0x2b, 0x0a, 0x63, 0x0b,
		0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85,
		0x81, 0xc2, 0x40, 0x61, 0xac, 0x85, 0xc2, 0xd8, 0xb6, 0xa2, 0x30, 0xb6, 0x51, 0x18, 0x28, 0x0c,
		0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14,
		0xc6, 0x5a, 0x28, 0x8c, 0x1d, 0x2b, 0x0a, 0x63, 0x07, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30,
		0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xe4, 0x4c, 0x61,
		0x3c, 0xcb, 0x71, 0x8e, 0x17, 0x9b, 0xbe, 0x1f, 0xc4, 0xee, 0x30, 0xe4, 0x8c, 0xa4, 0x75, 0x31,
		0x6a, 0x5f, 0xaa, 0x9e, 0xdb, 0x77, 0xe3, 0xcb, 0xe1, 0x88, 0x5f, 0x0a, 0xfa, 0xca, 0x6f, 0x27,
		0xec, 0xdf, 0x71, 0xdb, 0x6d, 0x15, 0x45, 0x4e, 0x3f, 0xf0, 0xfc, 0x38, 0x2a, 0xcd, 0xfe, 0xae,
		0x14, 0x45, 0x5e, 0x27, 0x4a, 0xfe, 0x2e, 0x9d, 0x8d, 0xfe, 0x9d, 0x7c, 0x29, 0x45, 0xb1, 0x1b,
		0xab, 0xd2, 0x98, 0x44, 0x44, 0xa5, 0xf8, 0x9b, 0xd3, 0x6b, 0x47, 0x06, 0xa8, 0x44, 0x31, 0x8a,
		0xc3, 0x41, 0x3b, 0xf6, 0xc7, 0xac, 0xe5, 0x60, 0xfa, 0x08, 0xcd, 0xe4, 0x2e, 0x0f, 0x93, 0x5b,
		0x6e, 0xcd, 0xfa, 0xa6, 0x75, 0x3c, 0xbc, 0xe5, 0xe4, 0xef, 0xd6, 0xeb, 0xe4, 0xf6, 0x47, 0x5f,
		0x5a, 0xc7, 0xc3, 0xdb, 0x6f, 0xbd, 0x19, 0xdf, 0x7e, 0xeb, 0xe4, 0xdb, 0xfb, 0x76, 0x24, 0xcb,
		0x41, 0xe5, 0x22, 0x4f, 0x30, 0xea, 0x8a, 0xc3, 0x7e, 0xba, 0xe8, 0xc5, 0xe2, 0xe1, 0x36, 0xa5,
		0x95, 0x93, 0x0b, 0x08, 0x67, 0x8a, 0x99, 0xc1, 0xc8, 0x98, 0x16, 0x36, 0xa9, 0x81, 0x2d, 0x69,
		0x5f, 0xd3, 0x9a, 0xd7, 0x9a, 0xd6, 0xb5, 0xa6, 0x71, 0xed, 0x69, 0xdb, 0x7c, 0x8f, 0x6a, 0xc6,
		0x34, 0xac, 0x15, 0xed, 0x6a, 0x50, 0xb3, 0x1a, 0xd6, 0xaa, 0x06, 0x4d, 0x03, 0x1b, 0xda, 0xd4,
		0x92, 0xe0, 0xb0, 0xa5, 0x45, 0x6d, 0xaa, 0x09, 0x83, 0xda, 0xd3, 0x8a, 0xe6, 0xb4, 0xdd, 0xf5,
		0xf6, 0x35, 0xa6, 0xd5, 0x68, 0x58, 0x12, 0x6d, 0x76, 0xba, 0x1e, 0x7c, 0x3b, 0x54, 0x71, 0xe8,
		0xa9, 0xc8, 0x28, 0xe5, 0x9e, 0x5c, 0x03, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0x61, 0xdd,
		0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x5e, 0x6b, 0xd6, 0xed, 0x74, 0xdc, 0xd8,
		0xb5, 0x41, 0xbd, 0x47, 0x17, 0x82, 0x7f, 0xc3, 0xbf, 0xe1, 0xdf, 0xf0, 0x6f, 0xf8, 0x37, 0xfc,
		0x1b, 0xfe, 0x0d, 0xff, 0x86, 0x7f, 0xc3, 0xbf, 0xd7, 0x9b, 0x7f, 0x47, 0x83, 0xb3, 0xf3, 0x70,
		0x34, 0x80, 0x99, 0xe7, 0xe0, 0xd3, 0x8b, 0xc1, 0xc3, 0xe1, 0xe1, 0xf0, 0x70, 0x78, 0x38, 0x3c,
		0x1c, 0x1e, 0x0e, 0x0f, 0x87, 0x87, 0xc3, 0xc3, 0xe1, 0xe1, 0xcb, 0xc2, 0xc3, 0x9f, 0xe5, 0x28,
		0x27, 0x4d, 0xed, 0x50, 0xb0, 0xb7, 0x33, 0x41, 0x70, 0x8c, 0xb6, 0xb2, 0x15, 0x41, 0x86, 0xae,
		0xe9, 0x07, 0x91, 0x40, 0x00, 0x15, 0xfd, 0x41, 0xcf, 0x71, 0xa3, 0x28, 0x68, 0x7b, 0x6e, 0xac,
		0x3a, 0x4e, 0xbb, 0xeb, 0x29, 0x3f, 0x96, 0x5b, 0x08, 0x35, 0x25, 0x64, 0x33, 0xae, 0x23, 0x94,
		0x02, 0xb2, 0xa3, 0x83, 0xb8, 0xe8, 0x33, 0x21, 0xf6, 0x0c, 0x8b, 0x3c, 0x53, 0xe2, 0xce, 0xb8,
		0xa8, 0x33, 0x2e, 0xe6, 0xcc, 0x8b, 0xb8, 0x7c, 0x0d, 0x2f, 0xe2, 0x62, 0x6d, 0x1a, 0xb9, 0x03,
		0xcf, 0x8f, 0x25, 0x6b, 0x00, 0x4e, 0x60, 0x40, 0x90, 0xa9, 0x19, 0x12, 0x64, 0x06, 0x94, 0xaf,
		0x49, 0x01, 0x66, 0xba, 0xdc, 0x89, 0x61, 0xc1, 0x65, 0x83, 0x5a, 0x9b, 0x28, 0x93, 0x63, 0x52,
		0x58, 0xd9, 0xea, 0xd2, 0x6a, 0xbd, 0xbe, 0xc4, 0x9d, 0x9a, 0x53, 0xfd, 0x71, 0xba, 0x42, 0x04,
		0x34, 0x74, 0x3b, 0x5e, 0xe0, 0x78, 0x1d, 0x79, 0xca, 0x39, 0x6d, 0x19, 0x92, 0x09, 0xc9, 0x84,
		0x64, 0x42, 0x32, 0x21, 0x99, 0x90, 0x4c, 0x48, 0x26, 0x24, 0x13, 0x92, 0xb9, 0x54, 0x24, 0xf3,
		0x59, 0x86, 0x29, 0x23, 0x6d, 0xae, 0x1b, 0x37, 0xd5, 0x05, 0x46, 0x3a, 0x93, 0x1e, 0xba, 0x1e,
		0x7f, 0x49, 0x1f, 0x0a, 0xe9, 0x3e, 0x99, 0x32, 0x78, 0x86, 0xf4, 0xf3, 0xb6, 0x00, 0x29, 0x24,
		0xfd, 0x93, 0xb2, 0x67, 0x8a, 0xef, 0xbc, 0x28, 0x6e, 0xc6, 0x71, 0xa8, 0x15, 0x7f, 0xc3, 0x91,
		0x7b, 0xaf, 0xab, 0x7a, 0x63, 0x73, 0x5f, 0x03, 0x90, 0x87, 0x03, 0xc6, 0xad, 0x96, 0x64, 0x27,
		0x4a, 0x8b, 0x07, 0x61, 0x47, 0x85, 0xaa, 0xf3, 0x7a, 0xf8, 0xfe, 0xfc, 0x41, 0xb7, 0x6b, 0xb5,
		0xdb, 0x84, 0x72, 0xdd, 0x60, 0x8e, 0x6b, 0x64, 0xb7, 0x99, 0xac, 0x4e, 0x97, 0xcf, 0x8b, 0x67,
		0xe3, 0x62, 0x9f, 0x58, 0x30, 0x00, 0x74, 0x3b, 0xde, 0x48, 0x87, 0xa7, 0xe8, 0x6a, 0xe9, 0x2e,
		0x5e, 0xac, 0x73, 0xe7, 0xef, 0xa2, 0x05, 0xba, 0xa7, 0x98, 0x76, 0x42, 0xf2, 0x66, 0x25, 0x58,
		0xaa, 0x99, 0xc6, 0x09, 0x73, 0xad, 0x2c, 0xf8, 0xb1, 0xb4, 0xa6, 0x8e, 0x8e, 0x79, 0x23, 0x64,
		0xd2, 0xe8, 0x9a, 0x31, 0x62, 0xa6, 0x8b, 0x98, 0xb9, 0x22, 0x67, 0xa2, 0x98, 0x85, 0x9f, 0x5d,
		0x2f, 0xdd, 0xe0, 0x3e, 0x8e, 0xed, 0xf4, 0x3d, 0x76, 0x37, 0x47, 0xd2, 0x76, 0x57, 0xba, 0x54,
		0x79, 0x98, 0x32, 0xd5, 0x94, 0x0d, 0x08, 0xf8, 0x9e, 0xc2, 0x3e, 0xa7, 0x94, 0xaf, 0x29, 0xee,
		0x63, 0x8a, 0xfb, 0x96, 0xf2, 0x3e, 0xa5, 0x5d, 0xa6, 0x9e, 0x36, 0xf5, 0xee, 0xa5, 0xa0, 0xd3,
		0x76, 0xfb, 0xee, 0x99, 0xd7, 0xf5, 0x62, 0x89, 0x2a, 0x42, 0xf7, 0xf2, 0xf2, 0x6e, 0xe3, 0x9a,
		0xfd, 0xa5, 0x97, 0xac, 0x62, 0x49, 0x2b, 0x99, 0xbc, 0x86, 0x92, 0x58, 0x3a, 0x99, 0x8d, 0x25,
		0xb5, 0xb1, 0xe4, 0x36, 0x97, 0xe4, 0xf9, 0xf0, 0x76, 0x74, 0x93, 0xff, 0x16, 0xef, 0x76, 0x63,
		0x25, 0x3f, 0x81, 0x29, 0x65, 0xe8, 0x08, 0x26, 0xbe, 0x36, 0xd1, 0xb5, 0x01, 0x04, 0x86, 0x01,
		0xc1, 0x14, 0x30, 0x18, 0x07, 0x08, 0xe3, 0x40, 0x61, 0x1e, 0x30, 0xe4, 0x6c, 0xe5, 0x82, 0xe0,
		0xec, 0xa5, 0x14, 0x90, 0xdc, 0xb0, 0x8a, 0x4b, 0xd7, 0xf7, 0x55, 0xd7, 0x89, 0x06, 0xfd, 0x7e,
		0x10, 0x1a, 0x2c, 0x05, 0x7e, 0xff, 0x42, 0x6c, 0xca, 0x64, 0x53, 0x66, 0xb6, 0xe0, 0x64, 0x0d,
		0xa4, 0xec, 0x81, 0x95, 0x2c, 0x68, 0x09, 0x83, 0xd7, 0xf4, 0x35, 0x98, 0xdf, 0x94, 0x29, 0xbd,
		0x14, 0xe3, 0x3e, 0xcc, 0xd4, 0xd9, 0x90, 0x79, 0x73, 0xe3, 0x6c, 0xc8, 0x5c, 0xfc, 0x3a, 0x6c,
		0xc8, 0xcc, 0x6d, 0xd7, 0x1b, 0x5b, 0xe2, 0x91, 0x49, 0xe7, 0xaf, 0xe7, 0xfe, 0x4b, 0xe1, 0x01,
		0x4b, 0x64, 0x62, 0xfc, 0x67, 0xf8, 0x29, 0x33, 0x61, 0xfe, 0xb3, 0x34, 0x35, 0x36, 0x91, 0x3e,
		0xf3, 0xa2, 0x22, 0x13, 0xec, 0xe6, 0x23, 0x50, 0xb2, 0xd2, 0x8d, 0x09, 0x8b, 0x76, 0xb6, 0xa0,
		0x12, 0xb7, 0x6c, 0x11, 0x55, 0x88, 0x2a, 0x44, 0x15, 0xa2, 0x6a, 0x46, 0xe4, 0x7b, 0x1d, 0xe5,
		0xc7, 0x5e, 0x7c, 0x15, 0xaa, 0x73, 0x83, 0xd2, 0xca, 0xc8, 0x58, 0xb4, 0x3f, 0xbe, 0xf5, 0xd7,
		0x6e, 0xa4, 0xcc, 0x1f, 0x07, 0xff, 0xe6, 0xdd, 0xfe, 0xde, 0x87, 0x93, 0xd6, 0x9b, 0xe6, 0x61,
		0xf3, 0xf5, 0xfe, 0xbb, 0xfd, 0x93, 0xfd, 0xbd, 0xe3, 0xa2, 0xc9, 0x75, 0xc9, 0x91, 0xd1, 0x03,
		0x8f, 0x0d, 0xb3, 0xfb, 0xc9, 0x4b, 0xdb, 0x3d, 0x38, 0x69, 0x55, 0x2a, 0xbf, 0x17, 0x97, 0x51,
		0x07, 0x59, 0x7a, 0x45, 0xef, 0x7f, 0x6b, 0xbd, 0xde, 0x6b, 0xbe, 0x7f, 0x7b, 0x70, 0xf4, 0x7e,
		0x6f, 0x8f, 0x17, 0x35, 0xdf, 0x8b, 0x3a, 0xe2, 0x45, 0xcd, 0x7e, 0x51, 0x07, 0x6f, 0x77, 0xdf,
		0x37, 0x79, 0x41, 0x4f, 0xa1, 0x92, 0xc9, 0x18, 0x32, 0xd2, 0xf2, 0xe9, 0x9a, 0x91, 0x1f, 0x04,
		0xfa, 0x0a, 0x0b, 0x74, 0x4a, 0x60, 0x2d, 0xbc, 0xb0, 0x7b, 0xbc, 0x14, 0x79, 0xfc, 0xb5, 0xf4,
		0x88, 0x55, 0x50, 0x92, 0x5c, 0xf2, 0x51, 0x10, 0x5d, 0x12, 0xfe, 0x66, 0x74, 0xf3, 0xe3, 0xaf,
		0xe3, 0x2f, 0x6f, 0x6e, 0xdd, 0xbb, 0xc4, 0x06, 0x1f, 0xb9, 0xe8, 0x62, 0xd7, 0x98, 0x4e, 0x1c,
		0xe6, 0x6a, 0x17, 0xd9, 0x93, 0x91, 0x97, 0xd9, 0xa6, 0xb2, 0x17, 0xfa, 0xeb, 0x46, 0x03, 0xdf,
		0x57, 0x6d, 0x91, 0x40, 0x79, 0x60, 0x41, 0xde, 0x34, 0xcd, 0x9a, 0x51, 0xcb, 0x06, 0x22, 0x6b,
		0x46, 0x59, 0x33, 0xfa, 0x24, 0x3c, 0xb2, 0x66, 0x54, 0xb7, 0x41, 0xd6, 0x8c, 0x1a, 0x07, 0x08,
		0xe3, 0x40, 0x61, 0x1e, 0x30, 0xf2, 0x29, 0x59, 0xe4, 0xd7, 0x8c, 0x8e, 0x86, 0x7d, 0x59, 0x5c,
		0x99, 0x45, 0x2e, 0xa4, 0x75, 0x4a, 0x81, 0x89, 0x4d, 0x9b, 0x30, 0x64, 0x1a, 0x8e, 0xac, 0xc1,
		0x92, 0x35, 0x78, 0xb2, 0x07, 0x53, 0xcb, 0xe1, 0xed, 0x31, 0xb1, 0xf9, 0x93, 0xb6, 0x33, 0x99,
		0xd8, 0x3c, 0x3e, 0x69, 0x9e, 0xec, 0x31, 0xa3, 0xf9, 0xd4, 0xdb, 0x7a, 0xfd, 0xae, 0xf9, 0xe6,
		0x1f, 0xef, 0xf6, 0x8f, 0x4f, 0xf6, 0x76, 0x99, 0x62, 0x99, 0xfd, 0x9a, 0x9a, 0xbf, 0x9d, 0xfc,
		0xba, 0xf7, 0xe1, 0x64, 0xff, 0x4d, 0x93, 0x17, 0xf5, 0xd3, 0x17, 0x75, 0x78, 0xf0, 0xaf, 0xbd,
		0xa3, 0xe3, 0xe6, 0xef, 0x4c, 0xfd, 0xfe, 0x2c, 0x9a, 0x8e, 0x8f, 0x0f, 0xde, 0xec, 0x13, 0x4a,
		0x3f, 0x7f, 0x4b, 0xef, 0xaa, 0xc3, 0xac, 0x6b, 0xbd, 0x6d, 0xee, 0xbf, 0xfb, 0xed, 0x68, 0xaf,
		0x75, 0xb2, 0xff, 0x7e, 0xef, 0xe0, 0xb7, 0x13, 0xde, 0xd8, 0xdc, 0x6f, 0xec, 0x68, 0xef, 0xff,
		0xdb, 0x7b, 0xc3, 0x0b, 0xfb, 0xd9, 0x0b, 0xdb, 0xbc, 0xfd, 0xc2, 0x78, 0x53, 0xb3, 0xdf, 0xd4,
		0xee, 0xaf, 0x6f, 0x0e, 0x79, 0x4f, 0x73, 0xbe, 0xa7, 0xa3, 0xbd, 0x7f, 0x82, 0xec, 0x4f, 0xe3,
		0x14, 0xaf, 0x69, 0x2e, 0x74, 0x32, 0xfc, 0x9a, 0xd6, 0x73, 0x6d, 0x4f, 0x3e, 0xb7, 0x66, 0x4c,
		0xe7, 0x28, 0x9d, 0xd8, 0x33, 0x79, 0x00, 0xf1, 0xfd, 0x0b, 0xe1, 0x5c, 0xe2, 0x5c, 0x3e, 0xd1,
		0xa5, 0x38, 0x97, 0x39, 0x41, 0xae, 0xa5, 0x73, 0x2e, 0x87, 0x08, 0x13, 0x7b, 0xed, 0xcf, 0xd1,
		0xd2, 0x1d, 0x3f, 0xfc, 0x9b, 0x3f, 0xda, 0xfa, 0x5a, 0xf4, 0x5d, 0x3f, 0x88, 0x54, 0x3b, 0xf0,
		0x3b, 0x51, 0x91, 0x5d, 0xf5, 0x37, 0x37, 0xce, 0xae, 0xfa, 0xc5, 0xaf, 0xc3, 0xae, 0xfa, 0xdc,
		0x76, 0x3d, 0xc7, 0x1c, 0xe7, 0xa1, 0xd5, 0xd3, 0x35, 0x60, 0xfa, 0x97, 0x41, 0x34, 0x59, 0x0b,
		0x6a, 0x88, 0xe2, 0x4f, 0xaf, 0x00, 0xb7, 0x87, 0xdb, 0xc3, 0xed, 0xe1, 0xf6, 0x46, 0x22, 0x3f,
		0x8a, 0x43, 0xcf, 0xbf, 0x30, 0xb9, 0x20, 0x61, 0x7b, 0x0d, 0x46, 0x03, 0xaf, 0xff, 0xa5, 0xe6,
		0xb8, 0x9d, 0x4e, 0xa8, 0x22, 0x83, 0xb5, 0x38, 0xee, 0x5c, 0x85, 0x51, 0x81, 0x51, 0x81, 0x51,
		0x81, 0x51, 0x61, 0xd9, 0x90, 0xe6, 0xee, 0xd8, 0x60, 0xa0, 0xed, 0x43, 0x37, 0x8e, 0x55, 0xe8,
		0x1b, 0x73, 0x63, 0x8a, 0xcf, 0x3f, 0x96, 0x9d, 0x9d, 0xd3, 0x1f, 0x1f, 0x2b, 0xce, 0xce, 0xe9,
		0xe8, 0x9f, 0x95, 0xe4, 0xcb, 0xf7, 0xea, 0xf5, 0x8f, 0xea, 0xc7, 0xb2, 0x53, 0x1b, 0xff, 0xb4,
		0x5a, 0xff, 0x58, 0x76, 0xea, 0xa7, 0x1b, 0xcf, 0x3f, 0x7d, 0x7a, 0xb9, 0xe8, 0x67, 0x36, 0xbe,
		0x6f, 0x5e, 0xcb, 0x87, 0xf5, 0xa9, 0x89, 0xd7, 0x7d, 0x70, 0xbc, 0xff, 0x87, 0xf1, 0x77, 0xfe,
		0x9f, 0xe7, 0xb6, 0xde, 0xfa, 0xc6, 0xdf, 0x8a, 0xd4, 0x9d, 0x93, 0xb4, 0x99, 0xd8, 0xd6, 0xbe,
		0x3a, 0x24, 0xb7, 0x31, 0x19, 0x14, 0x94, 0x59, 0x9a, 0x7b, 0xfb, 0x3a, 0x10, 0x5d, 0x88, 0x2e,
		0x44, 0x17, 0xa2, 0x6b, 0x1c, 0x6b, 0x20, 0xba, 0xf7, 0x89, 0x6e, 0xc2, 0x9f, 0x5c, 0xe7, 0xbc,
		0xe9, 0xbc, 0x3d, 0xfd, 0x5e, 0x79, 0x51, 0xbb, 0x7e, 0xb5, 0xf1, 0x7d, 0xeb, 0xfa, 0xfe, 0x0f,
		0x7f, 0x3c, 0xf6, 0x6b, 0x95, 0x17, 0x5b, 0xd7, 0xaf, 0x66, 0xfc, 0x4f, 0xe3, 0xfa, 0xd5, 0x9c,
		0x6d, 0xd4, 0xaf, 0x9f, 0x3f, 0xf8, 0xd5, 0xe1, 0xcf, 0xab, 0xb3, 0x3e, 0x50, 0x9b, 0xf1, 0x81,
		0xcd, 0x59, 0x1f, 0xd8, 0x9c, 0xf1, 0x81, 0x99, 0xb7, 0x54, 0x9d, 0xf1, 0x81, 0xfa, 0xf5, 0x8f,
		0x07, 0xbf, 0xff, 0xfc, 0xf1, 0x5f, 0x6d, 0x5c, 0x6f, 0xfc, 0x98, 0xf5, 0x7f, 0x5b, 0xd7, 0x3f,
		0x5e, 0x6d, 0x6c, 0x40, 0xfd, 0x1f, 0x50, 0x7f, 0xc2, 0xd0, 0x7e, 0x18, 0x22, 0x85, 0x90, 0x42,
		0x48, 0xa1, 0x47, 0x1e, 0x39, 0xe8, 0xab, 0xd0, 0x8d, 0x3d, 0xff, 0xc2, 0x89, 0xae, 0xa2, 0x58,
		0xf5, 0xcc, 0x89, 0xa1, 0x07, 0x57, 0x42, 0x0e, 0x21, 0x87, 0x90, 0x43, 0xc8, 0x21, 0x23, 0x91,
		0xcf, 0x6c, 0xb0, 0xc4, 0xb3, 0x0e, 0x22, 0x15, 0x9a, 0x5d, 0x1b, 0x34, 0xbd, 0x02, 0xa3, 0x01,
		0xa3, 0x01, 0xa3, 0x01, 0xa3, 0x01, 0xa3, 0x01, 0xd5, 0x80, 0x17, 0x6e, 0xd7, 0x4a, 0x15, 0xd6,
		0xe9, 0x46, 0xb5, 0xa5, 0xab, 0x05, 0x3c, 0xbd, 0x73, 0x2a, 0x01, 0x1b, 0x8b, 0x45, 0xcb, 0x31,
		0xb8, 0x04, 0x75, 0x80, 0x6f, 0xee, 0x75, 0x79, 0xab, 0x00, 0x87, 0xe7, 0xe2, 0xd5, 0x7f, 0xc3,
		0x73, 0xaa, 0xfe, 0xda, 0xe6, 0xaa, 0x54, 0xfd, 0xa5, 0xea, 0xef, 0x93, 0x60, 0x48, 0xd5, 0xdf,
		0x1c, 0x8a, 0x58, 0xaa, 0xfe, 0x66, 0x24, 0x52, 0xa9, 0xfa, 0xab, 0xd9, 0xe0, 0xad, 0xc2, 0x16,
		0xbd, 0xa0, 0x63, 0xa7, 0x82, 0x46, 0x72, 0x21, 0x9c, 0x34, 0x9c, 0x34, 0x9c, 0x34, 0x9c, 0x34,
		0x23, 0x91, 0xaf, 0xfc, 0x41, 0x2f, 0x99, 0xc7, 0x15, 0x91, 0xa0, 0x33, 0x19, 0x4e, 0xcd, 0x40,
		0xdb, 0x7b, 0xfe, 0x20, 0x99, 0xde, 0x5e, 0x87, 0xf2, 0x4d, 0xe7, 0xa1, 0xfa, 0x6b, 0xa0, 0xfc,
		0xf6, 0x95, 0xb9, 0x61, 0xe7, 0xe6, 0x12, 0x0c, 0x38, 0x0c, 0x38, 0x0c, 0x38, 0x0c, 0x38, 0x46,
		0x22, 0x7f, 0xe0, 0xf9, 0xf1, 0xb6, 0xc1, 0xa1, 0xa6, 0x4e, 0x11, 0xa5, 0x9b, 0x1b, 0xa7, 0x88,
		0xd2, 0xe2, 0xd7, 0xa1, 0x88, 0x52, 0x6e, 0xbb, 0xbe, 0x5a, 0xa7, 0x66, 0x92, 0xf5, 0x56, 0xd7,
		0xa1, 0x66, 0x52, 0xff, 0xf2, 0xca, 0x09, 0x8d, 0x9e, 0xe6, 0x34, 0xbd, 0x02, 0xe4, 0x1a, 0x72,
		0x0d, 0xb9, 0x86, 0x5c, 0x1b, 0x23, 0xd7, 0x95, 0x86, 0x41, 0x76, 0xdd, 0x80, 0x5d, 0xc3, 0xae,
		0x61, 0xd7, 0x2b, 0xc9, 0xae, 0x1b, 0xf5, 0xfa, 0x26, 0xfc, 0x1a, 0x7e, 0x6d, 0x80, 0x5f, 0x87,
		0x51, 0xe4, 0x99, 0xe3, 0xd6, 0x49, 0xeb, 0xf0, 0x6a, 0x78, 0x35, 0xbc, 0x1a, 0x5e, 0x6d, 0x24,
		0xf2, 0x0d, 0x7b, 0xd6, 0x15, 0x58, 0x75, 0x36, 0xac, 0xba, 0x62, 0xab, 0xfa, 0x7b, 0x75, 0x1b,
		0x5e, 0xbd, 0xae, 0xbc, 0xba, 0x52, 0xdd, 0x82, 0x55, 0xc3, 0xaa, 0xe5, 0x59, 0x75, 0xe4, 0x87,
		0xe6, 0x48, 0xf5, 0xb0, 0x71, 0x38, 0x35, 0x9c, 0x1a, 0x4e, 0x0d, 0xa7, 0x36, 0x12, 0xf9, 0x2c,
		0x04, 0x59, 0x51, 0x52, 0x8d, 0x55, 0x0d, 0xa5, 0x36, 0xdc, 0xf5, 0x2c, 0x04, 0x81, 0x52, 0x9b,
		0xa1, 0xd4, 0x06, 0xab, 0x47, 0x73, 0x34, 0x0a, 0x84, 0x1a, 0x42, 0x0d, 0xa1, 0x86, 0x50, 0x43,
		0xa8, 0x21, 0xd4, 0x10, 0x6a, 0x08, 0x35, 0x84, 0x3a, 0x9f, 0x84, 0x9a, 0x1a, 0x63, 0x42, 0xf5,
		0x9d, 0xc2, 0xf3, 0x65, 0xab, 0x2d, 0x76, 0x74, 0x4e, 0x4d, 0x31, 0x63, 0xb1, 0x67, 0x29, 0xe6,
		0xf2, 0x5f, 0x4b, 0xec, 0xe8, 0x7c, 0x19, 0x6b, 0x88, 0x75, 0x82, 0xb8, 0x52, 0xf9, 0xec, 0xf8,
		0xca, 0xbb, 0xb8, 0x3c, 0x0b, 0xc2, 0x48, 0xae, 0x94, 0xd8, 0x83, 0x96, 0xa9, 0x28, 0x66, 0x59,
		0xe8, 0x53, 0x51, 0x8c, 0x8a, 0x62, 0x4f, 0x42, 0x22, 0x15, 0xc5, 0x72, 0xe8, 0x00, 0x52, 0x51,
		0x2c, 0x23, 0x87, 0x8f, 0x8a, 0x62, 0x9a, 0x0d, 0xb6, 0x2f, 0x5d, 0xdf, 0x57, 0x5d, 0xa7, 0x1b,
		0xb8, 0x1d, 0x27, 0x54, 0xfd, 0x20, 0x8c, 0x0d, 0x56, 0x15, 0x7b, 0xe4, 0x62, 0x4c, 0x47, 0x30,
		0x1d, 0x91, 0x2d, 0x48, 0x59, 0x03, 0x2b, 0x7b, 0xa0, 0x65, 0xc6, 0x2f, 0x62, 0x3a, 0xe2, 0x3e,
		0xcc, 0x30, 0x1d, 0x71, 0xeb, 0xc6, 0x99, 0x8e, 0x58, 0xfc, 0x3a, 0x4c, 0x47, 0xe4, 0xb6, 0xeb,
		0x99, 0x8e, 0xc8, 0xa0, 0xd5, 0x75, 0x58, 0xdf, 0x33, 0x71, 0xd8, 0x1c, 0xd7, 0x8f, 0x95, 0xef,
		0xbb, 0xe6, 0xf8, 0xf6, 0x83, 0x2b, 0x41, 0xb6, 0x21, 0xdb, 0x90, 0x6d, 0xc8, 0x36, 0x64, 0x1b,
		0xb2, 0x0d, 0xd9, 0x86, 0x6c, 0x43, 0xb6, 0x21, 0xdb, 0x6b, 0x42, 0xb6, 0xcf, 0xa2, 0xc8, 0xeb,
		0x58, 0xa0, 0xda, 0xa3, 0xeb, 0x40, 0xb4, 0x21, 0xda, 0x10, 0x6d, 0x88, 0xb6, 0x91, 0xc8, 0xef,
		0xb9, 0x6d, 0xc7, 0xed, 0x74, 0x42, 0x25, 0xbe, 0x9b, 0xa7, 0x70, 0xe7, 0xf8, 0x59, 0x03, 0x6d,
		0x1f, 0xba, 0x71, 0xac, 0x42, 0xdf, 0x18, 0xe3, 0x2e, 0x7e, 0x2c, 0x3b, 0x3b, 0xae, 0x73, 0xde,
		0x74, 0xde, 0x9e, 0x7e, 0xaf, 0x5e, 0x3f, 0x7f, 0x75, 0xf7, 0xfb, 0x8d, 0xef, 0xf5, 0x6b, 0xf9,
		0x78, 0x3c, 0x35, 0xf1, 0xa2, 0x0e, 0x8e, 0xf7, 0xff, 0x30, 0xfe, 0xb6, 0xfe, 0xf3, 0xf4, 0xeb,
		0xfa, 0x5b, 0x11, 0xde, 0xa1, 0xc3, 0x3b, 0xc6, 0x73, 0xde, 0x16, 0x98, 0xc7, 0xe4, 0x4a, 0x70,
		0x0f, 0xb8, 0x07, 0xdc, 0x03, 0xee, 0x61, 0x24, 0xf2, 0x31, 0xf9, 0xee, 0xff, 0xc1, 0xe4, 0x5b,
		0xc8, 0xe9, 0xc1, 0xe4, 0x9b, 0xaf, 0xeb, 0x31, 0xf9, 0x72, 0xde, 0xf9, 0x98, 0x7c, 0xf9, 0x23,
		0xdb, 0x66, 0x6b, 0x3c, 0xdf, 0xbd, 0x0c, 0x34, 0x1b, 0x9a, 0x0d, 0xcd, 0x86, 0x66, 0x1b, 0x89,
		0x7c, 0x8a, 0x3d, 0xaf, 0x26, 0xcb, 0xa6, 0xd8, 0x33, 0x3c, 0xdb, 0x42, 0xe7, 0x53, 0xec, 0x19,
		0x9e, 0x2d, 0xda, 0xd2, 0x5a, 0x17, 0xd2, 0xb8, 0xbf, 0x33, 0x7e, 0x79, 0xea, 0x69, 0xec, 0x0e,
		0xef, 0xfc, 0x1f, 0x1f, 0x26, 0x37, 0x4e, 0x59, 0x0d, 0x63, 0x91, 0x68, 0x37, 0x02, 0xf3, 0x5c,
		0x5d, 0xe3, 0x5e, 0xcc, 0x2d, 0x63, 0x91, 0x8d, 0xa1, 0xa4, 0x11, 0xab, 0xab, 0xa1, 0x2f, 0x5e,
		0x85, 0xf8, 0x03, 0xa5, 0x34, 0x72, 0xa8, 0xe5, 0x29, 0xa5, 0x91, 0x95, 0xf6, 0x9e, 0x46, 0x5e,
		0x57, 0xb9, 0xe7, 0xa1, 0x12, 0xa9, 0x58, 0x34, 0x51, 0x79, 0x02, 0xfc, 0xbb, 0x78, 0x38, 0x1e,
		0x4a, 0x5e, 0xbe, 0x1c, 0xf1, 0x8d, 0x92, 0x76, 0xe7, 0x65, 0x03, 0xa6, 0x32, 0x25, 0x4b, 0x44,
		0x4b, 0x95, 0x50, 0x9b, 0x08, 0x40, 0x05, 0x50, 0xc7, 0x8f, 0x25, 0x56, 0x9b, 0xa8, 0x1d, 0x0c,
		0xfc, 0x58, 0x85, 0x91, 0x7c, 0x79, 0xa2, 0x69, 0xcb, 0x54, 0x28, 0xca, 0x19, 0x2c, 0x98, 0x82,
		0x07, 0xe3, 0x30, 0x61, 0x1c, 0x2e, 0xcc, 0xc3, 0x46, 0x3e, 0x1d, 0x1e, 0xf1, 0x0a, 0x45, 0xe1,
		0x37, 0xe7, 0xec, 0x2a, 0x56, 0x06, 0x0f, 0x45, 0x98, 0x5e, 0x81, 0x29, 0x5d, 0xa6, 0x74, 0xb3,
		0x85, 0x23, 0x6b, 0xb0, 0x64, 0x0f, 0x9e, 0x64, 0x61, 0x4a, 0x18, 0xae, 0xe4, 0x65, 0xe5, 0x53,
		0x24, 0xa6, 0x51, 0x33, 0x38, 0xaf, 0xbb, 0xcd, 0xbc, 0xee, 0xcd, 0x8d, 0xb3, 0x7a, 0x72, 0xf1,
		0xeb, 0x30, 0xab, 0x9b, 0xdb, 0xae, 0xaf, 0x6c, 0xd7, 0x6a, 0x8d, 0xad, 0x5a, 0xad, 0xbc, 0xb5,
		0xb9, 0x55, 0xde, 0xa9, 0xd7, 0x2b, 0x8d, 0x0a, 0xcb, 0x29, 0xad, 0xb7, 0xba, 0x0e, 0xcb, 0x29,
		0xc3, 0x6f, 0x4e, 0xa8, 0xe2, 0xd0, 0x33, 0xcc, 0xb9, 0x27, 0xd7, 0x80, 0x75, 0xc3, 0xba, 0x61,
		0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75, 0xc3, 0xba, 0xd7, 0x90,
		0x75, 0xc7, 0xc6, 0x7d, 0xee, 0x18, 0x9f, 0x1b, 0xc6, 0x0d, 0xe3, 0x86, 0x71, 0xc3, 0xb8, 0x61,
		0xdc, 0x30, 0x6e, 0x18, 0x37, 0x8c, 0x1b, 0xc6, 0xbd, 0xde, 0x8c, 0xdb, 0xb8, 0xcf, 0x1d, 0xe3,
		0x73, 0xc3, 0xba, 0x61, 0xdd, 0xb0, 0x6e, 0x58, 0x37, 0xac, 0x1b, 0xd6, 0x0d, 0xeb, 0x86, 0x75,
		0xc3, 0xba, 0x97, 0x8f, 0x75, 0x53, 0x44, 0x40, 0x77, 0x0b, 0xf7, 0x68, 0x0f, 0x9f, 0xf0, 0x4e,
		0x96, 0x82, 0xc9, 0x8d, 0xdc, 0x49, 0xb1, 0x80, 0xd6, 0x9b, 0xc9, 0x1d, 0xe7, 0xa5, 0x6a, 0x80,
		0xc0, 0x5e, 0x36, 0x89, 0xfd, 0xdd, 0x0f, 0x18, 0x98, 0x9c, 0xe6, 0x10, 0xc6, 0x7e, 0xf6, 0x27,
		0xb1, 0x3f, 0x29, 0x4b, 0x89, 0x96, 0xaf, 0xc1, 0x43, 0x5c, 0x8a, 0x19, 0x3e, 0x96, 0xc1, 0xc4,
		0x71, 0x0c, 0xc6, 0x8e, 0x61, 0xb0, 0x7a, 0xfc, 0xc2, 0xa9, 0xe4, 0x0b, 0x31, 0x79, 0xdc, 0x82,
		0xe5, 0x63, 0x16, 0x4e, 0xa9, 0xef, 0xb3, 0x6c, 0xf5, 0x7d, 0xa4, 0x0a, 0x4a, 0x99, 0xe5, 0x82,
		0x99, 0x55, 0x9f, 0x78, 0x66, 0x31, 0x80, 0x86, 0x23, 0xba, 0x1e, 0x9d, 0x2b, 0xbe, 0xf3, 0xa2,
		0xb8, 0x19, 0xc7, 0x7a, 0xfb, 0x60, 0x8b, 0xef, 0x3d, 0x7f, 0xaf, 0xab, 0x86, 0x23, 0x73, 0xa4,
		0x47, 0xdd, 0x8a, 0xef, 0xdd, 0x6f, 0xb7, 0x5a, 0x92, 0x55, 0xfa, 0xc5, 0x83, 0xb0, 0xa3, 0x42,
		0xd5, 0x79, 0x3d, 0x7c, 0x69, 0xfe, 0xa0, 0xdb, 0xb5, 0xda, 0x57, 0x42, 0x49, 0x6e, 0x34, 0xb9,
		0x8b, 0x5a, 0xb5, 0x53, 0x8c, 0xa4, 0x73, 0xba, 0x44, 0x5e, 0x3c, 0x0d, 0x17, 0xfb, 0xc4, 0x82,
		0x41, 0xa0, 0xdb, 0xf9, 0x66, 0x3a, 0x3d, 0x45, 0x6f, 0x8b, 0xf7, 0xf2, 0x62, 0xdd, 0x3b, 0x7f,
		0x27, 0x2d, 0xd0, 0x41, 0xc5, 0xf6, 0x44, 0x73, 0x2e, 0xd6, 0x31, 0xb7, 0xe6, 0x33, 0x92, 0xcf,
		0x2f, 0x18, 0x12, 0xe9, 0x0a, 0x7b, 0xa4, 0x16, 0xc8, 0x3a, 0x42, 0x58, 0x48, 0xf0, 0xea, 0x0a,
		0x5b, 0x31, 0x01, 0x2b, 0x26, 0x54, 0xe5, 0x04, 0xa9, 0x59, 0xf8, 0x49, 0x5b, 0xe8, 0xa2, 0xe8,
		0x76, 0xbe, 0xa8, 0x30, 0xf6, 0x22, 0xe5, 0xb8, 0xfd, 0x71, 0xd2, 0xa7, 0xec, 0xbb, 0x49, 0x08,
		0x3d, 0x68, 0x31, 0x2d, 0xf5, 0xd1, 0xf2, 0x9d, 0xb4, 0x7d, 0x26, 0x09, 0x5f, 0x49, 0xd8, 0x47,
		0x92, 0xf2, 0x8d, 0xc4, 0x7d, 0x22, 0x71, 0x5f, 0x48, 0xde, 0x07, 0xb2, 0x4b, 0xdb, 0xb5, 0x7d,
		0x9d, 0x69, 0xe4, 0x9c, 0x05, 0x41, 0x57, 0xb9, 0xbe, 0x4e, 0xd4, 0x4c, 0xc6, 0xa1, 0x8a, 0x2d,
		0xa2, 0x95, 0x62, 0xe0, 0x38, 0x73, 0x23, 0xaf, 0xed, 0x74, 0xdc, 0xd8, 0x75, 0x42, 0x37, 0x56,
		0x91, 0x53, 0xbd, 0xd0, 0x47, 0xa2, 0xc7, 0x1a, 0x05, 0x8c, 0x00, 0x23, 0xc0, 0x28, 0x65, 0xe4,
		0x78, 0x1d, 0xe5, 0xc7, 0x5e, 0x7c, 0xa5, 0x57, 0xa0, 0x74, 0x0a, 0x48, 0x3a, 0x4a, 0x7f, 0x7f,
		0x7c, 0x2b, 0xaf, 0xdd, 0x48, 0xb0, 0x9e, 0xe7, 0x6e, 0xf3, 0xa4, 0xd9, 0x3a, 0x6a, 0x9e, 0xec,
		0xe9, 0xc6, 0x60, 0xb2, 0x92, 0x21, 0x12, 0x31, 0x6f, 0x85, 0x67, 0x06, 0x87, 0x4f, 0xd7, 0xaa,
		0xbe, 0x7f, 0x5d, 0xcc, 0xc3, 0xe4, 0xa7, 0x89, 0x67, 0xab, 0x54, 0x56, 0xf9, 0xe1, 0x56, 0xf8,
		0xd9, 0xea, 0x2f, 0xeb, 0x2b, 0xfc, 0x74, 0x8d, 0x55, 0xee, 0xb9, 0xda, 0x2a, 0xa7, 0xdc, 0x2a,
		0x83, 0xe5, 0xe6, 0x2a, 0x87, 0x65, 0x75, 0x95, 0xc3, 0xb2, 0xb6, 0xbd, 0xc2, 0x0f, 0xb7, 0xb3,
		0xca, 0x78, 0x22, 0xd3, 0x71, 0x5a, 0x2d, 0x9c, 0x2e, 0x89, 0x74, 0x61, 0xf2, 0x72, 0x49, 0xec,
		0x9a, 0xba, 0x09, 0xbb, 0xa6, 0x8e, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83,
		0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83,
		0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x83, 0x5d, 0x33, 0xa7, 0x5d, 0x13, 0x06, 0x6e, 0xa7, 0xed, 0x46,
		0xb1, 0x73, 0xee, 0x75, 0x63, 0x15, 0x0a, 0x78, 0x35, 0xf7, 0x5b, 0xc4, 0xa8, 0xc1, 0xa8, 0xc1,
		0xa8, 0x49, 0x9b, 0x4d, 0xeb, 0xb1, 0xc8, 0xaf, 0x1d, 0xb9, 0xfa, 0xc8, 0x33, 0x6c, 0x24, 0x65,
		0x87, 0xed, 0xaa, 0x73, 0x77, 0xd0, 0x4d, 0xc2, 0x6d, 0x18, 0xbd, 0x60, 0x16, 0x98, 0x05, 0x66,
		0x81, 0x59, 0x3f, 0xbd, 0xc7, 0xce, 0x08, 0x33, 0x9c, 0x2f, 0x5d, 0xd7, 0xd7, 0x07, 0xaf, 0x3b,
		0xad, 0x01, 0x3f, 0xc0, 0x0f, 0xf0, 0x93, 0x32, 0x72, 0x86, 0x19, 0xe4, 0x78, 0x1d, 0x01, 0xf8,
		0x69, 0x68, 0x34, 0x21, 0x53, 0x30, 0x50, 0xa0, 0x20, 0x80, 0x64, 0x01, 0x40, 0xe9, 0x8a, 0x3f,
		0xd3, 0xaa, 0x6e, 0x42, 0xed, 0x19, 0x28, 0xd5, 0x26, 0x51, 0xc7, 0x49, 0xb2, 0x10, 0x9f, 0xa9,
		0x2e, 0xa8, 0x95, 0x77, 0x6a, 0x39, 0xee, 0x85, 0x8c, 0x4a, 0x3a, 0x9c, 0xe6, 0x99, 0x7f, 0x5c,
		0xb6, 0xfb, 0x4e, 0xa8, 0xfe, 0x1a, 0x78, 0xa1, 0xea, 0x08, 0x10, 0x90, 0x3b, 0xcd, 0xc1, 0x40,
		0x60, 0x20, 0x30, 0x10, 0x04, 0xd0, 0x4f, 0x01, 0x28, 0x88, 0x2b, 0x95, 0xcf, 0x02, 0xc8, 0x33,
		0x6a, 0x07, 0xc8, 0x01, 0x72, 0x80, 0x1c, 0x20, 0xe7, 0xa7, 0x90, 0xf3, 0x45, 0xc0, 0x27, 0x1e,
		0x36, 0x02, 0xd8, 0x00, 0x36, 0x80, 0x0d, 0x60, 0xf3, 0xb3, 0x7b, 0x54, 0xbe, 0x7b, 0xd6, 0x95,
		0x90, 0x56, 0x93, 0x86, 0x98, 0x9c, 0x02, 0xbb, 0xc0, 0x2e, 0xb0, 0xcb, 0x02, 0x76, 0x5d, 0xc4,
		0x9f, 0x9d, 0xd8, 0xeb, 0xa9, 0x60, 0x10, 0xeb, 0xe3, 0xd7, 0xed, 0xc6, 0x00, 0x1f, 0xc0, 0x07,
		0xf0, 0x49, 0x19, 0x39, 0x03, 0xcf, 0x8f, 0x2b, 0x0d, 0x66, 0xa6, 0x46, 0x37, 0xb2, 0x0c, 0x33,
		0x53, 0x65, 0x66, 0xa6, 0xb2, 0xee, 0x82, 0x46, 0xbd, 0xbe, 0x59, 0x67, 0x6a, 0xea, 0xfe, 0x9f,
		0x3c, 0x4f, 0x4d, 0x5d, 0x7a, 0x9d, 0x8e, 0x12, 0x58, 0x14, 0x33, 0x6e, 0x47, 0x5f, 0x37, 0x9d,
		0xbb, 0xdd, 0x08, 0xe1, 0x04, 0x77, 0x81, 0xbb, 0x20, 0x9c, 0x7e, 0x7e, 0x8f, 0x5e, 0xff, 0x4b,
		0xc3, 0xf1, 0x3b, 0x7d, 0xb1, 0xfd, 0x10, 0xf7, 0x1b, 0x04, 0x84, 0x00, 0x21, 0x40, 0x08, 0x10,
		0x5a, 0x00, 0x84, 0x12, 0xf3, 0x45, 0x1e, 0x8a, 0xc6, 0xcd, 0x02, 0x48, 0x00, 0x12, 0x80, 0x84,
		0xa3, 0x83, 0xa3, 0x83, 0xa3, 0x83, 0xa3, 0x83, 0xa3, 0xf3, 0xe8, 0x6b, 0xee, 0x0d, 0xba, 0xb1,
		0x27, 0xba, 0x4f, 0xfc, 0x41, 0x8b, 0xf0, 0x10, 0x78, 0x08, 0x3c, 0x04, 0x61, 0xf4, 0xb3, 0x7b,
		0x94, 0x39, 0x87, 0x8a, 0xb3, 0xa7, 0x80, 0x1b, 0xe0, 0x46, 0x27, 0x72, 0xa2, 0x38, 0xf4, 0xfc,
		0x0b, 0x09, 0xb4, 0xd9, 0xce, 0x31, 0xda, 0x04, 0x9f, 0xdb, 0xfa, 0x60, 0x33, 0x6c, 0x04, 0xac,
		0x01, 0x6b, 0xc0, 0x1a, 0xa8, 0xcd, 0x4f, 0xc1, 0xa6, 0xaf, 0x42, 0x37, 0xf6, 0xfc, 0x0b, 0xe7,
		0x3c, 0x54, 0x7f, 0x0d, 0x94, 0xdf, 0xbe, 0x12, 0x00, 0x9f, 0x47, 0x1a, 0xd5, 0x9f, 0x4d, 0x9f,
		0x84, 0x63, 0x7c, 0xd5, 0x57, 0xd1, 0xab, 0xb7, 0x47, 0x7b, 0xff, 0x6c, 0x55, 0x5b, 0xf5, 0xd6,
		0x2f, 0xbf, 0xfe, 0x1b, 0xa4, 0x03, 0xe9, 0x40, 0xba, 0xb4, 0x91, 0xb3, 0xf2, 0x55, 0xd9, 0x0f,
		0x0e, 0xf7, 0x8e, 0x9a, 0x27, 0xfb, 0x1f, 0x7e, 0x69, 0x0d, 0x41, 0xe3, 0xb7, 0xbd, 0x0f, 0x6f,
		0xfe, 0x5c, 0xdd, 0xfa, 0xec, 0x23, 0x5c, 0x1c, 0x82, 0xe2, 0x0a, 0x16, 0x40, 0xbd, 0x03, 0xfa,
		0xab, 0xfa, 0x7c, 0x75, 0x99, 0x87, 0x5b, 0xae, 0x02, 0xaf, 0x96, 0xc8, 0x4e, 0x2f, 0xe8, 0x28,
		0x09, 0x7e, 0x93, 0xb4, 0xa3, 0x4f, 0x69, 0x0e, 0x0e, 0xf7, 0x3e, 0x40, 0x5e, 0x20, 0x2f, 0x90,
		0x97, 0xb4, 0x91, 0xa3, 0xfc, 0x41, 0x2f, 0x11, 0x1b, 0x81, 0x88, 0x54, 0xd3, 0x28, 0x46, 0x54,
		0xdc, 0xf3, 0x07, 0xbd, 0xe1, 0x43, 0xe5, 0x19, 0x01, 0xfb, 0x92, 0x1b, 0xb4, 0xfa, 0x6c, 0xd0,
		0x02, 0xc4, 0x00, 0x31, 0x96, 0xf3, 0x88, 0x12, 0x62, 0x96, 0xf3, 0x64, 0xae, 0x6a, 0x58, 0xce,
		0xc3, 0x72, 0x1e, 0x13, 0xec, 0xe3, 0xaf, 0xb3, 0x28, 0x72, 0xba, 0x81, 0x2b, 0x50, 0xdc, 0xe2,
		0xa6, 0x29, 0x98, 0x07, 0xcc, 0x03, 0xe6, 0x91, 0x32, 0x72, 0xd6, 0x64, 0x96, 0x2b, 0x52, 0xe1,
		0x17, 0x15, 0x3a, 0x17, 0x61, 0x30, 0xe8, 0xeb, 0x63, 0xcf, 0x9d, 0xd6, 0x80, 0x1f, 0xe0, 0x07,
		0xf8, 0x49, 0x9b, 0x49, 0x59, 0x2f, 0xe8, 0x49, 0xf9, 0x06, 0xd4, 0xb7, 0x38, 0x74, 0x9d, 0x81,
		0x1f, 0xc5, 0xee, 0x59, 0x57, 0xf3, 0x5d, 0x7c, 0xbd, 0x4c, 0xf6, 0xac, 0x67, 0x2e, 0xbb, 0x26,
		0x7d, 0xf2, 0xf2, 0x65, 0x69, 0xe4, 0x6f, 0x17, 0xfe, 0xb7, 0xf0, 0xf7, 0x7f, 0x1d, 0x36, 0xab,
		0xad, 0xbd, 0x0f, 0x27, 0x7b, 0x47, 0x87, 0x47, 0xfb, 0xc7, 0x7b, 0x7f, 0x2f, 0x04, 0x61, 0xe1,
		0xd6, 0x2f, 0x7c, 0xf2, 0x47, 0xbf, 0x71, 0xb8, 0x77, 0x74, 0x7c, 0xf0, 0xa1, 0xf9, 0xee, 0xef,
		0x45, 0x01, 0xf1, 0x21, 0x84, 0x03, 0x8f, 0xe1, 0x41, 0xf2, 0xae, 0x85, 0x34, 0x83, 0x34, 0x2a,
		0x3c, 0x8a, 0x0e, 0x7a, 0x9d, 0x81, 0x88, 0x31, 0xc1, 0x25, 0xe2, 0xc4, 0x6d, 0x76, 0xbc, 0x28,
		0xe8, 0x8e, 0x7c, 0x67, 0x7d, 0x42, 0xf1, 0xa0, 0x49, 0x58, 0x05, 0xac, 0x02, 0x56, 0x81, 0xa8,
		0xf9, 0x29, 0x10, 0x0d, 0xfa, 0xfd, 0x20, 0x8c, 0x55, 0xc7, 0xe9, 0xb8, 0xb1, 0xeb, 0x84, 0x6e,
		0xac, 0x22, 0xa7, 0x7a, 0x21, 0x00, 0x47, 0x33, 0x1a, 0x06, 0x94, 0x00, 0x25, 0x40, 0x29, 0x65,
		0xe4, 0xac, 0xfc, 0x2a, 0xbb, 0xdd, 0xe6, 0x49, 0xb3, 0x75, 0xd4, 0x3c, 0xd9, 0x5b, 0xdd, 0xb5,
		0x75, 0xa3, 0x53, 0xe1, 0x57, 0xf9, 0x6c, 0xf1, 0xca, 0x2a, 0x3f, 0xdc, 0x0a, 0x3f, 0x5b, 0xfd,
		0x65, 0x7d, 0x85, 0x9f, 0xae, 0xb1, 0xca, 0x3d, 0x57, 0x5b, 0xe5, 0x94, 0x5b, 0x65, 0xb0, 0xdc,
		0x5c, 0xe5, 0xb0, 0xac, 0xae, 0x72, 0x58, 0xd6, 0xb6, 0x57, 0xf8, 0xe1, 0x76, 0x56, 0x19, 0x4f,
		0x64, 0x3a, 0x6e, 0xb9, 0x96, 0xc6, 0xa7, 0x94, 0x2e, 0xef, 0xbc, 0x28, 0x6e, 0xc6, 0x71, 0xa8,
		0x27, 0x5f, 0xde, 0x7b, 0xfe, 0x5e, 0x57, 0x0d, 0x15, 0x5c, 0xa4, 0xb7, 0x86, 0xa7, 0xf8, 0xde,
		0xfd, 0x76, 0xab, 0xa5, 0xca, 0x76, 0xad, 0xd6, 0xd8, 0xaa, 0xd5, 0xca, 0x5b, 0x9b, 0x5b, 0xe5,
		0x9d, 0x7a, 0xbd, 0xd2, 0xd0, 0x92, 0x34, 0x07, 0x61, 0x47, 0x85, 0xaa, 0xf3, 0xfa, 0xaa, 0xf8,
		0xaa, 0xe0, 0x0f, 0xba, 0xdd, 0x65, 0xb3, 0x6d, 0xea, 0xa6, 0x6c, 0x9b, 0x3a, 0xb6, 0x0d, 0xb6,
		0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6,
		0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0x0d, 0xb6, 0xcd, 0x7c,
		0xb7, 0xfa, 0xa5, 0xeb, 0xfa, 0x4e, 0xd7, 0x8b, 0x04, 0xf6, 0x4d, 0xdf, 0x34, 0x85, 0x35, 0x83,
		0x35, 0x83, 0x35, 0xa3, 0x93, 0x46, 0x5e, 0x87, 0x6d, 0xd3, 0x53, 0xc8, 0xcf, 0xfd, 0x9e, 0xdd,
		0x0a, 0xdb, 0xa6, 0xb3, 0xee, 0x82, 0x5a, 0x79, 0xa7, 0xc6, 0xae, 0x69, 0x19, 0x76, 0x08, 0xc7,
		0x5b, 0x2d, 0x8e, 0xf7, 0xb5, 0xef, 0x56, 0x9d, 0x7e, 0xf4, 0x59, 0x9f, 0xe2, 0x4d, 0x5b, 0x82,
		0xe1, 0xc1, 0xf0, 0x60, 0x78, 0x29, 0x23, 0x47, 0x70, 0x7b, 0xa8, 0x46, 0x1b, 0xef, 0x94, 0x7f,
		0x11, 0x5f, 0x42, 0xf1, 0xe6, 0xe3, 0x17, 0xdb, 0x50, 0xbc, 0xac, 0xbb, 0xa0, 0xb1, 0x09, 0xc1,
		0xcb, 0x96, 0xe0, 0xad, 0xd7, 0xfe, 0x70, 0x76, 0x7f, 0x5b, 0xdb, 0xfd, 0xcd, 0xde, 0x6e, 0x43,
		0x9f, 0x58, 0x30, 0xd3, 0x8b, 0x4d, 0xdf, 0x0f, 0xe2, 0xf4, 0xdb, 0xbf, 0x8b, 0x51, 0xfb, 0x52,
		0xf5, 0xdc, 0xbe, 0x9b, 0x10, 0x8b, 0x62, 0x29, 0xe8, 0x2b, 0xbf, 0x9d, 0x90, 0x76, 0xc7, 0x6d,
		0xb7, 0x55, 0x14, 0x39, 0xfd, 0xc0, 0xf3, 0xe3, 0xa8, 0x34, 0xfb, 0xbb, 0x52, 0x14, 0x79, 0x9d,
		0x28, 0xf9, 0xbb, 0x34, 0xfa, 0x68, 0x31, 0xd5, 0x6e, 0xf6, 0x70, 0xd0, 0x8e, 0xfd, 0x49, 0xa5,
		0xf4, 0xe9, 0x6d, 0x34, 0x93, 0x2b, 0x1d, 0x26, 0x97, 0x6d, 0xcd, 0xfa, 0xa6, 0x75, 0x3c, 0xbc,
		0x85, 0xe4, 0xef, 0xd6, 0x58, 0x72, 0x3c, 0x33, 0xd3, 0x45, 0x0b, 0x74, 0x4f, 0xb1, 0x13, 0xc4,
		0x95, 0xca, 0xe2, 0xda, 0x7a, 0x0a, 0x70, 0xe3, 0xcf, 0x2f, 0x18, 0x10, 0x13, 0xa6, 0xb9, 0xe0,
		0xc7, 0xd2, 0x2a, 0x35, 0x1d, 0x85, 0x26, 0xa4, 0xcc, 0x74, 0xa1, 0x5a, 0x4c, 0x89, 0x89, 0x81,
		0xb1, 0x9c, 0xf2, 0x32, 0x0b, 0x3e, 0xbb, 0x5e, 0x3a, 0xeb, 0xa8, 0xd8, 0x9e, 0x44, 0x9b, 0xa6,
		0xbd, 0x91, 0x1a, 0x6f, 0x34, 0x52, 0x05, 0x73, 0x03, 0x73, 0x23, 0x7b, 0x73, 0x23, 0x6d, 0xea,
		0xe9, 0x8e, 0x4e, 0xb2, 0xa3, 0x95, 0x21, 0x25, 0xaa, 0x9d, 0x9a, 0x92, 0x29, 0x6a, 0x28, 0x55,
		0x6d, 0x08, 0x15, 0x91, 0xd4, 0xb5, 0x2b, 0x55, 0x44, 0x52, 0x59, 0x48, 0x9a, 0x68, 0xc6, 0x9e,
		0xb6, 0x7f, 0xf9, 0x20, 0xf2, 0xf4, 0x0b, 0xd2, 0x3c, 0x18, 0x3b, 0x2b, 0x19, 0xa9, 0x37, 0x8d,
		0x97, 0x3b, 0x86, 0x2a, 0xa7, 0x13, 0xf4, 0x5c, 0xcf, 0xf7, 0x3a, 0xd2, 0x18, 0x78, 0xd3, 0x30,
		0x60, 0x08, 0x18, 0x02, 0x86, 0x39, 0x05, 0x43, 0xed, 0xc3, 0x0e, 0xee, 0xe7, 0x69, 0x43, 0xa0,
		0x29, 0x99, 0x55, 0x3c, 0x72, 0x6e, 0xeb, 0xf4, 0xc6, 0x24, 0xa7, 0x7c, 0x84, 0x01, 0xee, 0x41,
		0xb3, 0xc2, 0x87, 0x23, 0x4c, 0xdb, 0x35, 0x30, 0x0d, 0x21, 0x94, 0x1e, 0x77, 0xbb, 0x4a, 0x70,
		0x6a, 0xc8, 0x56, 0x57, 0x09, 0x1e, 0xa2, 0x60, 0xa5, 0xbb, 0x9e, 0xe5, 0xa3, 0x95, 0xd3, 0xe5,
		0x65, 0x5f, 0x3d, 0x15, 0x5f, 0x06, 0xf2, 0xdc, 0x6b, 0xdc, 0xac, 0xe6, 0x68, 0x73, 0xfb, 0x68,
		0xbc, 0xdf, 0x9b, 0xf0, 0x38, 0x78, 0x1c, 0x3c, 0x2e, 0xaf, 0x3c, 0x4e, 0xe6, 0xe4, 0xbd, 0x07,
		0xc2, 0x56, 0x60, 0x71, 0xaa, 0xe6, 0x49, 0x7c, 0xb9, 0x80, 0xe9, 0xb0, 0xf2, 0x59, 0x5d, 0x69,
		0x1f, 0xd5, 0x37, 0x0b, 0xad, 0xef, 0xb6, 0x0e, 0xcc, 0x02, 0xb3, 0xc0, 0x2c, 0x72, 0x19, 0xb9,
		0x8c, 0x5c, 0x46, 0x2e, 0x23, 0x97, 0x57, 0x47, 0x2e, 0x5b, 0x9d, 0x1a, 0xd6, 0x5c, 0x12, 0x36,
		0x6d, 0x47, 0x76, 0x69, 0xd8, 0x88, 0xf1, 0x95, 0xb4, 0x56, 0x6c, 0x14, 0x44, 0x57, 0x8a, 0xed,
		0x0e, 0xef, 0xe8, 0x28, 0xd5, 0x82, 0xb1, 0xf4, 0x1d, 0x9b, 0xf6, 0xa4, 0x17, 0x25, 0x73, 0xba,
		0x8b, 0xca, 0x7a, 0xad, 0x4c, 0x95, 0xb5, 0x32, 0xa6, 0x49, 0x33, 0x6b, 0x65, 0xee, 0xbb, 0x79,
		0xac, 0x95, 0x41, 0xef, 0xa2, 0x77, 0xd1, 0xbb, 0x8b, 0x44, 0x1e, 0x6b, 0x65, 0x0a, 0xac, 0x95,
		0x01, 0x0c, 0x01, 0x43, 0xc0, 0x10, 0xf3, 0x0f, 0xf3, 0x0f, 0xf3, 0x0f, 0xf3, 0x0f, 0xf3, 0x2f,
		0x23, 0xf6, 0xc5, 0x5a, 0x19, 0x78, 0x1c, 0x3c, 0x0e, 0x1e, 0xa7, 0x1d, 0x79, 0xac, 0x95, 0x31,
		0x09, 0xd3, 0xac, 0x95, 0x01, 0x66, 0x81, 0x59, 0x60, 0x16, 0xb9, 0x8c, 0x5c, 0x46, 0x2e, 0x23,
		0x97, 0x91, 0xcb, 0xd6, 0x3e, 0xb9, 0x92, 0x6b, 0x65, 0x74, 0x16, 0x6c, 0x14, 0x4c, 0x2c, 0x95,
		0x39, 0x4e, 0x6e, 0x88, 0xba, 0x59, 0x86, 0x3a, 0x3c, 0xd3, 0xba, 0x59, 0xa3, 0x2e, 0xce, 0x4d,
		0xdd, 0xac, 0x2f, 0x9a, 0x75, 0xb3, 0xbe, 0x50, 0x37, 0xcb, 0xb4, 0xa2, 0xa1, 0x6e, 0x56, 0x5a,
		0xf0, 0xa1, 0x6e, 0x16, 0x75, 0xb3, 0xec, 0x98, 0x02, 0xac, 0x05, 0x14, 0x4a, 0xbd, 0x7b, 0xa3,
		0x93, 0x73, 0x36, 0x1c, 0xb7, 0xbb, 0x4a, 0xd8, 0xe5, 0xbb, 0x69, 0x17, 0x7f, 0x0f, 0x7f, 0x0f,
		0x7f, 0x2f, 0xa7, 0xfe, 0x1e, 0x6b, 0x03, 0x1f, 0x81, 0x42, 0x43, 0x13, 0x1f, 0x0f, 0xdb, 0x07,
		0x1a, 0x81, 0x46, 0xa0, 0x31, 0xa7, 0xd0, 0xc8, 0xd4, 0xc7, 0x22, 0x37, 0xc6, 0xd4, 0x07, 0x53,
		0x1f, 0x4c, 0x7d, 0xc8, 0x60, 0xa1, 0x5c, 0x2b, 0xa7, 0x4b, 0xcd, 0xc5, 0xe2, 0xd0, 0xf5, 0x23,
		0x4f, 0x7b, 0x4a, 0x63, 0x06, 0x13, 0xbb, 0xd5, 0x3a, 0x3c, 0x0c, 0x1e, 0x06, 0x0f, 0x43, 0xa2,
		0x2e, 0x01, 0x2c, 0x76, 0x7a, 0x91, 0x38, 0x18, 0x0e, 0xdb, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10,
		0x08, 0x34, 0x0e, 0x81, 0x2c, 0x8a, 0x19, 0xad, 0x91, 0xf8, 0x92, 0xbb, 0x02, 0x32, 0xbf, 0x53,
		0x40, 0x66, 0xa1, 0x14, 0xa2, 0x80, 0x8c, 0xf4, 0x58, 0xc6, 0xa4, 0xb1, 0x69, 0x40, 0x64, 0xd2,
		0x18, 0x3a, 0x0a, 0x1d, 0x85, 0x8e, 0x42, 0x47, 0x25, 0x8d, 0x4a, 0x26, 0x8d, 0x81, 0x46, 0xa0,
		0x11, 0x68, 0x64, 0xd2, 0x78, 0xb1, 0x1b, 0x63, 0xd2, 0x98, 0x49, 0x63, 0x26, 0x8d, 0x65, 0xb0,
		0x50, 0xae, 0x15, 0x26, 0x8d, 0x67, 0x33, 0x31, 0x26, 0x8d, 0xe1, 0x61, 0xf0, 0x30, 0x24, 0xea,
		0x72, 0xc1, 0x22, 0x93, 0xc6, 0x40, 0x20, 0x10, 0x08, 0x04, 0x2e, 0x2d, 0x04, 0x32, 0x69, 0x3c,
		0x99, 0x34, 0xce, 0x59, 0x25, 0x85, 0xdf, 0xa9, 0xa4, 0x60, 0xb6, 0xc3, 0xb3, 0xaf, 0xa4, 0xf0,
		0x7b, 0x5e, 0x2a, 0x29, 0x7c, 0x4b, 0x2c, 0xf0, 0x30, 0xd2, 0xab, 0xa7, 0x30, 0x6d, 0x85, 0xaa,
		0x0a, 0x86, 0xc9, 0x06, 0x55, 0x15, 0xd2, 0x02, 0x11, 0x55, 0x15, 0xa8, 0xaa, 0x60, 0x87, 0xaf,
		0xb3, 0x40, 0x46, 0x28, 0xf5, 0xa6, 0x0d, 0x9c, 0x75, 0xdd, 0xf6, 0xe7, 0xae, 0x17, 0xc5, 0xc9,
		0x38, 0x23, 0x27, 0xbb, 0xef, 0xb5, 0x8b, 0xf4, 0x46, 0x7a, 0x23, 0xbd, 0x73, 0x2a, 0xbd, 0x99,
		0x05, 0x5e, 0xe4, 0xc6, 0x98, 0x05, 0x66, 0x16, 0x98, 0x59, 0x60, 0x19, 0x2c, 0x94, 0x6b, 0x65,
		0x19, 0x67, 0x81, 0x7b, 0xee, 0x37, 0xc7, 0x1d, 0xc4, 0x97, 0xce, 0xb9, 0xeb, 0x75, 0x07, 0xa1,
		0x12, 0x9c, 0xf5, 0x78, 0xd8, 0x34, 0x0c, 0x0c, 0x06, 0x06, 0x03, 0xcb, 0x31, 0x03, 0xdb, 0x16,
		0x24, 0x60, 0x75, 0x08, 0x18, 0x04, 0x0c, 0x02, 0x96, 0xaa, 0xab, 0xaa, 0x75, 0xe8, 0xd7, 0xf2,
		0xd0, 0x2f, 0xa6, 0x5a, 0x4b, 0xb7, 0xa7, 0x89, 0xf2, 0xb6, 0x4b, 0xf7, 0x8f, 0x93, 0xe4, 0xb6,
		0xd8, 0xaa, 0xbb, 0x08, 0xb2, 0xb1, 0x55, 0x57, 0x9c, 0x44, 0x33, 0x13, 0x61, 0x1a, 0x1b, 0x99,
		0x89, 0x40, 0x07, 0xa3, 0x83, 0xd1, 0xc1, 0xda, 0x3a, 0x98, 0x99, 0x08, 0x84, 0x30, 0x42, 0x38,
		0x07, 0x5d, 0xc5, 0x4c, 0xc4, 0x72, 0x49, 0x61, 0x66, 0x22, 0x60, 0x60, 0x30, 0x30, 0x18, 0x98,
		0x36, 0x03, 0x63, 0x26, 0x02, 0x02, 0x06, 0x01, 0xcb, 0xbe, 0xab, 0x98, 0x89, 0x58, 0x26, 0xfa,
		0xc5, 0x4c, 0xc4, 0xdd, 0x99, 0x88, 0x7c, 0x6d, 0xfd, 0x9a, 0x4c, 0x44, 0xb0, 0xff, 0xcb, 0x42,
		0xdf, 0x67, 0xbe, 0x0b, 0x6c, 0xdc, 0xdb, 0x79, 0xd8, 0x0a, 0x36, 0x7e, 0xa2, 0x94, 0x5b, 0xc0,
		0x92, 0x4f, 0xa7, 0xdb, 0xfa, 0x55, 0x66, 0xeb, 0x97, 0x75, 0x41, 0xb3, 0x76, 0x5b, 0xbf, 0x52,
		0x0b, 0x90, 0x69, 0xcf, 0x77, 0x95, 0x7b, 0x1e, 0xaa, 0xf3, 0x34, 0xbd, 0x3e, 0x99, 0x2e, 0xdd,
		0x4a, 0xf1, 0xd9, 0xc3, 0x31, 0xec, 0xbd, 0x7c, 0x39, 0x9e, 0x32, 0x2f, 0x25, 0xa9, 0x96, 0x03,
		0xc0, 0x48, 0x37, 0x11, 0xad, 0x35, 0x01, 0xad, 0xbd, 0x5b, 0xb4, 0x0a, 0x64, 0x00, 0x19, 0x73,
		0xde, 0x66, 0xea, 0xdd, 0xa2, 0x6e, 0xe7, 0x8b, 0x0a, 0x63, 0x2f, 0x52, 0x8e, 0xdb, 0x4f, 0x35,
		0xaa, 0x3e, 0x08, 0xa1, 0x07, 0x2d, 0xea, 0xad, 0xdb, 0x28, 0xb3, 0x83, 0x54, 0xda, 0x72, 0x64,
		0xdd, 0x86, 0x69, 0x25, 0xa9, 0x6d, 0x21, 0x0a, 0x56, 0x70, 0xd1, 0xac, 0xdc, 0x62, 0x67, 0xa1,
		0xd8, 0x99, 0x1b, 0x79, 0x6d, 0xa7, 0xe3, 0xc6, 0xae, 0x13, 0xba, 0xb1, 0x8a, 0x9c, 0xaa, 0xc0,
		0x0e, 0xf6, 0xc7, 0x1a, 0x05, 0x8c, 0x00, 0x23, 0xc0, 0x28, 0x65, 0xe4, 0x78, 0x1d, 0xe5, 0xc7,
		0x5e, 0x7c, 0x95, 0x4e, 0x5a, 0x3c, 0x00, 0x24, 0x0d, 0x23, 0xb6, 0xb8, 0x3f, 0xbe, 0x95, 0xd7,
		0x6e, 0x24, 0xb8, 0xac, 0x6d, 0xb7, 0x79, 0xd2, 0x6c, 0x1d, 0x35, 0x4f, 0xf6, 0x74, 0x63, 0x30,
		0x71, 0x9b, 0x23, 0x91, 0xe9, 0x15, 0xa1, 0xe9, 0xc5, 0xc9, 0x23, 0x0e, 0x9f, 0xae, 0x55, 0x7d,
		0xff, 0x5a, 0x60, 0x96, 0xee, 0x45, 0x2e, 0x9f, 0xad, 0x52, 0x59, 0xe5, 0x87, 0x5b, 0xe1, 0x67,
		0xab, 0xbf, 0xac, 0xaf, 0xf0, 0xd3, 0x35, 0x56, 0xb9, 0xe7, 0x6a, 0xab, 0x9c, 0x72, 0xab, 0x0c,
		0x96, 0x9b, 0xab, 0x1c, 0x96, 0xd5, 0x55, 0x0e, 0xcb, 0xda, 0xf6, 0x0a, 0x3f, 0xdc, 0xce, 0x2a,
		0xe3, 0x89, 0x4c, 0xc7, 0x69, 0xb5, 0x70, 0xba, 0x24, 0xd2, 0xe5, 0x9d, 0x17, 0xc5, 0xcd, 0x38,
		0xd6, 0xdc, 0x04, 0xf3, 0xde, 0xf3, 0xf7, 0xba, 0x6a, 0xa8, 0xe0, 0x22, 0xbd, 0x85, 0x25, 0xc5,
		0xf7, 0xee, 0xb7, 0x5b, 0x2d, 0x55, 0xb6, 0x6b, 0xb5, 0xc6, 0x56, 0xad, 0x56, 0xde, 0xda, 0xdc,
		0x2a, 0xef, 0xd4, 0xeb, 0x95, 0x86, 0x96, 0xa4, 0x39, 0x08, 0x3b, 0x2a, 0x54, 0x9d, 0xd7, 0x57,
		0xc5, 0x57, 0x05, 0x7f, 0xd0, 0xed, 0x2e, 0x93, 0x5d, 0x53, 0x37, 0x61, 0xd7, 0xd4, 0xb1, 0x6b,
		0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b,
		0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b, 0xb0, 0x6b,
		0xe6, 0xb4, 0x6b, 0xc2, 0xc0, 0xed, 0xb4, 0xdd, 0x28, 0x76, 0xce, 0xbd, 0x6e, 0xac, 0x42, 0x01,
		0xaf, 0xe6, 0x7e, 0x8b, 0x18, 0x35, 0x18, 0x35, 0x18, 0x35, 0x69, 0xb3, 0x69, 0x3d, 0x16, 0xf9,
		0xb5, 0x23, 0x57, 0xe0, 0x58, 0x9a, 0xc8, 0x4d, 0x0b, 0x36, 0xbb, 0xea, 0xdc, 0x1d, 0x74, 0x93,
		0x70, 0x1b, 0x46, 0x2f, 0x98, 0x05, 0x66, 0x81, 0x59, 0x60, 0xd6, 0x4f, 0xef, 0xb1, 0x33, 0xc2,
		0x0c, 0xe7, 0x4b, 0xd7, 0xf5, 0xf5, 0xc1, 0xeb, 0x4e, 0x6b, 0xc0, 0x0f, 0xf0, 0x03, 0xfc, 0xa4,
		0x8c, 0x9c, 0x61, 0x06, 0x39, 0x5e, 0x47, 0x00, 0x7e, 0x34, 0xaa, 0xd9, 0x09, 0x15, 0x51, 0x11,
		0xa8, 0x34, 0x23, 0x59, 0x34, 0x45, 0xb8, 0x02, 0xc7, 0xb4, 0xf2, 0x46, 0x45, 0xa8, 0x3d, 0x03,
		0xf5, 0x36, 0x04, 0xbc, 0x27, 0xd1, 0x62, 0x28, 0xa6, 0xba, 0xa0, 0x56, 0xde, 0xa9, 0xe5, 0xb8,
		0x17, 0x32, 0xaa, 0x32, 0x72, 0x9a, 0x67, 0xfe, 0x71, 0xd9, 0xee, 0x3b, 0xa1, 0xfa, 0x6b, 0xe0,
		0x85, 0xaa, 0x23, 0x40, 0x40, 0xee, 0x34, 0x07, 0x03, 0x81, 0x81, 0xc0, 0x40, 0x10, 0x40, 0x3f,
		0x05, 0xa0, 0x20, 0xae, 0x54, 0x3e, 0x0b, 0x20, 0xcf, 0xa8, 0x1d, 0x20, 0x07, 0xc8, 0x01, 0x72,
		0x80, 0x9c, 0x9f, 0x42, 0xce, 0x17, 0x01, 0x9f, 0x78, 0xd8, 0x08, 0x60, 0x03, 0xd8, 0x00, 0x36,
		0x80, 0xcd, 0xcf, 0xee, 0x51, 0xf9, 0xee, 0x59, 0x57, 0x42, 0x5a, 0x4d, 0x1a, 0x62, 0x72, 0x0a,
		0xec, 0x02, 0xbb, 0xc0, 0x2e, 0x0b, 0xd8, 0x75, 0x11, 0x7f, 0x4e, 0x8a, 0x83, 0x06, 0x83, 0x58,
		0x1f, 0xbf, 0x6e, 0x37, 0x06, 0xf8, 0x00, 0x3e, 0x80, 0x4f, 0xca, 0xc8, 0xd1, 0x3e, 0x6f, 0x89,
		0x99, 0x29, 0x33, 0x00, 0xf3, 0xa0, 0x39, 0xe1, 0xf2, 0xfd, 0xcc, 0x4c, 0xa5, 0xef, 0x02, 0xc1,
		0x73, 0x91, 0x98, 0x9a, 0xb2, 0xc3, 0x3e, 0x2e, 0xbd, 0x4e, 0x47, 0x09, 0x2c, 0x8a, 0x19, 0xb7,
		0xa3, 0xaf, 0x9b, 0xce, 0xdd, 0x6e, 0x84, 0x70, 0x82, 0xbb, 0xc0, 0x5d, 0x10, 0x4e, 0x3f, 0xbf,
		0x47, 0xaf, 0xff, 0xa5, 0xe1, 0xf8, 0x9d, 0xbe, 0xd8, 0x7e, 0x88, 0xfb, 0x0d, 0x02, 0x42, 0x80,
		0x10, 0x20, 0x04, 0x08, 0x2d, 0x00, 0x42, 0xa3, 0x63, 0x5e, 0xc4, 0xa1, 0x68, 0xdc, 0x2c, 0x80,
		0x04, 0x20, 0x01, 0x48, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x8f, 0xbe,
		0xe6, 0xde, 0xa0, 0x1b, 0x7b, 0xa2, 0xfb, 0xc4, 0x1f, 0xb4, 0x08, 0x0f, 0x81, 0x87, 0xc0, 0x43,
		0x10, 0x46, 0x3f, 0xbb, 0x47, 0x99, 0x73, 0xa8, 0x38, 0x7b, 0x0a, 0xb8, 0x01, 0x6e, 0x74, 0x22,
		0x27, 0x8a, 0x43, 0xcf, 0xbf, 0x90, 0x40, 0x9b, 0xed, 0x1c, 0xa3, 0x4d, 0xf0, 0xb9, 0xad, 0x0f,
		0x36, 0xc3, 0x46, 0xc0, 0x1a, 0xb0, 0x06, 0xac, 0x81, 0xda, 0xfc, 0x14, 0x6c, 0xfa, 0x2a, 0x74,
		0x63, 0xcf, 0xbf, 0x70, 0xce, 0x43, 0xf5, 0xd7, 0x40, 0xf9, 0xed, 0x2b, 0x01, 0xf0, 0x79, 0xa4,
		0x51, 0xfd, 0xd9, 0xf4, 0x49, 0x38, 0xc6, 0x57, 0x7d, 0x15, 0xbd, 0x7a, 0x7b, 0xb4, 0xf7, 0xcf,
		0x56, 0xb5, 0x55, 0x6f, 0xfd, 0xf2, 0xeb, 0xbf, 0x41, 0x3a, 0x90, 0x0e, 0xa4, 0x4b, 0x1b, 0x39,
		0x2b, 0x5f, 0x95, 0xfd, 0xe0, 0x70, 0xef, 0xa8, 0x79, 0xb2, 0xff, 0xe1, 0x97, 0xd6, 0x10, 0x34,
		0x7e, 0xdb, 0xfb, 0xf0, 0xe6, 0xcf, 0xd5, 0xad, 0xcf, 0x3e, 0xc2, 0xc5, 0x21, 0x28, 0xae, 0x60,
		0x01, 0xd4, 0x3b, 0xa0, 0xbf, 0xaa, 0xcf, 0x57, 0x97, 0x79, 0xb8, 0xe5, 0x2a, 0xf0, 0x6a, 0x89,
		0xec, 0xf4, 0x82, 0x8e, 0x92, 0xe0, 0x37, 0x49, 0x3b, 0xfa, 0x94, 0xe6, 0xe0, 0x70, 0xef, 0x03,
		0xe4, 0x05, 0xf2, 0x02, 0x79, 0x49, 0x1b, 0x39, 0xca, 0x1f, 0xf4, 0x12, 0xb1, 0x11, 0x88, 0x48,
		0x35, 0x8d, 0x62, 0x44, 0xc5, 0x3d, 0x7f, 0xd0, 0x1b, 0x3e, 0x54, 0x9e, 0x11, 0xb0, 0x2f, 0xb9,
		0x41, 0xab, 0xcf, 0x06, 0x2d, 0x40, 0x0c, 0x10, 0x63, 0x39, 0x8f, 0x28, 0x21, 0x66, 0x39, 0x4f,
		0xe6, 0xaa, 0x86, 0xe5, 0x3c, 0x2c, 0xe7, 0x31, 0xc1, 0x3e, 0xfe, 0x3a, 0x8b, 0x22, 0xa7, 0x1b,
		0xb8, 0x02, 0xc5, 0x2d, 0x6e, 0x9a, 0x82, 0x79, 0xc0, 0x3c, 0x60, 0x1e, 0x29, 0x23, 0x67, 0x4d,
		0x66, 0xb9, 0x22, 0x15, 0x7e, 0x51, 0xa1, 0x73, 0x11, 0x06, 0x83, 0xbe, 0x3e, 0xf6, 0xdc, 0x69,
		0x0d, 0xf8, 0x01, 0x7e, 0x80, 0x9f, 0xb4, 0x99, 0x94, 0xf5, 0x82, 0x9e, 0x94, 0x6f, 0x40, 0x7d,
		0x8b, 0x43, 0xd7, 0x19, 0xf8, 0x51, 0xec, 0x9e, 0x75, 0x35, 0xdf, 0xc5, 0xd7, 0xcb, 0x64, 0xcf,
		0x7a, 0xe6, 0xb2, 0x6b, 0xd2, 0x27, 0x2f, 0x5f, 0x96, 0x46, 0xfe, 0x76, 0xe1, 0x7f, 0x0b, 0x7f,
		0xff, 0xd7, 0x61, 0xb3, 0xda, 0xda, 0xfb, 0x70, 0xb2, 0x77, 0x74, 0x78, 0xb4, 0x7f, 0xbc, 0xf7,
		0xf7, 0x42, 0x10, 0x16, 0x6e, 0xfd, 0xc2, 0x27, 0x7f, 0xf4, 0x1b, 0x87, 0x7b, 0x47, 0xc7, 0x07,
		0x1f, 0x9a, 0xef, 0xfe, 0x5e, 0x14, 0x10, 0x1f, 0x42, 0x38, 0xf0, 0x18, 0x1e, 0x24, 0xef, 0x5a,
		0x48, 0x33, 0x48, 0xa3, 0xc2, 0xa3, 0xe8, 0xa0, 0xd7, 0x19, 0x88, 0x18, 0x13, 0x5c, 0x22, 0x4e,
		0xdc, 0x66, 0xc7, 0x8b, 0x82, 0xee, 0xc8, 0x77, 0xd6, 0x27, 0x14, 0x0f, 0x9a, 0x84, 0x55, 0xc0,
		0x2a, 0x60, 0x15, 0x88, 0x9a, 0x9f, 0x02, 0xd1, 0xa0, 0xdf, 0x0f, 0xc2, 0x58, 0x75, 0x9c, 0x8e,
		0x1b, 0xbb, 0x4e, 0xe8, 0xc6, 0x2a, 0x72, 0xaa, 0x17, 0x02, 0x70, 0x34, 0xa3, 0x61, 0x40, 0x09,
		0x50, 0x02, 0x94, 0x52, 0x46, 0xce, 0xca, 0xaf, 0xb2, 0xdb, 0x6d, 0x9e, 0x34, 0x5b, 0x47, 0xcd,
		0x93, 0xbd, 0xd5, 0x5d, 0x5b, 0x37, 0x3a, 0x15, 0x7e, 0x95, 0xcf, 0x16, 0xaf, 0xac, 0xf2, 0xc3,
		0xad, 0xf0, 0xb3, 0xd5, 0x5f, 0xd6, 0x57, 0xf8, 0xe9, 0x1a, 0xab, 0xdc, 0x73, 0xb5, 0x55, 0x4e,
		0xb9, 0x55, 0x06, 0xcb, 0xcd, 0x55, 0x0e, 0xcb, 0xea, 0x2a, 0x87, 0x65, 0x6d, 0x7b, 0x85, 0x1f,
		0x6e, 0x67, 0x95, 0xf1, 0x44, 0xa6, 0xe3, 0x96, 0x6b, 0x69, 0x7c, 0x4a, 0xe9, 0xf2, 0xce, 0x8b,
		0xe2, 0x66, 0x1c, 0x87, 0x7a, 0xf2, 0xe5, 0xbd, 0xe7, 0xef, 0x75, 0xd5, 0x50, 0xc1, 0x45, 0x7a,
		0x6b, 0x78, 0x8a, 0xef, 0xdd, 0x6f, 0xb7, 0x5a, 0xaa, 0x6c, 0xd7, 0x6a, 0x8d, 0xad, 0x5a, 0xad,
		0xbc, 0xb5, 0xb9, 0x55, 0xde, 0xa9, 0xd7, 0x2b, 0x0d, 0x2d, 0x49, 0x73, 0x10, 0x76, 0x54, 0xa8,
		0x3a, 0xaf, 0xaf, 0x8a, 0xaf, 0x0a, 0xfe, 0xa0, 0xdb, 0x5d, 0x36, 0xdb, 0xa6, 0x6e, 0xca, 0xb6,
		0xa9, 0x63, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60,
		0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60, 0xdb, 0x60,
		0xdb, 0x60, 0xdb, 0xcc, 0x77, 0xab, 0x5f, 0xba, 0xae, 0xef, 0x74, 0xbd, 0x48, 0x60, 0xdf, 0xf4,
		0x4d, 0x53, 0x58, 0x33, 0x58, 0x33, 0x58, 0x33, 0x3a, 0x69, 0xe4, 0x75, 0xd8, 0x36, 0x3d, 0x85,
		0xfc, 0xdc, 0xef, 0xd9, 0xad, 0xb0, 0x6d, 0x3a, 0xeb, 0x2e, 0xa8, 0x95, 0x77, 0x6a, 0xec, 0x9a,
		0x96, 0x61, 0x87, 0x70, 0xbc, 0xd5, 0xe2, 0x78, 0x5f, 0xfb, 0x6e, 0xd5, 0xe9, 0x47, 0x9f, 0xf5,
		0x29, 0xde, 0xb4, 0x25, 0x18, 0x1e, 0x0c, 0x0f, 0x86, 0x97, 0x32, 0x72, 0x04, 0xb7, 0x87, 0x6a,
		0xb4, 0xf1, 0x4e, 0xf9, 0x17, 0xf1, 0x25, 0x14, 0x6f, 0x3e, 0x7e, 0xb1, 0x0d, 0xc5, 0xcb, 0xba,
		0x0b, 0x1a, 0x9b, 0x10, 0xbc, 0x6c, 0x09, 0xde, 0x7a, 0xed, 0x0f, 0x67, 0xf7, 0xb7, 0xb5, 0xdd,
		0xdf, 0xec, 0xed, 0x36, 0xf4, 0x89, 0x05, 0x33, 0xbd, 0xd8, 0xf4, 0xfd, 0x20, 0x4e, 0xbf, 0xfd,
		0xbb, 0x18, 0xb5, 0x2f, 0x55, 0xcf, 0xed, 0xbb, 0x09, 0xb1, 0x28, 0x96, 0x82, 0xbe, 0xf2, 0xdb,
		0x09, 0x69, 0x77, 0xdc, 0x76, 0x5b, 0x45, 0x91, 0xd3, 0x0f, 0x3c, 0x3f, 0x8e, 0x4a, 0xb3, 0xbf,
		0x2b, 0x45, 0x91, 0xd7, 0x89, 0x92, 0xbf, 0x4b, 0x51, 0xec, 0xc6, 0x69, 0xea, 0x11, 0x0f, 0x19,
		0xd6, 0xa0, 0x1d, 0xfb, 0x93, 0x42, 0xe9, 0xd3, 0xbb, 0x68, 0x26, 0x17, 0x3a, 0x4c, 0xae, 0xda,
		0x9a, 0xf5, 0x4d, 0xeb, 0x78, 0x78, 0x07, 0xc9, 0xdf, 0xad, 0xe3, 0xe4, 0x0e, 0x9e, 0x99, 0xe9,
		0xa0, 0x05, 0x3a, 0xa7, 0xf8, 0xb5, 0xd7, 0x5b, 0xb8, 0x47, 0x6e, 0x64, 0x5b, 0xaf, 0xb7, 0xe0,
		0x5b, 0x9c, 0x32, 0xcc, 0x05, 0x3f, 0x96, 0x56, 0xa1, 0xe9, 0x28, 0x33, 0x21, 0x45, 0xa6, 0x0b,
		0xd1, 0x62, 0x0a, 0x4c, 0x0c, 0x84, 0xe5, 0x14, 0x97, 0x59, 0xd0, 0xd9, 0xf5, 0xd2, 0x59, 0x46,
		0xc5, 0xf6, 0x24, 0xda, 0x34, 0x6d, 0x8d, 0x71, 0x3b, 0x7a, 0xa6, 0x46, 0x05, 0x53, 0x03, 0x53,
		0x63, 0xd9, 0x4c, 0x8d, 0xb4, 0xa9, 0x37, 0x6d, 0x20, 0x0e, 0x07, 0x51, 0xec, 0x74, 0xa2, 0x76,
		0x5f, 0x6e, 0xed, 0xee, 0xad, 0x36, 0x35, 0x7b, 0xe7, 0xd6, 0x99, 0x04, 0xc3, 0xbe, 0xd6, 0x6d,
		0x4e, 0x46, 0xd8, 0x6a, 0x67, 0xbc, 0x64, 0xe6, 0x1b, 0x42, 0x00, 0x1b, 0xba, 0x47, 0x04, 0x11,
		0xec, 0x2a, 0x1f, 0x11, 0x84, 0x10, 0x52, 0x3a, 0x9a, 0xb1, 0xa7, 0x6d, 0x87, 0x3e, 0x88, 0x3c,
		0xfd, 0xfa, 0x36, 0x0f, 0x86, 0xe4, 0x4a, 0x46, 0x62, 0x50, 0xe3, 0xe5, 0x0e, 0xc9, 0xba, 0x73,
		0xa6, 0x9c, 0x50, 0xf5, 0xdc, 0xf0, 0xb3, 0x1c, 0xa8, 0xde, 0x6d, 0x16, 0x20, 0x04, 0x08, 0x01,
		0xc2, 0x9c, 0x02, 0xe1, 0xc0, 0xf3, 0xe3, 0x6d, 0x41, 0x18, 0x14, 0x28, 0x27, 0x2f, 0xb4, 0x1e,
		0x68, 0xf2, 0x47, 0x26, 0x07, 0x0a, 0xd2, 0x93, 0x47, 0xc2, 0xf8, 0xf6, 0xa0, 0x59, 0xe1, 0x63,
		0x16, 0xa6, 0xed, 0x1a, 0x98, 0xd0, 0x10, 0xca, 0x8e, 0xbb, 0x5d, 0x25, 0x38, 0xc9, 0x64, 0xab,
		0xab, 0xaa, 0xf5, 0xfa, 0x12, 0x75, 0xd6, 0xb3, 0x7c, 0xb4, 0x72, 0x9a, 0x29, 0x20, 0x8b, 0x2c,
		0x43, 0xba, 0x8d, 0x2f, 0x32, 0xcb, 0x91, 0x6e, 0xa7, 0xc1, 0xad, 0x16, 0x05, 0x26, 0x96, 0x65,
		0xd6, 0x22, 0xe5, 0x80, 0xf5, 0x7e, 0x36, 0xc3, 0x7a, 0x3f, 0xc3, 0x7a, 0x61, 0xbd, 0xb0, 0x5e,
		0x58, 0x2f, 0xac, 0x17, 0xd6, 0x0b, 0xeb, 0x85, 0xf5, 0xc2, 0x7a, 0x61, 0xbd, 0xb9, 0x61, 0xbd,
		0x5f, 0x3c, 0x23, 0xac, 0xf7, 0xa6, 0x59, 0x58, 0x2f, 0xac, 0x17, 0xd6, 0x0b, 0xeb, 0x85, 0xf5,
		0xc2, 0x7a, 0x61, 0xbd, 0xb0, 0x5e, 0x58, 0x2f, 0xac, 0x37, 0x7b, 0xd6, 0x1b, 0x98, 0x61, 0xbd,
		0x01, 0xac, 0x17, 0xd6, 0x0b, 0xeb, 0x85, 0xf5, 0xc2, 0x7a, 0x61, 0xbd, 0xb0, 0x5e, 0x58, 0x2f,
		0xac, 0x17, 0xd6, 0x2b, 0xc7, 0x7a, 0xad, 0x6e, 0xce, 0xd0, 0xdc, 0x8c, 0x39, 0x6d, 0x47, 0x76,
		0x53, 0xe6, 0xd7, 0x5e, 0xaf, 0xa4, 0xb5, 0x61, 0xaa, 0x20, 0xba, 0x43, 0xf3, 0x5f, 0xbd, 0x5e,
		0x6b, 0xcc, 0xb2, 0x73, 0x7e, 0xba, 0xb2, 0x92, 0x39, 0x51, 0x59, 0x65, 0xbd, 0x4f, 0xad, 0xca,
		0x3e, 0x35, 0xd3, 0x52, 0x85, 0x7d, 0x6a, 0xf7, 0x6e, 0x9f, 0x7d, 0x6a, 0x98, 0x17, 0x98, 0x17,
		0x98, 0x17, 0x79, 0x30, 0x2f, 0xd8, 0xa7, 0x56, 0x60, 0x9f, 0x1a, 0x40, 0x08, 0x10, 0xae, 0x3b,
		0x10, 0xe2, 0xe2, 0x2e, 0xe6, 0xb2, 0xe0, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x8e, 0x5f,
		0x30, 0x2e, 0x2e, 0xfb, 0xd4, 0xd8, 0xa7, 0x06, 0xeb, 0x85, 0xf5, 0xc2, 0x7a, 0x61, 0xbd, 0xb0,
		0x5e, 0x58, 0x2f, 0xac, 0x17, 0xd6, 0x0b, 0xeb, 0xcd, 0x29, 0xeb, 0x65, 0x9f, 0x1a, 0xac, 0x17,
		0xd6, 0x0b, 0xeb, 0x85, 0xf5, 0xc2, 0x7a, 0x61, 0xbd, 0xb0, 0x5e, 0x58, 0x2f, 0xac, 0x77, 0x0d,
		0x58, 0x2f, 0xfb, 0xd4, 0x60, 0xbd, 0xb0, 0x5e, 0x58, 0x2f, 0xac, 0x17, 0xd6, 0x0b, 0xeb, 0x85,
		0xf5, 0xc2, 0x7a, 0x61, 0xbd, 0xf9, 0x67, 0xbd, 0xec, 0x53, 0x4b, 0xf6, 0xa9, 0xe9, 0xec, 0x97,
		0x2a, 0x88, 0x6f, 0x53, 0x4b, 0x71, 0x98, 0x60, 0xfa, 0x0e, 0x5d, 0xa7, 0x73, 0x22, 0x17, 0x3f,
		0xdf, 0x50, 0xbc, 0x73, 0x8d, 0x9d, 0x11, 0xf9, 0x4c, 0xb0, 0xfb, 0x86, 0x52, 0x65, 0xf8, 0xa8,
		0xc9, 0x23, 0xcf, 0xf9, 0x91, 0x54, 0x18, 0x9e, 0x1e, 0xab, 0xef, 0x61, 0x72, 0x65, 0xbb, 0x56,
		0x6b, 0x6c, 0xd5, 0x6a, 0xe5, 0xad, 0xcd, 0xad, 0xf2, 0x4e, 0xbd, 0x5e, 0x69, 0x54, 0x16, 0x60,
		0x01, 0xe9, 0xe0, 0x78, 0xde, 0x97, 0x99, 0x32, 0x07, 0x64, 0x63, 0x7f, 0x81, 0xb8, 0x17, 0x8b,
		0xf7, 0xf9, 0x62, 0xfd, 0xe9, 0xc8, 0xfd, 0xf9, 0x6f, 0x3c, 0xd1, 0x0d, 0x8b, 0xbe, 0x7e, 0xb1,
		0xd7, 0x3e, 0xc7, 0x1b, 0x97, 0x78, 0xd3, 0x3f, 0x7f, 0xc9, 0xb3, 0x5f, 0xdd, 0x4f, 0x5e, 0x5b,
		0x31, 0xba, 0x8a, 0x62, 0xf5, 0xf4, 0x39, 0xb2, 0x37, 0xdb, 0x8d, 0x47, 0xbf, 0xff, 0x44, 0x47,
		0xcc, 0xb7, 0xaf, 0x78, 0x6e, 0x8b, 0x69, 0x11, 0x0b, 0xe9, 0xb6, 0x45, 0x14, 0x5d, 0xcd, 0xd5,
		0x35, 0x0b, 0xba, 0x3f, 0xa9, 0xdd, 0x9d, 0xd4, 0xee, 0xcd, 0x7d, 0x77, 0x66, 0xf8, 0x5c, 0x86,
		0x53, 0x69, 0xde, 0xdd, 0xb5, 0x45, 0xd7, 0x75, 0xe7, 0x7f, 0x73, 0x93, 0xbe, 0x19, 0x7e, 0x68,
		0xde, 0xf1, 0x69, 0xa1, 0x2d, 0xea, 0x0b, 0xbb, 0x96, 0x69, 0xdc, 0xc9, 0xdb, 0x21, 0x36, 0xff,
		0x93, 0xe8, 0x18, 0x8d, 0xda, 0x86, 0xa2, 0xb6, 0x71, 0x78, 0x3f, 0x04, 0x87, 0xcf, 0x9d, 0x11,
		0x63, 0x59, 0x74, 0xe3, 0x77, 0xd1, 0x6d, 0xb7, 0x83, 0x81, 0x1f, 0x7b, 0xfe, 0x45, 0xfa, 0xf3,
		0xb2, 0x6f, 0xb5, 0xb1, 0x1e, 0xc7, 0x66, 0x2f, 0x16, 0xd8, 0x52, 0x4e, 0x7a, 0xfe, 0x4f, 0xcc,
		0x5e, 0x28, 0xf0, 0xed, 0x28, 0x2f, 0x0e, 0xcb, 0xce, 0xd3, 0x61, 0xd9, 0xe9, 0x12, 0x47, 0x2a,
		0x81, 0xc4, 0x13, 0x49, 0x3c, 0xa1, 0x44, 0x13, 0x2b, 0x1b, 0x77, 0x4b, 0xbb, 0xf4, 0xc8, 0xcd,
		0x68, 0xe2, 0xf4, 0x54, 0x7c, 0x19, 0x74, 0xe4, 0xa6, 0x92, 0x1f, 0x36, 0xcd, 0x74, 0xb2, 0xf9,
		0xb4, 0x95, 0x4e, 0x5f, 0x63, 0x69, 0x6c, 0x2c, 0x9d, 0x8d, 0xa4, 0xb5, 0xbe, 0xed, 0x5d, 0xc8,
		0xe7, 0x24, 0xb2, 0xef, 0x05, 0xa2, 0xd5, 0x42, 0x76, 0x04, 0xda, 0x1a, 0x3f, 0x66, 0xee, 0x26,
		0x91, 0x27, 0x2f, 0xcd, 0xeb, 0x28, 0x3f, 0xf6, 0xe2, 0xab, 0x50, 0x9d, 0x17, 0x05, 0x27, 0x3e,
		0x27, 0xaf, 0x50, 0x70, 0x2a, 0xb1, 0xb8, 0x3f, 0xbe, 0xd5, 0xd7, 0x6e, 0xa4, 0xe4, 0x67, 0x55,
		0x27, 0x2f, 0xa4, 0xd9, 0x6c, 0xb6, 0xde, 0xef, 0x9d, 0xfc, 0x7a, 0xb0, 0xdb, 0x3a, 0xf9, 0xf3,
		0x70, 0xaf, 0x68, 0x62, 0x96, 0x35, 0x12, 0x8b, 0x08, 0x33, 0xd1, 0xf1, 0xe8, 0x8b, 0x39, 0x69,
		0xbe, 0x69, 0xbe, 0x39, 0x6e, 0x35, 0xdf, 0xbd, 0x2b, 0x8a, 0x5f, 0xe8, 0xfa, 0xc5, 0xb2, 0xbd,
		0x8d, 0x77, 0x07, 0x6f, 0x9a, 0xbc, 0x88, 0x57, 0x85, 0xe2, 0x51, 0x73, 0x77, 0xff, 0x37, 0x53,
		0x61, 0x21, 0xda, 0xe2, 0x69, 0xde, 0x56, 0x1d, 0xbc, 0xc8, 0xeb, 0xa0, 0x10, 0xc5, 0xe1, 0xe2,
		0x9e, 0xcc, 0x5c, 0xe3, 0xc1, 0x36, 0xeb, 0x35, 0x96, 0x6e, 0xbd, 0x86, 0xde, 0xdc, 0xe0, 0xcc,
		0x8b, 0xdc, 0x9e, 0x33, 0x14, 0xe2, 0xf5, 0x53, 0x26, 0x18, 0xa9, 0x50, 0x8a, 0xd2, 0x0b, 0x6b,
		0x8f, 0xfb, 0xfa, 0x23, 0x18, 0xbd, 0x05, 0xe7, 0xec, 0x4a, 0x32, 0xdd, 0x4c, 0xe9, 0x90, 0x07,
		0x5a, 0x24, 0x79, 0xd3, 0x39, 0xc9, 0xe9, 0x6b, 0x16, 0x01, 0x2d, 0xd0, 0x8e, 0xc4, 0x34, 0x6d,
		0x32, 0x6d, 0x59, 0x72, 0x5d, 0xb7, 0x74, 0x63, 0x90, 0x64, 0x5f, 0xb3, 0x3a, 0xb9, 0xab, 0x56,
		0xd3, 0x75, 0x87, 0x3f, 0x1e, 0xdf, 0xd5, 0x12, 0x94, 0xae, 0x56, 0x5f, 0xc6, 0x78, 0xab, 0xe9,
		0x1b, 0x8f, 0xdb, 0xc1, 0x37, 0xc6, 0x37, 0xce, 0xc8, 0x60, 0x5a, 0x32, 0xdf, 0x38, 0x49, 0x18,
		0x39, 0xaf, 0x78, 0xd4, 0x9c, 0x8c, 0x3f, 0x5c, 0xc1, 0x1f, 0xce, 0x80, 0xa3, 0xe1, 0x0f, 0x4b,
		0xf0, 0x29, 0xdd, 0x52, 0xed, 0x9e, 0x90, 0x3c, 0xd2, 0x9c, 0x8f, 0x9d, 0x19, 0xbe, 0xda, 0x3c,
		0xc7, 0x40, 0xc2, 0x8b, 0x27, 0xbe, 0x09, 0x00, 0x30, 0x07, 0x04, 0x26, 0x45, 0x9b, 0x51, 0x60,
		0xb0, 0x22, 0xdc, 0x8c, 0x01, 0x45, 0x2e, 0x6d, 0x31, 0x31, 0x00, 0xb9, 0xcb, 0x13, 0x9c, 0x58,
		0x6a, 0xde, 0x6a, 0x36, 0x79, 0x18, 0x5d, 0xe3, 0xc5, 0x52, 0xec, 0x1a, 0x93, 0x06, 0x1a, 0x93,
		0x80, 0x63, 0x1e, 0x78, 0x4c, 0x03, 0x90, 0x35, 0x20, 0xb2, 0x06, 0x48, 0x56, 0x80, 0x49, 0x16,
		0xa0, 0x84, 0x81, 0x6a, 0xfa, 0x06, 0x4e, 0x4c, 0x20, 0x4b, 0xc1, 0xfc, 0x64, 0xef, 0x03, 0x0e,
		0x53, 0x37, 0xd0, 0xb6, 0xd1, 0xc9, 0xdf, 0x07, 0x2f, 0xaa, 0xd9, 0x6c, 0xb6, 0x9a, 0x6f, 0xde,
		0x1c, 0xfc, 0xf6, 0xe1, 0x64, 0xff, 0xc3, 0x2f, 0xad, 0xbd, 0xdf, 0xf7, 0x3e, 0x9c, 0x98, 0x98,
		0x0e, 0x9e, 0x5e, 0xd8, 0xe0, 0xb4, 0xf0, 0xe4, 0xcf, 0x77, 0x63, 0x2d, 0x3f, 0xfd, 0xea, 0xde,
		0x1c, 0xbc, 0x7f, 0xdf, 0xfc, 0xb0, 0x5b, 0x34, 0x76, 0x0b, 0xd7, 0x2f, 0x56, 0xf2, 0xbd, 0xbd,
		0x3b, 0xf8, 0x65, 0xff, 0x83, 0xc1, 0xb7, 0x66, 0xa4, 0xe5, 0xd3, 0xbc, 0xe3, 0x76, 0x2e, 0x4b,
		0x05, 0x84, 0xaa, 0x3d, 0x1a, 0xd0, 0x0d, 0x31, 0xcb, 0x71, 0xfb, 0xb0, 0x4a, 0x58, 0x25, 0xac,
		0x12, 0x56, 0x29, 0xa9, 0x59, 0xfd, 0x41, 0x4f, 0x85, 0xa3, 0x29, 0x49, 0x83, 0xac, 0xb2, 0x66,
		0xa0, 0xed, 0x3d, 0x7f, 0x90, 0x6c, 0xd3, 0xcc, 0xed, 0x00, 0x93, 0x2b, 0x47, 0x45, 0x68, 0xea,
		0xf9, 0x41, 0xbb, 0xc6, 0xa6, 0xa2, 0x47, 0x53, 0xa1, 0xa3, 0x2f, 0x25, 0x51, 0xbf, 0xb6, 0x60,
		0x6a, 0x9e, 0x7a, 0x2f, 0xb9, 0xe5, 0xd1, 0x17, 0xad, 0x49, 0x6b, 0xf9, 0x50, 0x12, 0x08, 0x23,
		0x13, 0x1e, 0x9a, 0x39, 0xef, 0x4c, 0x98, 0xdd, 0x60, 0xca, 0x63, 0xca, 0xdb, 0x67, 0x29, 0xf9,
		0x1a, 0x42, 0xc4, 0xd9, 0xc8, 0x34, 0x5e, 0xbb, 0xca, 0x3d, 0x37, 0xb4, 0x89, 0x61, 0x4b, 0xb0,
		0xcd, 0xc3, 0xf1, 0x28, 0xf7, 0xf2, 0xe5, 0x78, 0x40, 0x2a, 0xdd, 0x82, 0xad, 0x15, 0x02, 0x7a,
		0xbd, 0x83, 0xf8, 0x67, 0xf6, 0xb2, 0x6e, 0xa1, 0xa9, 0x47, 0xfb, 0x57, 0x1a, 0xde, 0xab, 0xc0,
		0x3b, 0xf0, 0xbe, 0x96, 0xf0, 0xce, 0x9c, 0x2b, 0xee, 0x18, 0xee, 0x18, 0xee, 0x18, 0xee, 0x18,
		0x73, 0xae, 0x8b, 0xbe, 0x28, 0xe6, 0x5c, 0x65, 0x5f, 0x1d, 0x73, 0xae, 0xe9, 0xde, 0x1b, 0x73,
		0xae, 0x26, 0x70, 0x9b, 0x39, 0x57, 0x58, 0x25, 0xac, 0x12, 0x56, 0x09, 0xab, 0x94, 0xd1, 0xac,
		0xcc, 0xb9, 0x1a, 0x1b, 0x60, 0x98, 0x73, 0x15, 0x9b, 0x73, 0x95, 0xb4, 0x6b, 0x0b, 0x56, 0xa6,
		0x5c, 0x35, 0xce, 0x0e, 0x90, 0x0f, 0xa4, 0x6c, 0x77, 0x60, 0x8d, 0x8b, 0xd8, 0x8b, 0xd9, 0x63,
		0x94, 0xbd, 0x90, 0x3f, 0xb9, 0x44, 0x77, 0xd7, 0xaf, 0x2c, 0xba, 0xd8, 0x41, 0x95, 0xa2, 0xc8,
		0xf4, 0x94, 0x59, 0x1c, 0x29, 0x52, 0x8b, 0x22, 0x3f, 0x61, 0x93, 0xb7, 0x5a, 0x14, 0xa3, 0x40,
		0xc9, 0x73, 0x2d, 0x0a, 0xbd, 0xd9, 0x5b, 0x91, 0xd9, 0x5a, 0xb1, 0x4a, 0x14, 0x55, 0x2a, 0x51,
		0x18, 0x94, 0x9b, 0x54, 0xa2, 0xb8, 0xb9, 0x73, 0x2a, 0x18, 0x67, 0xe7, 0x3a, 0x51, 0xa1, 0x82,
		0x0a, 0x15, 0x96, 0xc9, 0x33, 0x15, 0x8c, 0x17, 0xff, 0x43, 0x05, 0x63, 0x2a, 0x18, 0xdb, 0x88,
		0x8e, 0x47, 0x5f, 0x0c, 0x15, 0x8c, 0xa9, 0x60, 0xfc, 0xc8, 0x8b, 0xa0, 0x82, 0x71, 0xc6, 0x7d,
		0x4d, 0x05, 0x63, 0xeb, 0xb1, 0x40, 0x05, 0x63, 0x2a, 0x18, 0x0b, 0xe9, 0x0f, 0x2a, 0x18, 0x8b,
		0xe5, 0x34, 0x15, 0x8c, 0x17, 0x69, 0xc7, 0x98, 0x6b, 0x9c, 0xf5, 0x69, 0xe6, 0x8f, 0x9a, 0xc6,
		0x1c, 0x6a, 0x6e, 0xbc, 0xe3, 0x33, 0x38, 0xdb, 0xfc, 0xb1, 0xae, 0x36, 0x76, 0xc4, 0xf9, 0x02,
		0x47, 0xaa, 0xba, 0x83, 0xf8, 0x72, 0xa8, 0x55, 0xdb, 0xe9, 0xba, 0xe9, 0xc6, 0x76, 0xbc, 0xdb,
		0x0e, 0xa7, 0x7c, 0x9a, 0x1b, 0xa7, 0x39, 0xe5, 0xd3, 0xe6, 0x29, 0x9f, 0x6e, 0xa7, 0xe7, 0xf9,
		0x4e, 0x42, 0x1e, 0xb4, 0xa7, 0xc9, 0x6e, 0xb5, 0x45, 0xd5, 0x76, 0xe6, 0xca, 0x2c, 0x27, 0x58,
		0x36, 0x24, 0x50, 0x7b, 0xae, 0x4c, 0xa8, 0xac, 0xb3, 0x6c, 0x39, 0x67, 0xea, 0xb6, 0x67, 0xa9,
		0x4c, 0x99, 0x15, 0x93, 0x50, 0x91, 0x79, 0xa9, 0xdb, 0x3e, 0x1a, 0x15, 0xfb, 0x6e, 0x14, 0x7d,
		0x95, 0xdc, 0xa4, 0x71, 0x6f, 0xd4, 0x9d, 0xb6, 0x4f, 0xc9, 0x98, 0xfc, 0x00, 0x83, 0x49, 0xeb,
		0xaa, 0x40, 0x4d, 0x01, 0xf3, 0x46, 0x56, 0x61, 0x29, 0x4a, 0xc6, 0xe4, 0x7e, 0x92, 0x40, 0xe8,
		0x0d, 0xee, 0x7d, 0x8b, 0x65, 0xe7, 0x6b, 0xcd, 0x65, 0x63, 0xd0, 0x76, 0xd4, 0xb7, 0xf8, 0xd5,
		0x2d, 0x4b, 0xe7, 0xd2, 0x8d, 0x2e, 0x55, 0xc7, 0xf9, 0xe2, 0x76, 0x07, 0xca, 0x6c, 0x96, 0x9e,
		0xbb, 0xdd, 0xc8, 0x64, 0x9a, 0xe6, 0x2d, 0x41, 0x4f, 0x73, 0x51, 0x28, 0xe8, 0xee, 0x30, 0x3c,
		0xee, 0x6e, 0xd3, 0xa3, 0xfd, 0xe4, 0x32, 0x0c, 0xfa, 0x0c, 0xfa, 0x0c, 0xfa, 0x6b, 0x35, 0xe8,
		0xb7, 0xc3, 0xab, 0x7e, 0x7c, 0x03, 0x04, 0xc2, 0x65, 0x7f, 0x72, 0xb7, 0x4c, 0xe0, 0x9a, 0xfd,
		0x45, 0xb3, 0x67, 0x7e, 0xee, 0x4c, 0x4e, 0x94, 0x6e, 0x6c, 0x58, 0xb9, 0x5a, 0xb1, 0x82, 0xf3,
		0x43, 0x77, 0x6e, 0xb6, 0xd5, 0x1c, 0xde, 0xec, 0x6f, 0x91, 0x0a, 0x45, 0x8a, 0xc4, 0x6a, 0x4c,
		0x1d, 0x6b, 0x4d, 0x93, 0x4a, 0xd4, 0x08, 0x14, 0xad, 0x0d, 0x28, 0x6e, 0xe0, 0x55, 0x31, 0xf0,
		0x30, 0xf0, 0x30, 0xf0, 0x30, 0xf0, 0xe0, 0xf2, 0x70, 0x79, 0xb8, 0x3c, 0x06, 0x1e, 0x06, 0x1e,
		0x06, 0x1e, 0x06, 0x1e, 0x06, 0x1e, 0x83, 0x3e, 0x83, 0x3e, 0x83, 0x3e, 0x06, 0x9e, 0x3d, 0x88,
		0x1e, 0x44, 0x2a, 0x1c, 0x1b, 0x51, 0x46, 0xb0, 0x79, 0xda, 0x3e, 0xa0, 0x0c, 0x28, 0x03, 0xca,
		0x28, 0xb1, 0xd5, 0xc2, 0x61, 0x26, 0x52, 0x52, 0x4c, 0xa4, 0x48, 0x15, 0x80, 0xb4, 0x30, 0x8f,
		0x22, 0x50, 0xf9, 0x91, 0x1d, 0x78, 0x46, 0xa2, 0x28, 0x1f, 0x5b, 0xf1, 0x66, 0xc4, 0x4d, 0x9e,
		0xcb, 0xb8, 0x69, 0xae, 0x91, 0x97, 0x59, 0x1b, 0xcf, 0xe6, 0x14, 0x13, 0x3c, 0x8c, 0xcd, 0x29,
		0x06, 0xf1, 0x51, 0xbf, 0x90, 0xdb, 0x1d, 0xb0, 0x90, 0x2f, 0xe6, 0xf6, 0x68, 0xf3, 0x14, 0x74,
		0xb3, 0x27, 0xab, 0x98, 0xf9, 0xa6, 0xa0, 0xdb, 0x1c, 0xf1, 0x46, 0x41, 0xb7, 0x14, 0x2f, 0x8d,
		0x82, 0x6e, 0xf7, 0x5e, 0x08, 0x05, 0xdd, 0x66, 0xbc, 0x18, 0x0a, 0xba, 0x51, 0xd0, 0xed, 0x91,
		0x17, 0x41, 0x41, 0xb7, 0x8c, 0xfb, 0x1a, 0x83, 0xd1, 0x7a, 0x2c, 0x50, 0xd0, 0x8d, 0x82, 0x6e,
		0x42, 0xfa, 0x83, 0x82, 0x6e, 0x62, 0x39, 0x4d, 0x41, 0xb7, 0x45, 0xda, 0x31, 0x6a, 0x27, 0x6b,
		0x6f, 0xe9, 0x30, 0x66, 0x25, 0xeb, 0x6c, 0xe0, 0xe0, 0x38, 0x90, 0x45, 0x6d, 0x29, 0x8e, 0x03,
		0x31, 0x69, 0x3b, 0xe1, 0x22, 0xdf, 0xdc, 0x39, 0x2e, 0x72, 0xfa, 0x66, 0x70, 0x91, 0x73, 0x91,
		0xce, 0xc6, 0xd9, 0x1b, 0x2e, 0xf2, 0x3c, 0xda, 0x01, 0x17, 0x79, 0xf1, 0x97, 0x86, 0x8b, 0x7c,
		0xef, 0x85, 0xe0, 0x22, 0xcf, 0x78, 0x31, 0xb8, 0xc8, 0xb8, 0xc8, 0x8f, 0xbc, 0x08, 0x5c, 0xe4,
		0x8c, 0xfb, 0x1a, 0x17, 0xd9, 0x7a, 0x2c, 0xe0, 0x22, 0xe3, 0x22, 0x0b, 0xe9, 0x0f, 0x5c, 0x64,
		0xb1, 0x9c, 0xc6, 0x45, 0x5e, 0xa4, 0x1d, 0xa3, 0x2e, 0x72, 0x8e, 0x8e, 0x06, 0xb9, 0x6b, 0x22,
		0xdb, 0x3d, 0x1e, 0x24, 0x85, 0x87, 0x3c, 0x4c, 0xa8, 0x48, 0xdf, 0x43, 0x1e, 0x35, 0xc3, 0x4a,
		0x64, 0x3c, 0xe4, 0x8c, 0x4c, 0xa6, 0x25, 0xf3, 0x90, 0xb5, 0x4e, 0xa8, 0x30, 0xc1, 0x3f, 0x28,
		0x91, 0x9f, 0x25, 0x4b, 0xc3, 0x21, 0x96, 0x60, 0x54, 0x79, 0xa9, 0xb0, 0x25, 0x74, 0x06, 0xc6,
		0x83, 0xf0, 0x15, 0x2b, 0x7f, 0x28, 0x98, 0xf0, 0xe2, 0x89, 0x6f, 0x02, 0x00, 0xcc, 0x01, 0x81,
		0x49, 0xd9, 0x56, 0x60, 0x1f, 0xf7, 0x52, 0x19, 0x63, 0x62, 0x00, 0x32, 0x6d, 0x50, 0xbc, 0x48,
		0xdf, 0x83, 0x44, 0x10, 0x2e, 0xd3, 0x77, 0x1f, 0x5c, 0xca, 0xc2, 0xcd, 0x4a, 0x83, 0x8c, 0x49,
		0xb0, 0x31, 0x0f, 0x3a, 0xa6, 0xc1, 0xc7, 0x1a, 0x08, 0x59, 0x03, 0x23, 0x2b, 0xa0, 0x24, 0x0b,
		0x4e, 0xc2, 0x20, 0x35, 0x7d, 0x03, 0xe2, 0x45, 0x27, 0x1e, 0xc4, 0xbb, 0xb8, 0xab, 0xff, 0x80,
		0xba, 0x6c, 0xe7, 0xfa, 0x0d, 0x8b, 0x97, 0x07, 0x9c, 0xfc, 0x31, 0x9f, 0xe5, 0x56, 0xcb, 0x05,
		0xce, 0xc8, 0x7e, 0x03, 0x65, 0x03, 0x1f, 0x4d, 0xff, 0x35, 0x9a, 0x46, 0x7c, 0x21, 0x4f, 0x4d,
		0xa4, 0x0b, 0x0b, 0xce, 0x64, 0x28, 0xb2, 0xa5, 0x05, 0x21, 0x2a, 0x10, 0x15, 0x88, 0x0a, 0x44,
		0xc5, 0x42, 0xe9, 0x42, 0xd3, 0xac, 0x25, 0x97, 0xc3, 0x43, 0x18, 0x74, 0x0d, 0xae, 0x99, 0x4b,
		0x5a, 0x67, 0x20, 0x60, 0x20, 0x60, 0x20, 0x60, 0x20, 0x10, 0x8c, 0x77, 0xa9, 0x15, 0xdd, 0x33,
		0xa1, 0x7f, 0xc7, 0x40, 0xdb, 0xa2, 0x2b, 0xbe, 0xed, 0x48, 0x4d, 0x3b, 0x36, 0x81, 0xe1, 0x81,
		0xd7, 0x50, 0x98, 0x5b, 0x7c, 0xf3, 0x66, 0xd6, 0xe2, 0xcf, 0x7c, 0xfd, 0x75, 0x83, 0xd7, 0x30,
		0xba, 0x56, 0x7f, 0xe6, 0x0b, 0x3c, 0xfe, 0xf3, 0xf8, 0x64, 0xef, 0x7d, 0x6b, 0x77, 0xef, 0xed,
		0xfe, 0x87, 0xbd, 0xdd, 0xd6, 0xd1, 0xc1, 0xbb, 0xbd, 0x63, 0x83, 0x6f, 0xb2, 0x60, 0x78, 0x41,
		0xbf, 0xbd, 0x10, 0xfc, 0xd9, 0xdb, 0x1c, 0xbe, 0xc5, 0x56, 0x73, 0xf7, 0xfd, 0xfe, 0x87, 0xa2,
		0xf1, 0xeb, 0x5f, 0x1b, 0xbd, 0xc2, 0xe9, 0xb3, 0xe5, 0xba, 0x6f, 0xf9, 0x56, 0x4f, 0xd7, 0x40,
		0xea, 0x44, 0xd1, 0xa5, 0xf3, 0x59, 0x5d, 0x99, 0x53, 0x3b, 0x93, 0x0b, 0x20, 0x78, 0x10, 0x3c,
		0x08, 0x1e, 0x04, 0xcf, 0x32, 0x70, 0xef, 0xb5, 0x32, 0xbb, 0xc4, 0x4f, 0xf0, 0x78, 0x28, 0x4c,
		0x65, 0xcf, 0xf0, 0x60, 0x0c, 0x60, 0x0c, 0x60, 0x0c, 0x60, 0x0c, 0x58, 0xf7, 0x31, 0x20, 0x57,
		0xab, 0x07, 0x85, 0xcf, 0x12, 0xb9, 0xd1, 0x27, 0x26, 0x37, 0x5e, 0x25, 0xfb, 0x7e, 0x4a, 0xb2,
		0x87, 0xb3, 0xdf, 0xdc, 0xb9, 0xa1, 0x4d, 0x59, 0xbf, 0x0d, 0x6f, 0xba, 0x25, 0x76, 0x4a, 0xbb,
		0x5c, 0x38, 0x5d, 0x8b, 0x9c, 0xc8, 0x22, 0x71, 0x7a, 0xfb, 0x23, 0x28, 0x21, 0x73, 0x62, 0x4c,
		0xc1, 0xe4, 0xd2, 0xf3, 0x2a, 0x4b, 0xcf, 0x97, 0x88, 0x4e, 0xb0, 0xf4, 0x9c, 0xa5, 0xe7, 0x2c,
		0x3d, 0x47, 0xd3, 0xa0, 0x69, 0xd0, 0x34, 0xeb, 0xae, 0x69, 0x58, 0x7a, 0xce, 0xd2, 0xf3, 0xfc,
		0x25, 0x3e, 0x4b, 0xcf, 0x59, 0x7a, 0x0e, 0x51, 0x81, 0xa8, 0x40, 0x54, 0x4c, 0xc5, 0x3b, 0x4b,
		0xcf, 0xc5, 0x87, 0x07, 0x96, 0x9e, 0x33, 0x10, 0x30, 0x10, 0x30, 0x10, 0x2c, 0xd7, 0x40, 0xc0,
		0xd2, 0x73, 0x3b, 0x52, 0xb3, 0xc0, 0xd2, 0xf3, 0x3c, 0xbc, 0x79, 0x96, 0x9e, 0x6b, 0xbe, 0x40,
		0x96, 0x9e, 0x1b, 0x78, 0x9b, 0x2c, 0x3d, 0xcf, 0xea, 0xbe, 0x59, 0x7a, 0x9e, 0x26, 0x7c, 0x59,
		0x7a, 0x8e, 0xe0, 0x41, 0xf0, 0x20, 0x78, 0x98, 0xa2, 0x5b, 0x57, 0xb3, 0x8b, 0xa5, 0xe7, 0x8c,
		0x01, 0x8c, 0x01, 0x8c, 0x01, 0x8c, 0x01, 0x4b, 0x36, 0x06, 0xb0, 0xf4, 0x5c, 0x70, 0xe9, 0xb9,
		0xe4, 0xe2, 0xe4, 0x82, 0xa5, 0x95, 0xe7, 0x1a, 0x27, 0x83, 0xc8, 0x07, 0x93, 0xc4, 0xc2, 0x73,
		0x71, 0x2a, 0x62, 0x8a, 0x82, 0x08, 0x53, 0x0f, 0x2a, 0x9f, 0xb3, 0xfc, 0xdc, 0x3e, 0x85, 0xc8,
		0xd7, 0x00, 0x22, 0x4e, 0x15, 0xa6, 0xf1, 0xda, 0x55, 0xee, 0xb9, 0xa1, 0xb3, 0x62, 0xb7, 0x04,
		0xdb, 0x3c, 0x1c, 0x8f, 0x71, 0x2f, 0x5f, 0x8e, 0xf7, 0x41, 0x95, 0xa6, 0xa0, 0xb5, 0x1a, 0xa7,
		0x95, 0xbd, 0xd0, 0x3e, 0x8c, 0x48, 0x10, 0xc9, 0x39, 0xd0, 0xf0, 0xfe, 0x81, 0x86, 0xfe, 0xa0,
		0xdb, 0xcd, 0xb4, 0x83, 0x85, 0x29, 0xa4, 0x2d, 0xea, 0x58, 0x14, 0xd9, 0x71, 0x67, 0x9a, 0x2c,
		0x16, 0x39, 0x69, 0x30, 0x57, 0xa1, 0x93, 0xc7, 0x93, 0x06, 0x93, 0x68, 0xb1, 0x76, 0xd2, 0xe0,
		0x33, 0x83, 0x01, 0xa1, 0x1b, 0x08, 0x46, 0x03, 0x20, 0x45, 0xd7, 0x9b, 0xea, 0xf2, 0xc5, 0x3a,
		0x7b, 0xfe, 0x2e, 0x5b, 0xa0, 0xbb, 0x8a, 0xc3, 0x97, 0x13, 0x84, 0xde, 0x7f, 0xd3, 0xf5, 0xd6,
		0x94, 0xe5, 0xdd, 0x6d, 0x66, 0xc1, 0x70, 0x49, 0xb7, 0x9b, 0x38, 0xb5, 0x6c, 0xd3, 0x91, 0x67,
		0xfa, 0x32, 0x4c, 0x57, 0x6e, 0x89, 0xc9, 0x2a, 0x31, 0xf9, 0x24, 0x22, 0x93, 0xcc, 0x02, 0x52,
		0xda, 0xdd, 0xb5, 0xba, 0x27, 0xc1, 0xc9, 0x9c, 0xfc, 0xc6, 0xf9, 0xaa, 0x26, 0xfc, 0x0a, 0xce,
		0x57, 0x35, 0x48, 0x05, 0xb5, 0xcf, 0x57, 0xbd, 0x33, 0xa0, 0x38, 0x3d, 0x15, 0x5f, 0x06, 0x1d,
		0xb9, 0xf3, 0x56, 0x1f, 0x6d, 0x5d, 0xe6, 0xfc, 0xd5, 0x32, 0xe7, 0xaf, 0x66, 0x60, 0x3a, 0x72,
		0xfe, 0x6a, 0x0e, 0x3c, 0x22, 0x31, 0x13, 0x51, 0x7c, 0x51, 0xbd, 0xe4, 0x22, 0x7a, 0xd9, 0x45,
		0xf3, 0x06, 0x1c, 0x57, 0x33, 0x4b, 0xb3, 0x4d, 0x2c, 0xc5, 0x36, 0xbb, 0xf4, 0x7a, 0xfa, 0x42,
		0x9a, 0xcd, 0x66, 0xeb, 0xfd, 0xde, 0xc9, 0xaf, 0x07, 0xbb, 0xad, 0x93, 0x3f, 0x0f, 0xf7, 0xa4,
		0xa7, 0x21, 0x0c, 0xae, 0xaa, 0x36, 0xb4, 0xd8, 0x63, 0xf2, 0x62, 0x4e, 0x9a, 0x6f, 0x9a, 0x6f,
		0x8e, 0x5b, 0xcd, 0x77, 0xef, 0x0c, 0x2c, 0x8d, 0x78, 0xb1, 0x6c, 0x6f, 0xe3, 0xdd, 0xc1, 0x9b,
		0x26, 0x2f, 0xe2, 0x55, 0xa1, 0x78, 0xd4, 0xdc, 0xdd, 0xff, 0xcd, 0x54, 0x58, 0xe4, 0xb5, 0xbe,
		0x41, 0x9e, 0xa6, 0xe3, 0x0c, 0x0c, 0x0a, 0xe2, 0x2b, 0x75, 0x84, 0x57, 0xe8, 0xe8, 0xbf, 0xff,
		0xd3, 0x4c, 0xb9, 0x0f, 0x13, 0x5a, 0xf7, 0x26, 0xb4, 0x0c, 0x2c, 0x21, 0x91, 0xa2, 0xf4, 0x06,
		0x16, 0x3c, 0xdc, 0x29, 0x80, 0x33, 0x7a, 0x0b, 0xce, 0x99, 0xe4, 0xb6, 0x0b, 0xa3, 0x8b, 0x1d,
		0xee, 0x68, 0x91, 0x81, 0xf6, 0x7c, 0x95, 0x5c, 0x4e, 0x5f, 0x33, 0x6f, 0xb6, 0x40, 0x3b, 0xf2,
		0xd3, 0x26, 0x53, 0x8f, 0x44, 0xbf, 0x38, 0xac, 0xec, 0x24, 0xca, 0xf4, 0xc6, 0xb4, 0x0a, 0xc0,
		0xa6, 0x98, 0x37, 0x4b, 0x61, 0xf8, 0xab, 0x2f, 0x63, 0xd4, 0xd5, 0xf4, 0x90, 0xc7, 0xed, 0xe0,
		0x21, 0xe3, 0x21, 0x67, 0x64, 0x33, 0x2d, 0x99, 0x87, 0x9c, 0x24, 0x8c, 0x9c, 0x69, 0x3c, 0x6a,
		0x4e, 0xc6, 0x25, 0xae, 0xe0, 0x12, 0x67, 0xc0, 0xd4, 0x70, 0x89, 0x25, 0x58, 0x95, 0x66, 0xc4,
		0x49, 0x55, 0x3a, 0xd6, 0x9d, 0x9b, 0x9d, 0x19, 0xbe, 0xa2, 0x75, 0xf0, 0x8d, 0x95, 0x4a, 0x67,
		0xad, 0xba, 0xa4, 0xf5, 0xc5, 0x5a, 0xf5, 0xa5, 0x31, 0xc7, 0xe4, 0x4b, 0xa5, 0x27, 0x03, 0xfb,
		0xa8, 0x74, 0x9f, 0xb1, 0x39, 0x88, 0x5b, 0xd7, 0x60, 0x1f, 0x2e, 0xfb, 0x70, 0x33, 0x03, 0x22,
		0x6b, 0x80, 0x64, 0x05, 0x98, 0x64, 0x01, 0x4a, 0x18, 0xa8, 0xa6, 0x6f, 0xc0, 0xfc, 0x3e, 0x5c,
		0xb3, 0xd5, 0xb8, 0x4c, 0x56, 0xe1, 0xb2, 0x53, 0x7d, 0xeb, 0xce, 0x54, 0x70, 0xf3, 0xb7, 0x93,
		0x5f, 0x0f, 0x8e, 0xf6, 0xff, 0xdd, 0x3c, 0xd9, 0x3f, 0xf8, 0xd0, 0xda, 0xfb, 0x7d, 0xef, 0xc3,
		0x89, 0x89, 0x79, 0xe1, 0xe9, 0xb5, 0x2d, 0x54, 0xdd, 0xb2, 0x54, 0xb3, 0x6c, 0xd6, 0xdb, 0x7b,
		0x73, 0xf0, 0xe1, 0xed, 0xfe, 0x2f, 0xe6, 0x4a, 0x6e, 0x5d, 0xbf, 0x58, 0xdd, 0x37, 0xf7, 0xfe,
		0x7d, 0xf3, 0xc3, 0x6e, 0x71, 0xc9, 0xaa, 0x7d, 0x9d, 0xe6, 0x1d, 0xc1, 0xd9, 0xe7, 0xbf, 0x50,
		0xbb, 0x26, 0x67, 0x0e, 0x46, 0xb6, 0xf5, 0xe8, 0x4b, 0xde, 0xcf, 0x98, 0xbb, 0x99, 0x56, 0xd8,
		0x4b, 0xee, 0x7a, 0xf4, 0x65, 0x05, 0x0f, 0x99, 0x33, 0x20, 0x79, 0xcc, 0x49, 0x1d, 0xf6, 0xfb,
		0xe3, 0xa1, 0xe0, 0xa1, 0x88, 0x0e, 0x24, 0xec, 0xf7, 0x7f, 0xb0, 0xdf, 0xff, 0x16, 0x6c, 0x71,
		0x9a, 0xe8, 0x53, 0xbd, 0xcc, 0x69, 0xa2, 0xc0, 0x3b, 0xf0, 0x9e, 0x5b, 0x78, 0xc7, 0x22, 0x37,
		0xc8, 0x1f, 0x8d, 0xf1, 0x48, 0x93, 0x80, 0x63, 0x1e, 0x78, 0x4c, 0x03, 0x90, 0x35, 0x20, 0xb2,
		0x06, 0x48, 0x56, 0x80, 0xc9, 0x90, 0xc1, 0x82, 0x45, 0xfe, 0x38, 0x87, 0xc1, 0x22, 0x4f, 0x73,
		0x6d, 0x2c, 0xf2, 0x9c, 0x25, 0x64, 0xae, 0xde, 0x1c, 0x16, 0xb9, 0x09, 0x04, 0xc7, 0x22, 0x5f,
		0x4c, 0x48, 0xdb, 0xb2, 0xc8, 0xf3, 0x5d, 0x0b, 0x77, 0x86, 0x43, 0x9e, 0xaf, 0x62, 0xb8, 0x79,
		0xa8, 0x94, 0x28, 0xa6, 0x66, 0xd8, 0x5a, 0x46, 0xad, 0x44, 0x21, 0x6c, 0xc9, 0x5d, 0xb1, 0xc4,
		0xc7, 0xd1, 0x84, 0x6a, 0x89, 0xf9, 0x0a, 0x9e, 0x1c, 0xee, 0xfa, 0x1a, 0x85, 0x4b, 0x9e, 0x77,
		0x7d, 0xe9, 0x19, 0xef, 0x22, 0x46, 0xbb, 0xd8, 0x9e, 0xaf, 0x2a, 0x7b, 0xbe, 0x0c, 0xfa, 0x4f,
		0xec, 0xf9, 0xba, 0xb9, 0x73, 0xea, 0x86, 0xa5, 0x6d, 0x86, 0x1d, 0x61, 0xb9, 0x48, 0x66, 0x63,
		0x49, 0x6d, 0xd4, 0x2c, 0xa6, 0x6e, 0xd8, 0x13, 0x23, 0x28, 0x75, 0xc3, 0xb4, 0x5f, 0x21, 0x75,
		0xc3, 0xee, 0x5d, 0x86, 0xba, 0x61, 0x06, 0x7d, 0x40, 0x8b, 0x6f, 0x83, 0xba, 0x61, 0xd4, 0x0d,
		0xcb, 0x47, 0x5f, 0x53, 0x37, 0xcc, 0x7a, 0x2c, 0x50, 0x37, 0x8c, 0xba, 0x61, 0x42, 0xfa, 0x83,
		0xba, 0x61, 0x62, 0x39, 0x4d, 0xdd, 0xb0, 0x45, 0xda, 0x31, 0xe9, 0x20, 0xeb, 0xce, 0x66, 0x9a,
		0x32, 0x90, 0x35, 0x26, 0x2c, 0x39, 0x6d, 0x67, 0xee, 0xee, 0xcf, 0xfc, 0xb0, 0x9d, 0x9b, 0x3b,
		0xc9, 0xc1, 0x59, 0x3b, 0x29, 0x0b, 0xd6, 0xe8, 0x15, 0xa6, 0xe1, 0x74, 0x9d, 0x4c, 0xfc, 0xc0,
		0x75, 0x3a, 0x5d, 0x27, 0x5f, 0x00, 0x94, 0x7a, 0x8b, 0xa9, 0x1c, 0xf2, 0xa4, 0xd9, 0x2f, 0x6a,
		0x06, 0x72, 0x22, 0x15, 0x7e, 0x51, 0xa1, 0x73, 0x11, 0x06, 0x83, 0x7e, 0x94, 0x1e, 0x79, 0xee,
		0x36, 0x03, 0x00, 0x01, 0x40, 0xb9, 0x02, 0xa0, 0xd4, 0xc7, 0x7b, 0xdd, 0x8e, 0x6b, 0x81, 0xb9,
		0xfa, 0xdb, 0xad, 0x51, 0xa6, 0x95, 0x29, 0x7b, 0xcb, 0x49, 0x96, 0x8d, 0x0a, 0xd5, 0x9e, 0xb2,
		0x17, 0xaa, 0xe3, 0x28, 0x5b, 0xbf, 0x91, 0x42, 0xad, 0x59, 0x5a, 0x63, 0x4c, 0xcb, 0x4b, 0xd8,
		0x58, 0x79, 0x29, 0xd4, 0x3a, 0x66, 0xd4, 0xc2, 0xce, 0xae, 0xc0, 0x31, 0xf4, 0xf7, 0x93, 0x9d,
		0x02, 0x23, 0x22, 0x2d, 0xb3, 0x03, 0xdd, 0x26, 0x48, 0xc8, 0x80, 0x85, 0x10, 0x68, 0x4c, 0x9f,
		0xd4, 0x5c, 0x81, 0x91, 0xd5, 0x9f, 0x91, 0x94, 0xa8, 0xfb, 0x61, 0xa6, 0xb4, 0x13, 0x45, 0x9d,
		0xc0, 0x5c, 0x30, 0x77, 0xfd, 0x30, 0x97, 0xa5, 0x81, 0xf7, 0x5e, 0x48, 0xb3, 0xd9, 0x6c, 0x1d,
		0xef, 0x1d, 0xfd, 0xbe, 0x77, 0xc4, 0xd2, 0xc0, 0xc2, 0xc3, 0xa5, 0x81, 0xac, 0x86, 0x9b, 0xac,
		0x86, 0x63, 0x25, 0x9c, 0x75, 0xf6, 0xc4, 0xd6, 0xd0, 0x99, 0x73, 0x63, 0x77, 0xe6, 0x71, 0xee,
		0x7c, 0x27, 0x57, 0x99, 0x55, 0x6e, 0x1a, 0xed, 0x38, 0xb9, 0xbf, 0x5f, 0x92, 0x9b, 0xbd, 0xfd,
		0x8d, 0x48, 0x3d, 0x56, 0x8d, 0x45, 0x3e, 0x1a, 0x86, 0xb6, 0x88, 0x15, 0x22, 0x69, 0x81, 0xb0,
		0xfd, 0x28, 0x4b, 0x9a, 0x8d, 0xcf, 0x99, 0x03, 0xc8, 0x96, 0xdf, 0x7e, 0x24, 0x57, 0x03, 0x55,
		0xb2, 0xf6, 0xe9, 0x23, 0x35, 0x4f, 0x13, 0x00, 0x59, 0x42, 0x18, 0x1d, 0x8d, 0x5c, 0x91, 0x1c,
		0x92, 0x4e, 0x1a, 0x64, 0xd2, 0x08, 0x30, 0x05, 0x4c, 0x35, 0x9e, 0x48, 0x6c, 0xd2, 0x68, 0x94,
		0x91, 0x06, 0x2a, 0x17, 0x8f, 0xda, 0xe5, 0x74, 0xbf, 0xfc, 0x00, 0x81, 0x29, 0x40, 0x30, 0x0e,
		0x0c, 0xc6, 0x01, 0xc2, 0x28, 0x50, 0x08, 0x0b, 0xf7, 0xbc, 0x96, 0x2e, 0x76, 0x3b, 0x9d, 0x50,
		0x45, 0x91, 0x39, 0x2f, 0x70, 0x72, 0x01, 0x8a, 0x16, 0x53, 0xb4, 0x38, 0x33, 0x08, 0xb2, 0x06,
		0x45, 0x56, 0x20, 0x49, 0x16, 0x9a, 0x84, 0x21, 0x4a, 0x5e, 0x38, 0x5a, 0x10, 0x92, 0x26, 0x85,
		0xe5, 0x1c, 0x42, 0x73, 0x82, 0x91, 0x79, 0x2d, 0x61, 0x2a, 0x48, 0x62, 0x84, 0x8f, 0xa5, 0x7e,
		0x10, 0x13, 0xe2, 0x47, 0x68, 0x19, 0x20, 0xb2, 0x8c, 0x36, 0x8c, 0x36, 0x8c, 0x36, 0xb2, 0x11,
		0x2f, 0x4d, 0x8c, 0x8d, 0x13, 0x64, 0x4b, 0x44, 0xd9, 0x30, 0x61, 0x36, 0x0e, 0x65, 0x36, 0x20,
		0xcd, 0x1e, 0xb4, 0xd9, 0x82, 0x38, 0xeb, 0x50, 0x67, 0x1d, 0xf2, 0xac, 0x42, 0x9f, 0x19, 0x08,
		0x34, 0x04, 0x85, 0xe6, 0x09, 0xf8, 0x83, 0x7c, 0xf1, 0xfa, 0x8e, 0x59, 0xf4, 0x2a, 0x08, 0x57,
		0x9b, 0x7b, 0xea, 0x9d, 0x7d, 0x34, 0x1a, 0xb3, 0x66, 0x73, 0xfe, 0x5e, 0xcf, 0x7c, 0xa9, 0x59,
		0xe8, 0x9b, 0x07, 0x7d, 0xb4, 0x6d, 0xe1, 0x5a, 0x87, 0x6e, 0x1c, 0xab, 0xd0, 0x37, 0xde, 0x5d,
		0xd3, 0x0b, 0x3e, 0xff, 0x58, 0x76, 0x76, 0x4e, 0x7f, 0x7c, 0xac, 0x38, 0x3b, 0xa7, 0xa3, 0x7f,
		0x56, 0x92, 0x2f, 0xdf, 0xab, 0xd7, 0x3f, 0xaa, 0x1f, 0xcb, 0x4e, 0x6d, 0xfc, 0xd3, 0x6a, 0xfd,
		0x63, 0xd9, 0xa9, 0x9f, 0x6e, 0x3c, 0xff, 0xf4, 0xe9, 0xe5, 0xa2, 0x9f, 0xd9, 0xf8, 0xbe, 0x79,
		0x5d, 0x34, 0xfe, 0x38, 0xa7, 0x36, 0xba, 0xe7, 0xe0, 0x78, 0xff, 0x0f, 0xeb, 0x7d, 0xf4, 0x9f,
		0xe7, 0xb6, 0x7a, 0x69, 0xe3, 0x6f, 0x16, 0xfa, 0xc9, 0xe8, 0x15, 0xae, 0x5f, 0xac, 0x10, 0xcc,
		0x35, 0x80, 0x39, 0x29, 0x98, 0x4b, 0xb2, 0xc1, 0x75, 0xce, 0x9b, 0xce, 0xdb, 0xd3, 0xef, 0x95,
		0x17, 0xb5, 0xeb, 0x57, 0x1b, 0xdf, 0xb7, 0xae, 0xef, 0xff, 0xf0, 0xc7, 0x63, 0xbf, 0x56, 0x79,
		0xb1, 0x75, 0xfd, 0x6a, 0xc6, 0xff, 0x34, 0xae, 0x5f, 0xcd, 0xd9, 0x46, 0xfd, 0xfa, 0xf9, 0x83,
		0x5f, 0x1d, 0xfe, 0xbc, 0x3a, 0xeb, 0x03, 0xb5, 0x19, 0x1f, 0xd8, 0x9c, 0xf5, 0x81, 0xcd, 0x19,
		0x1f, 0x98, 0x79, 0x4b, 0xd5, 0x19, 0x1f, 0xa8, 0x5f, 0xff, 0x78, 0xf0, 0xfb, 0xcf, 0x1f, 0xff,
		0xd5, 0xc6, 0xf5, 0xc6, 0x8f, 0x59, 0xff, 0xb7, 0x75, 0xfd, 0xe3, 0xd5, 0xc6, 0x06, 0xc0, 0xaf,
		0x0d, 0xfc, 0x84, 0xad, 0xfd, 0xb0, 0x5d, 0xfe, 0x81, 0xf0, 0xd9, 0x72, 0xdd, 0xf7, 0xf5, 0x32,
		0x6c, 0x20, 0x90, 0xdd, 0xd8, 0x3c, 0x73, 0xe8, 0x17, 0xdc, 0xe8, 0x8c, 0x67, 0x86, 0x67, 0x86,
		0x67, 0x86, 0x67, 0x66, 0x25, 0x5f, 0xc4, 0x37, 0x6a, 0xcf, 0x16, 0x29, 0x6b, 0x3c, 0x06, 0xc5,
		0x5e, 0x4f, 0x05, 0x83, 0xd8, 0xfc, 0x30, 0x34, 0xb9, 0x10, 0x23, 0x11, 0x23, 0x11, 0x23, 0x11,
		0x23, 0xd1, 0x12, 0x8d, 0x44, 0x03, 0xcf, 0x8f, 0x2b, 0x0d, 0x0b, 0x23, 0x51, 0xc3, 0xe0, 0x25,
		0x8e, 0x5c, 0xff, 0x62, 0x25, 0x66, 0x6e, 0xde, 0x7b, 0xbe, 0x71, 0x60, 0xb1, 0x34, 0xac, 0x3c,
		0xb8, 0x5c, 0xb2, 0x71, 0xdf, 0xe2, 0xf5, 0xde, 0x86, 0x6e, 0x3b, 0xf6, 0x02, 0x7f, 0xd7, 0xbb,
		0xf0, 0x46, 0x67, 0x3e, 0x18, 0xbf, 0xee, 0xb5, 0x05, 0x83, 0xed, 0xbd, 0xfb, 0x6d, 0xe5, 0x43,
		0xa4, 0x51, 0xaf, 0x6f, 0xd6, 0x57, 0x38, 0x4c, 0xf0, 0xb3, 0xcc, 0x6a, 0x89, 0x5c, 0x2f, 0x56,
		0x33, 0x74, 0x0a, 0xff, 0xb4, 0x7d, 0x6b, 0x65, 0x11, 0xc6, 0x1b, 0x43, 0xc7, 0x5f, 0x4b, 0x46,
		0x16, 0xdf, 0x16, 0xec, 0x54, 0x4d, 0x18, 0xfd, 0x7b, 0xf2, 0x33, 0x91, 0x22, 0x0a, 0xe6, 0x82,
		0x52, 0x72, 0x45, 0x76, 0xe8, 0x76, 0xbc, 0x81, 0xc1, 0x0d, 0x40, 0xe3, 0xf6, 0x59, 0x91, 0xcd,
		0x8a, 0xec, 0xcc, 0x85, 0x2e, 0x2b, 0xb2, 0xed, 0x0d, 0x72, 0xc6, 0x56, 0x64, 0x1b, 0xda, 0x42,
		0xf2, 0x20, 0x9d, 0x8c, 0x8d, 0x66, 0x06, 0x01, 0xcc, 0x38, 0x90, 0xd9, 0x00, 0x34, 0x7b, 0xc0,
		0x66, 0x0b, 0xe0, 0xac, 0x03, 0x9d, 0x75, 0xc0, 0xb3, 0x0a, 0x7c, 0x66, 0x75, 0x8e, 0x29, 0x47,
		0xcf, 0x14, 0x20, 0x4e, 0x2f, 0xe0, 0xb6, 0xdb, 0xb1, 0xd3, 0x0f, 0xc2, 0xd8, 0x7c, 0x1c, 0x4f,
		0x37, 0xad, 0x4c, 0x2f, 0x69, 0x38, 0xac, 0x76, 0xd5, 0xb9, 0x3b, 0xe8, 0x26, 0x51, 0x55, 0xd9,
		0xae, 0x6c, 0x9a, 0xbe, 0x9c, 0x1d, 0xd7, 0xc3, 0x38, 0x4a, 0xdb, 0x44, 0x6b, 0xfb, 0xa8, 0x6d,
		0x1b, 0xbd, 0x33, 0x43, 0xf1, 0xcc, 0xd0, 0x3c, 0x13, 0x54, 0xb7, 0xe4, 0x91, 0x19, 0xce, 0x38,
		0xe3, 0xf3, 0x37, 0x0f, 0xf2, 0x6d, 0x08, 0xc3, 0x8e, 0x3f, 0xe8, 0x9d, 0x89, 0x15, 0xf0, 0x99,
		0x07, 0x22, 0x1b, 0x16, 0x2e, 0x65, 0x67, 0x72, 0x67, 0xf2, 0xc7, 0x0e, 0x88, 0x14, 0x6c, 0x4f,
		0xf6, 0x58, 0x1e, 0xdb, 0x1e, 0x5c, 0xd6, 0xf2, 0xe4, 0xcf, 0xf4, 0xba, 0x19, 0xb8, 0xfb, 0x96,
		0x30, 0xe6, 0x6e, 0x28, 0x59, 0x9c, 0x14, 0xca, 0x4b, 0x28, 0x59, 0x9c, 0x24, 0xca, 0x45, 0x38,
		0x3d, 0x5b, 0x8d, 0xab, 0x2c, 0xeb, 0x62, 0x6e, 0x83, 0xe9, 0x5c, 0x74, 0x07, 0xf1, 0xa5, 0x6d,
		0xed, 0x36, 0xbd, 0xa4, 0x55, 0xed, 0x56, 0x45, 0xbb, 0xa1, 0xdd, 0xd0, 0x6e, 0x68, 0x37, 0xb4,
		0x1b, 0xda, 0x0d, 0xed, 0x86, 0x76, 0x43, 0xbb, 0xa1, 0xdd, 0xd0, 0x6e, 0x68, 0xb7, 0xa5, 0xd5,
		0x6e, 0xa1, 0x8a, 0x43, 0xd7, 0x8f, 0x7a, 0x5e, 0xec, 0xb8, 0x71, 0xac, 0x7a, 0xfd, 0x38, 0xb2,
		0xa7, 0xe2, 0x1e, 0xbb, 0x38, 0x02, 0x0b, 0x81, 0x85, 0xc0, 0x42, 0x60, 0x21, 0xb0, 0xee, 0x6c,
		0x72, 0xda, 0xb6, 0x28, 0xad, 0xea, 0x48, 0x2b, 0xa4, 0x15, 0xd2, 0x0a, 0x69, 0x95, 0x41, 0x28,
		0x55, 0xeb, 0x08, 0x2b, 0x84, 0xd5, 0x0a, 0x08, 0xab, 0x48, 0xb5, 0x43, 0x15, 0x3b, 0x9f, 0xd5,
		0x95, 0x3d, 0x3d, 0x75, 0xeb, 0x9a, 0xc8, 0x28, 0x64, 0x14, 0x32, 0x0a, 0x19, 0x85, 0x8c, 0xba,
		0x71, 0x9b, 0x82, 0x41, 0xec, 0xf9, 0x17, 0x4e, 0xdf, 0x8d, 0xa2, 0x24, 0x3c, 0x6d, 0x16, 0x5b,
		0x65, 0x84, 0xfc, 0xc9, 0x08, 0xe9, 0x5c, 0xba, 0xd1, 0xa5, 0xea, 0x64, 0x31, 0x50, 0x4e, 0x2e,
		0xcd, 0x78, 0xc9, 0x78, 0xc9, 0x78, 0xc9, 0x78, 0xc9, 0x78, 0x79, 0xb3, 0x87, 0x34, 0xbc, 0xea,
		0xc7, 0xd3, 0xd1, 0xd2, 0x89, 0x87, 0x37, 0xc0, 0x90, 0x99, 0xed, 0x90, 0x99, 0x00, 0x93, 0x63,
		0xfa, 0x5c, 0xa7, 0x87, 0xe3, 0xe5, 0xdd, 0xeb, 0x32, 0x58, 0x32, 0x58, 0x32, 0x58, 0x32, 0x58,
		0x32, 0x58, 0xda, 0x3d, 0x46, 0xea, 0xc1, 0x18, 0xb9, 0x63, 0xe1, 0x5a, 0x56, 0x8e, 0x95, 0x9a,
		0xfc, 0xb1, 0x38, 0x51, 0x97, 0xd1, 0x31, 0x53, 0x0f, 0x79, 0x8e, 0xc5, 0x6b, 0xda, 0x3e, 0xd9,
		0x62, 0x7a, 0xe1, 0xd5, 0x39, 0x7e, 0x6a, 0xf2, 0xe7, 0xd4, 0x66, 0xb7, 0x65, 0x71, 0x2a, 0xc9,
		0xf4, 0xea, 0xab, 0x75, 0x2c, 0xd5, 0xb4, 0xff, 0xec, 0xcc, 0xbd, 0xbd, 0x58, 0x61, 0xd8, 0x6c,
		0x00, 0x9b, 0xa6, 0x61, 0x93, 0x73, 0x81, 0x56, 0xf6, 0x38, 0xab, 0xb5, 0x1d, 0x48, 0x08, 0xe7,
		0x95, 0x3c, 0xe6, 0xca, 0xf2, 0xc0, 0xca, 0xa2, 0x16, 0xab, 0x2d, 0x9b, 0x2a, 0x2c, 0x66, 0xb8,
		0x9c, 0xf0, 0x8d, 0x73, 0x9a, 0x51, 0x59, 0xe1, 0x51, 0x05, 0xd9, 0x92, 0xd1, 0x7a, 0x8c, 0x85,
		0x4c, 0xaa, 0x0c, 0x1f, 0x25, 0x4f, 0x66, 0xa4, 0xd8, 0xb0, 0xb9, 0x50, 0xbe, 0x36, 0x52, 0xdf,
		0xd9, 0x8d, 0x2d, 0x1c, 0x16, 0x37, 0xba, 0xcc, 0x92, 0x57, 0xf4, 0xac, 0x52, 0xd1, 0x73, 0x8e,
		0x2b, 0x51, 0xd1, 0x53, 0x6c, 0x78, 0xa1, 0xa2, 0xe7, 0x8c, 0x37, 0x43, 0x45, 0x4f, 0x9d, 0x97,
		0x47, 0x45, 0xcf, 0x9c, 0xa3, 0xb5, 0x7d, 0xd4, 0xb6, 0x8d, 0xde, 0x99, 0xa1, 0x78, 0x66, 0x68,
		0x9e, 0x09, 0xaa, 0xdb, 0x11, 0x9c, 0x54, 0x85, 0x91, 0x81, 0x48, 0xaa, 0xc2, 0x68, 0x3c, 0x18,
		0x5b, 0x17, 0xcd, 0x5f, 0x97, 0xad, 0x8b, 0x2b, 0x1b, 0x4a, 0x54, 0x85, 0x59, 0xca, 0xab, 0xb0,
		0x79, 0xf1, 0x11, 0xed, 0x46, 0x45, 0x4f, 0xb4, 0x1b, 0xda, 0x0d, 0xed, 0x86, 0x76, 0x43, 0xbb,
		0xa1, 0xdd, 0xd0, 0x6e, 0x68, 0x37, 0xb4, 0x1b, 0xda, 0x0d, 0xed, 0x86, 0x76, 0xcb, 0xbd, 0x76,
		0x6b, 0x07, 0x03, 0x3f, 0x56, 0xa1, 0xc5, 0xdd, 0x81, 0xd3, 0x2b, 0xda, 0x91, 0x52, 0x15, 0xa4,
		0x14, 0x52, 0x0a, 0x29, 0x85, 0x94, 0x4a, 0xe1, 0xfd, 0x18, 0x5e, 0xf4, 0x30, 0xbd, 0xd0, 0x78,
		0xe1, 0xe0, 0xf0, 0x8b, 0x8d, 0x8a, 0xca, 0x0f, 0xd2, 0xfc, 0xde, 0xf5, 0x2d, 0x05, 0xa4, 0x5d,
		0x12, 0x67, 0x0d, 0xa8, 0xb3, 0x00, 0xec, 0xec, 0x80, 0x3b, 0x2b, 0x00, 0xcf, 0x1c, 0xc8, 0x33,
		0x07, 0xf4, 0x4c, 0x81, 0xdd, 0xb2, 0x34, 0xb0, 0x94, 0xb1, 0xd6, 0xbc, 0xb3, 0x59, 0xa4, 0xb8,
		0x51, 0xcb, 0x60, 0x73, 0x9c, 0xcd, 0xbd, 0x71, 0x76, 0x1d, 0xb5, 0xc9, 0x1f, 0xbb, 0x90, 0x54,
		0xc8, 0xca, 0x61, 0xcb, 0xd8, 0x1e, 0x79, 0x60, 0x93, 0x64, 0x75, 0xfd, 0x0c, 0xad, 0x12, 0xcb,
		0x88, 0x75, 0x37, 0xe4, 0x32, 0x70, 0xe2, 0xf2, 0x16, 0x72, 0x95, 0xed, 0x5a, 0xad, 0xb1, 0x55,
		0xab, 0x95, 0xb7, 0x36, 0xb7, 0xca, 0x3b, 0xf5, 0x7a, 0xa5, 0x51, 0xa9, 0xaf, 0x71, 0x14, 0x3e,
		0x5b, 0xcd, 0xab, 0xad, 0xca, 0xa6, 0x41, 0x0b, 0x28, 0x31, 0xd1, 0x76, 0xa1, 0xfa, 0x7f, 0xaa,
		0x9d, 0xa1, 0xb6, 0x9c, 0x5c, 0x1f, 0x6d, 0x89, 0xb6, 0x44, 0x5b, 0xa2, 0x2d, 0xd1, 0x96, 0x68,
		0x4b, 0xb4, 0x25, 0xda, 0x12, 0x6d, 0x89, 0xb6, 0x44, 0x5b, 0xa2, 0x2d, 0xd1, 0x96, 0x4b, 0xa8,
		0x2d, 0x43, 0x15, 0x87, 0x9e, 0xea, 0x38, 0x53, 0x8d, 0xf7, 0xd7, 0x40, 0x45, 0x59, 0x88, 0xcc,
		0x59, 0x37, 0x82, 0xda, 0x44, 0x6d, 0xa2, 0x36, 0x51, 0x9b, 0xa8, 0x4d, 0xd4, 0x26, 0x6a, 0x13,
		0xb5, 0x89, 0xda, 0x44, 0x6d, 0xa2, 0x36, 0x51, 0x9b, 0xa8, 0xcd, 0x25, 0x54, 0x9b, 0xb1, 0xd7,
		0x53, 0xc1, 0x20, 0xce, 0x5e, 0x6d, 0xce, 0xba, 0x11, 0xd4, 0x26, 0x6a, 0x13, 0xb5, 0x89, 0xda,
		0x44, 0x6d, 0xa2, 0x36, 0x51, 0x9b, 0xa8, 0x4d, 0xd4, 0x26, 0x6a, 0x13, 0xb5, 0x89, 0xda, 0x44,
		0x6d, 0x2e, 0xd5, 0x15, 0x4c, 0x6f, 0x2b, 0xb5, 0x74, 0x88, 0xc5, 0xf4, 0x7a, 0x19, 0x1f, 0x66,
		0x91, 0x9c, 0x44, 0x50, 0xb2, 0xb4, 0xeb, 0xbf, 0x90, 0xe5, 0xe1, 0x16, 0xc7, 0xc3, 0x27, 0x6d,
		0xbd, 0x99, 0x3c, 0x29, 0xd5, 0x26, 0x1e, 0xf4, 0x4c, 0xa8, 0xe2, 0xd0, 0xf5, 0xa3, 0x9e, 0x17,
		0x3b, 0x6e, 0x1c, 0xab, 0x9e, 0x8d, 0xdd, 0xce, 0x77, 0x16, 0x09, 0xdc, 0xbf, 0x38, 0xe5, 0xfc,
		0xf2, 0x6a, 0xcd, 0x50, 0x83, 0x62, 0xf5, 0xac, 0x17, 0x6a, 0x50, 0xe4, 0xd7, 0x5a, 0x99, 0xe6,
		0xdb, 0xc0, 0xf3, 0xe3, 0x6d, 0x8b, 0x85, 0xfc, 0xea, 0x14, 0xf2, 0x5b, 0x2e, 0xbb, 0x84, 0x42,
		0x7e, 0x14, 0xf2, 0x5b, 0x91, 0x50, 0xaa, 0xd6, 0x29, 0xe3, 0xb7, 0x74, 0x57, 0xa1, 0x8c, 0xdf,
		0x23, 0x92, 0x57, 0xb5, 0x43, 0x15, 0x3b, 0x9f, 0xd5, 0x95, 0x3d, 0x3d, 0x75, 0xeb, 0x9a, 0xc8,
		0x28, 0x64, 0x14, 0x32, 0x0a, 0x19, 0x85, 0x8c, 0xba, 0x71, 0x9b, 0x82, 0x41, 0xec, 0xf9, 0x17,
		0x4e, 0xdf, 0x8d, 0xa2, 0x24, 0x3c, 0xed, 0x29, 0xaa, 0xca, 0x36, 0x23, 0xe4, 0x4f, 0x46, 0x48,
		0xe7, 0xd2, 0x8d, 0x2e, 0x55, 0x27, 0x8b, 0x81, 0x72, 0x72, 0x69, 0xc6, 0x4b, 0xc6, 0x4b, 0xc6,
		0x4b, 0xc6, 0x4b, 0xc6, 0xcb, 0x9b, 0x95, 0x5c, 0xe1, 0x55, 0x3f, 0x9e, 0x8e, 0x96, 0x4e, 0x3c,
		0xbc, 0x01, 0x86, 0xcc, 0x6c, 0x87, 0xcc, 0x04, 0x98, 0x1c, 0xb7, 0xd3, 0x09, 0x55, 0x64, 0x71,
		0xa2, 0xee, 0xde, 0x75, 0x19, 0x2c, 0x19, 0x2c, 0x19, 0x2c, 0x19, 0x2c, 0x19, 0x2c, 0xa7, 0xf9,
		0xe6, 0xf5, 0x2d, 0xa1, 0xe3, 0x9d, 0x31, 0x72, 0xc7, 0xc2, 0xb5, 0xc6, 0xef, 0x72, 0xe5, 0x26,
		0xea, 0x6e, 0x7a, 0xee, 0x4b, 0xcd, 0x62, 0xdf, 0x3d, 0xe4, 0x39, 0x16, 0xaf, 0x79, 0xe8, 0xc6,
		0xb1, 0x0a, 0x7d, 0xeb, 0xcb, 0xd6, 0x8b, 0xcf, 0x3f, 0x96, 0x9d, 0x9d, 0xd3, 0x1f, 0x1f, 0x2b,
		0xce, 0xce, 0xe9, 0xe8, 0x9f, 0x95, 0xe4, 0xcb, 0xf7, 0xea, 0xf5, 0x8f, 0xea, 0xc7, 0xb2, 0x53,
		0x1b, 0xff, 0xb4, 0x5a, 0xff, 0x58, 0x76, 0xea, 0xa7, 0x1b, 0xcf, 0x3f, 0x7d, 0x7a, 0xb9, 0xe8,
		0x67, 0x36, 0xbe, 0x6f, 0x5e, 0xdb, 0xdb, 0x2f, 0x72, 0x6a, 0xb3, 0xdb, 0x0e, 0x8e, 0xf7, 0xff,
		0xc8, 0xac, 0xef, 0xfe, 0xf3, 0xdc, 0x56, 0xef, 0x6d, 0xfc, 0xad, 0xb8, 0x6a, 0x2b, 0x6f, 0x5f,
		0xac, 0x30, 0x6c, 0x36, 0x80, 0x4d, 0xd3, 0xb0, 0x99, 0x64, 0x91, 0xeb, 0x9c, 0x37, 0x9d, 0xb7,
		0xa7, 0xdf, 0x2b, 0x2f, 0x6a, 0xd7, 0xaf, 0x36, 0xbe, 0x6f, 0x5d, 0xdf, 0xff, 0xe1, 0x8f, 0xc7,
		0x7e, 0xad, 0xf2, 0x62, 0xeb, 0xfa, 0xd5, 0x8c, 0xff, 0x69, 0x5c, 0xbf, 0x9a, 0xb3, 0x8d, 0xfa,
		0xf5, 0xf3, 0x07, 0xbf, 0x3a, 0xfc, 0x79, 0x75, 0xd6, 0x07, 0x6a, 0x33, 0x3e, 0xb0, 0x39, 0xeb,
		0x03, 0x9b, 0x33, 0x3e, 0x30, 0xf3, 0x96, 0xaa, 0x33, 0x3e, 0x50, 0xbf, 0xfe, 0xf1, 0xe0, 0xf7,
		0x9f, 0x3f, 0xfe, 0xab, 0x8d, 0xeb, 0x8d, 0x1f, 0xb3, 0xfe, 0x6f, 0xeb, 0xfa, 0xc7, 0xab, 0x8d,
		0x0d, 0x06, 0x12, 0x63, 0x03, 0x09, 0xe1, 0x6c, 0x3f, 0x9c, 0x57, 0x6f, 0x60, 0x65, 0x51, 0x8b,
		0xd5, 0x96, 0x0d, 0x11, 0x19, 0x5b, 0x5b, 0x6f, 0x72, 0xb1, 0xe5, 0xa6, 0x68, 0xd2, 0x19, 0xce,
		0x72, 0x87, 0x8d, 0x19, 0x70, 0x91, 0x0f, 0x64, 0xd9, 0x16, 0x85, 0x53, 0xc2, 0x74, 0x2a, 0x64,
		0x9c, 0x02, 0x06, 0x82, 0x3f, 0xab, 0xa0, 0x97, 0x0d, 0x77, 0xb9, 0xa0, 0x14, 0x0c, 0xc8, 0xe2,
		0x08, 0xb0, 0xa4, 0xe3, 0xf0, 0x66, 0x42, 0xc9, 0x00, 0x1e, 0x1a, 0x3a, 0x5f, 0xf8, 0x66, 0x9e,
		0xa8, 0x2a, 0xdc, 0xb0, 0xc1, 0x79, 0x21, 0xf3, 0xf3, 0x40, 0xa6, 0xe7, 0x7d, 0xac, 0xcd, 0xf3,
		0x58, 0x9b, 0xd7, 0xb1, 0x32, 0x8f, 0x93, 0xef, 0x21, 0xce, 0xd4, 0xf9, 0xbd, 0x45, 0xd3, 0x33,
		0xe2, 0x37, 0x87, 0x27, 0x19, 0x75, 0xbc, 0x0c, 0x4f, 0x7d, 0x1b, 0x9f, 0xf2, 0xb6, 0x31, 0xd5,
		0x6d, 0x6f, 0x8a, 0xdb, 0xd6, 0xd4, 0xb6, 0xf5, 0x29, 0x6d, 0xeb, 0x53, 0xd9, 0x56, 0xa7, 0xb0,
		0x97, 0x4b, 0x00, 0x1b, 0x9f, 0xaa, 0xb6, 0x3b, 0x45, 0x6d, 0x63, 0x6a, 0xda, 0xce, 0x94, 0xb4,
		0xd5, 0xc5, 0x03, 0x56, 0xa7, 0xa0, 0x6d, 0xce, 0xa1, 0x58, 0x9f, 0x3b, 0x59, 0xa1, 0xa9, 0xe6,
		0x53, 0x1b, 0xdd, 0x93, 0xc5, 0x8c, 0xc0, 0x8a, 0x4d, 0x29, 0x9f, 0x2e, 0xf3, 0x5a, 0x29, 0xbb,
		0x30, 0xd7, 0x00, 0xe6, 0xa4, 0x60, 0x8e, 0xb9, 0xb4, 0x95, 0x9d, 0x1a, 0x5e, 0x79, 0xe0, 0x27,
		0x6c, 0x57, 0x72, 0x0a, 0x78, 0x59, 0xa7, 0x4c, 0x4f, 0x97, 0x65, 0xfe, 0xca, 0x80, 0x8d, 0xdb,
		0x0e, 0x7c, 0x5f, 0x25, 0x05, 0x30, 0x1c, 0xf7, 0x2c, 0x08, 0x63, 0x0b, 0x1e, 0xda, 0xc3, 0x4b,
		0xe2, 0xa6, 0xe1, 0xa6, 0xe1, 0xa6, 0xe1, 0xa6, 0x2d, 0x91, 0x9b, 0x66, 0xa3, 0xce, 0xbd, 0x85,
		0xba, 0xf6, 0x96, 0x0a, 0xb1, 0x59, 0x50, 0x99, 0x36, 0x0b, 0xaf, 0xd9, 0x3e, 0xf1, 0xc5, 0x72,
		0xa1, 0xb5, 0x2c, 0x6a, 0x62, 0xd9, 0x38, 0xaf, 0xc8, 0x66, 0x41, 0xb5, 0xac, 0x42, 0x24, 0xbb,
		0xba, 0xf1, 0x99, 0x44, 0x0d, 0x8a, 0x63, 0x99, 0x15, 0x47, 0xbb, 0x1b, 0x44, 0xca, 0xae, 0xe2,
		0x18, 0x5f, 0x12, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07,
		0x8a, 0x03, 0xc5, 0x81, 0xe2, 0x40, 0x71, 0xac, 0xbe, 0xe2, 0x38, 0x77, 0xbd, 0xee, 0x20, 0xb4,
		0xac, 0x39, 0xa6, 0x17, 0x45, 0x75, 0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x03,
		0xd5, 0x81, 0xea, 0x40, 0x75, 0xa0, 0x3a, 0x50, 0x1d, 0xab, 0xaf, 0x3a, 0x82, 0xbe, 0xf2, 0xed,
		0x4a, 0x8e, 0xd1, 0x15, 0xd1, 0x1b, 0xe8, 0x0d, 0xf4, 0x06, 0x7a, 0x03, 0xbd, 0x81, 0xde, 0x40,
		0x6f, 0xa0, 0x37, 0xd0, 0x1b, 0xe8, 0x0d, 0xf4, 0xc6, 0xea, 0xeb, 0x8d, 0xd8, 0xeb, 0xa9, 0x60,
		0x60, 0x79, 0x2f, 0xc7, 0xf4, 0xa2, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40,
		0x75, 0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x63, 0x45, 0x55, 0x87, 0x0a, 0xc3,
		0x20, 0x8c, 0x9c, 0x50, 0xb5, 0x95, 0xf7, 0xc5, 0xe0, 0x19, 0xbe, 0xd3, 0xa1, 0xfa, 0xfe, 0x05,
		0x51, 0x1b, 0xa8, 0x0d, 0xd4, 0x06, 0x6a, 0x03, 0xb5, 0x81, 0xda, 0x40, 0x6d, 0xa0, 0x36, 0x50,
		0x1b, 0xa8, 0x0d, 0xd4, 0xc6, 0x8a, 0xaa, 0x8d, 0x9e, 0x8a, 0x22, 0xf7, 0x42, 0xd9, 0xd4, 0x1b,
		0x0f, 0x2f, 0x89, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x50, 0x1c, 0x28, 0x0e, 0x14, 0x07, 0x8a, 0x03,
		0xc5, 0x81, 0xe2, 0x40, 0x71, 0xa0, 0x38, 0x56, 0x5d, 0x71, 0x44, 0x23, 0x0a, 0x63, 0x4b, 0x6d,
		0x24, 0x97, 0x43, 0x69, 0xa0, 0x34, 0x50, 0x1a, 0x28, 0x0d, 0x94, 0x06, 0x4a, 0x03, 0xa5, 0x81,
		0xd2, 0x40, 0x69, 0xa0, 0x34, 0x50, 0x1a, 0x2b, 0xaa, 0x34, 0xc6, 0xe7, 0x98, 0x1b, 0x16, 0x18,
		0xc9, 0x55, 0xd0, 0x15, 0xe8, 0x0a, 0x74, 0x05, 0xba, 0x62, 0x89, 0x74, 0x45, 0x14, 0x87, 0x9e,
		0x7f, 0x61, 0xe3, 0xe4, 0xda, 0xed, 0x35, 0x1e, 0x83, 0xc6, 0x7b, 0xf8, 0xcc, 0x0f, 0x43, 0x93,
		0x0b, 0x31, 0x12, 0x31, 0x12, 0x31, 0x12, 0x31, 0x12, 0x2d, 0xd1, 0x48, 0x34, 0xf0, 0xfc, 0xb8,
		0xd2, 0xb0, 0x30, 0x12, 0x35, 0xb0, 0xb7, 0xe6, 0xf0, 0x2e, 0xb0, 0xb7, 0x96, 0xda, 0xa8, 0xc0,
		0xde, 0x12, 0x09, 0x91, 0x46, 0xbd, 0xbe, 0x89, 0x9f, 0x95, 0xbb, 0xd6, 0x97, 0xc6, 0xcf, 0x7a,
		0x96, 0xe3, 0xa4, 0x2e, 0x36, 0x7d, 0x3f, 0x88, 0xdd, 0x61, 0xc8, 0x19, 0xc9, 0xe3, 0x62, 0xd4,
		0xbe, 0x54, 0x3d, 0xb7, 0xef, 0xc6, 0x97, 0xc3, 0xf1, 0xbd, 0x14, 0xf4, 0x95, 0xdf, 0x4e, 0x18,
		0xbe, 0xe3, 0xb6, 0xdb, 0x2a, 0x8a, 0x9c, 0x7e, 0xe0, 0xf9, 0x71, 0x54, 0x9a, 0xfd, 0x5d, 0x29,
		0xba, 0x8a, 0x62, 0xd5, 0x2b, 0xb9, 0xae, 0x5b, 0x8a, 0x54, 0xf8, 0x45, 0x85, 0xce, 0x45, 0x18,
		0x0c, 0xfa, 0xd1, 0x9d, 0xef, 0xc6, 0xdf, 0x4c, 0x7e, 0x58, 0x8a, 0x62, 0x37, 0x36, 0x61, 0xc6,
		0x0d, 0xc5, 0xf2, 0xa0, 0x1d, 0x8f, 0x0d, 0xc5, 0xe2, 0xc1, 0xf4, 0x79, 0x9a, 0xc9, 0x2d, 0x1f,
		0x26, 0xf7, 0xdf, 0x9a, 0xf5, 0x4d, 0xeb, 0x38, 0x79, 0x96, 0x56, 0xd3, 0x75, 0x5b, 0xc7, 0xc9,
		0x8d, 0xfe, 0x92, 0x3c, 0xca, 0xed, 0x6f, 0xc6, 0xff, 0x9e, 0xfc, 0xac, 0x75, 0x9c, 0x3c, 0xc9,
		0xb3, 0x7c, 0x86, 0xa4, 0x60, 0x38, 0x16, 0x63, 0xb7, 0xed, 0xb6, 0xe5, 0xeb, 0xea, 0xdc, 0xe8,
		0xe2, 0x51, 0xfb, 0xc2, 0x09, 0x34, 0xb1, 0x36, 0x84, 0x9b, 0x35, 0x25, 0x83, 0x4d, 0xca, 0x5f,
		0xf3, 0xb2, 0xd7, 0xb4, 0xdc, 0xb5, 0x26, 0x73, 0xad, 0xc9, 0x5b, 0x2b, 0xb2, 0x36, 0xdf, 0x43,
		0xdc, 0xae, 0x17, 0x9a, 0x09, 0xf7, 0xf6, 0x24, 0x47, 0xcd, 0x17, 0x02, 0x1b, 0x5e, 0xc7, 0xac,
		0x9f, 0x57, 0xc1, 0xcf, 0xcb, 0x10, 0xd8, 0x6c, 0x01, 0x9c, 0x75, 0xa0, 0xb3, 0x0e, 0x78, 0x56,
		0x81, 0xcf, 0xac, 0xca, 0x31, 0xe5, 0xe7, 0x99, 0x02, 0xc4, 0xe9, 0x05, 0xfa, 0x41, 0x18, 0x9b,
		0x0f, 0xe1, 0x49, 0x52, 0x26, 0x57, 0x33, 0x1c, 0x4c, 0xbb, 0xea, 0xdc, 0x1d, 0x74, 0x93, 0x58,
		0xaa, 0xed, 0x98, 0xbe, 0x98, 0x1d, 0x9f, 0xc3, 0x38, 0x32, 0xdb, 0x44, 0x68, 0xfb, 0x48, 0x6d,
		0x1b, 0xb1, 0x33, 0x43, 0xee, 0xcc, 0x10, 0x3c, 0x13, 0x24, 0xb7, 0xe4, 0x8a, 0x19, 0xce, 0x38,
		0xe3, 0x33, 0x36, 0x8f, 0x82, 0xb0, 0xe3, 0x0f, 0x7a, 0x67, 0x2a, 0xb4, 0x91, 0x74, 0xe6, 0xa7,
		0x71, 0xa6, 0x97, 0xb2, 0x33, 0x9d, 0x33, 0xf9, 0x63, 0x07, 0x44, 0x0a, 0xb6, 0xa7, 0x77, 0x2c,
		0x8f, 0x6d, 0x0f, 0x2e, 0x6b, 0x79, 0xba, 0x67, 0x7a, 0xdd, 0x0c, 0xfc, 0x7c, 0x4b, 0x18, 0x73,
		0x37, 0x94, 0x2c, 0x4e, 0x03, 0xe5, 0x25, 0x94, 0x2c, 0x4e, 0x0b, 0xe5, 0x22, 0x9c, 0x9e, 0xad,
		0xc6, 0x55, 0x4e, 0x97, 0x74, 0xba, 0xcb, 0x60, 0x3a, 0x17, 0x23, 0xd5, 0x0e, 0x55, 0xec, 0x7c,
		0x56, 0x57, 0xf6, 0x54, 0xdb, 0xad, 0x6b, 0x22, 0xa7, 0x90, 0x53, 0xc8, 0x29, 0xe4, 0x14, 0x72,
		0x6a, 0x9a, 0x6f, 0x61, 0x30, 0x88, 0x3d, 0xff, 0xc2, 0xe9, 0xbb, 0x51, 0x94, 0x84, 0xa7, 0x3d,
		0x4d, 0x65, 0x68, 0x91, 0xf6, 0xaa, 0x8c, 0x90, 0xce, 0xa5, 0x1b, 0x5d, 0x1a, 0x2c, 0x8e, 0xf6,
		0x93, 0x81, 0x72, 0x72, 0x69, 0xc6, 0x4b, 0xc6, 0x4b, 0xc6, 0x4b, 0xc6, 0x4b, 0xc6, 0xcb, 0x9b,
		0x29, 0xf2, 0xf0, 0xaa, 0x1f, 0x4f, 0x47, 0x4b, 0x27, 0x1e, 0xde, 0x00, 0x43, 0x66, 0xb6, 0x43,
		0x66, 0x02, 0x4c, 0x8e, 0xdb, 0xe9, 0x84, 0x2a, 0x8a, 0x2c, 0x8e, 0x97, 0x77, 0xaf, 0xcb, 0x60,
		0xc9, 0x60, 0xc9, 0x60, 0xc9, 0x60, 0xc9, 0x60, 0x39, 0xcd, 0x37, 0xaf, 0x6f, 0x09, 0x1d, 0xef,
		0x8c, 0x91, 0x3b, 0x16, 0xae, 0x35, 0x7e, 0x97, 0x2b, 0x37, 0x55, 0x77, 0xd3, 0x73, 0x5f, 0x6a,
		0x16, 0xfb, 0xee, 0x21, 0xcf, 0xb1, 0x78, 0xcd, 0x43, 0x37, 0x8e, 0x55, 0xe8, 0x5b, 0xeb, 0xce,
		0xe9, 0x85, 0x9f, 0x7f, 0x2c, 0x3b, 0x3b, 0xa7, 0x3f, 0x3e, 0x56, 0x9c, 0x9d, 0xd3, 0xd1, 0x3f,
		0x2b, 0xc9, 0x97, 0xef, 0xd5, 0xeb, 0x1f, 0xd5, 0x8f, 0x65, 0xa7, 0x36, 0xfe, 0x69, 0xb5, 0xfe,
		0xb1, 0xec, 0xd4, 0x4f, 0x37, 0x9e, 0x7f, 0xfa, 0xf4, 0x72, 0xd1, 0xcf, 0x6c, 0x7c, 0xdf, 0xbc,
		0x2e, 0x5a, 0x7b, 0xac, 0x53, 0x9b, 0xdd, 0x76, 0x70, 0xbc, 0xff, 0x47, 0x66, 0x7d, 0xf7, 0x9f,
		0xe7, 0xb6, 0x7a, 0x6f, 0xe3, 0x6f, 0x16, 0xfb, 0xcf, 0xce, 0xdc, 0xdb, 0x8b, 0x15, 0x86, 0xcd,
		0x06, 0xb0, 0x69, 0x1a, 0x36, 0x93, 0x2c, 0x72, 0x9d, 0xf3, 0xa6, 0xf3, 0xf6, 0xf4, 0x7b, 0xe5,
		0x45, 0xed, 0xfa, 0xd5, 0xc6, 0xf7, 0xad, 0xeb, 0xfb, 0x3f, 0xfc, 0xf1, 0xd8, 0xaf, 0x55, 0x5e,
		0x6c, 0x5d, 0xbf, 0x9a, 0xf1, 0x3f, 0x8d, 0xeb, 0x57, 0x73, 0xb6, 0x51, 0xbf, 0x7e, 0xfe, 0xe0,
		0x57, 0x87, 0x3f, 0xaf, 0xce, 0xfa, 0x40, 0x6d, 0xc6, 0x07, 0x36, 0x67, 0x7d, 0x60, 0x73, 0xc6,
		0x07, 0x66, 0xde, 0x52, 0x75, 0xc6, 0x07, 0xea, 0xd7, 0x3f, 0x1e, 0xfc, 0xfe, 0xf3, 0xc7, 0x7f,
		0xb5, 0x71, 0xbd, 0xf1, 0x63, 0xd6, 0xff, 0x6d, 0x5d, 0xff, 0x78, 0xb5, 0xb1, 0xc1, 0x40, 0x62,
		0x6c, 0x20, 0x21, 0x9c, 0xed, 0x87, 0xf3, 0xea, 0x0d, 0xac, 0x2c, 0x6a, 0xb1, 0xda, 0xb2, 0xa9,
		0x7d, 0x13, 0x86, 0xf7, 0x4a, 0xdf, 0x38, 0xa7, 0x19, 0xed, 0x99, 0x1e, 0x6d, 0x90, 0x2d, 0x19,
		0xdd, 0x6e, 0x56, 0xc8, 0x64, 0x0f, 0xf5, 0x49, 0xf2, 0x64, 0xad, 0xb1, 0x8b, 0xba, 0xc6, 0x45,
		0xc8, 0x46, 0xdb, 0xe2, 0x8d, 0xef, 0x58, 0x34, 0xb5, 0xfb, 0xbe, 0x60, 0x73, 0xc3, 0x62, 0x95,
		0x0d, 0x8b, 0x73, 0x5c, 0x89, 0x0d, 0x8b, 0x62, 0xc3, 0x0b, 0x1b, 0x16, 0x67, 0xbc, 0x19, 0x36,
		0x2c, 0x2e, 0xfe, 0xca, 0xd8, 0xb0, 0x98, 0x6b, 0x84, 0xb6, 0x8f, 0xd4, 0xb6, 0x11, 0x3b, 0x33,
		0xe4, 0xce, 0x0c, 0xc1, 0x33, 0x41, 0x72, 0x3b, 0x22, 0x93, 0x0d, 0x8b, 0x32, 0x10, 0xc9, 0x86,
		0x45, 0x8d, 0x07, 0x63, 0xc3, 0xa2, 0xf9, 0xeb, 0xb2, 0x61, 0x71, 0x65, 0x43, 0x89, 0x0d, 0x8b,
		0x4b, 0x79, 0x15, 0x36, 0x2c, 0x3e, 0x0c, 0x2b, 0x36, 0x2c, 0x22, 0xa7, 0x90, 0x53, 0xc8, 0x29,
		0xe4, 0x54, 0x5e, 0xe4, 0x14, 0x1b, 0x16, 0xf3, 0x3a, 0x42, 0xb2, 0x61, 0x91, 0xf1, 0x92, 0xf1,
		0x92, 0xf1, 0x92, 0xf1, 0x32, 0x4f, 0xe3, 0x25, 0x1b, 0x16, 0xf3, 0x37, 0x64, 0xb2, 0x61, 0x91,
		0xc1, 0x92, 0xc1, 0x92, 0xc1, 0x92, 0xc1, 0x32, 0x67, 0x83, 0x25, 0x1b, 0x16, 0x45, 0xfe, 0xb0,
		0x61, 0xd1, 0xec, 0x48, 0xc4, 0x86, 0x45, 0xa9, 0x3f, 0x6c, 0x58, 0x64, 0xc3, 0x62, 0xe6, 0x03,
		0x5d, 0xb6, 0xb0, 0xc9, 0x86, 0x45, 0xe3, 0xb0, 0xc9, 0x0e, 0x2f, 0x36, 0x2c, 0xae, 0xda, 0x40,
		0x42, 0x38, 0xb3, 0x61, 0x31, 0xe7, 0xfa, 0xb4, 0xc0, 0x86, 0x45, 0x3b, 0x44, 0x66, 0x5d, 0x36,
		0x2c, 0x9a, 0xdc, 0x6d, 0x56, 0xc8, 0x72, 0xbf, 0xa2, 0x81, 0xa3, 0x5f, 0xcd, 0x05, 0x32, 0xe7,
		0x1c, 0x67, 0x97, 0x02, 0x2b, 0x71, 0xd0, 0xf1, 0x28, 0xe8, 0x73, 0x7b, 0xd2, 0xf1, 0xb3, 0x1c,
		0x85, 0x75, 0xf1, 0x1f, 0xc9, 0xca, 0xc7, 0xa2, 0xac, 0x44, 0x2c, 0xbe, 0xf3, 0xa2, 0xb8, 0x19,
		0xc7, 0xb2, 0x9b, 0xed, 0x8a, 0xef, 0x3d, 0x7f, 0xaf, 0xab, 0x7a, 0xca, 0x1f, 0x2d, 0x00, 0x16,
		0x3c, 0x31, 0xfa, 0xbd, 0xfb, 0xed, 0x56, 0xcb, 0x95, 0xed, 0x5a, 0xad, 0xb1, 0x55, 0xab, 0x95,
		0xb7, 0x36, 0xb7, 0xca, 0x3b, 0xf5, 0x7a, 0xa5, 0x51, 0x11, 0x5c, 0xee, 0x5c, 0x3c, 0x08, 0x3b,
		0x2a, 0x54, 0x9d, 0xd7, 0xc3, 0x17, 0xef, 0x0f, 0xba, 0xdd, 0x5c, 0xc5, 0x83, 0x21, 0x78, 0xcb,
		0x0a, 0xd6, 0x04, 0xf1, 0xcc, 0x3a, 0x8e, 0xc9, 0x00, 0x98, 0x3e, 0xdc, 0xe8, 0xb5, 0xa0, 0x19,
		0x98, 0xd2, 0x01, 0x69, 0x3d, 0x10, 0x05, 0x22, 0xd0, 0x5e, 0xe4, 0xe9, 0x85, 0x5c, 0xfa, 0x40,
		0xd1, 0x08, 0x12, 0xa1, 0x4a, 0x14, 0xa2, 0x15, 0x27, 0x84, 0x2a, 0x4b, 0x88, 0x55, 0x90, 0x90,
		0x5c, 0xdb, 0x20, 0xbf, 0x76, 0x41, 0x7a, 0x6d, 0x82, 0xb1, 0xb5, 0x07, 0xc6, 0xd6, 0x16, 0x18,
		0x59, 0x3b, 0x90, 0x2d, 0x6c, 0x4b, 0x55, 0x5a, 0x28, 0x8e, 0x51, 0x4f, 0x28, 0x34, 0x26, 0xc1,
		0x9b, 0xb4, 0x2a, 0x45, 0xa1, 0x45, 0x17, 0x42, 0x89, 0x2f, 0x78, 0x32, 0xb1, 0xb0, 0xc9, 0xdc,
		0x02, 0x26, 0x53, 0x0b, 0x95, 0x8c, 0x2f, 0x48, 0x32, 0xbe, 0xf0, 0xc8, 0xe8, 0x02, 0xa3, 0x7c,
		0x89, 0x52, 0xf1, 0x85, 0x41, 0xb7, 0x46, 0xf7, 0xd0, 0xf3, 0x25, 0x4b, 0x92, 0x09, 0x2f, 0x84,
		0x15, 0x60, 0xeb, 0x02, 0x03, 0x72, 0x2c, 0xf9, 0xfe, 0xa7, 0xef, 0x5e, 0x70, 0x69, 0x32, 0x98,
		0x0b, 0xe6, 0x82, 0xb9, 0x4b, 0x82, 0xb9, 0x5e, 0x47, 0xf9, 0xb1, 0x17, 0x5f, 0x85, 0xea, 0xdc,
		0x04, 0xf0, 0x4a, 0x5a, 0x73, 0xfb, 0xe3, 0x5b, 0x7d, 0xed, 0x46, 0x06, 0xd2, 0x61, 0xf2, 0x42,
		0x9a, 0xcd, 0x66, 0xeb, 0x78, 0xef, 0xe8, 0xf7, 0xbd, 0xa3, 0xd6, 0xc9, 0x9f, 0x87, 0x7b, 0xd2,
		0x49, 0x91, 0x94, 0x69, 0x88, 0x8c, 0x2c, 0x1c, 0x30, 0x5c, 0xed, 0xf1, 0xa4, 0xf9, 0xa6, 0xf9,
		0xe6, 0xb8, 0xb8, 0x0c, 0x05, 0x30, 0x0d, 0xbf, 0x89, 0xa3, 0xe6, 0xee, 0xfe, 0x6f, 0x26, 0xde,
		0x84, 0x68, 0x8b, 0xa7, 0x79, 0xc3, 0x42, 0xbc, 0xce, 0xbb, 0xd6, 0x98, 0x35, 0xaf, 0x53, 0x68,
		0xe2, 0xdc, 0x86, 0xd3, 0xa9, 0x3f, 0x15, 0xae, 0xe1, 0x73, 0x3e, 0xb3, 0x18, 0x56, 0x93, 0xb9,
		0x3d, 0x0d, 0xaf, 0x43, 0x66, 0x22, 0x4f, 0x6e, 0xe2, 0xce, 0xe8, 0x44, 0x9d, 0xcc, 0xc4, 0x5c,
		0xda, 0xce, 0x12, 0xca, 0x7d, 0x6b, 0x39, 0x5f, 0xd4, 0xb2, 0xec, 0x0d, 0x67, 0x79, 0xba, 0xfc,
		0x5e, 0x3c, 0x3b, 0x17, 0xfb, 0xc4, 0x82, 0xa1, 0xa1, 0x1b, 0x12, 0x26, 0x43, 0x21, 0x45, 0xef,
		0x9b, 0xe9, 0xf5, 0xc5, 0x7a, 0x7a, 0xfe, 0xfe, 0x5a, 0xa0, 0xaf, 0x52, 0xce, 0x40, 0x69, 0xcd,
		0x38, 0xa5, 0x9c, 0x61, 0x4a, 0x3d, 0xa3, 0xa4, 0x63, 0x68, 0xe8, 0x1b, 0x17, 0xba, 0x06, 0x85,
		0x98, 0x11, 0x21, 0x66, 0x38, 0x88, 0x18, 0x0b, 0x6b, 0x85, 0x3e, 0x29, 0x19, 0xa6, 0x20, 0xea,
		0x2c, 0x4e, 0x1c, 0x17, 0x80, 0x9b, 0x67, 0x82, 0x5d, 0x98, 0xb6, 0xeb, 0x64, 0xbb, 0xac, 0xb8,
		0x10, 0x82, 0xca, 0x74, 0xd2, 0x7c, 0xdd, 0xf3, 0xf4, 0xcb, 0x9e, 0xe3, 0x45, 0x17, 0xdd, 0xae,
		0x1b, 0xf6, 0xe6, 0xaf, 0xee, 0x30, 0x45, 0xc1, 0xf1, 0xe7, 0xe6, 0xec, 0xca, 0xc5, 0x70, 0x7e,
		0x61, 0x7c, 0x4f, 0x83, 0xeb, 0x77, 0xf0, 0x7c, 0x91, 0x87, 0xd1, 0x81, 0x72, 0x6d, 0x08, 0xd7,
		0x86, 0xee, 0x07, 0x90, 0x3d, 0x7a, 0xf4, 0x8c, 0x52, 0x7c, 0xd1, 0xf9, 0xf5, 0x51, 0xd8, 0xa5,
		0x27, 0x29, 0xa3, 0x8f, 0x5b, 0x26, 0x29, 0xe5, 0x8c, 0x48, 0xca, 0xa2, 0x41, 0xbd, 0x46, 0x3c,
		0x65, 0xc1, 0xa0, 0xb7, 0x43, 0x55, 0xd2, 0x2e, 0x36, 0x29, 0xb6, 0x27, 0x91, 0x96, 0xb2, 0xbf,
		0xa6, 0x45, 0x98, 0x74, 0x4e, 0xba, 0xd2, 0x5c, 0x2d, 0xa6, 0x3d, 0x79, 0x29, 0x31, 0x59, 0x29,
		0x92, 0x3e, 0x52, 0x69, 0x24, 0x9e, 0x4e, 0xe2, 0x69, 0x25, 0x9d, 0x5e, 0xd9, 0xf8, 0x8b, 0x39,
		0xb4, 0xac, 0x92, 0xf7, 0x37, 0xfa, 0xa2, 0x7f, 0xfc, 0x9c, 0x10, 0x2d, 0x4d, 0xee, 0x69, 0xf4,
		0x45, 0xeb, 0xe0, 0xb8, 0x14, 0xf6, 0x54, 0x8a, 0x21, 0xcc, 0xeb, 0xe8, 0xc3, 0xa1, 0xd7, 0xd1,
		0x84, 0xc2, 0x32, 0x50, 0x08, 0x14, 0x2e, 0x13, 0x14, 0x6a, 0xaf, 0x9e, 0x98, 0x46, 0x4d, 0x57,
		0xb9, 0xe7, 0x7a, 0x2b, 0x25, 0xa6, 0x7c, 0x62, 0x4b, 0xa3, 0x8d, 0xc3, 0x31, 0x1a, 0xbf, 0x7c,
		0x39, 0xb2, 0x5e, 0x4a, 0x5e, 0x27, 0xcf, 0xa8, 0xa5, 0xb7, 0x09, 0x40, 0x64, 0xf1, 0xbf, 0x18,
		0x8d, 0xab, 0x82, 0x5d, 0x60, 0x97, 0x45, 0xec, 0xd2, 0x5d, 0xaa, 0xaf, 0x43, 0x19, 0xe4, 0xa8,
		0x83, 0x10, 0x85, 0x10, 0xa3, 0x12, 0x92, 0x69, 0x69, 0x24, 0x3d, 0xa5, 0xd3, 0xd4, 0x58, 0xba,
		0x1a, 0x4b, 0x5b, 0x53, 0xe9, 0xab, 0x97, 0xc6, 0x9a, 0xe9, 0x2c, 0x47, 0x49, 0x1e, 0x19, 0x1d,
		0x85, 0x16, 0xcf, 0x0b, 0x2d, 0x9a, 0xcf, 0x66, 0xbf, 0x61, 0xa8, 0x22, 0xa1, 0x71, 0x6d, 0x7a,
		0xe4, 0xc5, 0xa4, 0x45, 0x90, 0x0f, 0xe4, 0x03, 0xf9, 0x40, 0x3e, 0xe3, 0x6f, 0x48, 0x7d, 0x8b,
		0x43, 0xd7, 0x19, 0xf8, 0x51, 0xec, 0x9e, 0x75, 0x85, 0xde, 0x55, 0xa8, 0xce, 0x55, 0xa8, 0xfc,
		0xb6, 0x5c, 0x19, 0x62, 0x03, 0x7b, 0x11, 0xf6, 0xf7, 0x4e, 0xde, 0x16, 0xfe, 0x6c, 0x7e, 0xf8,
		0xa5, 0x90, 0xf8, 0x71, 0x85, 0xf7, 0x41, 0x67, 0xd0, 0x55, 0xaf, 0x0a, 0xbb, 0xa1, 0x7b, 0x1e,
		0x17, 0x9c, 0x42, 0x7c, 0xd5, 0x57, 0x1d, 0x75, 0x5e, 0x98, 0x40, 0xf2, 0x27, 0xff, 0x32, 0x8e,
		0xfb, 0xd1, 0xab, 0x52, 0x29, 0x0e, 0x82, 0x6e, 0xf4, 0xd2, 0x53, 0xf1, 0xf9, 0xcb, 0x20, 0xbc,
		0x28, 0x5d, 0xc6, 0xbd, 0x6e, 0xa9, 0x33, 0xfc, 0x94, 0xf3, 0xc5, 0xed, 0x76, 0x3d, 0xdf, 0xf1,
		0x55, 0xdc, 0x0b, 0x3a, 0xa3, 0x14, 0x72, 0x7a, 0x49, 0xbb, 0x4e, 0xb9, 0xba, 0x64, 0xdb, 0x74,
		0x6e, 0x3a, 0x71, 0x99, 0x77, 0xea, 0xd8, 0xef, 0xe5, 0x95, 0x5b, 0x08, 0x7f, 0xba, 0x8c, 0x95,
		0x20, 0xd4, 0x17, 0x15, 0x7a, 0xf1, 0x95, 0x60, 0x31, 0x88, 0x49, 0x8b, 0x30, 0x33, 0x98, 0x19,
		0xcc, 0x2c, 0x87, 0xcc, 0x4c, 0x76, 0x73, 0xa1, 0xe4, 0xa6, 0x42, 0x33, 0x9b, 0x09, 0xa7, 0x0f,
		0x7e, 0x70, 0xb8, 0xf7, 0xe1, 0xcd, 0xc1, 0x87, 0xb7, 0xfb, 0xbf, 0xb4, 0x9a, 0xef, 0x9a, 0x47,
		0xef, 0x5b, 0xc7, 0x7b, 0xbf, 0xef, 0x1d, 0xed, 0x9f, 0xfc, 0x29, 0x15, 0xd9, 0x06, 0xb6, 0x11,
		0x1a, 0xda, 0x4f, 0xf9, 0xbe, 0xf9, 0xff, 0x1d, 0x1c, 0x09, 0x0e, 0xc1, 0x2f, 0xf2, 0xfe, 0xc0,
		0xbf, 0x7d, 0xf8, 0xc7, 0x87, 0x83, 0x7f, 0x7d, 0x58, 0xa7, 0x47, 0xfe, 0x57, 0xf3, 0xe8, 0xc3,
		0xfe, 0x87, 0x5f, 0xd6, 0xe9, 0x91, 0xdf, 0x1c, 0xed, 0x9f, 0xec, 0xbf, 0x69, 0xbe, 0x5b, 0xa7,
		0x67, 0x7e, 0xbf, 0xff, 0x41, 0x34, 0x95, 0x45, 0x5a, 0x3a, 0x5d, 0xf2, 0x51, 0x17, 0xb5, 0xff,
		0x84, 0x0e, 0x9c, 0xd0, 0x7c, 0xd4, 0xfe, 0x2a, 0xab, 0x7d, 0xb9, 0x5e, 0x46, 0xed, 0xe7, 0x40,
		0xed, 0xc7, 0xea, 0x5b, 0x2c, 0xa7, 0xf4, 0x93, 0xd6, 0x50, 0xf9, 0xa8, 0x7c, 0x54, 0x3e, 0xf3,
		0x2f, 0x30, 0xb2, 0xac, 0x19, 0xd9, 0x68, 0xc4, 0x1d, 0x82, 0x32, 0x9c, 0x6c, 0x95, 0x39, 0x99,
		0x64, 0x3f, 0xc3, 0xca, 0xf2, 0xc0, 0xca, 0xbc, 0x9e, 0x72, 0xda, 0xa1, 0x72, 0x63, 0x25, 0xb8,
		0x2a, 0xf0, 0x4e, 0xab, 0xb0, 0x34, 0x58, 0x1a, 0x2c, 0x2d, 0x87, 0x2c, 0x6d, 0x98, 0xa5, 0xb1,
		0xd7, 0xfe, 0x1c, 0x35, 0x6a, 0x82, 0x54, 0x4d, 0xe0, 0x08, 0xd1, 0xe2, 0x6f, 0xbe, 0x97, 0x14,
		0x8c, 0x2a, 0xfa, 0xae, 0x1f, 0x44, 0xaa, 0x1d, 0xf8, 0x1d, 0x91, 0xd4, 0x38, 0x72, 0xfd, 0x8b,
		0x5c, 0xf2, 0xad, 0xf7, 0x9e, 0x6f, 0x80, 0xa5, 0x88, 0x16, 0xdd, 0x9d, 0x36, 0x9b, 0x4c, 0x34,
		0x19, 0x68, 0xf7, 0x6d, 0xe8, 0xb6, 0x63, 0x2f, 0xf0, 0x77, 0xbd, 0x8b, 0x51, 0xef, 0x97, 0xf3,
		0x68, 0xa4, 0x17, 0xdf, 0xbb, 0xdf, 0x96, 0xae, 0xab, 0xcc, 0x9e, 0x90, 0x64, 0xbc, 0xf7, 0xe0,
		0x77, 0xe9, 0xf9, 0xdd, 0x55, 0x5f, 0x39, 0x92, 0x1b, 0x3e, 0x26, 0x0d, 0xc2, 0xea, 0x60, 0x75,
		0xb0, 0xba, 0x1c, 0xb2, 0xba, 0x81, 0xef, 0x05, 0xbe, 0xa4, 0xf5, 0xb6, 0x23, 0xd0, 0xd6, 0xf8,
		0x31, 0x73, 0xeb, 0x73, 0xe5, 0xfe, 0x9c, 0x89, 0x17, 0x79, 0x7d, 0x73, 0x54, 0x8b, 0xbf, 0xf7,
		0x42, 0x1e, 0x2c, 0xf4, 0x3a, 0xf9, 0xf3, 0x70, 0xaf, 0xb5, 0xbf, 0x4b, 0xd9, 0xf8, 0xe9, 0x1b,
		0x3a, 0xa1, 0x66, 0xfc, 0xab, 0x42, 0xb1, 0xb9, 0xcf, 0x6b, 0x78, 0x55, 0x28, 0xbe, 0x3b, 0xe0,
		0x35, 0xbc, 0x2a, 0x14, 0xf7, 0xfe, 0x79, 0x78, 0xc2, 0xf9, 0x01, 0x4b, 0x26, 0xe9, 0x98, 0x56,
		0x4c, 0x17, 0xec, 0x0b, 0x4e, 0x37, 0x8d, 0x24, 0x27, 0x33, 0x8b, 0x42, 0xd7, 0xc8, 0xf3, 0xcc,
		0xa2, 0x54, 0x57, 0x83, 0x54, 0x52, 0xe6, 0x13, 0x25, 0xea, 0x6e, 0x4a, 0xd4, 0xe9, 0x9e, 0x9b,
		0x62, 0xa0, 0x42, 0x9d, 0xc6, 0xf9, 0x28, 0x79, 0x3b, 0x3f, 0x61, 0x7c, 0xfe, 0xc9, 0xc2, 0xe6,
		0xa2, 0xde, 0xa9, 0x27, 0xfa, 0xa7, 0x9d, 0x18, 0x39, 0xe5, 0x44, 0xef, 0x74, 0x93, 0x25, 0x2e,
		0x1e, 0x7f, 0x2b, 0xdf, 0xb2, 0xab, 0x1f, 0x7f, 0x2b, 0xc3, 0x28, 0x21, 0xbf, 0x48, 0xc7, 0xd9,
		0xaf, 0x22, 0xbf, 0x80, 0x0d, 0x2c, 0x53, 0x48, 0xbe, 0xdd, 0x0d, 0xda, 0x9f, 0x17, 0xaf, 0x23,
		0x3f, 0xfa, 0x98, 0xe1, 0x32, 0xf2, 0x65, 0x3b, 0x65, 0xe4, 0xa3, 0xab, 0xf5, 0xac, 0x21, 0x3f,
		0x7c, 0xee, 0x65, 0x29, 0x20, 0x9f, 0xb2, 0x56, 0xb6, 0x5e, 0x8d, 0xec, 0x65, 0x2d, 0x21, 0xbf,
		0x58, 0x40, 0x4b, 0xa9, 0xc0, 0xfc, 0xd7, 0x8f, 0x5f, 0x28, 0xe0, 0xed, 0xb0, 0xc4, 0xd4, 0xc5,
		0xe3, 0x63, 0xaf, 0xa7, 0xfe, 0x1b, 0xf8, 0xca, 0x19, 0x8f, 0x38, 0x9a, 0xb5, 0x47, 0xef, 0x36,
		0x47, 0xfd, 0xe4, 0xf4, 0x69, 0x24, 0x6d, 0xaa, 0x2c, 0x5f, 0x01, 0xd2, 0x54, 0x69, 0x96, 0x8d,
		0x42, 0x97, 0xab, 0x9c, 0x7c, 0x27, 0x81, 0x1c, 0xcd, 0xd3, 0xe6, 0x35, 0xe7, 0x5b, 0xd3, 0xbe,
		0x0d, 0x41, 0x07, 0x57, 0xd0, 0xb9, 0x15, 0x5c, 0x4d, 0xb0, 0xdf, 0xfc, 0xd0, 0x2c, 0x9c, 0x78,
		0x3d, 0x55, 0xf8, 0x77, 0xe0, 0xab, 0xc2, 0xae, 0x1b, 0xbb, 0x67, 0x6e, 0x34, 0xae, 0xc0, 0xf4,
		0xaa, 0x54, 0xfa, 0xfa, 0xf5, 0xeb, 0x4b, 0xcf, 0xf5, 0xdd, 0xc4, 0x9d, 0x4b, 0x96, 0x7d, 0x0f,
		0xbb, 0x34, 0xef, 0x2b, 0x5e, 0xa4, 0xad, 0x55, 0x3b, 0x8b, 0x5e, 0xd2, 0xf6, 0x45, 0xd6, 0x4b,
		0x64, 0x9e, 0xd9, 0xf5, 0x3c, 0x39, 0x16, 0x74, 0x96, 0x44, 0x4f, 0x24, 0x68, 0xfa, 0x73, 0x36,
		0x64, 0x04, 0xfb, 0x9b, 0xe1, 0x4d, 0xa4, 0x3a, 0x58, 0x83, 0xd3, 0x40, 0x33, 0x3e, 0x0d, 0x14,
		0x95, 0x84, 0x4a, 0x42, 0x25, 0xa1, 0x92, 0x50, 0x49, 0xa8, 0x24, 0x54, 0x12, 0x2a, 0x09, 0x95,
		0x84, 0x4a, 0x5a, 0x55, 0x95, 0x94, 0xed, 0x01, 0xe6, 0x23, 0x91, 0xc4, 0x11, 0xe6, 0x8b, 0x76,
		0x9b, 0xf5, 0xe9, 0xe7, 0xa4, 0xa3, 0xac, 0xce, 0x3e, 0x2f, 0x36, 0xad, 0x97, 0x6e, 0x3a, 0x8f,
		0xf9, 0xe7, 0x02, 0xf3, 0xcf, 0x7a, 0x82, 0xb2, 0xd8, 0x09, 0x7a, 0xae, 0xe7, 0xa7, 0x93, 0x91,
		0xd3, 0xbe, 0xbe, 0xdd, 0x48, 0x3a, 0x8f, 0xa5, 0xcc, 0x4c, 0x34, 0x1e, 0x8b, 0x19, 0xca, 0x92,
		0x5a, 0xe4, 0x09, 0x84, 0xf7, 0x5d, 0x35, 0x97, 0xe2, 0xb3, 0xef, 0x94, 0x7f, 0x91, 0x0c, 0xba,
		0xe9, 0x44, 0x94, 0x86, 0x82, 0x93, 0xa8, 0x75, 0x21, 0xb5, 0x7f, 0x7c, 0x5a, 0x20, 0x41, 0xb3,
		0x1d, 0xc1, 0xea, 0x07, 0x3a, 0xbb, 0xfd, 0x25, 0x6a, 0x53, 0x48, 0xbf, 0xda, 0x6a, 0x7d, 0x33,
		0x47, 0x2f, 0xd7, 0x92, 0x56, 0x3a, 0x4d, 0x91, 0x91, 0x87, 0x6e, 0x1c, 0xab, 0xd0, 0x4f, 0x9d,
		0x92, 0xc5, 0xe7, 0xcf, 0x9f, 0x3f, 0xff, 0xe8, 0x3a, 0xff, 0x6d, 0x3a, 0xff, 0x2e, 0x3b, 0x3b,
		0xad, 0xd3, 0x5b, 0xdf, 0x7c, 0xfa, 0xe4, 0xb4, 0x4e, 0x37, 0xbe, 0x97, 0x5f, 0x34, 0x2a, 0xd7,
		0x1b, 0xff, 0x77, 0xf3, 0xf3, 0xd3, 0x4f, 0x9f, 0x5e, 0x6e, 0xfc, 0x4f, 0x9a, 0x4f, 0xfd, 0xdf,
		0xc6, 0x8f, 0xe1, 0x67, 0x8b, 0x76, 0x5e, 0xcd, 0xc1, 0xf1, 0xfe, 0x1f, 0xda, 0xef, 0xe7, 0x3f,
		0x59, 0xbc, 0xa0, 0xbf, 0xa5, 0x78, 0x43, 0x39, 0x98, 0x15, 0xbb, 0x0c, 0xa2, 0x58, 0x8f, 0xba,
		0x4d, 0x5b, 0x80, 0xb7, 0xc1, 0xdb, 0xe0, 0x6d, 0xf0, 0x36, 0x78, 0x1b, 0xbc, 0x0d, 0xde, 0x06,
		0x6f, 0x83, 0xb7, 0x19, 0xe4, 0x6d, 0xdd, 0xe0, 0xc2, 0xf3, 0x9d, 0x33, 0xd7, 0xf7, 0x55, 0x98,
		0x9e, 0xbb, 0xdd, 0x69, 0x05, 0xfe, 0x06, 0x7f, 0x5b, 0x31, 0xfe, 0x96, 0xba, 0xdc, 0x57, 0xca,
		0x05, 0x14, 0x66, 0x72, 0xbd, 0x17, 0xc4, 0x1d, 0xed, 0x54, 0xbf, 0xdd, 0x08, 0x99, 0x4e, 0xa6,
		0x93, 0xe9, 0xb6, 0x32, 0x7d, 0xd5, 0xe6, 0xdf, 0x17, 0x5d, 0x56, 0x2e, 0x34, 0x01, 0xbf, 0xc0,
		0x42, 0x72, 0xa1, 0x19, 0xf8, 0xfe, 0x20, 0x4a, 0x31, 0xff, 0x3e, 0xfc, 0x94, 0xe1, 0xd9, 0xf7,
		0x2a, 0xb3, 0xef, 0x92, 0x40, 0xb9, 0xd4, 0xbb, 0xbf, 0xfb, 0x03, 0x8d, 0xad, 0xdf, 0xfd, 0x01,
		0xfb, 0xbe, 0xe1, 0x02, 0xf9, 0xe2, 0x02, 0xa9, 0x77, 0x34, 0x78, 0x7e, 0x47, 0x7d, 0xd3, 0xdf,
		0xc9, 0x30, 0x6a, 0x86, 0x1d, 0x0c, 0xec, 0x60, 0xb0, 0x9c, 0x56, 0x9a, 0x1e, 0x68, 0xe6, 0x3b,
		0x18, 0xba, 0xca, 0x3d, 0xd7, 0xab, 0x0e, 0x3d, 0x1d, 0x5d, 0xb6, 0x34, 0xda, 0x38, 0x1c, 0x73,
		0xdc, 0x97, 0x2f, 0x47, 0x6b, 0x7b, 0x4b, 0xa3, 0x84, 0xb6, 0xb5, 0x78, 0x3a, 0xd5, 0x4a, 0xe2,
		0x34, 0x3b, 0x13, 0x1f, 0x91, 0x40, 0xe9, 0x8b, 0xd6, 0xa5, 0x1c, 0xd7, 0x01, 0x2e, 0x80, 0x2b,
		0x2b, 0xe0, 0x4a, 0xcb, 0x13, 0xa6, 0x0d, 0x5c, 0xba, 0x61, 0xe7, 0xab, 0x1b, 0x2a, 0xc7, 0xf3,
		0x63, 0x15, 0x86, 0x83, 0xbe, 0xe0, 0xb1, 0xc5, 0x8f, 0xb4, 0x2d, 0x73, 0x90, 0x4a, 0x65, 0xc5,
		0x0f, 0x52, 0xd1, 0x4b, 0x5c, 0xe9, 0x04, 0x36, 0x96, 0xc8, 0xc6, 0x12, 0xda, 0x48, 0x62, 0xeb,
		0x25, 0xb8, 0x66, 0xa2, 0x8b, 0x25, 0xfc, 0xb4, 0x21, 0xf7, 0xcb, 0x85, 0x5c, 0x64, 0x4c, 0x62,
		0x77, 0xd8, 0xa8, 0x50, 0xd7, 0xc9, 0x1e, 0x12, 0x26, 0x96, 0xf2, 0x26, 0x52, 0xff, 0x31, 0x08,
		0x88, 0xaf, 0xfa, 0x22, 0x5b, 0x26, 0x4d, 0x81, 0x81, 0x71, 0x50, 0x30, 0x0e, 0x0e, 0xb3, 0x40,
		0x62, 0xf4, 0xe6, 0xf3, 0x56, 0x52, 0x5b, 0x28, 0x6a, 0xc5, 0x4e, 0x60, 0x7a, 0x10, 0xb3, 0x7d,
		0x15, 0xb6, 0x95, 0x1f, 0xbb, 0x17, 0xca, 0xc0, 0xc9, 0x38, 0x92, 0x07, 0xe3, 0xc8, 0x1e, 0x8b,
		0x39, 0xf9, 0x23, 0x7f, 0x60, 0x86, 0x91, 0x63, 0x32, 0x0d, 0xc1, 0xeb, 0x83, 0xe6, 0x0d, 0x1d,
		0x9b, 0x39, 0x6d, 0xdf, 0xe0, 0x01, 0x8c, 0xc2, 0x29, 0x77, 0xb7, 0x4b, 0x0d, 0x1c, 0xa7, 0x69,
		0xbb, 0x4b, 0x2b, 0xe5, 0x65, 0xee, 0xd4, 0x67, 0xf9, 0x6c, 0xed, 0x34, 0x27, 0x07, 0x2f, 0x08,
		0x04, 0x7d, 0xd1, 0xf3, 0xa3, 0xd8, 0xf5, 0x63, 0x79, 0x76, 0x39, 0x69, 0x18, 0x86, 0x09, 0xc3,
		0x84, 0x61, 0xc2, 0x30, 0x61, 0x98, 0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0xb9, 0x76, 0x0c,
		0x33, 0x56, 0xe1, 0x17, 0xb7, 0x6b, 0x82, 0x62, 0x8e, 0x5b, 0x86, 0x63, 0xc2, 0x31, 0xe1, 0x98,
		0x6b, 0xc7, 0x31, 0xa3, 0xd8, 0x8d, 0x1d, 0x61, 0x10, 0xb8, 0x0d, 0x04, 0xdb, 0x82, 0x4d, 0xfe,
		0xe6, 0x8f, 0xc6, 0xb0, 0xa2, 0xef, 0xfa, 0x41, 0xa4, 0xda, 0x81, 0xdf, 0x11, 0xcd, 0x35, 0x68,
		0x2c, 0x34, 0x16, 0x1a, 0xab, 0x41, 0x63, 0x45, 0x8e, 0x46, 0x84, 0xd7, 0xae, 0x0f, 0xaf, 0xed,
		0x09, 0x46, 0xfd, 0xcd, 0x9e, 0x37, 0xf7, 0x1b, 0x6c, 0x16, 0x36, 0x0b, 0x9b, 0x5d, 0x3f, 0x36,
		0x8b, 0x63, 0x0a, 0xd5, 0x84, 0x6a, 0xae, 0x03, 0xd5, 0xc4, 0x31, 0x85, 0x59, 0x3e, 0xc1, 0x2c,
		0x9d, 0xd8, 0xeb, 0x29, 0x23, 0xf4, 0x72, 0xd4, 0x32, 0x1c, 0x13, 0x8e, 0x09, 0xc7, 0x5c, 0x3b,
		0x8e, 0x39, 0xcc, 0xfd, 0xd8, 0x6b, 0x7f, 0x8e, 0x1a, 0x35, 0xfc, 0x52, 0x48, 0x2c, 0x24, 0x16,
		0x12, 0x9b, 0x96, 0xc4, 0xe2, 0x97, 0xc2, 0x6a, 0x17, 0x63, 0xb5, 0x82, 0x40, 0x76, 0x43, 0x68,
		0x3d, 0x1f, 0x2e, 0x0b, 0x97, 0x85, 0xcb, 0xae, 0x1f, 0x97, 0xc5, 0x2f, 0x85, 0x6a, 0x42, 0x35,
		0xd7, 0x81, 0x6a, 0xe2, 0x97, 0xc2, 0x2c, 0x9f, 0x60, 0x96, 0xa6, 0xfc, 0xd2, 0x49, 0xcb, 0x70,
		0x4c, 0x38, 0x26, 0x1c, 0x73, 0xed, 0x38, 0x26, 0x7e, 0x29, 0x24, 0x16, 0x12, 0x0b, 0x89, 0x15,
		0x20, 0xb1, 0xf8, 0xa5, 0xeb, 0xc4, 0x6a, 0x33, 0x2d, 0x3b, 0xa5, 0x79, 0x60, 0xfd, 0x83, 0xf6,
		0x04, 0x2b, 0xb1, 0xf7, 0x07, 0xd1, 0xf0, 0xaf, 0x71, 0x9d, 0x4b, 0xf1, 0x9a, 0x73, 0x05, 0xb9,
		0xe2, 0xed, 0xfd, 0x41, 0x34, 0xfc, 0x6b, 0x74, 0xd2, 0x7d, 0xeb, 0xd7, 0xf1, 0x9d, 0xee, 0x4f,
		0x6f, 0xf4, 0x59, 0x36, 0xf1, 0xa1, 0x73, 0x96, 0x97, 0xd7, 0xe9, 0x2a, 0xb9, 0x82, 0x81, 0x49,
		0x6b, 0x94, 0x08, 0x9c, 0x47, 0xf7, 0x50, 0x22, 0x90, 0x12, 0x81, 0x33, 0x9e, 0x88, 0x12, 0x81,
		0x58, 0x1f, 0x58, 0x1f, 0x58, 0x1f, 0xb9, 0xb3, 0x3e, 0x98, 0x5e, 0xc3, 0x99, 0xc0, 0x99, 0x58,
		0x07, 0x67, 0x82, 0xe9, 0xb5, 0x15, 0x36, 0x22, 0x28, 0x11, 0x08, 0xc3, 0x84, 0x61, 0xc2, 0x30,
		0x61, 0x98, 0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3, 0xcc, 0x21, 0xc3, 0xa4, 0x44,
		0x20, 0x1c, 0x13, 0x8e, 0x09, 0xc7, 0x94, 0x8e, 0x59, 0x4a, 0x04, 0x42, 0x63, 0xa1, 0xb1, 0xd0,
		0x58, 0x11, 0x1a, 0xcb, 0x12, 0x2e, 0x78, 0xed, 0x42, 0xdd, 0x48, 0x89, 0x40, 0xd8, 0x2c, 0x6c,
		0x16, 0x36, 0x2b, 0x15, 0xb3, 0x38, 0xa6, 0x50, 0x4d, 0xa8, 0xe6, 0x3a, 0x50, 0x4d, 0x1c, 0x53,
		0x98, 0xe5, 0x13, 0xcc, 0x92, 0x12, 0x81, 0x70, 0x4c, 0x38, 0x26, 0x1c, 0x53, 0x38, 0x66, 0xd9,
		0xf2, 0x0a, 0x89, 0x85, 0xc4, 0x42, 0x62, 0x05, 0x48, 0x2c, 0x7e, 0x29, 0xac, 0x76, 0x31, 0x56,
		0x4b, 0x89, 0x40, 0xb8, 0x2c, 0x5c, 0x16, 0x2e, 0x2b, 0x14, 0xb3, 0xf8, 0xa5, 0x50, 0x4d, 0xa8,
		0xe6, 0x3a, 0x50, 0x4d, 0xfc, 0x52, 0x98, 0xe5, 0x13, 0xcc, 0x92, 0x12, 0x81, 0x70, 0x4c, 0x38,
		0x26, 0x1c, 0x53, 0x38, 0x66, 0xf1, 0x4b, 0x21, 0xb1, 0x90, 0x58, 0x48, 0xac, 0x00, 0x89, 0xc5,
		0x2f, 0x5d, 0x27, 0x56, 0x4b, 0x89, 0xc0, 0x79, 0x4a, 0x04, 0x0a, 0x54, 0x99, 0x2b, 0x98, 0x2a,
		0x0a, 0xb8, 0x3f, 0xbc, 0xb7, 0x65, 0xac, 0x03, 0xe8, 0x77, 0xd4, 0x37, 0xc1, 0x42, 0x80, 0x49,
		0x73, 0x32, 0x95, 0x00, 0xcb, 0x54, 0x02, 0xcc, 0x40, 0xd4, 0x50, 0x09, 0x30, 0x07, 0x90, 0x2c,
		0x26, 0x51, 0xa6, 0xf1, 0x36, 0xf0, 0x87, 0xf8, 0x2e, 0x10, 0x6e, 0x93, 0x32, 0x9d, 0x3b, 0x02,
		0x6d, 0x8d, 0x1f, 0x53, 0x46, 0x24, 0x18, 0xd0, 0x73, 0xca, 0x1f, 0xf4, 0x54, 0x38, 0x1a, 0x1a,
		0xe5, 0xf5, 0x5c, 0xa5, 0x26, 0xd8, 0xe6, 0x9e, 0x3f, 0xe8, 0x0d, 0x23, 0x26, 0x57, 0x52, 0xdb,
		0x40, 0x97, 0x0c, 0x3c, 0x3f, 0xde, 0xac, 0x1a, 0xe8, 0x8d, 0x2d, 0xd4, 0x2f, 0xea, 0x17, 0xf5,
		0x9b, 0x8b, 0x2e, 0xad, 0x55, 0x77, 0x6a, 0x3b, 0x8d, 0xad, 0xea, 0x0e, 0x9a, 0x77, 0x65, 0x35,
		0xef, 0xe9, 0x12, 0x8a, 0xa5, 0xcf, 0x2a, 0xf4, 0x55, 0x57, 0x4e, 0x2d, 0x8d, 0xdb, 0xa3, 0x70,
		0x3a, 0x72, 0x09, 0xb9, 0xa4, 0xf1, 0x44, 0x14, 0x4e, 0xcf, 0x36, 0xe5, 0x4d, 0xa4, 0xfe, 0x63,
		0x10, 0xc0, 0x84, 0xb0, 0x69, 0x70, 0x98, 0x05, 0x12, 0x4c, 0x08, 0xa7, 0x8a, 0x59, 0x16, 0x1d,
		0xa2, 0x58, 0x51, 0xac, 0x6b, 0xa0, 0x58, 0x59, 0x74, 0xb8, 0xc2, 0x52, 0x95, 0xc2, 0xe9, 0x30,
		0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3, 0x84, 0x61, 0xc2, 0x30, 0x61, 0x98, 0x30, 0xcc,
		0x3c, 0x32, 0x4c, 0x0a, 0xa7, 0xc3, 0x31, 0xe1, 0x98, 0x70, 0x4c, 0xe9, 0x98, 0xa5, 0x70, 0x3a,
		0x34, 0x16, 0x1a, 0x0b, 0x8d, 0x15, 0xa1, 0xb1, 0x6c, 0x6c, 0x81, 0xd7, 0x2e, 0xd4, 0x8d, 0x14,
		0x4e, 0x87, 0xcd, 0xc2, 0x66, 0x61, 0xb3, 0x52, 0x31, 0x8b, 0x63, 0x0a, 0xd5, 0x84, 0x6a, 0xae,
		0x03, 0xd5, 0xc4, 0x31, 0x85, 0x59, 0x3e, 0xc1, 0x2c, 0x29, 0x9c, 0x0e, 0xc7, 0x84, 0x63, 0xc2,
		0x31, 0x85, 0x63, 0x96, 0x42, 0x40, 0x90, 0x58, 0x48, 0x2c, 0x24, 0x56, 0x80, 0xc4, 0xe2, 0x97,
		0xc2, 0x6a, 0x17, 0x63, 0xb5, 0x14, 0x4e, 0x87, 0xcb, 0xc2, 0x65, 0xe1, 0xb2, 0x42, 0x31, 0x8b,
		0x5f, 0x0a, 0xd5, 0x84, 0x6a, 0xae, 0x03, 0xd5, 0xc4, 0x2f, 0x85, 0x59, 0x3e, 0xc1, 0x2c, 0x29,
		0x9c, 0x0e, 0xc7, 0x84, 0x63, 0xc2, 0x31, 0x85, 0x63, 0x16, 0xbf, 0x14, 0x12, 0x0b, 0x89, 0x85,
		0xc4, 0x0a, 0x90, 0x58, 0xfc, 0xd2, 0x75, 0x62, 0xb5, 0x14, 0x4e, 0x9f, 0xa7, 0x70, 0xba, 0x48,
		0x9d, 0xb9, 0x82, 0xa9, 0xd2, 0xe9, 0xff, 0x18, 0xdd, 0xdd, 0x12, 0xd6, 0x03, 0xf4, 0x3d, 0x01,
		0x52, 0x3c, 0x25, 0x41, 0x49, 0x6b, 0xd4, 0x02, 0x9c, 0x47, 0xe0, 0x50, 0x0b, 0x90, 0x5a, 0x80,
		0x33, 0x9e, 0x88, 0x5a, 0x80, 0x78, 0x1c, 0x78, 0x1c, 0x78, 0x1c, 0xb9, 0xf3, 0x38, 0x98, 0x47,
		0xc3, 0x82, 0xc0, 0x82, 0x58, 0x07, 0x0b, 0x82, 0x79, 0xb4, 0x15, 0x76, 0x1c, 0xa8, 0x05, 0x08,
		0xc3, 0x84, 0x61, 0xc2, 0x30, 0x61, 0x98, 0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3,
		0xcc, 0x21, 0xc3, 0xa4, 0x16, 0x20, 0x1c, 0x13, 0x8e, 0x09, 0xc7, 0x94, 0x8e, 0x59, 0x6a, 0x01,
		0x42, 0x63, 0xa1, 0xb1, 0xd0, 0x58, 0x11, 0x1a, 0xcb, 0x5a, 0x2d, 0x78, 0xed, 0x42, 0xdd, 0x48,
		0x2d, 0x40, 0xd8, 0x2c, 0x6c, 0x16, 0x36, 0x2b, 0x15, 0xb3, 0x38, 0xa6, 0x50, 0x4d, 0xa8, 0xe6,
		0x3a, 0x50, 0x4d, 0x1c, 0x53, 0x98, 0xe5, 0x13, 0xcc, 0x92, 0x5a, 0x80, 0x70, 0x4c, 0x38, 0x26,
		0x1c, 0x53, 0x38, 0x66, 0xd9, 0xdb, 0x0a, 0x89, 0x85, 0xc4, 0x42, 0x62, 0x05, 0x48, 0x2c, 0x7e,
		0x29, 0xac, 0x76, 0x31, 0x56, 0x4b, 0x2d, 0x40, 0xb8, 0x2c, 0x5c, 0x16, 0x2e, 0x2b, 0x14, 0xb3,
		0xf8, 0xa5, 0x50, 0x4d, 0xa8, 0xe6, 0x3a, 0x50, 0x4d, 0xfc, 0x52, 0x98, 0xe5, 0x13, 0xcc, 0x92,
		0x5a, 0x80, 0x70, 0x4c, 0x38, 0x26, 0x1c, 0x53, 0x38, 0x66, 0xf1, 0x4b, 0x21, 0xb1, 0x90, 0x58,
		0x48, 0xac, 0x00, 0x89, 0xc5, 0x2f, 0x5d, 0x27, 0x56, 0x4b, 0x2d, 0xc0, 0x79, 0x6a, 0x01, 0x0a,
		0x54, 0x99, 0x2b, 0x98, 0xaa, 0x04, 0xf8, 0x61, 0x78, 0x6f, 0x4b, 0x58, 0x07, 0x30, 0x0a, 0xce,
		0xe3, 0xaf, 0x6e, 0xa8, 0x46, 0x1b, 0x63, 0xc2, 0x41, 0x3f, 0x96, 0xab, 0x0a, 0xf8, 0x48, 0xdb,
		0xd4, 0x08, 0x9c, 0x47, 0xf8, 0x50, 0x23, 0x90, 0x1a, 0x81, 0x33, 0x9e, 0x88, 0x1a, 0x81, 0x78,
		0x1f, 0x78, 0x1f, 0x78, 0x1f, 0xb9, 0xf3, 0x3e, 0x98, 0x5f, 0xc3, 0x9a, 0xc0, 0x9a, 0x58, 0x07,
		0x6b, 0x82, 0xf9, 0xb5, 0x15, 0x76, 0x22, 0xa8, 0x11, 0x08, 0xc3, 0x84, 0x61, 0xc2, 0x30, 0x61,
		0x98, 0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3, 0xcc, 0x21, 0xc3, 0xa4, 0x46, 0x20,
		0x1c, 0x13, 0x8e, 0x09, 0xc7, 0x94, 0x8e, 0x59, 0x6a, 0x04, 0x42, 0x63, 0xa1, 0xb1, 0xd0, 0x58,
		0x11, 0x1a, 0xcb, 0x1a, 0x2e, 0x78, 0xed, 0x42, 0xdd, 0x48, 0x8d, 0x40, 0xd8, 0x2c, 0x6c, 0x16,
		0x36, 0x2b, 0x15, 0xb3, 0x38, 0xa6, 0x50, 0x4d, 0xa8, 0xe6, 0x3a, 0x50, 0x4d, 0x1c, 0x53, 0x98,
		0xe5, 0x13, 0xcc, 0x92, 0x1a, 0x81, 0x70, 0x4c, 0x38, 0x26, 0x1c, 0x53, 0x38, 0x66, 0xd9, 0xf3,
		0x0a, 0x89, 0x85, 0xc4, 0x42, 0x62, 0x05, 0x48, 0x2c, 0x7e, 0x29, 0xac, 0x76, 0x31, 0x56, 0x4b,
		0x8d, 0x40, 0xb8, 0x2c, 0x5c, 0x16, 0x2e, 0x2b, 0x14, 0xb3, 0xf8, 0xa5, 0x50, 0x4d, 0xa8, 0xe6,
		0x3a, 0x50, 0x4d, 0xfc, 0x52, 0x98, 0xe5, 0x13, 0xcc, 0x92, 0x1a, 0x81, 0x70, 0x4c, 0x38, 0x26,
		0x1c, 0x53, 0x38, 0x66, 0xf1, 0x4b, 0x21, 0xb1, 0x90, 0x58, 0x48, 0xac, 0x00, 0x89, 0xc5, 0x2f,
		0x5d, 0x27, 0x56, 0x4b, 0x8d, 0xc0, 0x79, 0x6a, 0x04, 0x8a, 0xd7, 0x9c, 0x2b, 0x98, 0xaa, 0x18,
		0x78, 0x3c, 0xbe, 0xd3, 0xfd, 0xe9, 0x8d, 0x2e, 0x61, 0xf9, 0xc0, 0x38, 0x88, 0x05, 0xb6, 0xe1,
		0xdd, 0x90, 0xa3, 0xa4, 0x39, 0x8a, 0x04, 0xce, 0xa3, 0x7c, 0x28, 0x12, 0x48, 0x91, 0xc0, 0x19,
		0x4f, 0x44, 0x91, 0x40, 0xcc, 0x0f, 0xcc, 0x0f, 0xcc, 0x8f, 0xdc, 0x99, 0x1f, 0x4c, 0xb0, 0xe1,
		0x4d, 0xe0, 0x4d, 0xac, 0x83, 0x37, 0xc1, 0x04, 0xdb, 0x0a, 0x5b, 0x11, 0x14, 0x09, 0x84, 0x61,
		0xc2, 0x30, 0x61, 0x98, 0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3, 0x84, 0x61, 0xe6,
		0x90, 0x61, 0x52, 0x24, 0x10, 0x8e, 0x09, 0xc7, 0x84, 0x63, 0x4a, 0xc7, 0x2c, 0x45, 0x02, 0xa1,
		0xb1, 0xd0, 0x58, 0x68, 0xac, 0x08, 0x8d, 0x65, 0x11, 0x17, 0xbc, 0x76, 0xa1, 0x6e, 0xa4, 0x48,
		0x20, 0x6c, 0x16, 0x36, 0x0b, 0x9b, 0x95, 0x8a, 0x59, 0x1c, 0x53, 0xa8, 0x26, 0x54, 0x73, 0x1d,
		0xa8, 0x26, 0x8e, 0x29, 0xcc, 0xf2, 0x09, 0x66, 0x49, 0x91, 0x40, 0x38, 0x26, 0x1c, 0x13, 0x8e,
		0x29, 0x1c, 0xb3, 0x6c, 0x7a, 0x85, 0xc4, 0x42, 0x62, 0x21, 0xb1, 0x02, 0x24, 0x16, 0xbf, 0x14,
		0x56, 0xbb, 0x18, 0xab, 0xa5, 0x48, 0x20, 0x5c, 0x16, 0x2e, 0x0b, 0x97, 0x15, 0x8a, 0x59, 0xfc,
		0x52, 0xa8, 0x26, 0x54, 0x73, 0x1d, 0xa8, 0x26, 0x7e, 0x29, 0xcc, 0xf2, 0x09, 0x66, 0x49, 0x91,
		0x40, 0x38, 0x26, 0x1c, 0x13, 0x8e, 0x29, 0x1c, 0xb3, 0xf8, 0xa5, 0x90, 0x58, 0x48, 0x2c, 0x24,
		0x56, 0x80, 0xc4, 0xe2, 0x97, 0xae, 0x13, 0xab, 0xa5, 0x48, 0xe0, 0x3c, 0x45, 0x02, 0x25, 0xca,
		0xcc, 0x15, 0x4c, 0xd5, 0x05, 0x3c, 0x49, 0x6e, 0x6e, 0x09, 0x6b, 0x01, 0x0e, 0x22, 0x15, 0xca,
		0x95, 0x02, 0x4c, 0x5a, 0xa3, 0x12, 0xe0, 0x3c, 0xf2, 0x86, 0x4a, 0x80, 0x54, 0x02, 0x9c, 0xf1,
		0x44, 0x54, 0x02, 0xc4, 0xe1, 0xc0, 0xe1, 0xc0, 0xe1, 0xc8, 0x9d, 0xc3, 0xc1, 0x2c, 0x1a, 0x06,
		0x04, 0x06, 0xc4, 0x3a, 0x18, 0x10, 0xcc, 0xa2, 0xad, 0xb0, 0xdf, 0x40, 0x25, 0x40, 0x18, 0x26,
		0x0c, 0x13, 0x86, 0x09, 0xc3, 0x84, 0x61, 0xc2, 0x30, 0x61, 0x98, 0x30, 0x4c, 0x18, 0x66, 0x0e,
		0x19, 0x26, 0x95, 0x00, 0xe1, 0x98, 0x70, 0x4c, 0x38, 0xa6, 0x74, 0xcc, 0x52, 0x09, 0x10, 0x1a,
		0x0b, 0x8d, 0x85, 0xc6, 0x8a, 0xd0, 0x58, 0x56, 0x6a, 0xc1, 0x6b, 0x17, 0xea, 0x46, 0x2a, 0x01,
		0xc2, 0x66, 0x61, 0xb3, 0xb0, 0x59, 0xa9, 0x98, 0xc5, 0x31, 0x85, 0x6a, 0x42, 0x35, 0xd7, 0x81,
		0x6a, 0xe2, 0x98, 0xc2, 0x2c, 0x9f, 0x60, 0x96, 0x54, 0x02, 0x84, 0x63, 0xc2, 0x31, 0xe1, 0x98,
		0xc2, 0x31, 0xcb, 0xce, 0x56, 0x48, 0x2c, 0x24, 0x16, 0x12, 0x2b, 0x40, 0x62, 0xf1, 0x4b, 0x61,
		0xb5, 0x8b, 0xb1, 0x5a, 0x2a, 0x01, 0xc2, 0x65, 0xe1, 0xb2, 0x70, 0x59, 0xa1, 0x98, 0xc5, 0x2f,
		0x85, 0x6a, 0x42, 0x35, 0xd7, 0x81, 0x6a, 0xe2, 0x97, 0xc2, 0x2c, 0x9f, 0x60, 0x96, 0x54, 0x02,
		0x84, 0x63, 0xc2, 0x31, 0xe1, 0x98, 0xc2, 0x31, 0x8b, 0x5f, 0x0a, 0x89, 0x85, 0xc4, 0x42, 0x62,
		0x05, 0x48, 0x2c, 0x7e, 0xe9, 0x3a, 0xb1, 0x5a, 0x2a, 0x01, 0xce, 0x53, 0x09, 0x50, 0xa0, 0xca,
		0x5c, 0xc1, 0x54, 0x21, 0xc0, 0xdf, 0x86, 0xf7, 0xb6, 0x84, 0x75, 0x00, 0xbf, 0xba, 0x5e, 0x2c,
		0x57, 0x07, 0x30, 0x69, 0x8d, 0x3a, 0x80, 0xf3, 0x88, 0x1b, 0xea, 0x00, 0x52, 0x07, 0x70, 0xc6,
		0x13, 0x51, 0x07, 0x10, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x23, 0x77, 0xfe, 0x06, 0x73, 0x68, 0xd8,
		0x0f, 0xd8, 0x0f, 0xeb, 0x60, 0x3f, 0x30, 0x87, 0xb6, 0xc2, 0x6e, 0x03, 0x75, 0x00, 0x61, 0x98,
		0x30, 0x4c, 0x18, 0x26, 0x0c, 0x13, 0x86, 0x09, 0xc3, 0x84, 0x61, 0xc2, 0x30, 0x61, 0x98, 0x39,
		0x64, 0x98, 0xd4, 0x01, 0x84, 0x63, 0xc2, 0x31, 0xe1, 0x98, 0xd2, 0x31, 0x4b, 0x1d, 0x40, 0x68,
		0x2c, 0x34, 0x16, 0x1a, 0x2b, 0x42, 0x63, 0x59, 0xa7, 0x05, 0xaf, 0x5d, 0xa8, 0x1b, 0xa9, 0x03,
		0x08, 0x9b, 0x85, 0xcd, 0xc2, 0x66, 0xa5, 0x62, 0x16, 0xc7, 0x14, 0xaa, 0x09, 0xd5, 0x5c, 0x07,
		0xaa, 0x89, 0x63, 0x0a, 0xb3, 0x7c, 0x82, 0x59, 0x52, 0x07, 0x10, 0x8e, 0x09, 0xc7, 0x84, 0x63,
		0x0a, 0xc7, 0x2c, 0xfb, 0x5a, 0x21, 0xb1, 0x90, 0x58, 0x48, 0xac, 0x00, 0x89, 0xc5, 0x2f, 0x85,
		0xd5, 0x2e, 0xc6, 0x6a, 0xa9, 0x03, 0x08, 0x97, 0x85, 0xcb, 0xc2, 0x65, 0x85, 0x62, 0x16, 0xbf,
		0x14, 0xaa, 0x09, 0xd5, 0x5c, 0x07, 0xaa, 0x89, 0x5f, 0x0a, 0xb3, 0x7c, 0x82, 0x59, 0x52, 0x07,
		0x10, 0x8e, 0x09, 0xc7, 0x84, 0x63, 0x0a, 0xc7, 0x2c, 0x7e, 0x29, 0x24, 0x16, 0x12, 0x0b, 0x89,
		0x15, 0x20, 0xb1, 0xf8, 0xa5, 0xeb, 0xc4, 0x6a, 0xa9, 0x03, 0x38, 0x4f, 0x1d, 0x40, 0x81, 0x2a,
		0x73, 0x05, 0x53, 0x75, 0x00, 0xff, 0x35, 0xbc, 0xb7, 0xac, 0xea, 0x00, 0x3e, 0xb3, 0x18, 0x36,
		0x52, 0xe1, 0x62, 0x2c, 0x4c, 0x34, 0x22, 0xc4, 0x44, 0x64, 0xa4, 0x0b, 0x8a, 0xc5, 0xbb, 0x74,
		0xb1, 0x4f, 0x2c, 0xd8, 0xf9, 0x43, 0x85, 0x33, 0xda, 0x42, 0xd9, 0x51, 0x8b, 0x8a, 0x9b, 0xe2,
		0x3b, 0x2f, 0x8a, 0x9b, 0x71, 0x9c, 0xae, 0xb6, 0xdd, 0x90, 0xa0, 0xed, 0x75, 0xd5, 0x50, 0x9b,
		0x44, 0xe9, 0xc6, 0xdd, 0x21, 0x1f, 0xb8, 0xd5, 0x82, 0xcc, 0xc8, 0x5a, 0x3c, 0x08, 0x3b, 0x2a,
		0x54, 0x9d, 0xd7, 0xc3, 0xd7, 0xe2, 0x0f, 0xba, 0x5d, 0xa3, 0x6f, 0x5f, 0x33, 0xe5, 0x0c, 0xa4,
		0x5a, 0x8a, 0x24, 0x93, 0x4d, 0xae, 0xc5, 0xd2, 0x6a, 0xfe, 0xe4, 0x98, 0xef, 0x37, 0xe7, 0xec,
		0xc0, 0xb4, 0x1d, 0x27, 0xdc, 0x61, 0x0b, 0x74, 0x96, 0x5c, 0x27, 0xcd, 0xd7, 0x41, 0x4f, 0xbf,
		0xee, 0x39, 0x5e, 0x75, 0xb1, 0xe3, 0x47, 0x73, 0xbf, 0xdf, 0xa9, 0x58, 0x1f, 0x7e, 0x68, 0xce,
		0x6e, 0x5c, 0xac, 0x34, 0xed, 0xc2, 0x3e, 0x5b, 0x1a, 0x1f, 0x2d, 0x7d, 0x49, 0xd9, 0xb4, 0x2e,
		0x98, 0xb6, 0xcb, 0xa5, 0xed, 0x62, 0x69, 0x95, 0x7c, 0x95, 0x4d, 0xec, 0x45, 0x4b, 0xb5, 0x16,
		0xdb, 0x93, 0x98, 0x58, 0xf0, 0xa5, 0x4f, 0xba, 0x79, 0xfc, 0xf9, 0x45, 0x87, 0xed, 0x54, 0x35,
		0x95, 0x53, 0x1b, 0xc5, 0x3a, 0x86, 0xb0, 0x7e, 0x8d, 0x64, 0x5d, 0x7b, 0x57, 0xcc, 0xc6, 0x15,
		0xb3, 0x6b, 0x45, 0x6a, 0x1c, 0x9b, 0x25, 0x86, 0x69, 0x6b, 0x16, 0x17, 0x23, 0xe5, 0x86, 0xed,
		0xcb, 0xf4, 0x9d, 0x35, 0xdd, 0xd5, 0x3f, 0x6a, 0x27, 0xe5, 0x0b, 0xd6, 0xb3, 0x73, 0xb4, 0x67,
		0x54, 0x24, 0x66, 0x50, 0xe4, 0x8a, 0x8b, 0x4b, 0xcd, 0x8f, 0x88, 0xcf, 0x87, 0x88, 0xcf, 0x7f,
		0x88, 0x16, 0x0f, 0xb7, 0x2b, 0xbf, 0xb5, 0x67, 0x2f, 0x6e, 0x08, 0x50, 0xd0, 0x73, 0x3d, 0xdf,
		0x49, 0xb8, 0x9e, 0x46, 0xd0, 0x4c, 0xc6, 0x18, 0x8d, 0xe9, 0x89, 0xe2, 0x3b, 0xe5, 0x5f, 0x24,
		0x5c, 0x57, 0x6f, 0xbe, 0x40, 0xc0, 0xbc, 0x92, 0x9c, 0x0f, 0x90, 0x9e, 0xbf, 0x9d, 0x9a, 0xc3,
		0x42, 0xed, 0x19, 0x70, 0x7e, 0x25, 0xe6, 0xe7, 0x25, 0xfd, 0x7b, 0x53, 0x5d, 0x50, 0xad, 0x6f,
		0xe6, 0xb8, 0x13, 0x32, 0xf2, 0x21, 0x4f, 0x35, 0x10, 0xe0, 0xd0, 0x8d, 0x63, 0x15, 0xfa, 0xda,
		0x10, 0x50, 0x7c, 0xfe, 0xfc, 0xf9, 0xf3, 0x8f, 0xae, 0xf3, 0xdf, 0xa6, 0xf3, 0xef, 0xb2, 0xb3,
		0xd3, 0x3a, 0xbd, 0xf5, 0xcd, 0xa7, 0x4f, 0x4e, 0xeb, 0x74, 0xe3, 0x7b, 0xf9, 0x45, 0xa3, 0x72,
		0xbd, 0xf1, 0x7f, 0x37, 0x3f, 0x3f, 0xfd, 0xf4, 0xe9, 0xe5, 0xc6, 0xff, 0xa4, 0xf9, 0xd4, 0xff,
		0x6d, 0xfc, 0x18, 0x7e, 0xb6, 0x98, 0xcd, 0x2b, 0x3b, 0x38, 0xde, 0xff, 0x43, 0xec, 0xbd, 0xfd,
		0x27, 0x8b, 0x17, 0xf7, 0x37, 0x8d, 0x37, 0x67, 0x75, 0xd4, 0xd5, 0xf2, 0x30, 0xe5, 0xbc, 0x4c,
		0xa3, 0x9e, 0xe6, 0xa3, 0xde, 0xa6, 0xd0, 0x01, 0x41, 0x02, 0x47, 0x38, 0x49, 0xae, 0xde, 0xb9,
		0xcd, 0x50, 0x83, 0xd1, 0xd3, 0x3a, 0x67, 0x57, 0x12, 0x73, 0x4b, 0x26, 0x56, 0xea, 0xdc, 0x61,
		0xab, 0x83, 0x2c, 0x0f, 0x9c, 0x5a, 0x89, 0xb9, 0x8c, 0xfc, 0xb8, 0xe9, 0x1d, 0x3f, 0x2a, 0xa5,
		0x32, 0x76, 0xe4, 0xac, 0xda, 0x5d, 0x3f, 0x6a, 0x8d, 0x55, 0xac, 0x29, 0x47, 0x7d, 0x01, 0x6b,
		0xf2, 0x32, 0x88, 0x62, 0x47, 0xf9, 0x71, 0xe8, 0xa9, 0x28, 0xbd, 0x57, 0x76, 0xa7, 0x15, 0x1c,
		0x33, 0x1c, 0xb3, 0xd5, 0x70, 0xcc, 0xa6, 0x61, 0x7d, 0xa5, 0xef, 0x9a, 0xdd, 0x6a, 0x4b, 0xcf,
		0x39, 0xab, 0xe0, 0x9c, 0xe1, 0x9c, 0x2d, 0x87, 0x73, 0xa6, 0x7b, 0xbc, 0x5e, 0xda, 0x39, 0x9c,
		0x99, 0x61, 0x97, 0x7a, 0xe8, 0x17, 0x4c, 0x44, 0xb1, 0x84, 0x94, 0x4c, 0x4c, 0xf9, 0x04, 0x35,
		0x21, 0x22, 0x0a, 0x9c, 0x9b, 0x29, 0xe4, 0x38, 0xe5, 0xe6, 0xdc, 0xcc, 0xae, 0xe7, 0x46, 0x06,
		0x4e, 0xce, 0x4c, 0x9a, 0x65, 0x4f, 0x50, 0x7e, 0x60, 0xc0, 0x14, 0x1c, 0x18, 0x87, 0x05, 0xe3,
		0xf0, 0x60, 0x14, 0x26, 0x64, 0xe0, 0x42, 0x08, 0x36, 0xa6, 0x4f, 0x6a, 0xb2, 0xe2, 0x7c, 0xe8,
		0xf9, 0x17, 0x06, 0xb6, 0x02, 0x55, 0xb6, 0x73, 0xf5, 0x06, 0x45, 0xdc, 0x51, 0x73, 0x6e, 0xa9,
		0x55, 0xf7, 0xf4, 0xc1, 0xc5, 0xb4, 0x56, 0x8a, 0x9a, 0xcb, 0x20, 0x89, 0x99, 0xba, 0xa1, 0x8a,
		0x1c, 0xfb, 0x4f, 0xc2, 0x43, 0xe6, 0xb4, 0x65, 0x46, 0x4d, 0x46, 0x4d, 0x46, 0x4d, 0x46, 0xcd,
		0x3c, 0x8d, 0x9a, 0xf9, 0x38, 0x27, 0xab, 0xff, 0xa5, 0xe6, 0xb8, 0x9d, 0x4e, 0xa8, 0x22, 0x03,
		0x92, 0xe5, 0x4e, 0xeb, 0x60, 0x30, 0x18, 0x0c, 0x06, 0xaf, 0x15, 0x06, 0x1b, 0xc8, 0xff, 0x82,
		0xd0, 0x62, 0xc1, 0x87, 0x79, 0x2b, 0xb4, 0x04, 0xe6, 0x41, 0xc3, 0xcf, 0x3f, 0x96, 0x9d, 0x9d,
		0xd3, 0x1f, 0x1f, 0x2b, 0xce, 0xce, 0xe9, 0xe8, 0x9f, 0x95, 0xe4, 0xcb, 0xf7, 0xea, 0xf5, 0x8f,
		0xea, 0xc7, 0xb2, 0xf3, 0xff, 0xb3, 0xf7, 0xee, 0xcd, 0x89, 0x23, 0xc9, 0xbf, 0xf7, 0xff, 0xfd,
		0x2a, 0x08, 0x62, 0x23, 0x7e, 0xf6, 0x9e, 0x96, 0xb9, 0x83, 0xdd, 0x11, 0x27, 0x26, 0xdc, 0xdd,
		0xee, 0x59, 0x9f, 0x69, 0x5f, 0x7e, 0xb6, 0x67, 0x66, 0x77, 0x6c, 0x86, 0x90, 0x45, 0x61, 0xeb,
		0x19, 0x90, 0x58, 0xa9, 0x70, 0xb7, 0xa7, 0xcd, 0x7b, 0x7f, 0x02, 0x21, 0x64, 0x30, 0x60, 0xab,
		0xaa, 0xb2, 0x74, 0x81, 0xef, 0xc6, 0xc6, 0xf4, 0xcd, 0x2a, 0x44, 0x55, 0x5e, 0x3e, 0x99, 0x95,
		0x95, 0x55, 0x0f, 0xff, 0xb6, 0xda, 0xb8, 0x2e, 0x1b, 0x8d, 0xf6, 0xee, 0xce, 0xcd, 0xcd, 0x9e,
		0xe8, 0x33, 0xbb, 0x3f, 0x6a, 0x63, 0x3a, 0xf1, 0x6c, 0x53, 0x4e, 0x2b, 0x65, 0x79, 0xd1, 0xd2,
		0xe8, 0x7f, 0xee, 0x24, 0x35, 0xbb, 0x2a, 0x45, 0x46, 0x4b, 0xf3, 0x8b, 0xb0, 0x1b, 0x61, 0x77,
		0x16, 0xd0, 0xaf, 0xa9, 0x15, 0xfd, 0x9a, 0x40, 0x3f, 0xa0, 0x1f, 0xd0, 0x6f, 0x6b, 0xd1, 0xaf,
		0x09, 0xf4, 0x0b, 0x48, 0xc3, 0x34, 0x7a, 0x87, 0xc6, 0x97, 0xf6, 0x8f, 0xca, 0xfb, 0xfa, 0xf8,
		0xc3, 0xee, 0x8f, 0xd6, 0xf8, 0xe5, 0x5f, 0x3e, 0xad, 0xfa, 0xb1, 0xca, 0xfb, 0xd6, 0xf8, 0xc3,
		0x9a, 0x7f, 0x69, 0x8e, 0x3f, 0xc4, 0x1c, 0xa3, 0x31, 0xde, 0x59, 0xfa, 0xd1, 0xc9, 0xdf, 0x57,
		0xd7, 0x3d, 0x50, 0x5f, 0xf3, 0x40, 0x6d, 0xdd, 0x03, 0xb5, 0x35, 0x0f, 0xac, 0x7d, 0xa5, 0xea,
		0x9a, 0x07, 0x1a, 0xe3, 0xa7, 0xa5, 0x9f, 0xdf, 0x59, 0xfd, 0xa3, 0xcd, 0xf1, 0xee, 0xd3, 0xba,
		0x7f, 0x6b, 0x8d, 0x9f, 0x3e, 0xec, 0xee, 0x6e, 0x31, 0x0c, 0x43, 0xdc, 0x92, 0x17, 0x37, 0x04,
		0x07, 0x08, 0x0e, 0xb2, 0x13, 0x1c, 0xa0, 0x0f, 0xd8, 0xda, 0x3a, 0xf9, 0xf9, 0xa2, 0xee, 0xe7,
		0x3f, 0x3c, 0x96, 0x48, 0x8a, 0xe8, 0x0a, 0xa4, 0xf5, 0xf4, 0xff, 0x72, 0x7d, 0x7e, 0x34, 0x7d,
		0xd3, 0xe8, 0xf7, 0x8f, 0x52, 0x55, 0xf6, 0x74, 0x02, 0xa2, 0x20, 0x1c, 0x74, 0xdb, 0xbc, 0xd4,
		0xdb, 0xbb, 0x44, 0x71, 0x25, 0x6a, 0x1f, 0xb3, 0x15, 0x2f, 0xa2, 0xf6, 0x31, 0x85, 0x38, 0x30,
		0x92, 0xb7, 0x3e, 0x33, 0x7b, 0x1e, 0xeb, 0x51, 0x08, 0xdc, 0x2c, 0xe4, 0x6b, 0x11, 0x8c, 0x75,
		0x1e, 0xfa, 0x91, 0xbd, 0xbd, 0xd0, 0xe4, 0x97, 0x22, 0x23, 0x92, 0x43, 0x93, 0x3a, 0xed, 0x54,
		0x48, 0x66, 0x4f, 0x55, 0x1b, 0x1f, 0x16, 0x74, 0x14, 0x92, 0x57, 0x61, 0x4c, 0x61, 0x4c, 0x73,
		0x65, 0x4c, 0x51, 0x48, 0x8e, 0x9c, 0x3c, 0x72, 0xf2, 0xc8, 0xc9, 0x67, 0x2e, 0x27, 0x8f, 0x42,
		0x72, 0x24, 0xad, 0x50, 0x48, 0x9e, 0x62, 0xa6, 0x01, 0x5e, 0x13, 0x5e, 0x13, 0x5e, 0x13, 0x5e,
		0x13, 0x85, 0xe4, 0x82, 0x6b, 0x80, 0x42, 0x72, 0xd8, 0x60, 0xd8, 0xe0, 0xed, 0xb5, 0xc1, 0x28,
		0x24, 0x47, 0x21, 0x39, 0x0a, 0xc9, 0x97, 0xe7, 0x17, 0x61, 0x37, 0xc2, 0xee, 0x2c, 0xa0, 0x1f,
		0x0a, 0xc9, 0x81, 0x7e, 0x40, 0x3f, 0xa0, 0x1f, 0x0a, 0xc9, 0x51, 0x48, 0x8e, 0x42, 0xf2, 0x0d,
		0x81, 0x61, 0x88, 0x1b, 0x0a, 0xc9, 0x11, 0x1c, 0xa0, 0x90, 0x3c, 0x1d, 0xc9, 0xc9, 0x69, 0x21,
		0x39, 0x45, 0x0d, 0x5d, 0x21, 0x81, 0x3a, 0x72, 0x85, 0x5b, 0x85, 0xd5, 0xc5, 0x23, 0xd9, 0x8e,
		0xbd, 0xe1, 0xad, 0xc3, 0x8a, 0x7b, 0xb8, 0xdb, 0x7b, 0x79, 0x87, 0xb4, 0x45, 0xda, 0x9c, 0xbb,
		0xc1, 0x5f, 0xd1, 0xf8, 0xd4, 0x2f, 0x0a, 0x5f, 0xab, 0xe3, 0x45, 0xdc, 0xb3, 0xa1, 0x55, 0x08,
		0x52, 0xbd, 0x6d, 0x63, 0x6e, 0xc5, 0xb3, 0x70, 0xe5, 0x86, 0xcf, 0xbc, 0x07, 0xe6, 0x29, 0xdc,
		0xb6, 0x31, 0x1b, 0x00, 0x17, 0x6d, 0xe8, 0xcb, 0xb4, 0xe1, 0xa2, 0x8d, 0x64, 0xaf, 0xa6, 0x9d,
		0x48, 0x34, 0xc5, 0xd5, 0xb4, 0xc1, 0x38, 0xb8, 0x60, 0x03, 0x17, 0x6c, 0xa4, 0x94, 0x7a, 0xce,
		0xd9, 0x05, 0x1b, 0x54, 0x5b, 0x51, 0xcf, 0x07, 0x26, 0x48, 0xb2, 0xcf, 0x38, 0x66, 0x9a, 0x86,
		0xaa, 0x6a, 0x53, 0x59, 0x6d, 0xaa, 0xab, 0x45, 0x85, 0xb3, 0x91, 0xd2, 0xd9, 0xe2, 0x63, 0xa6,
		0x33, 0x1b, 0x92, 0xc3, 0x53, 0xa6, 0xb8, 0xb0, 0x08, 0xd6, 0x14, 0xd6, 0x34, 0x7b, 0xd6, 0x94,
		0xee, 0x9c, 0xa9, 0xae, 0xda, 0x1d, 0x94, 0xed, 0x64, 0xcf, 0x14, 0xe8, 0x32, 0x09, 0xda, 0x4d,
		0x83, 0x76, 0x13, 0xa1, 0xd5, 0x54, 0xd0, 0x98, 0x0c, 0x22, 0xd3, 0x41, 0x0f, 0x64, 0x4b, 0xf2,
		0x6a, 0x0f, 0x75, 0x16, 0xed, 0x1c, 0x10, 0x8e, 0x19, 0xce, 0x01, 0x6d, 0x0d, 0x05, 0xad, 0x4e,
		0x15, 0x12, 0xa8, 0x85, 0x5f, 0x9a, 0xe3, 0x7d, 0x0d, 0x63, 0xeb, 0x2a, 0x59, 0x89, 0x3e, 0x20,
		0x7f, 0x35, 0xf2, 0xb3, 0xff, 0xb5, 0x75, 0x4c, 0xb7, 0xce, 0x32, 0xa1, 0xe8, 0x53, 0xf2, 0x59,
		0x3b, 0x1f, 0xcd, 0x3b, 0xe9, 0x88, 0xe3, 0xf7, 0x39, 0x32, 0x23, 0x4d, 0x98, 0x91, 0x75, 0x66,
		0x04, 0x05, 0x70, 0xb9, 0xaf, 0xb7, 0xdc, 0x18, 0xc3, 0x0a, 0x31, 0xcc, 0x75, 0x1d, 0xa6, 0x26,
		0x47, 0x93, 0xb5, 0x3a, 0xd1, 0x4c, 0x1c, 0x45, 0x1a, 0xba, 0x1e, 0xa7, 0x4f, 0x63, 0x04, 0xa3,
		0x12, 0x45, 0x5c, 0x9f, 0x59, 0xcf, 0x1c, 0xf5, 0x83, 0xd0, 0xb2, 0x51, 0x43, 0x62, 0x04, 0x89,
		0x11, 0x24, 0x46, 0xb6, 0x2b, 0x31, 0x32, 0x31, 0x26, 0x86, 0x33, 0x1a, 0xdc, 0x4a, 0xd7, 0x74,
		0xbc, 0x66, 0x02, 0x9a, 0x84, 0x43, 0x5e, 0x98, 0xce, 0x5d, 0x2e, 0x32, 0x23, 0x27, 0xb6, 0x43,
		0xae, 0xad, 0x9a, 0x6c, 0xeb, 0xd2, 0xf0, 0xbf, 0x99, 0xfd, 0x11, 0xd3, 0x38, 0xfe, 0x17, 0xcf,
		0xb4, 0xb8, 0xed, 0x3a, 0x9f, 0xed, 0x3b, 0x7b, 0x5a, 0x72, 0x4c, 0xfe, 0x39, 0x63, 0x0d, 0x80,
		0x7d, 0x62, 0x7e, 0xcf, 0xfd, 0x92, 0x36, 0x1b, 0x8d, 0x5a, 0x23, 0xc7, 0xcb, 0x0a, 0x5e, 0xd5,
		0x38, 0xc2, 0x66, 0x9f, 0x8e, 0x09, 0xab, 0x79, 0xc3, 0x5f, 0xb3, 0x78, 0xbb, 0xc2, 0xe5, 0xf4,
		0x0d, 0xc3, 0x5f, 0x73, 0x7c, 0xad, 0x02, 0x7a, 0x80, 0x27, 0x1a, 0x7f, 0xa0, 0x36, 0x03, 0xb5,
		0x19, 0x71, 0xc2, 0x7c, 0xd4, 0x66, 0x20, 0x05, 0x81, 0x14, 0x04, 0x52, 0x10, 0x59, 0x4c, 0x41,
		0xa0, 0x36, 0x83, 0x3a, 0x1c, 0x43, 0x6d, 0x46, 0x8c, 0x0f, 0x40, 0x6d, 0xc6, 0xc2, 0x74, 0xa3,
		0x36, 0x23, 0xa1, 0x50, 0x5f, 0x53, 0x9e, 0x0a, 0xb5, 0x19, 0x29, 0x99, 0x11, 0x6c, 0x8a, 0xa3,
		0x36, 0x23, 0x2b, 0x86, 0x15, 0x62, 0x88, 0xda, 0x8c, 0x6d, 0xc8, 0x75, 0xa3, 0x36, 0x03, 0x89,
		0x11, 0x24, 0x46, 0x90, 0x18, 0xd9, 0xec, 0xc4, 0x08, 0x6a, 0x33, 0xc8, 0x39, 0x09, 0xb5, 0x19,
		0xeb, 0xc7, 0x47, 0x6d, 0x46, 0x6a, 0x4b, 0x8a, 0xda, 0x8c, 0xcd, 0xe6, 0x55, 0xd4, 0x66, 0xc4,
		0xad, 0xcd, 0xc8, 0x5e, 0xc3, 0xd2, 0x17, 0xa5, 0x19, 0xdb, 0xd7, 0xa9, 0x54, 0x2d, 0xf3, 0xb7,
		0xbd, 0x8d, 0x4a, 0x89, 0x4a, 0x60, 0x46, 0xbe, 0x32, 0xfe, 0x51, 0xc6, 0x29, 0xf3, 0xb1, 0x89,
		0x3b, 0xfd, 0xb6, 0xc6, 0xed, 0x23, 0x85, 0xc6, 0xea, 0x88, 0x49, 0x16, 0xe2, 0x90, 0x60, 0x26,
		0xb7, 0x42, 0x73, 0xd9, 0x77, 0xee, 0x99, 0xc6, 0xc8, 0xf1, 0xb9, 0x79, 0xdb, 0x57, 0x5b, 0xf7,
		0xf9, 0x45, 0x56, 0x05, 0x7c, 0xc2, 0x7a, 0x27, 0x02, 0xad, 0x28, 0x68, 0xae, 0x76, 0x22, 0xd5,
		0x8e, 0x42, 0x62, 0x15, 0x4f, 0xea, 0x5a, 0x42, 0x80, 0x3c, 0xef, 0x92, 0x45, 0xbe, 0xcd, 0x6a,
		0x0d, 0xbd, 0x88, 0x54, 0x99, 0xe8, 0x08, 0xbd, 0x08, 0x51, 0x68, 0x05, 0xad, 0x6d, 0xd1, 0x53,
		0xed, 0x02, 0x1d, 0xae, 0x72, 0x26, 0x3a, 0x40, 0x4b, 0xd5, 0x21, 0x2b, 0xd5, 0x1d, 0x2b, 0x77,
		0x7f, 0xae, 0xa2, 0xfb, 0x73, 0x9a, 0x5e, 0x71, 0xb3, 0xbb, 0x3f, 0x9b, 0x9e, 0x75, 0x4f, 0xd1,
		0xfd, 0x39, 0x18, 0x47, 0xad, 0xfb, 0x73, 0x19, 0xdd, 0x9f, 0xd1, 0xfd, 0x39, 0x1f, 0x81, 0x94,
		0xf2, 0xe6, 0x4e, 0x24, 0x2f, 0x5d, 0x77, 0x60, 0xda, 0x8e, 0xa1, 0x70, 0xe5, 0x4b, 0x81, 0xa8,
		0x56, 0xaa, 0xf8, 0x95, 0x39, 0x77, 0x01, 0x74, 0xa4, 0x1e, 0xcd, 0x51, 0x6e, 0xc7, 0x50, 0x6f,
		0x6d, 0xcf, 0x72, 0xf3, 0x15, 0xa2, 0xf1, 0x34, 0xe4, 0xe1, 0x29, 0xea, 0x20, 0x28, 0xb7, 0x4f,
		0x74, 0x2d, 0x41, 0xb5, 0x51, 0xcb, 0xf0, 0x22, 0xa4, 0x15, 0xe9, 0x2a, 0x58, 0x00, 0xaa, 0x7a,
		0xb4, 0xe2, 0xce, 0xce, 0xce, 0xce, 0xb5, 0x69, 0xfc, 0x7d, 0x68, 0xfc, 0x51, 0x36, 0x0e, 0x3a,
		0xed, 0xb9, 0x3f, 0xdc, 0xdc, 0x18, 0x9d, 0xf6, 0xee, 0x8f, 0xf2, 0xfb, 0x66, 0x65, 0xbc, 0xfb,
		0xd3, 0xf3, 0xdf, 0xb7, 0x6f, 0x6e, 0xf6, 0x76, 0xff, 0x29, 0xf3, 0xd4, 0x4f, 0xbb, 0x4f, 0x93,
		0x67, 0x8b, 0xe9, 0x4c, 0x19, 0x65, 0x1d, 0x5f, 0xf1, 0xcf, 0x34, 0x26, 0x4e, 0xa1, 0x52, 0x2d,
		0xd9, 0xb4, 0x0a, 0xb6, 0x0c, 0x52, 0x4f, 0x8e, 0x62, 0xcb, 0x20, 0xaf, 0x5b, 0x06, 0xc8, 0x92,
		0xbd, 0x96, 0x25, 0x93, 0xdc, 0x5e, 0x26, 0xcc, 0x91, 0x89, 0xef, 0x1f, 0x0b, 0x64, 0xc8, 0xde,
		0x11, 0x2e, 0xa1, 0xec, 0xd2, 0xd1, 0x2e, 0x59, 0x51, 0x28, 0xe9, 0x47, 0xb3, 0x48, 0xf1, 0x96,
		0xe7, 0xed, 0xc9, 0x8e, 0x31, 0xd1, 0xc5, 0xbe, 0x6d, 0x31, 0xc7, 0x8f, 0x6f, 0x68, 0x9f, 0xef,
		0x1a, 0x09, 0x1f, 0x8c, 0xb9, 0x98, 0x62, 0xc9, 0x49, 0xe1, 0x5c, 0x8b, 0x4c, 0x6e, 0x65, 0x3e,
		0x97, 0x22, 0xf6, 0x6d, 0x54, 0x3c, 0x94, 0x72, 0xbe, 0x44, 0xd9, 0xeb, 0xbc, 0xcc, 0x87, 0xcc,
		0xbe, 0x7b, 0x4a, 0x6a, 0x2e, 0x9a, 0x54, 0x9c, 0x49, 0x9e, 0xc2, 0xf5, 0x8a, 0xd1, 0x08, 0xdb,
		0x71, 0xbf, 0xa2, 0xb8, 0x70, 0x53, 0x61, 0x58, 0xf6, 0xb3, 0xec, 0xc2, 0xc2, 0x9f, 0x0c, 0xb6,
		0x48, 0x67, 0xda, 0x45, 0xed, 0x39, 0x91, 0x7d, 0x27, 0x52, 0x15, 0x65, 0x95, 0xa1, 0x50, 0x1d,
		0x5a, 0x15, 0xa2, 0x8e, 0x68, 0xf2, 0x97, 0x6f, 0x97, 0x56, 0x31, 0xc5, 0x48, 0x24, 0xad, 0x1b,
		0x17, 0x71, 0x43, 0x58, 0x42, 0x0a, 0xaa, 0x47, 0x51, 0x75, 0xa4, 0x20, 0x0a, 0x1b, 0xd1, 0x89,
		0x4a, 0x59, 0x91, 0x89, 0x72, 0xd6, 0x99, 0xe9, 0x46, 0x65, 0x71, 0xfb, 0x81, 0x69, 0x68, 0x46,
		0x35, 0x1d, 0x97, 0xfe, 0x1c, 0x67, 0xcf, 0xec, 0xfb, 0x0c, 0x47, 0x39, 0x33, 0x66, 0x68, 0x74,
		0x19, 0x1c, 0xed, 0x86, 0x47, 0xbb, 0x01, 0xd2, 0x6e, 0x88, 0x68, 0x0c, 0x12, 0x91, 0x61, 0x8a,
		0xbe, 0xad, 0xbe, 0x23, 0x9d, 0xb7, 0xae, 0xdb, 0x67, 0xa6, 0xa3, 0xa3, 0xd1, 0x55, 0x65, 0x83,
		0x0e, 0xe7, 0x87, 0xf2, 0x65, 0x74, 0x4d, 0x6e, 0xd2, 0x9b, 0xf7, 0x85, 0xd1, 0x61, 0x8c, 0x61,
		0x8c, 0x61, 0x8c, 0xb7, 0xd2, 0x18, 0x8f, 0x1c, 0xdb, 0x75, 0xd0, 0x73, 0x90, 0xd8, 0xc3, 0xd9,
		0x8e, 0xe9, 0x3d, 0x6a, 0x6c, 0x13, 0x76, 0xb0, 0xa5, 0x5d, 0xd8, 0x7c, 0xee, 0xd9, 0xce, 0x9d,
		0xd6, 0xfe, 0x6b, 0x38, 0xc6, 0x9d, 0x18, 0xd9, 0xd8, 0x5d, 0x7d, 0x5c, 0x63, 0x77, 0x41, 0x35,
		0xa0, 0x1a, 0x50, 0xcd, 0x76, 0x52, 0x0d, 0xb9, 0x9f, 0x20, 0xf6, 0x0f, 0x68, 0xa7, 0xb1, 0x38,
		0x1e, 0x5d, 0xb5, 0x4c, 0xa8, 0x32, 0xb3, 0x5f, 0xfd, 0xe8, 0x2f, 0x32, 0x76, 0xe1, 0xc9, 0xd7,
		0xe9, 0x6b, 0xcd, 0x7e, 0xf5, 0xa3, 0xbf, 0xc8, 0xef, 0xb5, 0x27, 0x84, 0x6e, 0x9d, 0xde, 0x9d,
		0x13, 0xb9, 0x71, 0x6c, 0x3d, 0x65, 0xcf, 0x3d, 0x63, 0xeb, 0x29, 0x25, 0xb7, 0xfb, 0xac, 0xa5,
		0xcc, 0xec, 0x79, 0xac, 0x47, 0x21, 0x74, 0x33, 0x3f, 0xdb, 0x22, 0x18, 0xeb, 0x3c, 0xf4, 0x27,
		0x7b, 0x7b, 0xa1, 0xf5, 0x2f, 0xcd, 0x99, 0x13, 0xdc, 0x2b, 0x85, 0x7b, 0xa5, 0x60, 0x56, 0x61,
		0x56, 0xc9, 0xcc, 0x2a, 0x76, 0xf4, 0x91, 0x6e, 0x41, 0xba, 0x05, 0xe9, 0x96, 0x2d, 0x4c, 0xb7,
		0x60, 0x47, 0x3f, 0xd6, 0x77, 0xea, 0x32, 0xdf, 0xf2, 0xec, 0x21, 0x59, 0xda, 0x64, 0x61, 0x0d,
		0xe6, 0x07, 0x87, 0x29, 0x86, 0x29, 0x86, 0x29, 0xde, 0x4a, 0x53, 0xbc, 0x05, 0x99, 0x6f, 0x02,
		0x4b, 0xcc, 0xbe, 0x0f, 0x6d, 0x2f, 0xc8, 0x5f, 0x1b, 0x5d, 0x8a, 0x98, 0x7a, 0x69, 0x19, 0x5e,
		0x7e, 0x00, 0x2c, 0x32, 0x2c, 0x32, 0x2c, 0xf2, 0x56, 0x5a, 0xe4, 0x91, 0xed, 0xf0, 0x66, 0x5d,
		0x83, 0x45, 0xde, 0xc7, 0xe5, 0x25, 0xc4, 0x83, 0xe3, 0xf2, 0x92, 0x84, 0xd4, 0x6d, 0x71, 0x49,
		0x37, 0xe0, 0xf2, 0x12, 0xda, 0x7e, 0x38, 0xa9, 0xaf, 0x32, 0x8a, 0xe0, 0x92, 0x41, 0x50, 0xd6,
		0xd5, 0x84, 0x9e, 0x0c, 0xe5, 0x6f, 0x40, 0x4e, 0x20, 0xe7, 0x96, 0x22, 0x27, 0xf2, 0xb1, 0xb1,
		0xbe, 0x93, 0xed, 0x18, 0x23, 0x5f, 0x43, 0xf0, 0x1f, 0x8e, 0x0b, 0x03, 0x0c, 0x03, 0x0c, 0x03,
		0x0c, 0x03, 0x0c, 0x03, 0xbc, 0xd6, 0x00, 0xfb, 0xfe, 0x88, 0x69, 0xca, 0xc0, 0xce, 0x8d, 0x0d,
		0x43, 0x0c, 0x43, 0x0c, 0x43, 0xbc, 0x95, 0x86, 0x18, 0xc9, 0x57, 0x4a, 0xa9, 0x44, 0xf2, 0x75,
		0xfd, 0xf8, 0x48, 0xbe, 0xa6, 0xb6, 0xa4, 0x48, 0xbe, 0x26, 0x31, 0x5a, 0x1b, 0xbd, 0x55, 0x62,
		0x3a, 0x1d, 0xf4, 0x56, 0x01, 0x7c, 0x02, 0x3e, 0x01, 0x9f, 0xe8, 0xad, 0x42, 0x28, 0x94, 0xe8,
		0xad, 0x52, 0x40, 0x6f, 0x15, 0x90, 0x4d, 0x5c, 0xb2, 0x41, 0x6f, 0x15, 0x50, 0x0d, 0xa8, 0x06,
		0x54, 0x83, 0x0a, 0xf3, 0x74, 0xec, 0xf0, 0x83, 0xd9, 0xd7, 0x61, 0x82, 0xa7, 0xc3, 0xc2, 0xfa,
		0xc2, 0xfa, 0xc2, 0xfa, 0x6e, 0xa5, 0xf5, 0xdd, 0x86, 0x9d, 0x65, 0xb4, 0xb6, 0x12, 0x6b, 0x6d,
		0x45, 0xd1, 0xc8, 0xa3, 0xa0, 0xbf, 0xb3, 0x95, 0xc4, 0xad, 0x7f, 0x74, 0xa2, 0x91, 0xec, 0xf5,
		0x2d, 0xbf, 0xb0, 0x47, 0x92, 0x80, 0x69, 0x7b, 0x6f, 0x81, 0x75, 0x46, 0xfd, 0x7e, 0xa2, 0x4b,
		0x46, 0xa4, 0xf7, 0x09, 0xe8, 0x7b, 0x51, 0xa9, 0x85, 0x90, 0x46, 0x0d, 0x2f, 0xe2, 0xb2, 0x56,
		0xad, 0x02, 0x90, 0xda, 0x9d, 0xad, 0x2f, 0x17, 0x1c, 0x57, 0xb7, 0x0a, 0x2d, 0x60, 0xe2, 0xd7,
		0xb7, 0x0a, 0xe9, 0x23, 0xd1, 0x15, 0xae, 0xee, 0xdd, 0x9d, 0xed, 0xdc, 0x49, 0x5c, 0xe1, 0x1a,
		0x3e, 0xb8, 0x21, 0x57, 0xb8, 0xba, 0x77, 0xdb, 0x79, 0x7d, 0xab, 0x7b, 0x97, 0x9b, 0xab, 0x5b,
		0x2d, 0xd7, 0xf1, 0xdd, 0x3e, 0x93, 0xbf, 0xb9, 0x75, 0x36, 0xc0, 0x96, 0x5c, 0xdc, 0xea, 0xde,
		0xe1, 0xd2, 0x56, 0x55, 0x91, 0x4f, 0x06, 0x5d, 0xa4, 0x2f, 0x6c, 0x55, 0xbc, 0x2d, 0x92, 0xe6,
		0x96, 0xc8, 0x8d, 0xbb, 0xae, 0xd5, 0xbd, 0xc3, 0x55, 0xad, 0x49, 0x29, 0x56, 0x3a, 0x71, 0x7e,
		0x06, 0x83, 0xc6, 0x29, 0x4e, 0x95, 0x42, 0x1f, 0xa5, 0xde, 0xf6, 0x9c, 0x88, 0x48, 0xa7, 0xaf,
		0xd5, 0xf9, 0x34, 0x7d, 0x2d, 0xa5, 0x2e, 0xe7, 0x12, 0x01, 0xa3, 0x4c, 0xe0, 0xc4, 0xfa, 0xcc,
		0xe2, 0xae, 0xe7, 0xab, 0x5b, 0xc5, 0xe7, 0xa1, 0x60, 0x18, 0x61, 0x18, 0xb7, 0xc2, 0x30, 0x2a,
		0xdf, 0x5f, 0x3d, 0xd3, 0x19, 0xc2, 0x76, 0xd7, 0xb3, 0x11, 0x71, 0x87, 0xb5, 0x7e, 0x25, 0xa5,
		0x56, 0x56, 0x6d, 0x4a, 0xab, 0x4d, 0x79, 0xb5, 0x28, 0xb1, 0x9a, 0x32, 0x2b, 0x2a, 0x35, 0x99,
		0x72, 0x53, 0x85, 0x1d, 0x7a, 0xc2, 0x10, 0x4d, 0x0a, 0x4f, 0xae, 0xf8, 0x3a, 0x0c, 0x80, 0x3e,
		0x43, 0xa0, 0xcb, 0x20, 0x68, 0x37, 0x0c, 0xda, 0x0d, 0x84, 0x56, 0x43, 0x41, 0x63, 0x30, 0x88,
		0x0c, 0x07, 0xb9, 0x01, 0x89, 0x06, 0xec, 0x99, 0x96, 0xdd, 0xb7, 0xf9, 0x23, 0xbd, 0x58, 0xcd,
		0x14, 0x21, 0xfa, 0x04, 0xe2, 0x45, 0xd7, 0x73, 0x44, 0x8e, 0xdc, 0xc8, 0xe8, 0x34, 0x36, 0xfa,
		0x8d, 0x8e, 0x6e, 0xe3, 0x93, 0x98, 0x11, 0x4a, 0xcc, 0x18, 0x25, 0x62, 0x94, 0x68, 0x8d, 0x13,
		0xb1, 0x91, 0x8a, 0x66, 0x80, 0xbc, 0x96, 0x6b, 0x49, 0xde, 0xed, 0x2e, 0x73, 0xb8, 0xcd, 0x1f,
		0x69, 0xae, 0x50, 0x5a, 0xcb, 0x2f, 0x1a, 0xce, 0xc4, 0x16, 0x8f, 0xc3, 0x57, 0xff, 0x68, 0xfa,
		0x1a, 0xd5, 0x6a, 0x36, 0x51, 0x97, 0xff, 0xb9, 0xfc, 0x7a, 0xf6, 0x73, 0xe7, 0xcb, 0xe1, 0xa7,
		0xe3, 0xaf, 0xc7, 0x57, 0xff, 0x29, 0xea, 0x3c, 0x57, 0xec, 0x93, 0x1f, 0x8a, 0x9a, 0xff, 0xdf,
		0x0f, 0x6d, 0x23, 0x2f, 0x4c, 0xd8, 0xd7, 0xb3, 0x4f, 0x87, 0x5f, 0x5b, 0x45, 0x6d, 0x1f, 0x36,
		0x7e, 0x9f, 0xf7, 0x19, 0x3a, 0xfc, 0xf5, 0xea, 0x5f, 0xe7, 0x17, 0xc7, 0xbf, 0x61, 0x8e, 0x5e,
		0x9b, 0xa3, 0xcf, 0xc7, 0x57, 0x98, 0xa0, 0x37, 0xd4, 0xac, 0x86, 0x19, 0x5a, 0x3f, 0x43, 0xbf,
		0x5e, 0x1e, 0x5d, 0x60, 0x7e, 0xde, 0x90, 0xa0, 0x32, 0x66, 0xe8, 0x8d, 0x19, 0xaa, 0x62, 0x86,
		0x5e, 0x31, 0xd3, 0x5f, 0xbf, 0x62, 0x7a, 0xde, 0x10, 0xa0, 0x0a, 0x66, 0x68, 0xfd, 0x0c, 0x9d,
		0x1c, 0x1e, 0x43, 0x82, 0x5e, 0x99, 0x9f, 0xd3, 0xab, 0x73, 0x4c, 0xcf, 0x1b, 0x0a, 0x56, 0xc7,
		0x0c, 0xad, 0x9f, 0xa1, 0x5f, 0x8e, 0x2e, 0x4e, 0x8f, 0xa0, 0x62, 0x6f, 0xc9, 0x50, 0x03, 0x33,
		0xf4, 0x7a, 0xc0, 0x8a, 0xf9, 0x59, 0x3f, 0x3f, 0x9f, 0xce, 0x4e, 0x2f, 0xcf, 0xbe, 0x1e, 0x61,
		0x8a, 0xde, 0x50, 0xb2, 0x26, 0x66, 0x68, 0xfd, 0x0c, 0x4d, 0x13, 0x8d, 0x98, 0xa1, 0x57, 0x67,
		0xe8, 0xea, 0xe8, 0xa4, 0xf3, 0xf9, 0xf0, 0xe8, 0xe4, 0xec, 0x54, 0xe3, 0x44, 0x69, 0x19, 0xb9,
		0xbd, 0x35, 0x4d, 0x1b, 0x09, 0x05, 0xad, 0xe8, 0xb3, 0x07, 0xe6, 0x69, 0xdd, 0x64, 0x8d, 0x3e,
		0x01, 0x9b, 0xac, 0xd8, 0x64, 0x5d, 0xbf, 0x9a, 0xd8, 0x64, 0x4d, 0xdf, 0x42, 0xe5, 0x6e, 0x93,
		0xd5, 0x7f, 0xf4, 0xfb, 0xee, 0x9d, 0xa1, 0xc9, 0xc4, 0xcc, 0x9b, 0x99, 0x4a, 0x5d, 0xc3, 0xd8,
		0x47, 0xce, 0x68, 0x30, 0x99, 0xa0, 0xcc, 0x3a, 0x9a, 0x4c, 0x15, 0x18, 0x11, 0x37, 0xf1, 0x78,
		0x76, 0x81, 0xda, 0xce, 0x69, 0x44, 0x67, 0x04, 0xa2, 0xdf, 0x95, 0x48, 0xab, 0x18, 0x0b, 0xda,
		0x8e, 0x72, 0x5c, 0xce, 0xde, 0x3c, 0xfa, 0x9d, 0xd2, 0xe9, 0x0e, 0x7a, 0xc1, 0xa2, 0x68, 0xe7,
		0x45, 0x5e, 0x60, 0xa6, 0xab, 0xb0, 0x6c, 0xeb, 0x9b, 0x7a, 0xa1, 0x5a, 0xb5, 0x80, 0x6a, 0x55,
		0x52, 0x67, 0xa2, 0xaf, 0x99, 0x57, 0x9f, 0x99, 0x3d, 0xda, 0xa2, 0xaf, 0x88, 0x41, 0x5a, 0x84,
		0x63, 0x9e, 0x87, 0xfe, 0x6e, 0x6f, 0x2f, 0xf4, 0x49, 0xa5, 0xc8, 0x68, 0x6d, 0x90, 0x89, 0x27,
		0x0f, 0x6f, 0x75, 0x85, 0xb5, 0x30, 0xf1, 0x30, 0xf1, 0x30, 0xf1, 0x30, 0xf1, 0x7a, 0x4d, 0x7c,
		0x64, 0xb4, 0x36, 0xc9, 0xc4, 0x73, 0x2d, 0x57, 0x0d, 0x52, 0xf5, 0x5f, 0x2c, 0xe8, 0x3c, 0x6d,
		0x56, 0x85, 0x71, 0x87, 0x71, 0xdf, 0x4a, 0xe3, 0x8e, 0xd3, 0x66, 0x9a, 0xc8, 0x51, 0x1b, 0x41,
		0xea, 0x34, 0x36, 0xfa, 0x8d, 0x8e, 0x6e, 0xe3, 0x93, 0x98, 0x11, 0x4a, 0xcc, 0x18, 0x25, 0x62,
		0x94, 0x68, 0x8d, 0x13, 0xb1, 0x91, 0xd2, 0x47, 0xa2, 0x4b, 0xf2, 0x8e, 0xd3, 0x66, 0x31, 0x27,
		0x0a, 0xa7, 0xcd, 0x04, 0x27, 0x0c, 0xa7, 0xcd, 0xde, 0x9a, 0x21, 0x9c, 0x36, 0x8b, 0x33, 0x47,
		0x38, 0x6d, 0xf6, 0xb6, 0x9a, 0xe1, 0xb4, 0xd9, 0x2b, 0x33, 0x84, 0xd3, 0x66, 0x31, 0x24, 0x08,
		0xa7, 0xcd, 0xde, 0x9a, 0x21, 0x9c, 0x36, 0x7b, 0xcd, 0x4c, 0xe3, 0xb4, 0xd9, 0x9b, 0x02, 0x84,
		0xd3, 0x66, 0xaf, 0xcc, 0x10, 0x4e, 0x9b, 0xbd, 0x3e, 0x3f, 0x38, 0x6d, 0xf6, 0xb6, 0x82, 0xe1,
		0xb4, 0xd9, 0x2b, 0x33, 0x84, 0xd3, 0x66, 0xb1, 0x64, 0x08, 0xa7, 0xcd, 0xde, 0x08, 0x58, 0x31,
		0x3f, 0xeb, 0xe7, 0x07, 0xa7, 0xcd, 0xe2, 0x29, 0x19, 0x4e, 0x9b, 0xbd, 0x32, 0x43, 0x38, 0x6d,
		0x16, 0x63, 0x86, 0x70, 0xda, 0x4c, 0xd7, 0x7b, 0xe2, 0xb4, 0x19, 0x36, 0x59, 0xb1, 0xc9, 0xba,
		0x76, 0x35, 0xb1, 0xc9, 0x9a, 0xbe, 0x85, 0xc2, 0x69, 0xb3, 0xb5, 0x66, 0x06, 0xa7, 0xcd, 0xd2,
		0x16, 0xab, 0xcd, 0x38, 0x6d, 0x46, 0x59, 0xc4, 0x58, 0x48, 0xf2, 0xb0, 0x19, 0xc1, 0xb5, 0xd2,
		0x74, 0x62, 0x95, 0xee, 0xc5, 0x0c, 0xe1, 0xb5, 0xd3, 0xb3, 0xea, 0xb1, 0x02, 0x91, 0xf9, 0xa1,
		0xb9, 0x85, 0x3a, 0x1a, 0x8d, 0xec, 0x36, 0xea, 0xe7, 0x11, 0x35, 0xde, 0x4a, 0x1d, 0x7d, 0x08,
		0xc9, 0xed, 0xd4, 0x54, 0x2b, 0x9d, 0xe1, 0x5b, 0xea, 0xdf, 0x34, 0x35, 0xd9, 0xb9, 0xa9, 0xfe,
		0x4d, 0xe3, 0xb2, 0x1d, 0xb7, 0xd5, 0x67, 0xff, 0x16, 0x3b, 0xd5, 0x1b, 0xd4, 0x12, 0x90, 0x99,
		0x4c, 0xdf, 0x65, 0xa7, 0x74, 0xee, 0x81, 0xe4, 0x9c, 0x03, 0xd9, 0x1d, 0x76, 0x55, 0xdc, 0x61,
		0xa7, 0x31, 0x3a, 0xc5, 0x1d, 0x76, 0xb9, 0x32, 0x8b, 0x8a, 0xcc, 0xae, 0xc9, 0x24, 0xca, 0x03,
		0xf9, 0x38, 0x63, 0x17, 0x2a, 0x2b, 0x8a, 0x80, 0xbe, 0xa5, 0x2f, 0x4a, 0x79, 0x01, 0xfa, 0xc5,
		0x16, 0x5b, 0xe6, 0xf8, 0x8b, 0x25, 0xb0, 0x50, 0x45, 0x8f, 0x0d, 0x5c, 0xce, 0x0c, 0x9f, 0x79,
		0x0f, 0x4c, 0xe2, 0xba, 0xd6, 0xc8, 0xaa, 0xbf, 0x18, 0x07, 0xb7, 0xbb, 0xeb, 0xf3, 0x5f, 0xb8,
		0xdd, 0x3d, 0xc9, 0xdb, 0xdd, 0x17, 0x04, 0x5b, 0x1d, 0x03, 0x17, 0x87, 0xc3, 0x95, 0xc6, 0xc0,
		0xc1, 0xad, 0xc0, 0x41, 0xe5, 0x2b, 0x8d, 0x89, 0x6e, 0x3b, 0xa5, 0xbd, 0xe5, 0x14, 0xd7, 0x19,
		0xa7, 0xa1, 0xa8, 0xda, 0x14, 0x56, 0x9b, 0xe2, 0x6a, 0x51, 0xe0, 0x6c, 0x64, 0xcd, 0xc9, 0xae,
		0x33, 0xbe, 0x77, 0x7d, 0x4e, 0xdf, 0x5d, 0x22, 0x18, 0x15, 0x9d, 0x83, 0xb2, 0x63, 0x04, 0x74,
		0x19, 0x03, 0xed, 0x46, 0x41, 0xbb, 0x71, 0xd0, 0x6a, 0x24, 0x68, 0x8c, 0x05, 0x91, 0xd1, 0x88,
		0xbe, 0xa9, 0xbe, 0xce, 0x41, 0x84, 0x7a, 0xbf, 0xe0, 0xe8, 0x0f, 0x08, 0xc7, 0x0c, 0xbf, 0x3d,
		0xed, 0xc9, 0x65, 0x9d, 0x67, 0xdf, 0x87, 0x86, 0xd9, 0xed, 0x7a, 0xcc, 0xf7, 0x75, 0x56, 0x64,
		0x1c, 0x68, 0x18, 0x5b, 0xcb, 0x4c, 0xeb, 0x9b, 0xf1, 0x15, 0x33, 0xff, 0x50, 0xd7, 0x38, 0xf7,
		0x4b, 0x6b, 0xb0, 0xaf, 0xf1, 0x33, 0xce, 0x4d, 0xce, 0x99, 0xe7, 0x68, 0x3d, 0xb2, 0x1f, 0x7c,
		0xd0, 0xce, 0x75, 0xd9, 0x38, 0x68, 0x3f, 0x5d, 0x57, 0x8c, 0x83, 0xf6, 0xf4, 0xb7, 0x95, 0xe0,
		0x97, 0x1f, 0xd5, 0xf1, 0x53, 0xf5, 0xba, 0x6c, 0xd4, 0xc3, 0xbf, 0xad, 0x36, 0xae, 0xcb, 0x46,
		0xa3, 0xbd, 0xbb, 0x73, 0x73, 0xb3, 0x27, 0xfa, 0xcc, 0xee, 0x8f, 0xda, 0x58, 0x5f, 0x45, 0x6d,
		0x5b, 0xe7, 0x32, 0x9c, 0x5d, 0x1e, 0xff, 0x3b, 0xb1, 0xb5, 0xf8, 0x73, 0x27, 0xa9, 0xd5, 0xd8,
		0xfd, 0x87, 0xc6, 0xf5, 0xd0, 0x32, 0xb2, 0xa6, 0x02, 0xf3, 0x64, 0xcc, 0x52, 0x13, 0x66, 0x49,
		0xd4, 0x2c, 0x05, 0x52, 0x6d, 0x1a, 0xbd, 0x43, 0xe3, 0x4b, 0xfb, 0x47, 0xe5, 0x7d, 0x7d, 0xfc,
		0x61, 0xf7, 0x47, 0x6b, 0xfc, 0xf2, 0x2f, 0x9f, 0x56, 0xfd, 0x58, 0xe5, 0x7d, 0x6b, 0xfc, 0x61,
		0xcd, 0xbf, 0x34, 0xc7, 0x1f, 0x62, 0x8e, 0xd1, 0x18, 0xef, 0x2c, 0xfd, 0xe8, 0xe4, 0xef, 0xab,
		0xeb, 0x1e, 0xa8, 0xaf, 0x79, 0xa0, 0xb6, 0xee, 0x81, 0xda, 0x9a, 0x07, 0xd6, 0xbe, 0x52, 0x75,
		0xcd, 0x03, 0x8d, 0xf1, 0xd3, 0xd2, 0xcf, 0xef, 0xac, 0xfe, 0xd1, 0xe6, 0x78, 0xf7, 0x69, 0xdd,
		0xbf, 0xb5, 0xc6, 0x4f, 0x1f, 0x76, 0x77, 0x61, 0xa8, 0x63, 0x1b, 0x6a, 0x88, 0x67, 0xf2, 0xe2,
		0x99, 0x3f, 0xc7, 0xf5, 0x2e, 0xdb, 0xef, 0x49, 0xec, 0x58, 0x35, 0x46, 0x56, 0x5d, 0x77, 0x60,
		0xda, 0x8e, 0x11, 0xec, 0x2e, 0x6b, 0x0c, 0xad, 0x34, 0xf8, 0xcf, 0xe2, 0x57, 0xe6, 0xdc, 0x05,
		0x1b, 0xf4, 0xb9, 0x0b, 0xae, 0x4e, 0x6c, 0x47, 0xdb, 0xc1, 0x17, 0x4d, 0x39, 0xc3, 0xb5, 0x1f,
		0x13, 0xb4, 0x41, 0xa3, 0x6b, 0x7c, 0xbb, 0xf6, 0x73, 0xbe, 0x78, 0xa6, 0xc5, 0x6d, 0xd7, 0xf9,
		0x6c, 0xdf, 0xd9, 0xd3, 0x02, 0xe4, 0x3c, 0x9e, 0xbb, 0x2c, 0x9e, 0x98, 0xdf, 0x37, 0x6e, 0xe9,
		0xab, 0x8d, 0xda, 0x06, 0x2d, 0x7e, 0x5e, 0x1c, 0x96, 0x06, 0x8b, 0xaa, 0x9b, 0xf5, 0x8a, 0x3b,
		0x3b, 0x3b, 0x3b, 0xd7, 0xa6, 0xf1, 0xf7, 0xa1, 0xf1, 0x47, 0xd9, 0x38, 0xe8, 0xb4, 0xe7, 0xfe,
		0x70, 0x73, 0x63, 0x74, 0xda, 0xbb, 0x3f, 0xca, 0xef, 0x9b, 0x95, 0xf1, 0xee, 0x4f, 0xcf, 0x7f,
		0xdf, 0xbe, 0xb9, 0xd9, 0xdb, 0xfd, 0xa7, 0xcc, 0x53, 0x3f, 0xed, 0x3e, 0x4d, 0x9e, 0x2d, 0xe6,
		0x63, 0xea, 0x93, 0x60, 0xed, 0x09, 0x63, 0x27, 0xbf, 0x00, 0x1a, 0xe8, 0xb2, 0x9d, 0xd1, 0xf3,
		0x6d, 0xed, 0x0d, 0x6a, 0xba, 0x1f, 0x96, 0x0b, 0x0d, 0x5d, 0x4f, 0xc3, 0xe6, 0xe8, 0xfc, 0xe0,
		0x54, 0xed, 0xc2, 0x59, 0xcf, 0x1c, 0xf5, 0x83, 0xad, 0xab, 0x46, 0xa5, 0x8e, 0x9d, 0x57, 0xf5,
		0x45, 0xc2, 0xce, 0x6b, 0xf4, 0x01, 0xd8, 0x79, 0xcd, 0xc1, 0xce, 0xeb, 0xc4, 0x9a, 0x18, 0xce,
		0x68, 0x70, 0xcb, 0x3c, 0x0d, 0x1b, 0xb0, 0x4d, 0xc2, 0x21, 0x2f, 0x4c, 0xe7, 0x2e, 0x17, 0x1b,
		0xb0, 0x3a, 0x23, 0x55, 0xcd, 0x61, 0x4a, 0x14, 0x9e, 0xe8, 0x1a, 0x3f, 0x81, 0xa0, 0x44, 0x43,
		0x24, 0xaa, 0x35, 0x02, 0x4d, 0x6a, 0x49, 0x9b, 0x8d, 0x46, 0xad, 0x91, 0xe3, 0x65, 0x05, 0xbe,
		0x6a, 0xc7, 0x57, 0x3f, 0x40, 0x8d, 0x68, 0x8f, 0x90, 0xfe, 0xf2, 0xa8, 0xc5, 0xf1, 0x81, 0x9b,
		0xc0, 0x4d, 0xe0, 0xe6, 0x56, 0xe1, 0xa6, 0x96, 0xa2, 0x34, 0x94, 0xfb, 0xe9, 0x2f, 0x3a, 0xd3,
		0xba, 0x2b, 0xa5, 0x3f, 0x87, 0x9a, 0xdb, 0xe2, 0xb2, 0x5c, 0xe7, 0x4d, 0x73, 0x5c, 0x44, 0xb6,
		0xad, 0x7b, 0xdb, 0x9a, 0x8b, 0xc4, 0x72, 0x6e, 0x46, 0x50, 0x6d, 0xb3, 0x31, 0xc5, 0x60, 0xb9,
		0x37, 0xac, 0x10, 0xc3, 0x8d, 0x28, 0xfa, 0xc2, 0xb6, 0x9c, 0xce, 0x11, 0x36, 0xbf, 0xf7, 0xdc,
		0x62, 0x27, 0x8f, 0xc5, 0x3f, 0x96, 0x48, 0x8e, 0x4d, 0x17, 0xc8, 0x1b, 0xaa, 0x5c, 0x04, 0x2f,
		0x79, 0x39, 0x7d, 0xe5, 0x85, 0x3f, 0x75, 0xc2, 0xec, 0x4b, 0x5a, 0xbd, 0xe8, 0x14, 0xfa, 0x1a,
		0x90, 0x9c, 0x88, 0xa5, 0x3c, 0x11, 0x47, 0x94, 0x18, 0xc3, 0x71, 0xf7, 0x6c, 0x25, 0xbc, 0x70,
		0xdc, 0x3d, 0x85, 0x44, 0x56, 0x24, 0x6f, 0x7d, 0x66, 0xf6, 0x68, 0x6e, 0x13, 0x8e, 0x42, 0xa1,
		0x16, 0xc1, 0x58, 0xe7, 0xa1, 0x47, 0xd9, 0xdb, 0x0b, 0x6d, 0x7e, 0x29, 0x30, 0x20, 0x39, 0x34,
		0xa3, 0xcf, 0xed, 0x2f, 0xc9, 0x6c, 0x29, 0x45, 0x47, 0xcd, 0x02, 0xfa, 0x87, 0xc0, 0xa0, 0xc2,
		0xa0, 0x92, 0xf5, 0x0f, 0x89, 0x1a, 0x24, 0xd3, 0x6f, 0x32, 0xd2, 0xb5, 0x5e, 0x26, 0x54, 0x7a,
		0x72, 0xe5, 0xd7, 0x61, 0x04, 0xf4, 0x19, 0x03, 0x5d, 0x46, 0x41, 0xbb, 0x71, 0xd0, 0x6e, 0x24,
		0xb4, 0x1a, 0x0b, 0xda, 0xb4, 0x00, 0xd5, 0xf6, 0x22, 0x95, 0x11, 0x89, 0x06, 0x24, 0xea, 0x36,
		0xb6, 0x56, 0x0d, 0xc8, 0xc2, 0x68, 0x8d, 0x86, 0x45, 0x9b, 0x81, 0xd1, 0x69, 0x68, 0xf4, 0x1b,
		0x1c, 0xdd, 0x86, 0x27, 0x31, 0x03, 0x94, 0x98, 0x21, 0x4a, 0xc4, 0x20, 0xd1, 0xe7, 0x2b, 0x0b,
		0x1a, 0xee, 0x4e, 0xa2, 0x36, 0x54, 0xd1, 0xc0, 0xb3, 0x5b, 0x4b, 0xf4, 0x89, 0xe3, 0x4c, 0xa1,
		0xa2, 0x4f, 0x7a, 0x9f, 0xcb, 0xe2, 0x45, 0x5d, 0xc6, 0x2c, 0x09, 0xa3, 0x96, 0x9c, 0x71, 0x4b,
		0xca, 0xc8, 0x25, 0x6e, 0xec, 0x12, 0x37, 0x7a, 0x89, 0x1a, 0x3f, 0x3d, 0x46, 0x50, 0x93, 0x31,
		0xa4, 0xcf, 0xa9, 0xbd, 0xa9, 0x2f, 0x76, 0x97, 0x39, 0xdc, 0xe6, 0x8f, 0x34, 0xf9, 0xb6, 0x37,
		0x39, 0xac, 0xa1, 0xf1, 0x33, 0x8e, 0xc3, 0xaf, 0xf2, 0xd1, 0xf4, 0x13, 0x50, 0xcf, 0xc5, 0xcb,
		0x76, 0x3b, 0x5f, 0x0e, 0x3f, 0x1d, 0x7f, 0x3d, 0xbe, 0xfa, 0x4f, 0x31, 0x89, 0xb3, 0xcd, 0xbe,
		0xf6, 0xae, 0x27, 0x05, 0xed, 0x77, 0xf1, 0x2e, 0x4d, 0x64, 0x70, 0xaf, 0x73, 0xab, 0xa8, 0xfd,
		0x43, 0xc7, 0xef, 0x37, 0x6d, 0xe6, 0x0e, 0x7f, 0xbd, 0xfa, 0xd7, 0xf9, 0xc5, 0xf1, 0x6f, 0x98,
		0x3b, 0x99, 0xb9, 0xfb, 0x7c, 0x7c, 0x85, 0x89, 0x93, 0x54, 0xd7, 0x1a, 0x66, 0x4e, 0x7c, 0xe6,
		0x7e, 0xbd, 0x3c, 0xba, 0xc0, 0xbc, 0x49, 0x4a, 0x5c, 0x19, 0x33, 0x27, 0x39, 0x73, 0x55, 0xcc,
		0x9c, 0x84, 0x7b, 0xf8, 0xfa, 0x15, 0xd3, 0x26, 0x29, 0x70, 0x15, 0xcc, 0x9c, 0xf8, 0xcc, 0x9d,
		0x1c, 0x1e, 0x43, 0xe2, 0x24, 0xe6, 0xed, 0xf4, 0xea, 0x1c, 0xd3, 0x26, 0xa9, 0xa8, 0x75, 0xcc,
		0x9c, 0xf8, 0xcc, 0xfd, 0x72, 0x74, 0x71, 0x7a, 0x04, 0x55, 0x95, 0x95, 0xb9, 0x06, 0x66, 0x4e,
		0x2e, 0xd0, 0xc7, 0xbc, 0x89, 0xcf, 0xdb, 0xa7, 0xb3, 0xd3, 0xcb, 0xb3, 0xaf, 0x47, 0x98, 0x3a,
		0x49, 0x65, 0x6d, 0x62, 0xe6, 0xc4, 0x67, 0x6e, 0x9a, 0x18, 0xc6, 0xcc, 0x49, 0xcd, 0xdc, 0xd5,
		0xd1, 0x49, 0xe7, 0xf3, 0xe1, 0xd1, 0xc9, 0xd9, 0x69, 0x02, 0x13, 0xa8, 0xf5, 0x13, 0xda, 0x5b,
		0xdf, 0x11, 0x54, 0x47, 0xb3, 0x20, 0x9f, 0x3d, 0x30, 0x2f, 0x91, 0xcd, 0xfd, 0xe8, 0x93, 0xb0,
		0xb9, 0xbf, 0xf2, 0x03, 0xb0, 0xb9, 0x2f, 0xb5, 0xea, 0xd8, 0xdc, 0xcf, 0xbe, 0x25, 0xcc, 0xfd,
		0xe6, 0xbe, 0xff, 0xe8, 0xf7, 0xdd, 0x3b, 0x43, 0xb3, 0x09, 0x9b, 0x37, 0x63, 0x95, 0xba, 0xc6,
		0xcf, 0x38, 0x72, 0x46, 0x83, 0xc9, 0xc4, 0xe5, 0xc6, 0xf1, 0x65, 0xba, 0xf0, 0x8e, 0xf8, 0xd8,
		0xed, 0xb2, 0x8b, 0x4e, 0xf6, 0x18, 0x6e, 0x74, 0x00, 0x29, 0xfa, 0x5d, 0x49, 0x4b, 0x49, 0x71,
		0x21, 0xc9, 0x93, 0xba, 0x97, 0xb3, 0x2f, 0x15, 0xfd, 0x8e, 0xe4, 0xf0, 0xae, 0x3e, 0x41, 0x25,
		0x14, 0x52, 0x7d, 0x05, 0x9c, 0xba, 0x0b, 0x37, 0x35, 0x31, 0x1d, 0xaa, 0xce, 0x53, 0x61, 0x36,
		0x54, 0x9d, 0x6f, 0xa0, 0xf3, 0xd3, 0xc6, 0x60, 0x1a, 0x0e, 0x31, 0xaf, 0x65, 0xad, 0x96, 0x9e,
		0xfe, 0x4e, 0x2f, 0x0e, 0x39, 0x47, 0x46, 0x72, 0x0b, 0x5c, 0x8e, 0xb6, 0xb4, 0x82, 0xee, 0x74,
		0x02, 0x5c, 0x0e, 0x5c, 0x0e, 0x5c, 0x0e, 0x5c, 0xce, 0x66, 0xb8, 0x9c, 0xc8, 0x48, 0x6e, 0x83,
		0xcb, 0xe1, 0x26, 0x67, 0x1a, 0xfd, 0x4d, 0x30, 0x7c, 0xce, 0x4e, 0xd5, 0x56, 0xe1, 0x6c, 0xe0,
		0x6c, 0xe0, 0x6c, 0x14, 0x66, 0x00, 0xa7, 0x6a, 0x53, 0x22, 0x66, 0xed, 0xe4, 0x9c, 0x84, 0x51,
		0x4b, 0xce, 0xb8, 0x25, 0x65, 0xe4, 0x12, 0x37, 0x76, 0x89, 0x1b, 0xbd, 0x44, 0x8d, 0x9f, 0x1e,
		0x23, 0xa8, 0xc9, 0x18, 0xea, 0x27, 0xf0, 0x25, 0x7d, 0xc1, 0xa9, 0x5a, 0xc5, 0x09, 0xc4, 0xa9,
		0x5a, 0xa2, 0x89, 0xc4, 0xa9, 0x5a, 0xd9, 0x99, 0xc3, 0xa9, 0x5a, 0x95, 0xb9, 0xc3, 0xa9, 0x5a,
		0x79, 0x75, 0xc5, 0xa9, 0x5a, 0x89, 0x99, 0xc3, 0xa9, 0x5a, 0x05, 0x89, 0xc3, 0xa9, 0x5a, 0xd9,
		0x99, 0xc3, 0xa9, 0x5a, 0x19, 0xf7, 0x80, 0x53, 0xb5, 0xd2, 0x02, 0x87, 0x53, 0xb5, 0x12, 0x33,
		0x87, 0x53, 0xb5, 0x72, 0xf3, 0x86, 0x53, 0xb5, 0xf2, 0x8a, 0x8a, 0x53, 0xb5, 0x12, 0x33, 0x87,
		0x53, 0xb5, 0x4a, 0x32, 0x87, 0x53, 0xb5, 0x92, 0x81, 0x3e, 0xe6, 0x4d, 0x7c, 0xde, 0x70, 0xaa,
		0x56, 0x4d, 0x59, 0x71, 0xaa, 0x56, 0x62, 0xe6, 0x70, 0xaa, 0x56, 0x61, 0xe6, 0x70, 0xaa, 0x36,
		0xad, 0xf7, 0xc6, 0xa9, 0xda, 0x45, 0x61, 0xc4, 0xa9, 0xda, 0xd7, 0x3f, 0x00, 0x9b, 0xfb, 0x52,
		0xab, 0x8e, 0xcd, 0xfd, 0xec, 0x5b, 0x42, 0x9c, 0xaa, 0x15, 0x36, 0x63, 0x38, 0x55, 0xab, 0x6d,
		0x44, 0x9c, 0xaa, 0x15, 0x3d, 0x55, 0xab, 0xa3, 0xa2, 0xb8, 0x90, 0xf2, 0xa1, 0xda, 0xcb, 0xe0,
		0x3b, 0x65, 0xb5, 0xda, 0x3c, 0x53, 0x17, 0x4b, 0xfd, 0xc2, 0x1e, 0xe7, 0xab, 0x33, 0x0b, 0xc4,
		0x66, 0xb0, 0xf8, 0xd5, 0xf6, 0xf9, 0x21, 0xe7, 0xc4, 0xb7, 0x57, 0x9d, 0xd8, 0xce, 0x51, 0x9f,
		0x4d, 0x3c, 0xa7, 0x4f, 0x4b, 0x6d, 0xc5, 0x13, 0xf3, 0xfb, 0xdc, 0xc8, 0x95, 0xfd, 0x7a, 0xbd,
		0xd9, 0xaa, 0xd7, 0xcb, 0xad, 0x5a, 0xab, 0x7c, 0xd0, 0x68, 0x54, 0x9a, 0x94, 0xc5, 0x59, 0xc5,
		0x33, 0xaf, 0xcb, 0x3c, 0xd6, 0xfd, 0x38, 0x59, 0x02, 0x67, 0xd4, 0xef, 0x67, 0x4a, 0x32, 0x34,
		0x99, 0xbe, 0xf4, 0x4d, 0x5e, 0x91, 0xf4, 0xb8, 0x47, 0x5a, 0x46, 0xae, 0x88, 0xcb, 0xe6, 0xf3,
		0x7f, 0xd9, 0x3c, 0xd5, 0x35, 0xbb, 0xe9, 0xc8, 0x62, 0x2e, 0xef, 0x4a, 0x26, 0x39, 0x9f, 0x45,
		0x7a, 0x1e, 0x8b, 0xfc, 0x8e, 0xe4, 0x2a, 0xee, 0x48, 0xce, 0x40, 0x96, 0x01, 0x77, 0x24, 0xc7,
		0xff, 0x46, 0x64, 0x77, 0x24, 0x07, 0x57, 0xb8, 0x93, 0xdf, 0x8f, 0x1c, 0x8c, 0x4a, 0x7b, 0x37,
		0x72, 0x19, 0x77, 0x23, 0x67, 0x38, 0x15, 0x89, 0xbb, 0x91, 0x73, 0x14, 0xc2, 0x92, 0xa7, 0x0a,
		0x75, 0xe8, 0xfd, 0x82, 0xa3, 0x3f, 0x20, 0x1c, 0x33, 0xfc, 0xf6, 0xb4, 0x27, 0x5d, 0x34, 0x1e,
		0xac, 0xb6, 0x87, 0x86, 0xd9, 0xed, 0x7a, 0xcc, 0xf7, 0x75, 0x36, 0x36, 0x38, 0xd0, 0x30, 0xb6,
		0x96, 0x99, 0xd6, 0x37, 0xe3, 0x2b, 0x66, 0xfe, 0xa1, 0xae, 0x71, 0xee, 0x97, 0xd6, 0x60, 0x5f,
		0xe3, 0x67, 0x9c, 0x9b, 0x9c, 0x33, 0xcf, 0xd1, 0x7e, 0xc4, 0xab, 0xb8, 0x73, 0x5d, 0x36, 0x0e,
		0xda, 0x4f, 0xd7, 0x15, 0xe3, 0xa0, 0x3d, 0xfd, 0x6d, 0x25, 0xf8, 0xe5, 0x47, 0x75, 0xfc, 0x54,
		0xbd, 0x2e, 0x1b, 0xf5, 0xf0, 0x6f, 0xab, 0x8d, 0xeb, 0xb2, 0xd1, 0x68, 0xef, 0xee, 0xdc, 0xdc,
		0xec, 0x89, 0x3e, 0xb3, 0xfb, 0xa3, 0x36, 0xd6, 0xb7, 0xef, 0xd3, 0xd6, 0xb9, 0x0c, 0x67, 0x97,
		0xc7, 0xff, 0x4e, 0x6c, 0x2d, 0xfe, 0xdc, 0x49, 0x6a, 0x35, 0x76, 0xff, 0xa1, 0x71, 0x3d, 0xf2,
		0xb4, 0x0f, 0x97, 0x8c, 0x59, 0x6a, 0xc2, 0x2c, 0x89, 0x9a, 0xa5, 0x40, 0xaa, 0x4d, 0xa3, 0x77,
		0x68, 0x7c, 0x69, 0xff, 0xa8, 0xbc, 0xaf, 0x8f, 0x3f, 0xec, 0xfe, 0x68, 0x8d, 0x5f, 0xfe, 0xe5,
		0xd3, 0xaa, 0x1f, 0xab, 0xbc, 0x6f, 0x8d, 0x3f, 0xac, 0xf9, 0x97, 0xe6, 0xf8, 0x43, 0xcc, 0x31,
		0x1a, 0xe3, 0x9d, 0xa5, 0x1f, 0x9d, 0xfc, 0x7d, 0x75, 0xdd, 0x03, 0xf5, 0x35, 0x0f, 0xd4, 0xd6,
		0x3d, 0x50, 0x5b, 0xf3, 0xc0, 0xda, 0x57, 0xaa, 0xae, 0x79, 0xa0, 0x31, 0x7e, 0x5a, 0xfa, 0xf9,
		0x9d, 0xd5, 0x3f, 0xda, 0x1c, 0xef, 0x3e, 0xad, 0xfb, 0xb7, 0xd6, 0xf8, 0xe9, 0xc3, 0xee, 0x2e,
		0x0c, 0x75, 0x6c, 0x43, 0x0d, 0xf1, 0x4c, 0x5e, 0x3c, 0xf3, 0xe7, 0xb8, 0xde, 0x65, 0xfb, 0x3d,
		0x89, 0x1d, 0xab, 0xc6, 0xc8, 0xaa, 0xeb, 0x0e, 0x4c, 0xdb, 0x31, 0x82, 0x0d, 0x00, 0x8d, 0xa1,
		0x95, 0x06, 0xff, 0x59, 0xfc, 0xca, 0x9c, 0xbb, 0x60, 0xcb, 0x25, 0x77, 0xc1, 0xd5, 0x89, 0xed,
		0x24, 0x50, 0x08, 0xa7, 0xb5, 0xfc, 0x31, 0xfa, 0x98, 0xa0, 0x6d, 0x06, 0x7d, 0x23, 0xb8, 0xa5,
		0xcf, 0xf9, 0xe2, 0x99, 0x16, 0xb7, 0x5d, 0xe7, 0xb3, 0x7d, 0x67, 0x4f, 0x37, 0xf0, 0xf5, 0x15,
		0xbd, 0x69, 0xf4, 0xa9, 0x27, 0xe6, 0xf7, 0x8d, 0x5b, 0xfa, 0x6a, 0xa3, 0xb6, 0x41, 0x8b, 0x9f,
		0x17, 0x87, 0xa5, 0xa7, 0x0b, 0xa7, 0x56, 0xd6, 0x2b, 0xee, 0xec, 0xec, 0xec, 0x5c, 0x9b, 0xc6,
		0xdf, 0x87, 0xc6, 0x1f, 0x65, 0xe3, 0xa0, 0xd3, 0x9e, 0xfb, 0xc3, 0xcd, 0x8d, 0xd1, 0x69, 0xef,
		0xfe, 0x28, 0xbf, 0x6f, 0x56, 0xc6, 0xbb, 0x3f, 0x3d, 0xff, 0x7d, 0xfb, 0xe6, 0x66, 0x6f, 0xf7,
		0x9f, 0x32, 0x4f, 0xfd, 0xb4, 0xfb, 0x34, 0x79, 0xb6, 0x98, 0x8f, 0xa9, 0x4f, 0x82, 0xb5, 0x27,
		0x8c, 0x9d, 0xfc, 0x02, 0x68, 0xa0, 0xcb, 0x76, 0x46, 0xcb, 0xf4, 0xda, 0x59, 0xa9, 0xaf, 0x21,
		0xd8, 0x32, 0x0f, 0x8b, 0x4e, 0x86, 0xae, 0xa7, 0x61, 0x73, 0x74, 0x7e, 0x70, 0xa2, 0x1d, 0x9d,
		0xcf, 0xac, 0x67, 0x8e, 0xfa, 0xc1, 0xd6, 0x55, 0xa3, 0x52, 0xc7, 0xce, 0xab, 0xfa, 0x22, 0x61,
		0xe7, 0x35, 0xfa, 0x00, 0xec, 0xbc, 0xe6, 0x60, 0xe7, 0x75, 0x62, 0x4d, 0x0c, 0x67, 0x34, 0xb8,
		0x65, 0x9e, 0x86, 0x0d, 0xd8, 0x26, 0xe1, 0x90, 0x17, 0xa6, 0x73, 0x97, 0x8b, 0x0d, 0x58, 0x9d,
		0x91, 0xaa, 0xee, 0x03, 0x7a, 0xb3, 0xf0, 0x44, 0xd7, 0xf8, 0x09, 0x04, 0x25, 0x3a, 0x0e, 0x78,
		0xea, 0x8c, 0x40, 0x93, 0x5a, 0xd2, 0x66, 0xa3, 0x51, 0x6b, 0xe4, 0x78, 0x59, 0x81, 0xaf, 0xda,
		0xf1, 0xd5, 0x0f, 0x50, 0x23, 0xda, 0x23, 0x24, 0x27, 0xd8, 0x17, 0xe3, 0x03, 0x37, 0x81, 0x9b,
		0xc0, 0xcd, 0xad, 0xc2, 0x4d, 0x2d, 0x45, 0x69, 0x28, 0xf7, 0xd3, 0x5f, 0x74, 0xa6, 0x75, 0x57,
		0x4a, 0x7f, 0x0e, 0x35, 0xb7, 0xc5, 0x65, 0xb9, 0xce, 0x9b, 0xe6, 0xb8, 0x88, 0x6c, 0x5b, 0xf7,
		0xb6, 0x35, 0x17, 0x89, 0xe5, 0xdc, 0x8c, 0xa0, 0xda, 0x66, 0x63, 0x8a, 0xc1, 0x72, 0x6f, 0x58,
		0x21, 0x86, 0x1b, 0x51, 0xf4, 0x85, 0x6d, 0x39, 0x9d, 0x23, 0x6c, 0xfb, 0xb1, 0x77, 0xa2, 0x9e,
		0x33, 0xc9, 0x1d, 0x79, 0x57, 0x6f, 0x28, 0xa3, 0x70, 0xdc, 0xfd, 0x5d, 0x82, 0x22, 0x36, 0x6b,
		0x08, 0xa3, 0x70, 0xf4, 0x8d, 0xa6, 0xe7, 0x0b, 0x5d, 0x8f, 0x17, 0xad, 0x3d, 0x5d, 0x68, 0x7a,
		0xb8, 0xc8, 0x2e, 0x16, 0x91, 0x1d, 0x48, 0x58, 0xff, 0x8b, 0x4a, 0xfd, 0x1b, 0x12, 0xd1, 0x78,
		0x39, 0x5d, 0x17, 0xd7, 0x54, 0xb1, 0x27, 0x04, 0xc5, 0x44, 0x55, 0x3c, 0xb4, 0x8b, 0x85, 0x84,
		0x20, 0x68, 0x14, 0x00, 0xb1, 0x35, 0x8f, 0xbf, 0x72, 0xf1, 0x7e, 0x32, 0xe6, 0xda, 0xca, 0xae,
		0x29, 0xfd, 0x5a, 0x0a, 0x2c, 0x1e, 0xe9, 0xa2, 0xc5, 0x5b, 0xa6, 0xb7, 0x27, 0x3d, 0xc6, 0x84,
		0x17, 0x07, 0x6c, 0xe0, 0x7a, 0xf1, 0xfb, 0xe7, 0x46, 0xe9, 0x8a, 0xf0, 0xb9, 0x98, 0x4b, 0x2a,
		0xd6, 0xff, 0x45, 0x78, 0x27, 0x48, 0x66, 0xa7, 0x67, 0x7e, 0x27, 0xc7, 0x7f, 0x14, 0x51, 0x54,
		0xd9, 0x9d, 0x1a, 0xe5, 0x9d, 0x18, 0xe5, 0x9d, 0x96, 0x97, 0x3b, 0x29, 0x93, 0xef, 0x9d, 0x92,
		0x92, 0x8b, 0xf6, 0x43, 0x29, 0x5a, 0x33, 0x99, 0x10, 0x9c, 0xf4, 0xd9, 0x32, 0x87, 0xcf, 0x0b,
		0x4e, 0x98, 0x5c, 0xe3, 0x22, 0xe9, 0xad, 0x4c, 0x95, 0x2d, 0x4b, 0x79, 0x81, 0x56, 0x15, 0x6c,
		0x32, 0x01, 0x27, 0x13, 0x74, 0x12, 0x81, 0xdf, 0x36, 0x82, 0x99, 0x9a, 0xf4, 0x92, 0x94, 0xa2,
		0xd0, 0xf9, 0xc0, 0x93, 0xe0, 0x2d, 0x3a, 0xa1, 0x06, 0xe9, 0x02, 0x16, 0x21, 0xcf, 0x2e, 0xd3,
		0x4f, 0x4d, 0xa9, 0x7f, 0x9a, 0xb2, 0xd9, 0xa9, 0xc2, 0xec, 0xc0, 0xec, 0x90, 0xfa, 0xdf, 0x39,
		0x3f, 0x3c, 0x72, 0xf8, 0x24, 0x96, 0x90, 0x5e, 0xae, 0x67, 0x8f, 0x1c, 0x8e, 0x24, 0x9b, 0xc7,
		0x51, 0x6a, 0x2a, 0xa8, 0x5c, 0x6e, 0x44, 0x51, 0x5e, 0xa4, 0xae, 0x3c, 0x54, 0x4a, 0x44, 0xae,
		0x4c, 0xe4, 0x4a, 0x45, 0xaa, 0x5c, 0xe9, 0x64, 0x1e, 0x55, 0x9b, 0x00, 0x16, 0x2d, 0xd7, 0xf3,
		0x98, 0xc5, 0xcd, 0xdb, 0x3e, 0x33, 0x98, 0x65, 0x19, 0xcc, 0xf3, 0x5c, 0xcf, 0xa7, 0x6b, 0xf6,
		0xb9, 0x66, 0x7c, 0x9a, 0xee, 0x9f, 0x65, 0xaa, 0xee, 0x9f, 0xe5, 0x6c, 0x76, 0xff, 0x54, 0x53,
		0x60, 0x6a, 0x45, 0xd6, 0xa6, 0xd0, 0xda, 0x14, 0x5b, 0x8b, 0x82, 0xab, 0x29, 0xba, 0xa2, 0xc2,
		0x47, 0xdf, 0x88, 0xac, 0xae, 0x2f, 0x92, 0xb7, 0x91, 0xed, 0xf0, 0x26, 0xc5, 0xc1, 0xb1, 0x99,
		0x76, 0x12, 0xd4, 0x85, 0x10, 0x9f, 0x14, 0xa1, 0xed, 0xa6, 0xaf, 0xa1, 0xb0, 0x56, 0xcb, 0xf1,
		0x01, 0x5d, 0x27, 0x41, 0x74, 0x1e, 0x15, 0x18, 0xd3, 0x5e, 0x4f, 0x90, 0xbb, 0xa5, 0xd2, 0x7b,
		0x89, 0x82, 0xf6, 0xd5, 0xcb, 0x48, 0xc1, 0x41, 0x3b, 0x87, 0xcd, 0xd6, 0xb9, 0xcb, 0xcd, 0xbe,
		0x16, 0x14, 0x5b, 0x1a, 0x19, 0x10, 0x06, 0x08, 0x03, 0x84, 0x01, 0xc2, 0x00, 0x61, 0x80, 0x30,
		0x40, 0x18, 0x20, 0x0c, 0x10, 0x36, 0x5b, 0x96, 0x91, 0xa3, 0x3b, 0x2f, 0xb6, 0xf6, 0x13, 0x00,
		0x65, 0x80, 0x32, 0x40, 0x19, 0xa0, 0x0c, 0x50, 0x06, 0x28, 0x03, 0x94, 0x01, 0xca, 0x36, 0x0c,
		0xca, 0xb6, 0xbc, 0xd4, 0x3f, 0xac, 0x88, 0x0a, 0x4a, 0x78, 0x4a, 0x8a, 0xe5, 0x0a, 0x05, 0xea,
		0x0a, 0xa9, 0xe0, 0xc4, 0x4e, 0xe7, 0xd3, 0xec, 0xad, 0x92, 0x2a, 0xe7, 0x97, 0xa8, 0xef, 0xe9,
		0x79, 0x8c, 0xa9, 0x97, 0x8b, 0x04, 0xa3, 0xa8, 0x95, 0x8a, 0x94, 0x51, 0x2a, 0x82, 0x52, 0x91,
		0x7c, 0x18, 0x43, 0x65, 0x2e, 0xa6, 0xe3, 0x61, 0x02, 0x0e, 0x26, 0xe2, 0x5f, 0x82, 0x28, 0x81,
		0x92, 0x77, 0xa9, 0x1b, 0x60, 0x11, 0xf3, 0xad, 0x0e, 0x32, 0xa2, 0x68, 0x76, 0x46, 0xc9, 0xb1,
		0xba, 0x96, 0x40, 0x1f, 0xb7, 0x6a, 0x59, 0x95, 0x94, 0xf8, 0xb0, 0x9d, 0x61, 0xe8, 0x18, 0xde,
		0x3f, 0xfa, 0xb6, 0x65, 0xf6, 0xd5, 0xc1, 0x23, 0x1a, 0x09, 0xf0, 0x01, 0xf8, 0x00, 0x7c, 0x00,
		0x3e, 0x00, 0x1f, 0x80, 0x0f, 0xc0, 0x07, 0xe0, 0x63, 0xfd, 0x34, 0x7b, 0x2c, 0x38, 0xff, 0xdf,
		0x55, 0x87, 0x8f, 0x68, 0x24, 0xc0, 0x07, 0xe0, 0x03, 0xf0, 0x01, 0xf8, 0x00, 0x7c, 0x00, 0x3e,
		0x00, 0x1f, 0x80, 0x8f, 0xf5, 0xd3, 0x3c, 0xf2, 0x29, 0xc0, 0x23, 0x18, 0x05, 0xd0, 0x01, 0xe8,
		0x00, 0x74, 0x00, 0x3a, 0x00, 0x1d, 0x80, 0x0e, 0x40, 0xc7, 0xd6, 0x40, 0xc7, 0x76, 0x35, 0x3c,
		0x92, 0xed, 0xd5, 0x4b, 0x5f, 0xcd, 0x83, 0xfe, 0x8c, 0x22, 0x0b, 0x97, 0x78, 0x7b, 0xc6, 0xe9,
		0x52, 0x25, 0xdb, 0x9d, 0xd1, 0xf7, 0xcd, 0x3b, 0xe6, 0xcb, 0xf4, 0x67, 0x0c, 0x9f, 0xdc, 0x8c,
		0x0e, 0x8d, 0x82, 0x5f, 0xa7, 0xb0, 0x51, 0x6d, 0x1a, 0xa3, 0x2f, 0x8f, 0x5e, 0x8d, 0x74, 0x22,
		0xac, 0x1c, 0x6d, 0x52, 0x35, 0x4d, 0x93, 0x10, 0x6d, 0xaa, 0xd0, 0x32, 0xfb, 0x9d, 0xd3, 0xc4,
		0x45, 0x3f, 0x19, 0x88, 0x91, 0x6e, 0x9f, 0xe6, 0xb3, 0x07, 0xe6, 0xd9, 0xfc, 0x51, 0x3d, 0x41,
		0x13, 0x8d, 0x84, 0x24, 0x8d, 0xa2, 0x1a, 0x21, 0x53, 0x23, 0xaf, 0x66, 0x79, 0x4f, 0xd7, 0xf8,
		0x8f, 0x7e, 0xdf, 0xbd, 0x33, 0x14, 0x95, 0x69, 0xc1, 0xff, 0xd4, 0x15, 0xc6, 0x38, 0x72, 0x46,
		0x83, 0xc9, 0x17, 0x1b, 0x23, 0xd4, 0x23, 0x8e, 0x18, 0xa6, 0x02, 0x9e, 0x7e, 0x77, 0xdb, 0xe9,
		0x7b, 0x64, 0xa8, 0xbf, 0x6d, 0x97, 0xdd, 0x8e, 0xee, 0x0c, 0xe6, 0x70, 0xcf, 0x66, 0xbe, 0x3c,
		0xb3, 0x2d, 0x0e, 0x03, 0x74, 0x03, 0xba, 0x6d, 0x1a, 0xba, 0x4d, 0x25, 0xdc, 0x67, 0xde, 0x83,
		0x6d, 0x11, 0x9c, 0x67, 0x5a, 0x1c, 0x0e, 0x3d, 0x70, 0x01, 0x71, 0x5b, 0x06, 0x71, 0x04, 0xdd,
		0x70, 0xa5, 0xd2, 0x0c, 0xb4, 0x69, 0x07, 0x62, 0x95, 0x24, 0x53, 0x4d, 0x4a, 0x15, 0xd5, 0xa4,
		0xaa, 0xd4, 0x2a, 0xab, 0x4d, 0x75, 0xb5, 0xa9, 0xb0, 0x3e, 0x55, 0x56, 0x53, 0x69, 0x45, 0xd5,
		0x26, 0x53, 0xf1, 0x68, 0x20, 0xe6, 0x98, 0xb7, 0x7d, 0x85, 0xb2, 0x96, 0xb5, 0x92, 0x3c, 0x1b,
		0x98, 0x68, 0x1d, 0x3f, 0xb3, 0x9e, 0x39, 0xea, 0x07, 0xcb, 0xd8, 0x33, 0xfb, 0x3e, 0xa3, 0x1a,
		0x97, 0x78, 0xdf, 0x95, 0xca, 0xb8, 0xe8, 0x30, 0x32, 0x9a, 0x8d, 0x8d, 0x2e, 0xa3, 0xa3, 0xdd,
		0xf8, 0x68, 0x37, 0x42, 0xfa, 0x8d, 0x11, 0x8d, 0x51, 0x22, 0x32, 0x4e, 0x74, 0xc9, 0xa4, 0xb5,
		0x92, 0x7b, 0xeb, 0xba, 0x7d, 0x66, 0x3a, 0x94, 0x52, 0x3b, 0xa3, 0x8b, 0x4a, 0x56, 0x6e, 0x09,
		0xa6, 0xb8, 0xe3, 0x56, 0x31, 0xa4, 0x5a, 0x9f, 0xdc, 0x53, 0x0a, 0xae, 0x60, 0x84, 0x61, 0x84,
		0x61, 0x84, 0x73, 0x6f, 0x84, 0xed, 0x2e, 0x73, 0xb8, 0xcd, 0x1f, 0x3d, 0xd6, 0xd3, 0x61, 0x88,
		0x09, 0xdb, 0x59, 0x15, 0x8f, 0xc3, 0x57, 0xfd, 0x68, 0xfa, 0x1a, 0x74, 0x62, 0x36, 0x21, 0x9f,
		0x8f, 0x3e, 0xfe, 0xfa, 0x73, 0xe7, 0xf2, 0xe8, 0xe2, 0xb7, 0xe3, 0x4f, 0x47, 0xc5, 0x8d, 0x6b,
		0x96, 0x85, 0x7b, 0xeb, 0xdf, 0xd8, 0x02, 0x59, 0xc8, 0xd4, 0x97, 0x16, 0xd2, 0x90, 0x25, 0x92,
		0x14, 0x48, 0x81, 0x7e, 0xbb, 0xe4, 0xf3, 0xe4, 0x2d, 0x8f, 0xa6, 0xaf, 0x3c, 0xfd, 0xc3, 0xe5,
		0xf4, 0x8d, 0xa5, 0x36, 0x52, 0xe8, 0x44, 0x46, 0xa5, 0x6d, 0x2d, 0x15, 0xf6, 0x10, 0xe3, 0xce,
		0xb6, 0x34, 0xa5, 0x45, 0x02, 0x0b, 0x09, 0xac, 0xe4, 0xb0, 0x24, 0x92, 0xbc, 0x3e, 0x33, 0x7b,
		0x34, 0x28, 0x12, 0x21, 0x48, 0x8b, 0x60, 0xac, 0xf3, 0xd0, 0xc3, 0xec, 0xed, 0x85, 0x3e, 0xa0,
		0x34, 0xb3, 0x26, 0x79, 0xb4, 0xac, 0x52, 0x57, 0xb6, 0xae, 0xb7, 0xab, 0x92, 0x05, 0xe2, 0x2b,
		0x17, 0x8b, 0xca, 0xaa, 0x56, 0x61, 0x55, 0x61, 0x55, 0x73, 0x6a, 0x55, 0xb1, 0x2d, 0x80, 0x8c,
		0x14, 0x32, 0x52, 0xc8, 0x48, 0x6d, 0x69, 0x46, 0x0a, 0xdb, 0x02, 0x89, 0xc6, 0xc7, 0x9a, 0xe2,
		0x64, 0x18, 0x61, 0x18, 0x61, 0x18, 0xe1, 0xdc, 0x1a, 0x61, 0x6c, 0x0b, 0xbc, 0x98, 0x10, 0x6c,
		0x0b, 0x68, 0x8c, 0x78, 0x72, 0xbe, 0x2d, 0x40, 0x91, 0x01, 0x29, 0x24, 0xb9, 0x2b, 0x20, 0x71,
		0x9c, 0x9e, 0x30, 0x75, 0x95, 0x68, 0x19, 0xed, 0x2f, 0xec, 0x51, 0x1d, 0x6a, 0x8a, 0x5f, 0x6d,
		0x9f, 0x1f, 0x72, 0xae, 0x58, 0x91, 0x7b, 0x62, 0x3b, 0x47, 0x7d, 0x36, 0xf1, 0x4f, 0xbe, 0x1a,
		0xc0, 0x14, 0x4f, 0xcc, 0xef, 0x73, 0x23, 0xd1, 0xf6, 0x07, 0x29, 0x9e, 0x79, 0x5d, 0xe6, 0xb1,
		0xee, 0xc7, 0xc9, 0xc4, 0x39, 0xa3, 0x7e, 0x7f, 0xeb, 0xaf, 0xb9, 0x79, 0xdb, 0x04, 0x64, 0xe0,
		0xd6, 0x9b, 0xb7, 0x94, 0xbe, 0x88, 0x33, 0x73, 0x09, 0x88, 0x45, 0xfa, 0x47, 0xe7, 0xe6, 0x05,
		0x20, 0x0b, 0x07, 0xe8, 0xe4, 0x76, 0x1b, 0x94, 0x76, 0x17, 0x94, 0x0f, 0xcc, 0x55, 0x71, 0x60,
		0x0e, 0x07, 0xe6, 0x62, 0xbe, 0xa6, 0xf4, 0x81, 0xb9, 0xf0, 0x0b, 0xa9, 0x1f, 0x95, 0x9b, 0x0d,
		0x94, 0xf2, 0x21, 0xb9, 0x2a, 0x0e, 0xc9, 0xe9, 0x4e, 0xa8, 0xe0, 0x90, 0x1c, 0x91, 0xf2, 0x45,
		0x03, 0x98, 0xc3, 0xa1, 0x11, 0x7a, 0x5e, 0xa2, 0xed, 0xf0, 0x68, 0x44, 0xd4, 0x19, 0x25, 0x9c,
		0x1f, 0xc5, 0x8e, 0x38, 0xea, 0x8c, 0xe2, 0x63, 0xa5, 0x67, 0x3b, 0x77, 0x94, 0x65, 0x46, 0xfb,
		0xa9, 0xce, 0x10, 0xfb, 0xce, 0x3d, 0xd3, 0x18, 0x39, 0x7e, 0x70, 0x07, 0x3f, 0xcd, 0x5c, 0x79,
		0xac, 0xc7, 0x3c, 0xe6, 0x58, 0x99, 0xbc, 0x99, 0x7b, 0xb6, 0x90, 0xc7, 0x47, 0x57, 0x5f, 0x0a,
		0x17, 0x5f, 0x3e, 0x15, 0x1a, 0xf5, 0x6a, 0xfd, 0x7d, 0xe1, 0x92, 0x05, 0xed, 0x4c, 0x0b, 0xcd,
		0xbd, 0xea, 0x5e, 0x63, 0x2f, 0x67, 0x9b, 0x2e, 0xcf, 0x13, 0x9e, 0xe7, 0x7d, 0x97, 0xd7, 0x57,
		0x04, 0xb7, 0x4f, 0x53, 0xa5, 0x51, 0x15, 0xf8, 0x76, 0xe0, 0x13, 0xf6, 0x05, 0x98, 0x0c, 0x06,
		0xd6, 0x01, 0xeb, 0x80, 0x75, 0xc0, 0x3a, 0xd9, 0xb6, 0x79, 0x76, 0x97, 0xd4, 0xea, 0xd9, 0x5d,
		0xd8, 0x3d, 0xd8, 0x3d, 0xd8, 0x3d, 0xd8, 0x3d, 0xc4, 0x78, 0x69, 0xc5, 0x78, 0x2d, 0xc4, 0x78,
		0x19, 0x8b, 0xf1, 0x5a, 0x88, 0xf1, 0x32, 0xc1, 0x3b, 0x43, 0xcf, 0x76, 0x95, 0x5a, 0x69, 0x2f,
		0xa9, 0x61, 0x34, 0x22, 0xa8, 0x07, 0xd4, 0x03, 0xea, 0xc9, 0x28, 0xf5, 0x8c, 0x6c, 0x87, 0xef,
		0x13, 0x42, 0x0f, 0x41, 0xa9, 0x2e, 0xd1, 0x85, 0x6b, 0x1a, 0x08, 0x83, 0xf2, 0x02, 0x36, 0x62,
		0xfb, 0xb6, 0x34, 0x2c, 0xf1, 0x85, 0x6c, 0xd1, 0xb8, 0x1a, 0xae, 0x00, 0x23, 0xd2, 0x8e, 0xc5,
		0xa5, 0x32, 0xbf, 0xe7, 0x6e, 0xa9, 0xaa, 0x8d, 0x46, 0x8e, 0x16, 0x6b, 0x33, 0x60, 0x0b, 0x41,
		0x16, 0x79, 0x90, 0x55, 0x41, 0x8c, 0x95, 0xad, 0x18, 0xab, 0x82, 0x10, 0x2b, 0x1b, 0x21, 0x96,
		0x6b, 0x51, 0xe6, 0x94, 0xc3, 0xf1, 0x10, 0x5e, 0x21, 0xbc, 0x42, 0x78, 0x95, 0xd1, 0xf0, 0x0a,
		0x49, 0xe5, 0xcd, 0xe7, 0x9d, 0x26, 0x92, 0xca, 0x19, 0x03, 0x9e, 0x26, 0x92, 0xca, 0x74, 0xc4,
		0x93, 0x68, 0x85, 0xf6, 0xd1, 0xf7, 0x20, 0x4c, 0x95, 0x37, 0x03, 0x74, 0x25, 0xf8, 0xae, 0x65,
		0xb0, 0xef, 0xfc, 0x03, 0x67, 0x7d, 0x36, 0x60, 0xdc, 0x7b, 0x34, 0x4c, 0xee, 0x0e, 0x6c, 0x8b,
		0xb6, 0x26, 0x3f, 0x68, 0x60, 0x44, 0x58, 0x94, 0x9f, 0x74, 0x25, 0x7e, 0x5b, 0x72, 0x9d, 0x09,
		0xfd, 0x08, 0xa1, 0xff, 0x20, 0x74, 0xfc, 0x0b, 0xd6, 0xa9, 0x60, 0x14, 0xae, 0xee, 0x59, 0xe1,
		0x32, 0xb8, 0x1e, 0xb1, 0x70, 0xee, 0xb9, 0xdc, 0xb5, 0xdc, 0x7e, 0xc6, 0x51, 0x94, 0xda, 0x4b,
		0x24, 0x43, 0xa3, 0x71, 0xe6, 0x3d, 0x6d, 0x4a, 0x7d, 0x97, 0xac, 0x0f, 0xd8, 0xc0, 0xb3, 0xd5,
		0xc1, 0x31, 0xcf, 0x92, 0xda, 0x49, 0xb6, 0x02, 0xfd, 0x61, 0xda, 0xa0, 0x51, 0xc2, 0xec, 0x8f,
		0x89, 0x9d, 0xa0, 0x7e, 0x8f, 0x8b, 0x93, 0x71, 0xe7, 0x5e, 0x02, 0x69, 0x05, 0x1c, 0x27, 0xa4,
		0x4e, 0x17, 0xe0, 0xe2, 0x64, 0x99, 0x27, 0x36, 0xa0, 0x09, 0x84, 0x6c, 0x0b, 0x20, 0x1d, 0xfe,
		0x4a, 0x5b, 0xd7, 0x87, 0x77, 0x84, 0x8b, 0x29, 0xbb, 0x88, 0x1a, 0x16, 0xaf, 0x28, 0xd4, 0xcd,
		0x82, 0x70, 0xb9, 0xe2, 0x2d, 0xd4, 0xdb, 0xd3, 0x1e, 0x63, 0xca, 0x8b, 0x03, 0x77, 0xe4, 0xf0,
		0x70, 0x36, 0x62, 0x4f, 0xf8, 0x73, 0xb5, 0xfb, 0xfc, 0xd3, 0x31, 0x17, 0x58, 0xac, 0xaf, 0x80,
		0x70, 0x1f, 0x01, 0x19, 0x47, 0x3f, 0xef, 0xd8, 0xfd, 0x47, 0xa1, 0x85, 0x97, 0xf4, 0xe1, 0xca,
		0x3e, 0x5b, 0xd9, 0x47, 0xbf, 0xf4, 0xc9, 0x93, 0xef, 0x9d, 0x92, 0xca, 0x8b, 0x9e, 0xd6, 0x9f,
		0x17, 0x3b, 0xf9, 0x0e, 0x32, 0xf3, 0x83, 0x6c, 0xc7, 0xc5, 0xeb, 0x62, 0xa2, 0x4d, 0x85, 0xa9,
		0xd9, 0x6f, 0x21, 0x23, 0x24, 0xfa, 0xc9, 0xa0, 0x8c, 0x74, 0xf7, 0x18, 0xa5, 0xa6, 0x15, 0x91,
		0xb0, 0x28, 0x34, 0xaa, 0xd8, 0xb4, 0x40, 0x4f, 0x4e, 0x69, 0x10, 0xe3, 0x49, 0x29, 0x55, 0xde,
		0xc3, 0x3b, 0xf5, 0x6b, 0x6a, 0x28, 0xae, 0xa7, 0x99, 0xbf, 0x96, 0x66, 0x9a, 0x40, 0x0b, 0xf4,
		0x39, 0xcb, 0x69, 0x2a, 0xa5, 0xab, 0x67, 0x48, 0xae, 0x9c, 0xd9, 0xb4, 0x7e, 0x57, 0xb0, 0x5b,
		0x1b, 0x6f, 0xb7, 0xd4, 0xbb, 0x5c, 0x3d, 0x98, 0x76, 0x9f, 0xa4, 0xbe, 0xe3, 0xb9, 0xcd, 0x55,
		0x34, 0x24, 0xca, 0xd5, 0xf4, 0xab, 0x29, 0xb5, 0xba, 0x6a, 0x53, 0x5b, 0x6d, 0xea, 0xab, 0x45,
		0x8d, 0xd5, 0xd4, 0x59, 0x51, 0xad, 0xe9, 0xb0, 0x64, 0x49, 0xde, 0x46, 0xb6, 0xc3, 0x9b, 0x75,
		0xc2, 0x22, 0xb5, 0x7d, 0x1c, 0x02, 0x4a, 0xc5, 0xac, 0x2d, 0x0d, 0x8b, 0x43, 0x40, 0xb9, 0x5b,
		0x2a, 0xda, 0xee, 0xec, 0x89, 0xaf, 0x1e, 0xce, 0x07, 0x48, 0x2f, 0x0b, 0x6d, 0x63, 0x51, 0x34,
		0x15, 0x05, 0x6c, 0x01, 0xb6, 0x70, 0x22, 0x20, 0x9b, 0xb6, 0xce, 0xb7, 0xff, 0xa6, 0xbc, 0x53,
		0x78, 0x32, 0x1a, 0x6c, 0x1d, 0x6c, 0x1d, 0x6c, 0x1d, 0x02, 0x4b, 0x04, 0x96, 0x08, 0x2c, 0x11,
		0x58, 0x22, 0xb0, 0x44, 0x60, 0x19, 0xc1, 0x16, 0x77, 0x3d, 0xf3, 0x8e, 0x19, 0x96, 0x3b, 0x18,
		0xba, 0x0e, 0x93, 0xa8, 0x8e, 0x79, 0x85, 0x66, 0x5f, 0x0e, 0x0d, 0x0c, 0x03, 0x86, 0x01, 0xc3,
		0x32, 0x85, 0x61, 0xea, 0xe5, 0x07, 0x4b, 0x31, 0x67, 0x8b, 0x60, 0xac, 0xf3, 0xa8, 0x28, 0xd7,
		0x32, 0x86, 0x7d, 0x93, 0xf7, 0x5c, 0x6f, 0xf0, 0x21, 0x32, 0x24, 0xfe, 0xea, 0xbf, 0x5e, 0xf8,
		0x5b, 0xf9, 0xfa, 0x85, 0x74, 0x0d, 0xf2, 0x88, 0xdb, 0x7d, 0xfb, 0x6f, 0x46, 0xd8, 0x0b, 0x24,
		0x1a, 0x11, 0xe6, 0x17, 0xe6, 0x17, 0xe6, 0x17, 0x51, 0x30, 0xa2, 0x60, 0x44, 0xc1, 0x88, 0x82,
		0x11, 0x05, 0x6f, 0x58, 0x14, 0xbc, 0xed, 0x07, 0xe0, 0xe7, 0x0e, 0x56, 0xcd, 0xff, 0xa1, 0xa4,
		0x52, 0xe2, 0x5a, 0xa0, 0x3b, 0xa9, 0x36, 0x79, 0xa3, 0xf0, 0x9f, 0x9f, 0x7f, 0x2f, 0x73, 0xcc,
		0x50, 0x7e, 0xc1, 0xf5, 0x1e, 0xc0, 0xf8, 0x85, 0x3d, 0x4a, 0x6e, 0xae, 0x17, 0xbf, 0xda, 0x3e,
		0x3f, 0xe4, 0x5c, 0xf2, 0x00, 0xc7, 0x89, 0xed, 0xcc, 0x5d, 0xe1, 0x2f, 0x61, 0x1d, 0x27, 0xd6,
		0x7a, 0x6e, 0x04, 0x1a, 0x3b, 0xa8, 0x76, 0xf9, 0x7f, 0x8e, 0x0f, 0xf2, 0xae, 0xd1, 0xc3, 0xf4,
		0x8e, 0xf4, 0xae, 0xd4, 0x3c, 0x1c, 0xed, 0x15, 0x5f, 0xce, 0xe4, 0x8f, 0xf7, 0x3e, 0x2f, 0x5d,
		0x92, 0x27, 0x7c, 0x1d, 0x3e, 0x14, 0x3f, 0xd8, 0x3b, 0x79, 0x48, 0xf3, 0x79, 0xde, 0x32, 0xce,
		0xf3, 0x52, 0x46, 0xee, 0x79, 0x3e, 0xcf, 0x6b, 0xcd, 0x64, 0x42, 0xf2, 0x28, 0x6f, 0xf8, 0x3c,
		0x4e, 0xf1, 0xea, 0x4b, 0x61, 0xe1, 0x14, 0x6f, 0x92, 0xa7, 0x78, 0x99, 0x63, 0xde, 0xf6, 0x99,
		0xe1, 0xf0, 0xa1, 0x61, 0x8e, 0x02, 0xb7, 0xa7, 0x78, 0x32, 0xee, 0xe5, 0x80, 0xb2, 0x27, 0x8e,
		0x58, 0xcf, 0x1c, 0xf5, 0x83, 0x19, 0x0f, 0x1a, 0x1a, 0xe2, 0x8c, 0x30, 0xce, 0xda, 0xa5, 0x95,
		0x45, 0xce, 0xeb, 0x19, 0xe1, 0x5b, 0xd7, 0xed, 0x33, 0xd3, 0xa1, 0x38, 0x23, 0x5c, 0xc9, 0xf0,
		0x91, 0xde, 0xa9, 0xc5, 0xe9, 0x52, 0x99, 0xae, 0x2e, 0x4c, 0x16, 0x4c, 0x16, 0x4c, 0x16, 0x4c,
		0x96, 0x46, 0x93, 0x35, 0xa1, 0x23, 0x3f, 0x10, 0x6c, 0xc3, 0xec, 0x76, 0x3d, 0xe6, 0xfb, 0x04,
		0x9d, 0x54, 0x96, 0xc7, 0x84, 0x01, 0x82, 0x01, 0x82, 0x01, 0x12, 0x92, 0x17, 0x7b, 0xa8, 0xa8,
		0x3d, 0x0b, 0x36, 0xe8, 0x40, 0x61, 0x8c, 0xf0, 0x3b, 0x65, 0xa6, 0xfd, 0xb8, 0x3d, 0x7c, 0xa8,
		0x13, 0xcc, 0xcd, 0xd2, 0x1c, 0xed, 0xd3, 0xd4, 0x7d, 0x71, 0xe6, 0x39, 0x64, 0xc5, 0x07, 0xc5,
		0x9d, 0xeb, 0xb2, 0x71, 0xd0, 0x7e, 0xba, 0xae, 0x18, 0x07, 0xed, 0xe9, 0x6f, 0x2b, 0xc1, 0x2f,
		0x3f, 0xaa, 0xe3, 0xa7, 0xea, 0x75, 0xd9, 0xa8, 0x87, 0x7f, 0x5b, 0x6d, 0x5c, 0x97, 0x8d, 0x46,
		0x7b, 0x77, 0xe7, 0xe6, 0x66, 0x4f, 0xf4, 0x99, 0xdd, 0x1f, 0xb5, 0xb1, 0x7a, 0x69, 0x4b, 0x9b,
		0x62, 0xfa, 0xce, 0x2e, 0x8f, 0xff, 0x4d, 0x3e, 0x87, 0x7f, 0xee, 0x24, 0x35, 0x8b, 0xbb, 0xff,
		0x28, 0xe6, 0xfb, 0xd2, 0x3f, 0x5a, 0x35, 0x6d, 0x6e, 0x8f, 0x9a, 0x06, 0xd2, 0x62, 0x1a, 0xbd,
		0x43, 0xe3, 0x4b, 0xfb, 0x47, 0xe5, 0x7d, 0x7d, 0xfc, 0x61, 0xf7, 0x47, 0x6b, 0xfc, 0xf2, 0x2f,
		0x9f, 0x56, 0xfd, 0x58, 0xe5, 0x7d, 0x6b, 0xfc, 0x61, 0xcd, 0xbf, 0x34, 0xc7, 0x1f, 0x62, 0x8e,
		0xd1, 0x18, 0xef, 0x2c, 0xfd, 0xe8, 0xe4, 0xef, 0xab, 0xeb, 0x1e, 0xa8, 0xaf, 0x79, 0xa0, 0xb6,
		0xee, 0x81, 0xda, 0x9a, 0x07, 0xd6, 0xbe, 0x52, 0x75, 0xcd, 0x03, 0x8d, 0xf1, 0xd3, 0xd2, 0xcf,
		0xef, 0xac, 0xfe, 0xd1, 0xe6, 0x78, 0xf7, 0x69, 0xdd, 0xbf, 0xb5, 0xc6, 0x4f, 0x1f, 0x76, 0x77,
		0xb7, 0xc0, 0x70, 0x41, 0xac, 0x92, 0x17, 0xab, 0xf4, 0x0d, 0x79, 0xd2, 0x37, 0x69, 0xa0, 0xb3,
		0xf9, 0x9a, 0x1d, 0x74, 0x87, 0x0f, 0x4b, 0x52, 0xdb, 0x6d, 0x05, 0xb2, 0x7d, 0xf4, 0x53, 0x3e,
		0xec, 0x84, 0xd1, 0xac, 0xae, 0xb2, 0x07, 0x81, 0x0d, 0xe3, 0x49, 0x80, 0xff, 0x17, 0x7b, 0xf4,
		0xe5, 0x77, 0x2f, 0xa3, 0x11, 0xb0, 0x7f, 0xa9, 0x2f, 0xe0, 0xc7, 0xfe, 0x65, 0xa2, 0x5d, 0x88,
		0xa7, 0x22, 0x4d, 0x93, 0x3e, 0x9b, 0x0c, 0x94, 0x72, 0x4f, 0x4f, 0xe4, 0xcc, 0x90, 0x33, 0x4b,
		0x26, 0x67, 0xa6, 0xdc, 0xd3, 0x53, 0xb2, 0x96, 0x66, 0xad, 0xd8, 0x49, 0x3b, 0x7b, 0x42, 0x45,
		0x24, 0x53, 0x48, 0x4a, 0xc5, 0xa4, 0x57, 0x50, 0x6a, 0x45, 0xd5, 0xa6, 0xb0, 0xda, 0x14, 0x57,
		0x8b, 0x02, 0xab, 0x07, 0x11, 0x04, 0xb9, 0x24, 0x65, 0xc5, 0x8e, 0x06, 0xfa, 0x8b, 0x3d, 0x1a,
		0x04, 0xb7, 0xcb, 0x2f, 0x89, 0x6f, 0x38, 0x2e, 0xd1, 0x02, 0xd2, 0x9e, 0xee, 0x21, 0x53, 0x7c,
		0x1d, 0x06, 0x40, 0x9f, 0x21, 0xd0, 0x65, 0x10, 0xb4, 0x1b, 0x06, 0xed, 0x06, 0x42, 0xab, 0xa1,
		0xa0, 0x31, 0x18, 0x44, 0x86, 0x23, 0xfa, 0xa6, 0x64, 0xe7, 0x55, 0x97, 0xe4, 0x75, 0x64, 0x3b,
		0xbc, 0xd2, 0xa4, 0x94, 0xd7, 0x50, 0xfb, 0x9b, 0x84, 0x43, 0xd2, 0x9e, 0x63, 0x9d, 0xfd, 0x8f,
		0x56, 0x9f, 0x0a, 0xba, 0xce, 0xb5, 0x6a, 0x32, 0xab, 0x4b, 0xc3, 0x6b, 0x3a, 0xe7, 0x1a, 0x8d,
		0xaf, 0xf1, 0xc4, 0x24, 0xb1, 0xba, 0x2d, 0x2e, 0xa9, 0x86, 0xf3, 0xaf, 0x49, 0x2f, 0x69, 0xb3,
		0xd1, 0xa8, 0x35, 0x72, 0xbc, 0xac, 0xef, 0xb2, 0x39, 0x5a, 0x3b, 0x23, 0x07, 0x75, 0x09, 0xc4,
		0x3e, 0x20, 0x40, 0x4e, 0xe9, 0x65, 0x16, 0xd8, 0x32, 0x18, 0x19, 0x74, 0x09, 0xba, 0x04, 0x5d,
		0x6e, 0x15, 0x5d, 0xda, 0x5d, 0xe6, 0x70, 0x9b, 0x3f, 0xd2, 0x34, 0xa6, 0x5a, 0xca, 0x28, 0x11,
		0xfa, 0xb4, 0xe2, 0x71, 0xf8, 0xaa, 0x1f, 0x4d, 0x5f, 0x83, 0x3a, 0xcc, 0x26, 0xe4, 0xf4, 0xea,
		0xbc, 0x73, 0xf8, 0xeb, 0xd5, 0xbf, 0x3a, 0x57, 0xff, 0x39, 0x3f, 0x2a, 0xea, 0x68, 0x7f, 0xe1,
		0x93, 0x73, 0xb2, 0x1e, 0x56, 0x5e, 0x3d, 0x2d, 0x27, 0x9f, 0x1b, 0xc5, 0x8c, 0xf3, 0x43, 0x7b,
		0xe3, 0x1a, 0x7d, 0x50, 0xf1, 0xc3, 0x43, 0x88, 0x9b, 0x1a, 0x00, 0x62, 0x3a, 0x34, 0x08, 0x02,
		0x04, 0x01, 0x82, 0xd8, 0x2a, 0x82, 0x20, 0xbb, 0x49, 0x61, 0x09, 0x1e, 0xf6, 0xb3, 0x62, 0x7d,
		0x53, 0xdd, 0x9a, 0x20, 0x6a, 0x7f, 0x14, 0x8d, 0x47, 0x5b, 0x6d, 0x34, 0x2b, 0x8f, 0x99, 0xfd,
		0xa6, 0x44, 0xb2, 0x23, 0x59, 0x20, 0x2d, 0x47, 0x3a, 0xe5, 0xc3, 0x5f, 0xd8, 0xa3, 0x1f, 0xfe,
		0x2a, 0x55, 0x9d, 0x44, 0x27, 0x12, 0x2a, 0x0d, 0x4b, 0x89, 0x36, 0x97, 0x68, 0x37, 0x95, 0xd0,
		0xac, 0x34, 0x4d, 0x67, 0x8c, 0xdd, 0xe3, 0x0c, 0x98, 0xe8, 0xad, 0xeb, 0x15, 0xbd, 0xb7, 0x17,
		0xda, 0xf9, 0x52, 0x68, 0x42, 0x72, 0xd9, 0x8e, 0x5f, 0xe5, 0x56, 0xeb, 0x15, 0x18, 0xa4, 0xd6,
		0xfa, 0xaf, 0xa0, 0xa3, 0x10, 0xa7, 0x0a, 0x53, 0x0a, 0x53, 0x9a, 0x2b, 0x53, 0x8a, 0x42, 0x1c,
		0x24, 0x3a, 0x90, 0xe8, 0x40, 0xa2, 0x23, 0x83, 0x89, 0x0e, 0x14, 0xe2, 0x50, 0x4a, 0x24, 0x0a,
		0x71, 0xd6, 0x8f, 0x8f, 0x42, 0x9c, 0xd4, 0x96, 0x14, 0x85, 0x38, 0x5a, 0x46, 0x43, 0x21, 0x4e,
		0x5c, 0xb6, 0x44, 0x21, 0x0e, 0xe8, 0x12, 0x74, 0xb9, 0x7d, 0x74, 0x89, 0x42, 0x9c, 0x17, 0x13,
		0x82, 0x42, 0x9c, 0xd7, 0xa7, 0x05, 0x85, 0x38, 0x39, 0xe6, 0x07, 0x14, 0xe2, 0x80, 0x20, 0x40,
		0x10, 0x20, 0x08, 0x4a, 0x79, 0x45, 0x21, 0x8e, 0xd6, 0x15, 0xcc, 0x5b, 0x21, 0x0e, 0xc5, 0x86,
		0x64, 0x41, 0x67, 0x1d, 0x8e, 0xc2, 0x7d, 0x64, 0xea, 0x02, 0x91, 0x6c, 0xdf, 0x88, 0xf0, 0xbe,
		0x32, 0xa5, 0xbd, 0x23, 0xb5, 0x9b, 0xcb, 0x9e, 0x93, 0x74, 0xaa, 0x37, 0x98, 0xcd, 0xa7, 0xfb,
		0xc8, 0x6f, 0x32, 0x8b, 0x06, 0x57, 0xba, 0xd1, 0x4c, 0x75, 0xb9, 0xb2, 0x77, 0xe3, 0xe0, 0x2a,
		0x0d, 0x4f, 0xfd, 0x9e, 0xc1, 0x65, 0x9d, 0x2e, 0xa2, 0x9f, 0x9b, 0xb6, 0x65, 0x4f, 0xb5, 0xa3,
		0x5b, 0xb8, 0xcc, 0x59, 0x68, 0xe9, 0xe6, 0x33, 0xef, 0x81, 0x79, 0x0a, 0x1d, 0xdd, 0x66, 0x03,
		0xa0, 0xa1, 0x9b, 0xbe, 0x50, 0x05, 0x0d, 0xdd, 0x92, 0x6c, 0xe8, 0x36, 0x95, 0x68, 0xf5, 0x7e,
		0x6e, 0xe1, 0x38, 0x68, 0xe7, 0x86, 0x76, 0x6e, 0x29, 0xc5, 0xee, 0x39, 0x6b, 0xe7, 0xa6, 0x7a,
		0x11, 0xc9, 0x92, 0xdc, 0xd1, 0x34, 0x21, 0x47, 0x49, 0x7e, 0x9a, 0x69, 0x39, 0xd4, 0x91, 0x66,
		0x20, 0x59, 0xb3, 0xc5, 0x25, 0xf9, 0x33, 0x1b, 0x92, 0xc3, 0x9a, 0x7c, 0xb4, 0xc7, 0x84, 0x35,
		0x85, 0x35, 0xcd, 0x9e, 0x35, 0x25, 0xab, 0xca, 0xa7, 0x02, 0x26, 0x4d, 0xe0, 0x44, 0x0c, 0x50,
		0xe4, 0xaa, 0xaf, 0xc3, 0x04, 0xe8, 0x33, 0x05, 0xba, 0x4c, 0x82, 0x76, 0xd3, 0xa0, 0xdd, 0x44,
		0x68, 0x35, 0x15, 0x34, 0x26, 0x83, 0xc8, 0x74, 0xd0, 0x03, 0xd9, 0x92, 0xbc, 0xde, 0xbb, 0x3e,
		0xd7, 0xb1, 0xeb, 0x79, 0x40, 0x38, 0x26, 0xc9, 0xc5, 0x74, 0x2f, 0xff, 0xa7, 0xa1, 0x2a, 0x9f,
		0xf4, 0x4a, 0xbf, 0x24, 0x67, 0x58, 0xef, 0x4c, 0xeb, 0x9b, 0xf1, 0x15, 0x33, 0x4f, 0x7a, 0x65,
		0xe0, 0x9b, 0x6b, 0xb0, 0xaf, 0xf1, 0x33, 0xa8, 0x6f, 0x99, 0x5a, 0xfb, 0x41, 0xf9, 0xb9, 0x7a,
		0x70, 0xdd, 0xff, 0xda, 0x3a, 0x97, 0x41, 0xc7, 0x8d, 0x5f, 0x6b, 0x3f, 0x2d, 0x5f, 0x57, 0x18,
		0xae, 0x5d, 0x0f, 0x2d, 0x23, 0x8f, 0xdf, 0xe7, 0xd8, 0x2c, 0x35, 0x61, 0x96, 0x44, 0xcd, 0x12,
		0xee, 0xc4, 0xcb, 0xed, 0x55, 0x8b, 0x5b, 0x63, 0xa8, 0x21, 0x9e, 0xb9, 0xbc, 0xb2, 0x31, 0x61,
		0xc7, 0xf5, 0x2e, 0xdb, 0xef, 0x49, 0xec, 0x58, 0x35, 0x46, 0x56, 0x5d, 0x77, 0x60, 0xda, 0x8e,
		0x11, 0xd4, 0xe4, 0x68, 0x0c, 0xad, 0x34, 0xf8, 0xcf, 0xe2, 0x57, 0xe6, 0xdc, 0x05, 0x9b, 0x0d,
		0xb9, 0x0b, 0xae, 0x74, 0x1e, 0x36, 0xd7, 0x94, 0x33, 0x5c, 0xfb, 0x31, 0xb3, 0x93, 0xca, 0x15,
		0xcd, 0x9f, 0x93, 0xc0, 0x69, 0x65, 0xcd, 0x58, 0x5c, 0xd0, 0x7d, 0x28, 0x3d, 0xad, 0xa5, 0xaf,
		0x36, 0x6a, 0x1b, 0xb4, 0xf8, 0x79, 0x71, 0x58, 0x1a, 0x2c, 0xaa, 0x6e, 0xd6, 0x2b, 0xee, 0xec,
		0xec, 0xec, 0x5c, 0x9b, 0xc6, 0xdf, 0x87, 0xc6, 0x1f, 0x65, 0xe3, 0xa0, 0xd3, 0x9e, 0xfb, 0xc3,
		0xcd, 0x8d, 0xd1, 0x69, 0xef, 0xfe, 0x28, 0xbf, 0x6f, 0x56, 0xc6, 0xbb, 0x3f, 0x3d, 0xff, 0x7d,
		0xfb, 0xe6, 0x66, 0x6f, 0xf7, 0x9f, 0x32, 0x4f, 0xfd, 0xb4, 0xfb, 0x34, 0x79, 0xb6, 0x98, 0x8f,
		0xa9, 0x4f, 0x82, 0xb5, 0x27, 0x8c, 0x9d, 0xfc, 0x02, 0x68, 0xa0, 0xcb, 0x36, 0xfa, 0x4a, 0xe8,
		0xf6, 0x60, 0x45, 0xd3, 0xf7, 0x5d, 0xcb, 0x0e, 0xea, 0xce, 0x35, 0xf5, 0x97, 0x58, 0xfa, 0x04,
		0xa2, 0xbd, 0x9d, 0xcf, 0xac, 0x67, 0x8e, 0xfa, 0xc1, 0x26, 0xd6, 0xe5, 0xd1, 0xc5, 0x6f, 0x47,
		0x17, 0xd8, 0x86, 0x55, 0x5f, 0x2c, 0x6c, 0xc3, 0x46, 0x1f, 0x80, 0x6d, 0xd8, 0x1c, 0x6c, 0xc3,
		0x32, 0x67, 0x34, 0x60, 0xde, 0xf4, 0xd8, 0x8c, 0x86, 0xdd, 0xd8, 0x3a, 0xe1, 0x98, 0x47, 0xce,
		0x68, 0x30, 0x99, 0x84, 0x4d, 0xea, 0x2a, 0x60, 0xdf, 0x8e, 0x3c, 0x9f, 0xd3, 0xfb, 0x8c, 0x70,
		0x5c, 0x7a, 0x4f, 0xd1, 0x33, 0xfb, 0x3e, 0xfa, 0x14, 0xc0, 0x51, 0xc0, 0x51, 0x6c, 0x99, 0xa3,
		0xb8, 0x75, 0xdd, 0x3e, 0x33, 0xb5, 0x38, 0x89, 0xca, 0x06, 0x19, 0xf4, 0xa1, 0xeb, 0x69, 0x30,
		0xe7, 0xc1, 0xa8, 0xf4, 0xc6, 0xbc, 0x52, 0xad, 0xc1, 0x94, 0xc3, 0x94, 0xc3, 0x94, 0x6f, 0x97,
		0x29, 0x9f, 0x58, 0x13, 0xc3, 0x19, 0x0d, 0x6e, 0xa5, 0x4f, 0x8d, 0xbe, 0x66, 0x02, 0xd0, 0x17,
		0x99, 0x7a, 0x70, 0xf4, 0x45, 0x4e, 0x48, 0xe7, 0x16, 0x97, 0x14, 0x7d, 0x91, 0x53, 0x5f, 0x56,
		0xe4, 0xaf, 0xf5, 0x03, 0xab, 0xc7, 0x7a, 0xcc, 0xd3, 0x80, 0xac, 0xd3, 0x71, 0x91, 0x81, 0x00,
		0xb6, 0x02, 0x5b, 0x81, 0xad, 0xc8, 0x40, 0x24, 0x65, 0xd0, 0x1f, 0x98, 0xe7, 0x53, 0x75, 0x3b,
		0x5c, 0x98, 0xff, 0xd9, 0xc0, 0xf4, 0x26, 0xbd, 0x0e, 0x73, 0x0e, 0x73, 0x0e, 0x73, 0xbe, 0x5d,
		0xe6, 0x7c, 0x64, 0x3b, 0x7c, 0x5f, 0x83, 0x31, 0x6f, 0x20, 0xff, 0x90, 0xcf, 0x60, 0xb5, 0x82,
		0xfc, 0xc3, 0xa6, 0xe5, 0x1f, 0xea, 0xc8, 0x3d, 0x6c, 0x6c, 0xee, 0x01, 0x5d, 0xbd, 0xd7, 0x36,
		0x7f, 0x0d, 0x7b, 0x95, 0x86, 0xbf, 0x66, 0xf1, 0x72, 0xfd, 0xcb, 0xe9, 0x1b, 0x86, 0xbf, 0xe6,
		0xf8, 0x72, 0x7d, 0xdc, 0x07, 0x9d, 0x68, 0xd4, 0x81, 0xce, 0x53, 0xe8, 0x3c, 0x15, 0x27, 0xb6,
		0x47, 0xe7, 0x29, 0x24, 0x1e, 0x90, 0x78, 0x40, 0xe2, 0x21, 0x8b, 0x89, 0x07, 0x74, 0x9e, 0x2a,
		0x90, 0xcf, 0x29, 0x3a, 0x4f, 0x25, 0x34, 0xe3, 0x2b, 0x66, 0x1e, 0x9d, 0xa7, 0x84, 0x3f, 0x08,
		0x9d, 0xa7, 0x5e, 0x5d, 0x06, 0x74, 0x9e, 0x4a, 0x29, 0x2d, 0x93, 0x40, 0x5e, 0xb1, 0x80, 0xce,
		0x53, 0xd9, 0x35, 0x4b, 0x68, 0xed, 0x83, 0xce, 0x53, 0x59, 0x37, 0xd4, 0x10, 0x4f, 0x74, 0x9e,
		0x4a, 0x28, 0x96, 0xd4, 0xf7, 0x9e, 0xe8, 0x3c, 0xa5, 0xdf, 0x7f, 0xa2, 0xf3, 0x54, 0x92, 0x39,
		0xc3, 0xb5, 0x1f, 0x83, 0xce, 0x53, 0x62, 0x4b, 0x8f, 0xce, 0x53, 0x19, 0x5f, 0x7c, 0x74, 0x9e,
		0x42, 0xe7, 0xa9, 0x14, 0xa6, 0x1e, 0x9d, 0xa7, 0xd2, 0xa3, 0x35, 0x9c, 0xdc, 0x59, 0x21, 0x2b,
		0xe8, 0x3c, 0xa5, 0xd9, 0xaf, 0x62, 0x1b, 0x16, 0xdb, 0xb0, 0xab, 0x3f, 0x00, 0xdb, 0xb0, 0xea,
		0xf2, 0x8a, 0xce, 0x53, 0xa9, 0x7a, 0x0f, 0x74, 0x9e, 0x82, 0xa3, 0x80, 0xa3, 0x80, 0xa3, 0xc0,
		0xb9, 0xcf, 0x0d, 0x31, 0xe8, 0x6e, 0xaf, 0xe7, 0x33, 0x0d, 0x06, 0x3d, 0x1c, 0x17, 0x86, 0x17,
		0x86, 0x17, 0x86, 0x77, 0xab, 0x0c, 0xef, 0xc8, 0x76, 0x78, 0xb3, 0xae, 0xc1, 0xee, 0xee, 0xe3,
		0x88, 0x26, 0xf1, 0xe0, 0x68, 0x11, 0x95, 0x90, 0xba, 0x2d, 0x2e, 0xe9, 0x06, 0x1c, 0xd1, 0xac,
		0xec, 0xd7, 0xeb, 0xcd, 0x56, 0xbd, 0x5e, 0x6e, 0xd5, 0x5a, 0xe5, 0x83, 0x46, 0xa3, 0xd2, 0xac,
		0xa0, 0x63, 0x14, 0xf9, 0x68, 0x1b, 0xd5, 0x31, 0xca, 0xed, 0xf7, 0x0d, 0xdb, 0xe1, 0xcc, 0x7b,
		0x30, 0xfb, 0x3a, 0x7a, 0x9d, 0xce, 0x0f, 0x0f, 0xec, 0x04, 0x76, 0x02, 0x3b, 0xb7, 0x0e, 0x3b,
		0x6b, 0x55, 0x0d, 0xd8, 0xd9, 0x02, 0x76, 0x02, 0x3b, 0x81, 0x9d, 0x99, 0x58, 0xd2, 0x7a, 0xf5,
		0xa0, 0x7e, 0xd0, 0x6c, 0x55, 0x0f, 0x00, 0x9b, 0x80, 0xcd, 0x57, 0x61, 0x13, 0xfd, 0xf4, 0x01,
		0xac, 0x00, 0x56, 0x00, 0x6b, 0x76, 0x81, 0x15, 0xfd, 0xf4, 0x41, 0xad, 0xa0, 0xd6, 0x6d, 0xa0,
		0x56, 0xf4, 0xd3, 0x07, 0xb0, 0xbe, 0x05, 0xac, 0xe8, 0xa7, 0x0f, 0x6c, 0x05, 0xb6, 0x02, 0x5b,
		0x51, 0x57, 0xb5, 0x19, 0x06, 0xdd, 0x73, 0x5d, 0x6e, 0x74, 0x59, 0xdf, 0x7c, 0xa4, 0x37, 0xea,
		0x73, 0x63, 0xc3, 0x00, 0xc3, 0x00, 0xc3, 0x00, 0x6f, 0x95, 0x01, 0xc6, 0x46, 0x17, 0x52, 0x06,
		0x48, 0x19, 0x6c, 0x78, 0xca, 0x00, 0x1b, 0x5d, 0x99, 0xcf, 0x1b, 0x10, 0x39, 0x0a, 0xf6, 0x9d,
		0x7b, 0xa6, 0x31, 0x72, 0x7c, 0x6e, 0xde, 0xf6, 0x89, 0x5d, 0x46, 0x10, 0xfc, 0x33, 0xc7, 0xca,
		0x55, 0x53, 0xd0, 0x8b, 0x2f, 0x9f, 0x0a, 0x8d, 0x83, 0x72, 0xa3, 0x60, 0x14, 0x4e, 0x19, 0xff,
		0xe6, 0x7a, 0x7f, 0x15, 0xae, 0xec, 0x01, 0x2b, 0x9c, 0x7b, 0x2e, 0x77, 0x2d, 0xb7, 0x5f, 0xf8,
		0x6d, 0x7a, 0xa3, 0x54, 0xa1, 0xfe, 0xe1, 0xf9, 0xef, 0x4c, 0xa7, 0x7b, 0xe3, 0x1c, 0xf6, 0xef,
		0x5c, 0xcf, 0xe6, 0xf7, 0x03, 0xbf, 0x70, 0x39, 0x64, 0x96, 0xdd, 0xb3, 0x2d, 0xea, 0x83, 0x82,
		0xba, 0x19, 0x6f, 0x15, 0xeb, 0x3d, 0xaf, 0xa2, 0x26, 0x5b, 0xa0, 0x1b, 0xfb, 0x56, 0xe2, 0x9f,
		0x86, 0x65, 0x86, 0x05, 0xcb, 0x6d, 0xa0, 0x6c, 0xfb, 0x43, 0x5d, 0x17, 0xd0, 0xbd, 0xfc, 0x00,
		0x84, 0xcc, 0x08, 0x99, 0x11, 0x32, 0x6f, 0x5d, 0xc8, 0x8c, 0x23, 0x49, 0x08, 0x99, 0x11, 0x32,
		0x6f, 0x70, 0xc8, 0x8c, 0x23, 0x49, 0x08, 0x9e, 0x11, 0x3c, 0x23, 0x78, 0x46, 0xf0, 0x8c, 0xe0,
		0x79, 0x5b, 0x82, 0x67, 0x9f, 0x7b, 0x26, 0x9f, 0x76, 0x99, 0xa2, 0x0d, 0x9a, 0x67, 0x03, 0x23,
		0x58, 0x46, 0xb0, 0x8c, 0x60, 0x79, 0xeb, 0x82, 0x65, 0xdc, 0xb0, 0x8e, 0x58, 0x19, 0xb1, 0xf2,
		0xe6, 0xc6, 0xca, 0xd5, 0x06, 0x42, 0x63, 0x84, 0xc6, 0x08, 0x8d, 0x11, 0x1a, 0x23, 0x34, 0x46,
		0x68, 0xbc, 0x91, 0xa1, 0xf1, 0x83, 0xae, 0xfd, 0xe4, 0x07, 0xda, 0x7d, 0xe4, 0xb9, 0x33, 0x35,
		0x75, 0x84, 0xdb, 0x08, 0xb7, 0x11, 0x6e, 0x23, 0xdc, 0x46, 0xb8, 0xbd, 0xc5, 0xe1, 0x76, 0x05,
		0xe1, 0xf6, 0xa6, 0x85, 0xdb, 0x75, 0x04, 0xdb, 0x1b, 0x8b, 0xaa, 0xef, 0x52, 0x54, 0x98, 0xe2,
		0xa1, 0xe3, 0xb8, 0x7c, 0x1a, 0xa4, 0x50, 0xe8, 0x48, 0xd1, 0xb7, 0xee, 0xd9, 0xc0, 0x1c, 0x9a,
		0xc1, 0xfd, 0x9b, 0xc5, 0x92, 0x3b, 0x64, 0x8e, 0x15, 0xc0, 0x9f, 0x61, 0x5a, 0x16, 0xf3, 0x7d,
		0x63, 0xe8, 0xda, 0x0e, 0xf7, 0x4b, 0xeb, 0xff, 0x54, 0xf2, 0x1f, 0x7d, 0xce, 0x06, 0x25, 0x87,
		0x0f, 0x4b, 0x3e, 0xf3, 0x26, 0xb0, 0x1c, 0xfe, 0x5a, 0xf2, 0xb9, 0xc9, 0x29, 0x62, 0xcd, 0xa2,
		0xcf, 0xbd, 0x91, 0xc5, 0x9d, 0xd0, 0x81, 0x9e, 0x45, 0x2f, 0x79, 0x18, 0xbc, 0xc7, 0x79, 0xf0,
		0x52, 0x9d, 0x75, 0x7f, 0xe8, 0x5c, 0x06, 0x2f, 0xd8, 0x39, 0xe5, 0xc3, 0xce, 0xe5, 0xf4, 0x05,
		0xc3, 0x5f, 0x3b, 0x97, 0xc1, 0x0b, 0xbe, 0x4b, 0x47, 0x1c, 0xe4, 0x9e, 0x94, 0x14, 0xa0, 0x09,
		0x7b, 0x06, 0x57, 0x75, 0x29, 0x5d, 0xb5, 0x5e, 0xfc, 0x6a, 0xfb, 0xfc, 0x90, 0x73, 0xb5, 0xbe,
		0x05, 0x13, 0xa7, 0x7d, 0xd4, 0x67, 0x13, 0x8e, 0xf4, 0xd5, 0x6c, 0xf1, 0xc4, 0x57, 0xcc, 0x8d,
		0x44, 0x5b, 0x10, 0x54, 0x3c, 0xf3, 0xba, 0xcc, 0x63, 0xdd, 0x8f, 0x93, 0x89, 0x73, 0x46, 0xfd,
		0x7e, 0xa2, 0xeb, 0x45, 0xa4, 0xe8, 0x5a, 0x15, 0x5c, 0x41, 0xb5, 0x75, 0xa9, 0xb4, 0x9c, 0x32,
		0x8b, 0xab, 0xa2, 0xd8, 0x13, 0x82, 0x42, 0xa0, 0xba, 0xf8, 0x7a, 0x16, 0x5d, 0x62, 0xb5, 0xc9,
		0x57, 0x59, 0x6c, 0x79, 0xe3, 0x2f, 0x92, 0xc0, 0x02, 0x15, 0xa7, 0x5e, 0x4d, 0x74, 0x5d, 0xe6,
		0x0a, 0x2d, 0xc4, 0x9d, 0x62, 0xd4, 0x30, 0x41, 0xf0, 0xb1, 0x28, 0x8f, 0x53, 0x15, 0x7c, 0x50,
		0x21, 0x5f, 0xa3, 0x9e, 0x97, 0x51, 0xcd, 0xbf, 0x90, 0xe5, 0x59, 0xc8, 0xf2, 0x29, 0x24, 0x79,
		0x13, 0xbd, 0x26, 0xe7, 0xb3, 0x2d, 0xe7, 0xd4, 0x8b, 0xe6, 0x88, 0xdf, 0x1b, 0x03, 0xdb, 0x1f,
		0x98, 0xdc, 0xba, 0x97, 0x5f, 0xb3, 0xe8, 0x2e, 0xd1, 0x85, 0xe1, 0x64, 0x61, 0x47, 0x29, 0xca,
		0x53, 0x4e, 0x7f, 0x52, 0xa4, 0x3b, 0xe9, 0xd2, 0x9b, 0x54, 0xe9, 0x4c, 0xf2, 0xf4, 0x25, 0x79,
		0xba, 0x92, 0x34, 0x3d, 0x99, 0x2c, 0x9e, 0x2b, 0xa7, 0x1b, 0x23, 0x79, 0xb1, 0xdc, 0x91, 0xc3,
		0x99, 0xa7, 0x74, 0xfa, 0x85, 0xe0, 0xb4, 0x0b, 0x51, 0x0a, 0x91, 0x20, 0xc4, 0xa5, 0x4c, 0x11,
		0x52, 0x6f, 0xb4, 0x10, 0x57, 0xdc, 0xe8, 0xc8, 0x0f, 0x51, 0x6c, 0xcd, 0x51, 0xa6, 0xf4, 0x74,
		0x2d, 0x81, 0xbe, 0xd3, 0x24, 0x5a, 0x56, 0x25, 0xa5, 0xa4, 0x45, 0x3b, 0xa9, 0xf8, 0x4a, 0x02,
		0x1b, 0x99, 0x63, 0xde, 0xf6, 0x99, 0xe1, 0xf0, 0xa1, 0x31, 0xa1, 0x08, 0x75, 0x16, 0x79, 0x39,
		0xa0, 0xa4, 0x6d, 0x27, 0x6a, 0xa2, 0x08, 0xaa, 0x01, 0xd5, 0x6c, 0x2d, 0xd5, 0xa8, 0x37, 0x21,
		0x54, 0x6c, 0x3a, 0x98, 0xa4, 0x09, 0xeb, 0x52, 0x99, 0xae, 0x2e, 0x4c, 0x16, 0x4c, 0x16, 0x4c,
		0x16, 0x4c, 0x96, 0x46, 0x93, 0x35, 0xa1, 0x23, 0x3f, 0x10, 0x6c, 0x63, 0xb6, 0xb9, 0xa4, 0x6c,
		0xbd, 0x56, 0x8c, 0x09, 0x03, 0x04, 0x03, 0x04, 0x03, 0x24, 0x24, 0x2f, 0xf6, 0x50, 0x51, 0x7b,
		0x16, 0x6c, 0xd0, 0x81, 0xc2, 0x18, 0xe1, 0x77, 0x4a, 0x3d, 0x15, 0xf4, 0x3c, 0x33, 0x0f, 0x75,
		0x82, 0xb9, 0x59, 0x9a, 0x23, 0x82, 0xee, 0x30, 0xc5, 0x73, 0x93, 0x73, 0xe6, 0x39, 0x64, 0xc5,
		0x77, 0xc5, 0x9d, 0xeb, 0xb2, 0x71, 0xd0, 0x7e, 0xba, 0xae, 0x18, 0x07, 0xed, 0xe9, 0x6f, 0x2b,
		0xc1, 0x2f, 0x3f, 0xaa, 0xe3, 0xa7, 0xea, 0x75, 0xd9, 0xa8, 0x87, 0x7f, 0x5b, 0x6d, 0x5c, 0x97,
		0x8d, 0x46, 0x7b, 0x77, 0xe7, 0xe6, 0x66, 0x4f, 0xf4, 0x99, 0xdd, 0x1f, 0xb5, 0xb1, 0x7a, 0x25,
		0x68, 0x9b, 0x62, 0xfa, 0xce, 0x2e, 0x8f, 0xff, 0x4d, 0x3e, 0x87, 0x7f, 0xee, 0x24, 0x35, 0x8b,
		0xbb, 0xff, 0x20, 0x98, 0xc7, 0x34, 0x4b, 0x94, 0x68, 0xd5, 0xb4, 0xb9, 0x3d, 0x6a, 0x1a, 0x48,
		0x8b, 0x69, 0xf4, 0x0e, 0x8d, 0x2f, 0xed, 0x1f, 0x95, 0xf7, 0xf5, 0xf1, 0x87, 0xdd, 0x1f, 0xad,
		0xf1, 0xcb, 0xbf, 0x7c, 0x5a, 0xf5, 0x63, 0x95, 0xf7, 0xad, 0xf1, 0x87, 0x35, 0xff, 0xd2, 0x1c,
		0x7f, 0x88, 0x39, 0x46, 0x63, 0xbc, 0xb3, 0xf4, 0xa3, 0x93, 0xbf, 0xaf, 0xae, 0x7b, 0xa0, 0xbe,
		0xe6, 0x81, 0xda, 0xba, 0x07, 0x6a, 0x6b, 0x1e, 0x58, 0xfb, 0x4a, 0xd5, 0x35, 0x0f, 0x34, 0xc6,
		0x4f, 0x4b, 0x3f, 0xbf, 0xb3, 0xfa, 0x47, 0x9b, 0xe3, 0xdd, 0xa7, 0x75, 0xff, 0xd6, 0x1a, 0x3f,
		0x7d, 0xd8, 0xdd, 0xdd, 0x02, 0xc3, 0x05, 0xb1, 0x4a, 0x5e, 0xac, 0xd2, 0x37, 0xe4, 0xd9, 0xcf,
		0xf2, 0x6f, 0x53, 0x15, 0x95, 0x64, 0x31, 0x2c, 0x61, 0x0d, 0x95, 0x78, 0xb5, 0xab, 0x40, 0x05,
		0xd5, 0x3b, 0xc2, 0x25, 0x94, 0x5d, 0x3a, 0xda, 0x25, 0x2b, 0x0a, 0x15, 0x85, 0xd1, 0x2c, 0x52,
		0xbc, 0xe5, 0x79, 0x7b, 0xb2, 0x63, 0x4c, 0x74, 0x71, 0xe8, 0xb9, 0x93, 0x57, 0x60, 0xf1, 0x13,
		0x36, 0x73, 0xb7, 0x8c, 0xcd, 0x1e, 0x8d, 0xb9, 0xa0, 0x62, 0x05, 0x6c, 0xc2, 0x79, 0x17, 0x99,
		0x3c, 0xcb, 0x7c, 0x5e, 0x65, 0xf2, 0x7d, 0x44, 0x96, 0x5b, 0x32, 0x91, 0xa2, 0x9c, 0x38, 0x51,
		0x4e, 0x94, 0xbc, 0x4c, 0x8c, 0x04, 0x5f, 0x3c, 0x25, 0x25, 0x17, 0x2d, 0x39, 0x9b, 0x49, 0x9d,
		0x7c, 0xed, 0xe5, 0x6c, 0x80, 0xed, 0xa8, 0xbe, 0x14, 0x14, 0x6a, 0xaa, 0x2c, 0x61, 0xf6, 0xcb,
		0x2f, 0xc5, 0x84, 0x3e, 0x19, 0x58, 0x91, 0xae, 0xbf, 0x1c, 0xda, 0x04, 0xdb, 0x85, 0x93, 0x41,
		0x90, 0x61, 0x57, 0x50, 0x1a, 0xa4, 0xd8, 0xe5, 0x94, 0x2a, 0xef, 0x39, 0xf6, 0x3e, 0x33, 0x7b,
		0x1e, 0xeb, 0x51, 0x24, 0xd8, 0x15, 0x6e, 0xe3, 0x2a, 0x9e, 0x87, 0xc4, 0xbb, 0xb7, 0x37, 0x8d,
		0x33, 0x4a, 0x13, 0x85, 0xce, 0xf0, 0xa6, 0xa1, 0xdc, 0x19, 0x8a, 0xa5, 0xd9, 0x57, 0x39, 0x60,
		0x28, 0xe9, 0xd5, 0x95, 0xbd, 0x3b, 0x0c, 0x17, 0x0c, 0x97, 0xb4, 0xe1, 0x92, 0xa5, 0x84, 0x68,
		0x00, 0xd3, 0xbb, 0xf3, 0xd5, 0xd7, 0x38, 0x3a, 0xac, 0x31, 0x19, 0x4d, 0x71, 0x35, 0x68, 0xca,
		0x79, 0xc9, 0x5a, 0xd6, 0x50, 0xb6, 0xaa, 0x21, 0x54, 0x4f, 0x6a, 0x35, 0xd5, 0xa6, 0xae, 0xda,
		0xd4, 0x56, 0x8f, 0xfa, 0xaa, 0xe7, 0x4a, 0x0b, 0x04, 0xa7, 0xfa, 0xc9, 0x9a, 0xcd, 0xcc, 0xb7,
		0x73, 0xb6, 0x9d, 0x3b, 0xd2, 0x4d, 0xb3, 0x54, 0x67, 0x88, 0xe4, 0xe0, 0x79, 0x34, 0x1a, 0xd9,
		0x01, 0xf4, 0xe7, 0x11, 0x35, 0x1e, 0x44, 0x8f, 0x3e, 0x84, 0xe4, 0x40, 0xba, 0xba, 0xc4, 0x2b,
		0xac, 0x65, 0xd1, 0x1a, 0x8e, 0x8c, 0x91, 0x6f, 0xde, 0x31, 0x63, 0x9a, 0x67, 0xa5, 0xf3, 0x45,
		0x4b, 0x23, 0xc3, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0x65, 0xcc, 0x2f, 0x51, 0x9c, 0x4e, 0x7c, 0xa9,
		0xa2, 0x14, 0xe5, 0x1c, 0xb4, 0x0d, 0xcf, 0x08, 0xbb, 0xc6, 0xe9, 0x68, 0x70, 0xa6, 0xa9, 0x0b,
		0x96, 0xae, 0xfe, 0xe1, 0x3a, 0xbb, 0x5e, 0x11, 0x36, 0x30, 0xd3, 0xd2, 0xb8, 0x4c, 0xf7, 0x52,
		0xe9, 0xbf, 0x43, 0x4b, 0xeb, 0xea, 0x65, 0xa4, 0x27, 0x58, 0x3b, 0xd7, 0x24, 0x36, 0xf2, 0x99,
		0xa7, 0x83, 0xc3, 0x82, 0x71, 0x41, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0x06, 0x0a,
		0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xcb, 0x14, 0xc6, 0xed, 0xbe, 0xfd, 0x37, 0x4d, 0x53, 0xd7,
		0x45, 0x0c, 0x9b, 0x1b, 0x18, 0x1c, 0x06, 0x0e, 0x03, 0x87, 0x65, 0x8c, 0xc3, 0x86, 0xcc, 0xb3,
		0x98, 0xc3, 0xcd, 0x3b, 0x46, 0x08, 0x62, 0x0d, 0x80, 0x18, 0x40, 0x0c, 0x20, 0x26, 0x07, 0x62,
		0xe5, 0x32, 0xb8, 0x6b, 0x1b, 0xb8, 0x6b, 0xc0, 0x06, 0xae, 0xf7, 0x38, 0x4d, 0x54, 0xd1, 0x41,
		0xd7, 0xc2, 0xa8, 0x20, 0x2e, 0x10, 0x17, 0x88, 0x2b, 0x63, 0xc4, 0x35, 0xb2, 0x1d, 0x8e, 0xb4,
		0x17, 0x68, 0x0b, 0xb4, 0x85, 0xb4, 0x17, 0xf0, 0x2b, 0x75, 0xfc, 0xd2, 0x91, 0xf9, 0x5a, 0x31,
		0x36, 0x50, 0x0c, 0x28, 0x06, 0x14, 0x43, 0xf2, 0x0b, 0x38, 0x06, 0x1c, 0x03, 0x8e, 0x21, 0xf9,
		0xb5, 0xe5, 0xf4, 0x15, 0xb6, 0x29, 0x21, 0xe2, 0xad, 0x60, 0x34, 0x10, 0x16, 0x08, 0x0b, 0x84,
		0x95, 0x31, 0xc2, 0xca, 0xdc, 0x21, 0xb0, 0x54, 0xac, 0x9d, 0x4a, 0x83, 0x8c, 0x65, 0x68, 0x95,
		0x6e, 0x94, 0x01, 0x5b, 0x07, 0x5b, 0x07, 0x5b, 0xa7, 0xcd, 0xd6, 0x21, 0xb1, 0x8f, 0x48, 0x12,
		0x91, 0x64, 0x56, 0x22, 0x49, 0x24, 0xf6, 0xb7, 0x34, 0xb4, 0xf4, 0xb9, 0xe9, 0x71, 0x83, 0xdb,
		0x94, 0x01, 0xe6, 0xdc, 0x98, 0x40, 0x2f, 0xa0, 0x17, 0xd0, 0x2b, 0x63, 0xe8, 0x35, 0xd1, 0x4c,
		0x6e, 0x5b, 0x7f, 0xf9, 0x99, 0xe3, 0xaf, 0x5f, 0x9d, 0xa9, 0x6f, 0x28, 0x3a, 0xa6, 0xe3, 0xfa,
		0xcc, 0x72, 0x9d, 0x2e, 0xc9, 0x45, 0x02, 0xe0, 0x3a, 0x70, 0x1d, 0xb8, 0x0e, 0x5c, 0x97, 0x33,
		0xae, 0x4b, 0xb4, 0x55, 0x9d, 0x62, 0xf7, 0xfd, 0x67, 0xa2, 0x24, 0x6b, 0xe9, 0x1e, 0x35, 0x2d,
		0x9f, 0xfd, 0xae, 0xa4, 0xd2, 0x3f, 0xb2, 0x40, 0xd6, 0xf6, 0xfd, 0x7c, 0xf6, 0x5e, 0xb3, 0xdf,
		0xc9, 0x74, 0xea, 0x97, 0x5f, 0x64, 0xbd, 0x7d, 0x8d, 0x7f, 0x61, 0x8f, 0x72, 0x79, 0x53, 0xb5,
		0x96, 0x5f, 0xea, 0x2d, 0xbe, 0xb4, 0xb4, 0xf4, 0x52, 0x6b, 0xe1, 0x95, 0xdf, 0x0b, 0x30, 0x96,
		0x54, 0x2f, 0xb5, 0x8b, 0x30, 0x96, 0x94, 0x0d, 0x17, 0x62, 0x08, 0x2e, 0x61, 0xe2, 0xd7, 0x62,
		0x44, 0x4b, 0x96, 0xe4, 0xe5, 0x18, 0xbe, 0x7f, 0x6f, 0xf8, 0xcc, 0x7b, 0x10, 0x68, 0x8d, 0xf2,
		0x9c, 0xb0, 0x78, 0x7e, 0x76, 0x33, 0xae, 0xc7, 0xf0, 0x1f, 0x7d, 0x83, 0x33, 0x6f, 0xb0, 0x95,
		0x57, 0x64, 0x44, 0x5f, 0x3e, 0x2f, 0xd7, 0x64, 0x58, 0x33, 0xe9, 0x90, 0xbc, 0x25, 0x23, 0x7c,
		0x3e, 0xe1, 0x4b, 0x32, 0xca, 0xe9, 0x5c, 0x92, 0x21, 0x21, 0xda, 0x54, 0xf9, 0xb1, 0xec, 0x5f,
		0x94, 0x21, 0x2e, 0xfa, 0xc9, 0x40, 0xa5, 0xf4, 0x65, 0x19, 0xd3, 0x6b, 0xf1, 0xa9, 0xae, 0xd7,
		0x27, 0xb8, 0x5d, 0x7f, 0xb2, 0x56, 0xb8, 0x79, 0x43, 0x55, 0x13, 0xa9, 0x33, 0xd6, 0xb9, 0xbc,
		0xe0, 0x5a, 0x52, 0x53, 0xd3, 0xc9, 0x0e, 0xe0, 0x9a, 0x7d, 0xc1, 0x77, 0x1c, 0x7a, 0x2e, 0x77,
		0x2d, 0xb7, 0x6f, 0x3c, 0x30, 0xcf, 0x57, 0x49, 0xaa, 0xcc, 0x5f, 0x86, 0xb5, 0x38, 0xa2, 0xba,
		0x35, 0xfb, 0xad, 0x0a, 0x5b, 0x06, 0x5b, 0x06, 0x5b, 0x26, 0x8f, 0x15, 0xa3, 0x01, 0xf3, 0x54,
		0xcf, 0xac, 0x45, 0xf6, 0xac, 0xae, 0x30, 0xc6, 0x91, 0x33, 0x0a, 0x9a, 0xb3, 0x8f, 0x33, 0x6c,
		0x13, 0x3d, 0x93, 0x33, 0xa3, 0x6f, 0x0f, 0x6c, 0xae, 0x6e, 0x0d, 0xe7, 0xc6, 0x82, 0x09, 0x83,
		0x09, 0x83, 0x09, 0x93, 0x94, 0x9c, 0x91, 0xed, 0xf0, 0x4a, 0x93, 0xc0, 0x7a, 0x35, 0x15, 0x86,
		0xa0, 0xd9, 0x9f, 0xa7, 0xb9, 0x68, 0x84, 0xb0, 0x7c, 0x86, 0x74, 0x73, 0x97, 0x7a, 0xff, 0x5d,
		0xc7, 0xce, 0xed, 0x98, 0xe6, 0x66, 0x96, 0xcc, 0x2f, 0x41, 0xb3, 0xd1, 0xa8, 0x35, 0x32, 0xbc,
		0x0c, 0x9b, 0x7e, 0x0d, 0xbd, 0xcc, 0x66, 0x14, 0xf3, 0x27, 0x41, 0x13, 0x15, 0x7e, 0x2c, 0x0e,
		0x07, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0xb2,
		0x72, 0x9a, 0xb9, 0x3d, 0x60, 0xee, 0x88, 0x80, 0x3d, 0x66, 0x03, 0x81, 0x3a, 0x40, 0x1d, 0xa0,
		0x0e, 0x50, 0x07, 0xa8, 0x03, 0xd4, 0x01, 0xea, 0xd8, 0x06, 0xea, 0xd8, 0x92, 0xea, 0xe3, 0xe7,
		0x7a, 0xcc, 0x92, 0x54, 0x6d, 0x5b, 0x81, 0xac, 0x94, 0xf5, 0xd2, 0xbf, 0xbf, 0x0c, 0x5e, 0xa4,
		0x13, 0x62, 0x8f, 0xae, 0xe2, 0x63, 0xa1, 0x1a, 0x5d, 0x93, 0x33, 0xf9, 0x6a, 0x41, 0x99, 0x33,
		0x14, 0xca, 0xc5, 0x82, 0x55, 0x14, 0x0b, 0xa2, 0x58, 0x30, 0xe6, 0x6b, 0xa2, 0x58, 0x10, 0x51,
		0x1a, 0xa2, 0x34, 0x44, 0x69, 0x28, 0x16, 0x54, 0x98, 0x38, 0x14, 0x0b, 0xc2, 0x96, 0xc1, 0x96,
		0x65, 0xca, 0x96, 0xa1, 0x58, 0x50, 0xe8, 0x1d, 0x51, 0x2c, 0x08, 0x13, 0x06, 0x13, 0x96, 0x2d,
		0x13, 0x86, 0xa4, 0xf9, 0xfc, 0x8b, 0x20, 0x69, 0xae, 0xf4, 0x3f, 0x24, 0xcd, 0xb3, 0xb1, 0x0c,
		0xd8, 0xaa, 0x5f, 0x9a, 0x66, 0x14, 0x0b, 0x82, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x04, 0x02, 0x02, 0x49, 0x9e, 0x40, 0x50, 0x2c, 0x08, 0xea, 0x00, 0x75, 0x80, 0x3a, 0x40,
		0x1d, 0xa0, 0x0e, 0x50, 0x07, 0xa8, 0x03, 0xc5, 0x82, 0x31, 0x8a, 0x05, 0x65, 0xdb, 0x03, 0x53,
		0xd7, 0x0a, 0x4a, 0xb4, 0x03, 0xde, 0xde, 0x3e, 0xa5, 0xc2, 0xcd, 0x37, 0x35, 0xac, 0x58, 0xa2,
		0x8d, 0x4a, 0x85, 0xca, 0x37, 0xa5, 0xca, 0x36, 0xa5, 0xdb, 0x93, 0x56, 0x13, 0x6b, 0x4f, 0xba,
		0xad, 0x9d, 0x49, 0x73, 0xd3, 0x94, 0xf4, 0xd6, 0x75, 0x25, 0xef, 0x05, 0x9a, 0x2f, 0xde, 0x92,
		0xba, 0x06, 0x48, 0x12, 0x48, 0xb2, 0xd0, 0x9a, 0x14, 0x85, 0xc6, 0xaa, 0x62, 0x9f, 0x0c, 0xbe,
		0x48, 0x87, 0x86, 0x44, 0x97, 0xe8, 0x28, 0x5c, 0x9a, 0x43, 0x75, 0x49, 0x8e, 0x62, 0x3c, 0xa9,
		0x10, 0x55, 0x53, 0xc4, 0x8f, 0x54, 0x57, 0x83, 0x11, 0xc5, 0x8b, 0x94, 0x01, 0x8a, 0xca, 0x75,
		0x6e, 0x14, 0x71, 0x21, 0xf5, 0xd4, 0xd2, 0x5f, 0x42, 0x43, 0x3a, 0xdb, 0x09, 0x85, 0x63, 0xed,
		0x0c, 0x9c, 0x1c, 0xb2, 0x46, 0x9e, 0xc7, 0x1c, 0x6e, 0x74, 0x4d, 0xce, 0xd4, 0x5c, 0xfb, 0xd2,
		0x48, 0xf0, 0xf0, 0xf0, 0xf0, 0x1b, 0xe6, 0xe1, 0x27, 0xb2, 0x6d, 0x98, 0x4e, 0x57, 0xf6, 0x26,
		0xcb, 0xe7, 0x4b, 0xd8, 0x25, 0x9e, 0x3d, 0x37, 0x39, 0x67, 0x9e, 0x23, 0xed, 0x9e, 0x8b, 0xd7,
		0x65, 0xe3, 0xa0, 0xfd, 0xa3, 0x3e, 0xbe, 0xb9, 0x31, 0x76, 0xca, 0xd7, 0x15, 0xe3, 0xa0, 0xfd,
		0x54, 0xb9, 0x2e, 0x1b, 0xd5, 0xf6, 0xee, 0xdc, 0xdf, 0x5c, 0x57, 0xaa, 0xed, 0xe0, 0x07, 0x9f,
		0x6a, 0xd7, 0xe5, 0x4a, 0x7b, 0xf7, 0xfa, 0x8a, 0xb7, 0x77, 0xca, 0xd3, 0xbf, 0xa9, 0x4c, 0x7f,
		0xa9, 0x5e, 0x97, 0x8d, 0x5a, 0x7b, 0xf7, 0xc3, 0xec, 0xaf, 0xaf, 0x2b, 0x46, 0x63, 0xfa, 0xcc,
		0xaa, 0xbf, 0x7b, 0x6a, 0x96, 0x77, 0x77, 0x6e, 0x6e, 0xf6, 0x82, 0x3f, 0xfc, 0x9f, 0xdd, 0x9f,
		0x76, 0xae, 0xff, 0xf8, 0xbb, 0xfd, 0xb4, 0x73, 0xfd, 0x7f, 0x0c, 0x81, 0x71, 0x77, 0x77, 0xc5,
		0x85, 0xa9, 0x2d, 0x33, 0xc7, 0x67, 0x97, 0xc7, 0xff, 0x56, 0x9e, 0xe8, 0x3f, 0x77, 0x72, 0x3d,
		0xd5, 0xbb, 0xff, 0x28, 0xe6, 0xd2, 0x97, 0x75, 0xdd, 0x81, 0x69, 0x3b, 0x46, 0x98, 0x01, 0x92,
		0x74, 0x63, 0xf3, 0x83, 0xc0, 0x83, 0xc1, 0x83, 0x6d, 0x9a, 0x07, 0x93, 0x16, 0x6f, 0x65, 0xff,
		0xf5, 0x95, 0x39, 0x77, 0x41, 0x6e, 0x18, 0xd1, 0xa5, 0xf8, 0xb9, 0x79, 0x44, 0x97, 0xf1, 0xa7,
		0xb6, 0xda, 0xa8, 0x6d, 0x61, 0x30, 0x99, 0x06, 0x51, 0xee, 0xec, 0xec, 0xec, 0x5c, 0x9b, 0xc6,
		0xdf, 0x87, 0xc6, 0x1f, 0x65, 0xe3, 0xa0, 0xd3, 0x9e, 0xfb, 0xc3, 0xcd, 0x8d, 0xd1, 0x69, 0xef,
		0xfe, 0x28, 0xbf, 0x6f, 0x56, 0xc6, 0xbb, 0x3f, 0x3d, 0xff, 0x7d, 0xfb, 0xe6, 0x66, 0x6f, 0xf7,
		0x9f, 0x32, 0x4f, 0xfd, 0xb4, 0xfb, 0x34, 0x79, 0x36, 0x5f, 0x20, 0x98, 0xc2, 0x04, 0xe5, 0x94,
		0xde, 0xee, 0x5d, 0x9f, 0xab, 0xa1, 0x5b, 0x34, 0x02, 0xb8, 0x0d, 0xdc, 0x06, 0x6e, 0x03, 0xb7,
		0x81, 0xdb, 0xc0, 0x6d, 0xe0, 0x36, 0x70, 0x1b, 0xb8, 0x4d, 0x23, 0xb7, 0xf5, 0xdd, 0x3b, 0xdb,
		0x31, 0x6e, 0x4d, 0xc7, 0x61, 0x9e, 0x3c, 0xbb, 0x2d, 0x8c, 0x02, 0x7e, 0x03, 0xbf, 0x6d, 0x18,
		0xbf, 0xf9, 0xdc, 0xb3, 0x9d, 0x3b, 0x25, 0x74, 0xcb, 0x80, 0xae, 0x0f, 0x5c, 0xde, 0x55, 0x56,
		0xf5, 0xf9, 0x41, 0xa0, 0xe9, 0xd0, 0x74, 0x68, 0x7a, 0x52, 0x9a, 0xbe, 0x69, 0x65, 0xe2, 0x82,
		0xb5, 0xfd, 0x44, 0x15, 0xe2, 0xf1, 0x2b, 0xf9, 0x69, 0xaa, 0xc3, 0x39, 0xeb, 0x3b, 0x8c, 0xcf,
		0x0a, 0xe2, 0x85, 0xab, 0xc4, 0x17, 0x1f, 0xd7, 0x5c, 0x2d, 0x5e, 0x4e, 0xac, 0x5a, 0x5c, 0xf4,
		0xcc, 0xe6, 0x46, 0x95, 0x8c, 0x0b, 0x9e, 0xb9, 0x4c, 0xb9, 0x6e, 0xdc, 0x9a, 0x49, 0x87, 0x6c,
		0x65, 0x99, 0x4c, 0xc3, 0x6f, 0xe5, 0xfe, 0xd4, 0x65, 0xf4, 0xa7, 0x46, 0x7f, 0xea, 0x98, 0xaf,
		0xb9, 0x39, 0xfd, 0xa9, 0x7b, 0x66, 0xdf, 0x47, 0x83, 0x6a, 0x74, 0x06, 0x48, 0x51, 0x55, 0x15,
		0x33, 0xb0, 0x68, 0x50, 0x8d, 0x66, 0xac, 0x30, 0x3d, 0x30, 0x3d, 0x68, 0x4a, 0xa2, 0xa0, 0x47,
		0x68, 0x4a, 0x42, 0x6b, 0x60, 0x96, 0x86, 0x43, 0x53, 0x92, 0xcc, 0x2c, 0x01, 0x9a, 0x92, 0xac,
		0xfc, 0x1f, 0x9a, 0xb1, 0x82, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02,
		0x02, 0x01, 0x81, 0xcc, 0x4f, 0x33, 0x9a, 0xb1, 0x82, 0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0x50, 0x07,
		0xa8, 0x03, 0xd4, 0x01, 0xea, 0x40, 0x33, 0xd6, 0x75, 0x55, 0x5a, 0x0b, 0xf5, 0x47, 0x69, 0x5f,
		0xde, 0x7e, 0x15, 0xbc, 0x0c, 0xee, 0x6f, 0xc7, 0xfd, 0xed, 0x69, 0x12, 0x21, 0xea, 0x63, 0xe2,
		0x3e, 0x88, 0xfa, 0x18, 0x04, 0x6b, 0x08, 0xd6, 0x36, 0x2b, 0x58, 0x43, 0x7d, 0x8c, 0xf0, 0x94,
		0xa1, 0x3e, 0x06, 0xa6, 0x07, 0xa6, 0x07, 0x79, 0x22, 0xe4, 0x89, 0x90, 0x27, 0x42, 0x9e, 0x68,
		0xcb, 0xf2, 0x44, 0xa8, 0x8f, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x04, 0x92, 0x0b, 0x02, 0x41, 0x7d, 0x0c, 0xa8, 0x03, 0xd4, 0x01, 0xea, 0x00, 0x75, 0x80,
		0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0xd4, 0xc7, 0xc4, 0xab, 0x8f, 0x49, 0xf7, 0xbe, 0xe2, 0x85, 0xf2,
		0x18, 0x5c, 0x59, 0x2c, 0xbb, 0x8a, 0x89, 0xf7, 0xa4, 0x9a, 0x5f, 0x37, 0xb2, 0xd6, 0x54, 0xef,
		0x14, 0x56, 0x46, 0x74, 0x45, 0xe8, 0x56, 0xa2, 0x18, 0xeb, 0xbe, 0x65, 0xf5, 0x39, 0x7f, 0x7d,
		0x9a, 0xd7, 0x4f, 0xde, 0xea, 0x7f, 0x59, 0x33, 0x9d, 0x13, 0xc6, 0x8e, 0xd1, 0xd9, 0xbe, 0xf8,
		0xd5, 0xf6, 0xf9, 0x21, 0xe7, 0xaf, 0x17, 0xd9, 0x4c, 0xb8, 0xe7, 0xa8, 0xcf, 0x26, 0x40, 0xec,
		0xbf, 0xee, 0x2e, 0x27, 0xee, 0x79, 0xee, 0x27, 0xc5, 0x6e, 0x6b, 0x2c, 0x9e, 0x79, 0x5d, 0xe6,
		0xb1, 0xee, 0xc7, 0xc9, 0x9b, 0x3b, 0xa3, 0x7e, 0x5f, 0xe8, 0x0b, 0xc7, 0x94, 0x1b, 0x02, 0x79,
		0x79, 0x45, 0x50, 0xd4, 0x04, 0x64, 0xb5, 0x64, 0x2c, 0xaf, 0xfb, 0xe2, 0xdf, 0xbc, 0x98, 0x90,
		0xb7, 0x26, 0x42, 0x6e, 0x02, 0x56, 0x7c, 0x67, 0xf1, 0xef, 0xba, 0xf8, 0xfd, 0x9e, 0xbf, 0xc5,
		0xdc, 0x37, 0x28, 0x5a, 0xee, 0x60, 0xe8, 0x3a, 0xa1, 0xfc, 0x2c, 0xbe, 0xfd, 0x5c, 0x5b, 0xaf,
		0xe8, 0x67, 0x5e, 0x7c, 0xf7, 0xd5, 0xa5, 0x89, 0x6b, 0x83, 0xf1, 0xd7, 0x82, 0xec, 0xf9, 0xe0,
		0x79, 0xd8, 0x37, 0x79, 0xcf, 0x5d, 0x19, 0x3c, 0xbf, 0x15, 0x14, 0xc7, 0x0e, 0x76, 0x63, 0x07,
		0xb1, 0x2f, 0x83, 0xd3, 0xe8, 0xe5, 0x04, 0xe5, 0x64, 0x5d, 0x69, 0xdd, 0xf3, 0xf4, 0xae, 0xff,
		0x52, 0x4b, 0x2b, 0xb1, 0xee, 0x4b, 0xbd, 0x5e, 0x2b, 0xfa, 0x66, 0x96, 0x24, 0x4e, 0x16, 0x24,
		0xe6, 0x42, 0x89, 0x66, 0x31, 0x84, 0xb3, 0x14, 0xc2, 0x59, 0x88, 0xf8, 0x0b, 0x29, 0xe7, 0x02,
		0xde, 0xaa, 0x9d, 0x2c, 0xde, 0x9a, 0xd6, 0x5f, 0xc3, 0xbe, 0xe9, 0xc4, 0x98, 0x8c, 0xa8, 0x04,
		0x2b, 0x7a, 0xe4, 0x8d, 0xef, 0x16, 0xaf, 0x48, 0x38, 0x76, 0x9a, 0x4c, 0x24, 0x1d, 0x26, 0x28,
		0x10, 0xb2, 0xe9, 0x2d, 0xe9, 0x34, 0x96, 0x74, 0xba, 0x4a, 0x5c, 0x60, 0x68, 0x90, 0x2c, 0x6e,
		0x11, 0xae, 0x68, 0xbf, 0x46, 0xb9, 0x3e, 0x8d, 0x59, 0x6f, 0x31, 0x2a, 0x20, 0x72, 0xaa, 0x99,
		0xd5, 0xec, 0xb5, 0x18, 0x8d, 0x2f, 0x92, 0x79, 0x89, 0xe7, 0x66, 0xdf, 0xa8, 0xf4, 0x4c, 0x1d,
		0xcf, 0xbf, 0x2d, 0x45, 0xf6, 0x50, 0xfc, 0x7c, 0xca, 0x5a, 0x7e, 0x3a, 0x0f, 0x3f, 0xb1, 0xf3,
		0x29, 0xfa, 0xc4, 0xe7, 0xdf, 0x76, 0x3e, 0xce, 0x3e, 0x51, 0xe8, 0x14, 0x0a, 0x4d, 0x43, 0x61,
		0xb1, 0xd3, 0x26, 0x52, 0xa7, 0x4c, 0xa4, 0xb5, 0xbb, 0x0a, 0xed, 0x86, 0x76, 0x6b, 0xd3, 0x6e,
		0xb2, 0x8e, 0xe1, 0x71, 0x95, 0x9b, 0xb6, 0x59, 0x78, 0x46, 0x32, 0x32, 0x31, 0x67, 0x5b, 0x25,
		0x13, 0x13, 0x73, 0x7e, 0xa5, 0x93, 0x30, 0xaf, 0x04, 0x16, 0xd6, 0xbd, 0xe9, 0xfb, 0xb6, 0x1f,
		0x1f, 0xa6, 0x67, 0x0f, 0x00, 0xa5, 0x81, 0xd2, 0x40, 0x69, 0x38, 0xdb, 0xed, 0x76, 0xb6, 0xa1,
		0x35, 0x4c, 0x0c, 0xa4, 0x3f, 0x4d, 0x3f, 0x0f, 0x18, 0x0d, 0x8c, 0x86, 0x66, 0x27, 0xa2, 0xd9,
		0x09, 0x41, 0xf4, 0x4c, 0xb1, 0xb7, 0x10, 0xa1, 0xe3, 0x11, 0xa5, 0xfa, 0xdc, 0x6a, 0xc1, 0xe7,
		0x78, 0xc4, 0x23, 0x46, 0x3a, 0x80, 0xe7, 0x6d, 0x84, 0x67, 0xa1, 0xdb, 0xe0, 0xa3, 0x65, 0x12,
		0xb8, 0x22, 0x5b, 0xb0, 0x72, 0x0c, 0xe0, 0xbc, 0x4d, 0xee, 0x55, 0xb8, 0xfa, 0x56, 0xfe, 0x06,
		0x40, 0xc1, 0x9b, 0xff, 0x36, 0xc6, 0xcd, 0xc5, 0x0d, 0x11, 0x64, 0xbd, 0x5c, 0x8c, 0x90, 0x40,
		0xd2, 0xc9, 0x0d, 0x47, 0x02, 0x1e, 0x6e, 0x38, 0x82, 0x7b, 0x83, 0x7b, 0x43, 0x6e, 0x08, 0x2e,
		0x6e, 0xdb, 0x23, 0xc8, 0xe1, 0x28, 0xb9, 0xbc, 0xd0, 0x70, 0x84, 0x9c, 0x10, 0x72, 0x42, 0xd0,
		0x68, 0xed, 0x1a, 0x9d, 0x54, 0x3e, 0x68, 0x38, 0xda, 0xca, 0x5c, 0xd0, 0x9b, 0xf4, 0xa8, 0x36,
		0xa7, 0x3a, 0xf0, 0xb8, 0x67, 0xde, 0x7a, 0xb6, 0x15, 0x9f, 0x90, 0xc3, 0x9f, 0x07, 0x24, 0x03,
		0x92, 0x01, 0xc9, 0x70, 0xa9, 0xdb, 0xed, 0x52, 0xa7, 0xc6, 0x30, 0x31, 0x4e, 0xfe, 0x12, 0x7c,
		0x1c, 0x50, 0x19, 0xa8, 0x0c, 0xbd, 0x4e, 0x42, 0xaf, 0x13, 0xa2, 0xe5, 0x50, 0xad, 0xb7, 0x10,
		0x98, 0x63, 0xc1, 0xa4, 0xf2, 0xcc, 0xea, 0xc1, 0x66, 0x47, 0x84, 0x99, 0x1d, 0x00, 0x33, 0x80,
		0x19, 0xc0, 0x0c, 0xc7, 0xba, 0xf5, 0x8e, 0xd5, 0x49, 0x90, 0x96, 0x1d, 0xa0, 0x32, 0x50, 0x19,
		0x1a, 0xad, 0x5d, 0xa3, 0x13, 0xe3, 0x64, 0x67, 0x3b, 0x21, 0xd9, 0xd1, 0x49, 0xc8, 0x8e, 0x0e,
		0x3c, 0xb6, 0x1d, 0xce, 0xee, 0x3c, 0x93, 0xb3, 0xae, 0x61, 0xd9, 0x9e, 0x35, 0x8a, 0xd1, 0xd9,
		0x3a, 0xb2, 0x20, 0x2b, 0x9e, 0x05, 0x3c, 0x03, 0x9e, 0x01, 0xcf, 0x70, 0xb5, 0xdb, 0xed, 0x6a,
		0x97, 0x0d, 0x63, 0x62, 0x2c, 0x7d, 0x1c, 0x7d, 0xf4, 0xa7, 0xe9, 0x27, 0x83, 0xac, 0x41, 0xd6,
		0x50, 0xf7, 0xa4, 0xd5, 0x3d, 0x21, 0xd0, 0x5e, 0xd6, 0xf6, 0x2d, 0xc4, 0x6e, 0x61, 0x0c, 0xa5,
		0x9c, 0x70, 0x1d, 0x4c, 0x1e, 0xeb, 0x88, 0x86, 0xc8, 0xd1, 0x8c, 0x98, 0x47, 0x32, 0xc0, 0xdd,
		0x79, 0xe0, 0xee, 0xd8, 0x47, 0x28, 0xa2, 0x99, 0xef, 0x33, 0xb3, 0xe7, 0xb1, 0x5e, 0x9c, 0x59,
		0x9f, 0xb9, 0xd5, 0x56, 0x8c, 0x9f, 0x3d, 0x0f, 0x35, 0x75, 0x6f, 0x2f, 0xa4, 0x9b, 0x52, 0x20,
		0x8a, 0x1a, 0x14, 0x62, 0xe8, 0x7a, 0x02, 0x61, 0x69, 0xf0, 0xd3, 0x08, 0x44, 0x11, 0x88, 0x22,
		0x10, 0x05, 0x99, 0x6e, 0x37, 0x99, 0x4e, 0x4c, 0x61, 0x62, 0xa1, 0xe7, 0xb9, 0xeb, 0x21, 0xda,
		0x44, 0xb4, 0x09, 0x9d, 0x4e, 0x40, 0xa7, 0x13, 0x8a, 0x2f, 0x03, 0x95, 0xde, 0xc2, 0x90, 0x32,
		0x06, 0x42, 0x2a, 0xce, 0xaa, 0x1e, 0x4c, 0xfe, 0xc6, 0x3c, 0xc3, 0x1f, 0x0d, 0x87, 0xfd, 0x47,
		0x11, 0x5c, 0x9e, 0x7b, 0x0a, 0xd8, 0x0c, 0x6c, 0x06, 0x36, 0xc3, 0xc5, 0x6e, 0xbb, 0x8b, 0x7d,
		0x36, 0x89, 0x09, 0xe2, 0xf3, 0x37, 0xe6, 0x5d, 0x06, 0x9f, 0x09, 0x8a, 0x06, 0x45, 0x43, 0xc5,
		0x93, 0x53, 0xf1, 0xc4, 0x68, 0xfa, 0x59, 0xc3, 0xb7, 0x12, 0xaa, 0x63, 0x83, 0x26, 0xcd, 0x24,
		0x6b, 0x61, 0x6c, 0xcf, 0x1d, 0x32, 0x8f, 0xdb, 0x4c, 0xa0, 0x97, 0xf1, 0xdc, 0x33, 0xe0, 0x6b,
		0xf0, 0xf5, 0x1a, 0x91, 0x7a, 0x14, 0xf7, 0xbe, 0xd1, 0x93, 0x60, 0x6c, 0x38, 0x60, 0x45, 0x07,
		0x1c, 0x57, 0x5c, 0x65, 0xc3, 0x42, 0xb5, 0xf0, 0x50, 0x52, 0x84, 0xa5, 0x45, 0x59, 0x45, 0xa4,
		0x89, 0x44, 0x5b, 0x55, 0xc4, 0xc9, 0x44, 0x9d, 0x4c, 0xe4, 0xe9, 0x44, 0x5f, 0x4c, 0x05, 0x04,
		0x55, 0x41, 0x5a, 0x25, 0xa2, 0x07, 0x85, 0x7a, 0x6c, 0xae, 0x15, 0x1b, 0x81, 0x9e, 0x9b, 0xeb,
		0xd4, 0x64, 0x53, 0x6e, 0xe8, 0x57, 0x50, 0x1f, 0x2a, 0x35, 0x22, 0x57, 0x27, 0x72, 0xb5, 0xa2,
		0x57, 0x2f, 0x39, 0x35, 0x93, 0x54, 0xb7, 0xe8, 0xf5, 0xe9, 0x6e, 0xe8, 0x17, 0xee, 0x19, 0xba,
		0xd6, 0xdd, 0xec, 0x27, 0x75, 0x3f, 0xb7, 0x84, 0x7f, 0x78, 0x08, 0xaf, 0x56, 0x57, 0x34, 0x37,
		0xd3, 0x61, 0x60, 0x6f, 0x60, 0x6f, 0x60, 0x6f, 0x24, 0x25, 0x67, 0xe4, 0xd8, 0xae, 0x43, 0x61,
		0x6e, 0x0e, 0x14, 0xc6, 0x08, 0xbf, 0xce, 0xb5, 0xd2, 0x9a, 0xaa, 0xc9, 0x2c, 0xad, 0x11, 0x26,
		0x32, 0xc6, 0x8a, 0x62, 0xa2, 0x61, 0x66, 0x6e, 0x5d, 0xb7, 0xcf, 0x4c, 0x87, 0x72, 0x6a, 0x2a,
		0x1b, 0x32, 0x35, 0xb6, 0xc3, 0x9b, 0x75, 0xc2, 0x89, 0xa9, 0x13, 0x0c, 0x75, 0x61, 0x3a, 0x77,
		0xea, 0x9a, 0x45, 0x37, 0x59, 0xd1, 0x8b, 0x9d, 0xd8, 0x8e, 0xb2, 0x9b, 0x21, 0x0a, 0xb4, 0xdf,
		0x1c, 0xf6, 0xb7, 0x10, 0x56, 0x0e, 0xaa, 0xd5, 0x5a, 0xad, 0x55, 0x2d, 0xd7, 0x9a, 0xfb, 0x8d,
		0x7a, 0xab, 0xd5, 0xd8, 0x2f, 0xef, 0x13, 0x7f, 0xd2, 0x17, 0xcf, 0xb4, 0xb8, 0xed, 0x3a, 0x9f,
		0xed, 0x3b, 0x7b, 0x7a, 0x37, 0x3f, 0xd9, 0xf8, 0xe3, 0xf7, 0x84, 0x8b, 0x67, 0x7e, 0xd7, 0xb6,
		0x78, 0xe5, 0xc4, 0x16, 0xaf, 0x95, 0xa3, 0xc5, 0x7b, 0x97, 0x8d, 0x51, 0xda, 0x1b, 0x62, 0xaa,
		0x47, 0xd4, 0xb6, 0x7a, 0x1f, 0xb6, 0x3a, 0x5b, 0xea, 0x5e, 0x86, 0x65, 0xce, 0xcb, 0x52, 0x55,
		0xf6, 0xeb, 0xf5, 0x66, 0xab, 0x5e, 0x2f, 0xb7, 0x6a, 0xad, 0xf2, 0x41, 0xa3, 0x51, 0x69, 0x56,
		0x1a, 0x30, 0xcd, 0xdb, 0x6a, 0x9a, 0xbb, 0xcc, 0xb2, 0x07, 0x66, 0x9f, 0xd4, 0x3a, 0x57, 0xaa,
		0x04, 0x63, 0x2d, 0xc9, 0x50, 0x15, 0x36, 0x5f, 0x6e, 0x39, 0xaa, 0xb0, 0xf9, 0x79, 0xb1, 0xf9,
		0x35, 0x2c, 0xd5, 0x86, 0x18, 0xf8, 0x77, 0xc9, 0x7e, 0xee, 0x38, 0x63, 0xfb, 0xa2, 0x92, 0xb5,
		0x7a, 0xd1, 0xf3, 0xd2, 0x05, 0x64, 0x51, 0x1d, 0xd5, 0xec, 0xb7, 0x12, 0xd5, 0xb9, 0xcf, 0x6f,
		0x21, 0x57, 0x5e, 0x16, 0xbd, 0xc3, 0xec, 0xb7, 0x62, 0xd5, 0xba, 0xe2, 0x2b, 0x24, 0xb0, 0x3a,
		0x72, 0x1b, 0xcf, 0x2a, 0x1b, 0xce, 0x92, 0x3c, 0x8b, 0x7a, 0x0c, 0xd4, 0x63, 0x88, 0xdb, 0x1d,
		0xe9, 0x8d, 0x1a, 0x89, 0x4e, 0x08, 0x6b, 0xf1, 0x57, 0x22, 0xd3, 0x25, 0xd5, 0x29, 0x21, 0x19,
		0x83, 0x21, 0x56, 0xf6, 0xbf, 0x34, 0x9f, 0xa2, 0x85, 0xd3, 0x05, 0x8a, 0x12, 0xae, 0x2a, 0x4c,
		0x06, 0x4c, 0x46, 0xcc, 0xd7, 0x94, 0x2e, 0xe1, 0x9a, 0xea, 0xe9, 0xc8, 0x33, 0x6f, 0xfb, 0x04,
		0xb5, 0x15, 0x0b, 0xa3, 0xa1, 0xc4, 0x02, 0x25, 0x16, 0xa9, 0xa9, 0x9b, 0x5a, 0x0c, 0x93, 0x7e,
		0x89, 0x85, 0xfa, 0x9e, 0xb9, 0xe2, 0x5e, 0x79, 0x32, 0x35, 0x5d, 0xa8, 0x20, 0x85, 0xb9, 0x81,
		0xb9, 0x41, 0x05, 0x29, 0x2a, 0x48, 0x61, 0x6f, 0x60, 0x6f, 0xb6, 0xc7, 0xde, 0xa0, 0x82, 0x54,
		0x87, 0x11, 0x26, 0x32, 0xc6, 0x8a, 0x62, 0xa2, 0x61, 0x66, 0x50, 0x41, 0xba, 0x76, 0x6a, 0x50,
		0x41, 0x2a, 0xf0, 0x62, 0xa8, 0x20, 0x5d, 0xf5, 0x49, 0xd8, 0xb3, 0x46, 0x05, 0x29, 0x1d, 0x5c,
		0xd0, 0x8f, 0x82, 0x0a, 0xd2, 0x35, 0x52, 0x8b, 0x0a, 0xd2, 0x8c, 0xa9, 0x3b, 0xaa, 0x89, 0x72,
		0xb3, 0x54, 0xa8, 0x20, 0x85, 0x69, 0x46, 0x05, 0xe9, 0x16, 0xd9, 0x7c, 0x54, 0x90, 0xa2, 0x82,
		0x14, 0x06, 0x3e, 0x61, 0x03, 0x8f, 0x0a, 0xd2, 0xcc, 0x54, 0x90, 0xca, 0xd4, 0x30, 0x15, 0x68,
		0x0b, 0x48, 0x05, 0x9a, 0x41, 0x8a, 0xaf, 0x0f, 0x6d, 0x9b, 0xb0, 0x5f, 0xd8, 0xa3, 0xe0, 0xce,
		0x72, 0xf1, 0xab, 0xed, 0xf3, 0x43, 0xce, 0x05, 0xdb, 0x8b, 0x9d, 0xd8, 0xce, 0x51, 0x9f, 0x0d,
		0x26, 0xb3, 0x27, 0x66, 0xa1, 0x26, 0x16, 0x78, 0xee, 0x49, 0x35, 0x9e, 0x2d, 0x9e, 0x79, 0x5d,
		0xe6, 0xb1, 0xee, 0xc7, 0xc9, 0xb7, 0x76, 0x46, 0xfd, 0x7e, 0xbe, 0x9b, 0x9e, 0x2e, 0x8b, 0x7f,
		0x02, 0x5d, 0x4f, 0x97, 0x05, 0x7e, 0xcb, 0xfa, 0x9e, 0xc6, 0x6d, 0xff, 0x49, 0x32, 0xc9, 0x3a,
		0x9a, 0x9e, 0xfa, 0x6e, 0x8f, 0x7f, 0x33, 0x3d, 0x66, 0x0c, 0xdc, 0xee, 0xa8, 0x2f, 0x70, 0x37,
		0xdd, 0xcb, 0x07, 0xd1, 0xfe, 0x14, 0xed, 0x4f, 0x5f, 0xfe, 0x20, 0xae, 0x17, 0x40, 0xeb, 0xd3,
		0xed, 0xea, 0x3d, 0xfe, 0xc2, 0x2a, 0x26, 0x76, 0xc3, 0xc0, 0x65, 0xf8, 0xb9, 0x27, 0xc1, 0xc7,
		0xe2, 0x92, 0x01, 0x5c, 0x32, 0x00, 0x45, 0x4f, 0x54, 0xd1, 0x13, 0xba, 0x67, 0xe0, 0x85, 0x9e,
		0x6f, 0xe1, 0x55, 0x03, 0x62, 0xdc, 0x49, 0x36, 0xd5, 0x5a, 0xd8, 0x3b, 0x96, 0xcd, 0x14, 0xb2,
		0x95, 0xc2, 0x9c, 0x5d, 0x05, 0x67, 0xe7, 0x9f, 0xb3, 0xcd, 0x7e, 0xdf, 0xb5, 0x82, 0x5b, 0xd2,
		0x83, 0x8b, 0x38, 0xc4, 0xdd, 0xf0, 0xcb, 0x01, 0xc4, 0x1c, 0x72, 0x19, 0xe4, 0x0d, 0x87, 0xfc,
		0xf2, 0x75, 0x84, 0x0b, 0x67, 0x17, 0x6a, 0x46, 0x6a, 0x55, 0x91, 0x45, 0x0b, 0xe5, 0x50, 0xa0,
		0xce, 0x48, 0x72, 0x3f, 0x50, 0x22, 0x9f, 0xad, 0xb2, 0xbf, 0xa7, 0x5a, 0x39, 0xaf, 0xb8, 0x09,
		0x44, 0xb1, 0xd9, 0x23, 0x73, 0x66, 0x41, 0x65, 0x9f, 0x8d, 0x6a, 0xca, 0xea, 0xd5, 0x83, 0xfa,
		0x41, 0xb3, 0x55, 0x3d, 0x68, 0xa4, 0x38, 0x77, 0x9a, 0xb6, 0x0d, 0xda, 0x09, 0xc6, 0x85, 0x5d,
		0xe6, 0x5b, 0x9e, 0x3d, 0x14, 0x02, 0xf3, 0xb9, 0x12, 0x85, 0xe7, 0x87, 0xe1, 0x92, 0xe0, 0x92,
		0x52, 0x73, 0x49, 0xc2, 0xc7, 0x14, 0x04, 0x8f, 0x23, 0xd0, 0xe8, 0x1a, 0x1b, 0x0c, 0x65, 0xae,
		0x9a, 0x9a, 0x3e, 0x16, 0xf7, 0x2e, 0x21, 0xd6, 0x33, 0x47, 0xfd, 0x60, 0x45, 0x7b, 0x66, 0xdf,
		0x67, 0xd0, 0x4b, 0xe8, 0x65, 0x7a, 0x7a, 0x29, 0x7e, 0x48, 0x46, 0xf0, 0x30, 0x0c, 0x91, 0x62,
		0xfe, 0x77, 0x64, 0x0f, 0x27, 0x13, 0x6e, 0xf4, 0x4c, 0xbb, 0x3f, 0xf2, 0x24, 0x12, 0xa5, 0xcb,
		0x43, 0x6c, 0xb7, 0xc2, 0x9a, 0x7d, 0xd3, 0x1b, 0xf8, 0x5b, 0xa9, 0xae, 0xe1, 0x57, 0x87, 0xb2,
		0xea, 0x56, 0xd6, 0x81, 0xed, 0x0f, 0x4c, 0x6e, 0xdd, 0xab, 0x68, 0x6b, 0x34, 0x06, 0xd4, 0x15,
		0xea, 0x0a, 0x75, 0xa5, 0x57, 0xd7, 0x9e, 0xed, 0x0d, 0x82, 0xfd, 0x80, 0x07, 0xe6, 0xf9, 0x52,
		0x51, 0xe6, 0xd2, 0x08, 0x40, 0x5a, 0x20, 0x2d, 0x42, 0xcd, 0x57, 0x3f, 0xf3, 0xde, 0xf4, 0xba,
		0x6a, 0x5a, 0xb7, 0x34, 0x02, 0xb4, 0x0e, 0x5a, 0x07, 0xad, 0x7b, 0xf5, 0x33, 0xed, 0xae, 0xb8,
		0x9e, 0xd9, 0x5d, 0x68, 0x16, 0x34, 0x0b, 0x9a, 0xf5, 0xfa, 0x67, 0x06, 0xdb, 0xdf, 0x52, 0x7e,
		0x2c, 0x7a, 0x12, 0x5a, 0x06, 0x2d, 0x83, 0x96, 0xbd, 0xfa, 0x99, 0x03, 0x36, 0x70, 0x3d, 0x89,
		0x1d, 0x8a, 0xf0, 0x39, 0xd4, 0x83, 0x43, 0xc3, 0x14, 0x35, 0x4c, 0xb4, 0x69, 0x74, 0xd1, 0x7c,
		0x30, 0xed, 0xbe, 0x54, 0xa7, 0xe8, 0xe7, 0xe2, 0xaa, 0x68, 0x08, 0x5c, 0xc0, 0xa0, 0x49, 0xd0,
		0xc9, 0x04, 0x9e, 0x4c, 0xf0, 0xe9, 0x14, 0x40, 0x4c, 0x11, 0x04, 0x15, 0x42, 0xde, 0xf5, 0x2c,
		0xad, 0xbc, 0x74, 0xab, 0x1f, 0x85, 0xd6, 0x3e, 0x8a, 0x6d, 0x1d, 0x14, 0xba, 0x3a, 0x52, 0xb4,
		0x6d, 0x20, 0xea, 0xf7, 0x42, 0x75, 0xd6, 0x9f, 0xf2, 0x6c, 0xbf, 0x42, 0xdb, 0x05, 0x92, 0x36,
		0x0b, 0xd4, 0x53, 0x4b, 0xdf, 0x3a, 0x87, 0x74, 0xb6, 0x13, 0xea, 0x1c, 0xd0, 0xce, 0xc0, 0xb5,
		0x26, 0x23, 0x6e, 0xf7, 0xed, 0xbf, 0x59, 0x57, 0xde, 0x1f, 0x47, 0x23, 0xc0, 0x1d, 0xc3, 0x1d,
		0xc3, 0x1d, 0xc3, 0x1d, 0xc3, 0x1d, 0xc3, 0x1d, 0xc3, 0x1d, 0xeb, 0x0a, 0xb9, 0x13, 0x3f, 0x99,
		0xc9, 0x4d, 0xce, 0x4a, 0x42, 0x29, 0xa3, 0x82, 0xc2, 0x29, 0xc1, 0xc9, 0xa7, 0x75, 0x4e, 0xa6,
		0x9f, 0x96, 0x64, 0x2a, 0xad, 0x77, 0x67, 0x74, 0xa5, 0x8e, 0x5c, 0x47, 0x4f, 0x22, 0x61, 0x8d,
		0x74, 0x9a, 0xa2, 0x6e, 0xcb, 0x27, 0xac, 0xbb, 0x82, 0xc7, 0xa5, 0xa3, 0x74, 0xb5, 0xc0, 0x33,
		0xe7, 0x26, 0xe7, 0xcc, 0x73, 0x84, 0x79, 0xa4, 0x78, 0x5d, 0x36, 0x0e, 0xda, 0x3f, 0xea, 0xe3,
		0x9b, 0x1b, 0x63, 0xa7, 0x7c, 0x5d, 0x31, 0x0e, 0xda, 0x4f, 0x95, 0xeb, 0xb2, 0x51, 0x6d, 0xef,
		0xce, 0xfd, 0xcd, 0x75, 0xa5, 0xda, 0x0e, 0x7e, 0xf0, 0xa9, 0x76, 0x5d, 0xae, 0xb4, 0x77, 0xe3,
		0xaf, 0x41, 0x5b, 0xe4, 0x3b, 0x9c, 0x5d, 0x1e, 0xff, 0x5b, 0xfa, 0x8b, 0xfc, 0xb9, 0x23, 0xf5,
		0x55, 0x76, 0xff, 0x51, 0xcc, 0xe4, 0x61, 0xa2, 0x89, 0xe9, 0x12, 0xba, 0x3e, 0x6b, 0xc1, 0xe8,
		0x89, 0x34, 0x36, 0x83, 0xd1, 0x83, 0xd1, 0xa3, 0x37, 0x7a, 0xf9, 0xd8, 0xa5, 0x93, 0xd3, 0x30,
		0x68, 0x17, 0xb4, 0x0b, 0xda, 0xf5, 0xb6, 0x76, 0xb9, 0x43, 0xe6, 0x19, 0x93, 0x18, 0x65, 0xe4,
		0x8b, 0x2b, 0xd9, 0xfc, 0xc3, 0xd0, 0x35, 0xe8, 0x5a, 0x6a, 0xba, 0x66, 0x77, 0x99, 0xc3, 0x6d,
		0xfe, 0x28, 0x76, 0xe3, 0x7a, 0xa4, 0x70, 0x22, 0x6d, 0x5a, 0x8f, 0xc3, 0x8f, 0xfa, 0x68, 0xfa,
		0x0a, 0x9b, 0xf0, 0x9f, 0xce, 0x4e, 0xce, 0xcf, 0x4e, 0x8f, 0x4e, 0xaf, 0x3a, 0x67, 0xe7, 0x47,
		0x17, 0x9d, 0xcb, 0xab, 0xc3, 0xab, 0x5f, 0x2f, 0x45, 0xd7, 0x3f, 0x48, 0x3f, 0xf9, 0x52, 0xf9,
		0x4d, 0xc5, 0xfb, 0x17, 0x0f, 0x3f, 0x5d, 0x1d, 0xff, 0x76, 0x54, 0x4c, 0xa2, 0xfd, 0x82, 0xe2,
		0x9b, 0x7e, 0x3e, 0xbe, 0x3c, 0xfc, 0xf8, 0xf5, 0xe8, 0x73, 0x1e, 0xde, 0xf5, 0xf8, 0x54, 0x7a,
		0x5e, 0xdf, 0xe9, 0x49, 0xd4, 0x8d, 0x13, 0xf4, 0x44, 0x43, 0xd3, 0x9b, 0x9a, 0x22, 0x41, 0x27,
		0x14, 0x3e, 0x07, 0xff, 0x03, 0xff, 0x93, 0x9a, 0xff, 0xe9, 0x33, 0xb3, 0x27, 0xe9, 0x7b, 0x5a,
		0x62, 0x19, 0xa4, 0x20, 0xfb, 0xbc, 0xb7, 0x57, 0x9a, 0xfe, 0xff, 0x39, 0xcd, 0x3c, 0x4d, 0x0e,
		0x97, 0x82, 0xb0, 0x27, 0x59, 0xa5, 0xe5, 0x86, 0xe3, 0x4a, 0x69, 0x6d, 0xf0, 0x20, 0xd4, 0x16,
		0x6a, 0x8b, 0x10, 0xed, 0x75, 0x1d, 0xb3, 0x6c, 0x89, 0x04, 0x48, 0xf0, 0x14, 0x4a, 0x94, 0xa1,
		0x5d, 0x8a, 0xda, 0x25, 0x5c, 0xa2, 0x6c, 0xb9, 0x9e, 0xc7, 0x2c, 0x6e, 0xde, 0xf6, 0x99, 0xc1,
		0x3c, 0xcf, 0xf5, 0x7c, 0xf9, 0x30, 0x69, 0xc5, 0x58, 0x72, 0x55, 0x52, 0x15, 0x54, 0x49, 0x25,
		0xa6, 0x02, 0x64, 0xaa, 0x40, 0xa7, 0x12, 0x72, 0x71, 0x92, 0x68, 0x95, 0x94, 0xa8, 0xaa, 0x44,
		0x0f, 0x9a, 0xdd, 0x07, 0xdb, 0x77, 0xbd, 0x47, 0xc3, 0x71, 0x1d, 0xa3, 0x67, 0x72, 0xb3, 0x2f,
		0xab, 0x39, 0x4b, 0xb2, 0xb4, 0x7e, 0xe8, 0xf7, 0xa9, 0x34, 0x34, 0x94, 0x55, 0x2c, 0x0a, 0x05,
		0x23, 0x56, 0x34, 0x2a, 0x85, 0x23, 0x57, 0x3c, 0x72, 0x05, 0xa4, 0x57, 0x44, 0x39, 0x85, 0x54,
		0x48, 0xcd, 0x14, 0x94, 0xca, 0x18, 0x57, 0x38, 0xa6, 0x91, 0xc3, 0x99, 0xa7, 0x74, 0x5b, 0x25,
		0xc1, 0x1d, 0xc2, 0x44, 0xf7, 0x48, 0x12, 0x5c, 0xe3, 0x49, 0x79, 0x6f, 0x24, 0xf1, 0xc5, 0xb3,
		0xd4, 0x97, 0x0f, 0xea, 0xb8, 0x74, 0x90, 0xe0, 0x5e, 0x48, 0xd2, 0xfb, 0x20, 0x75, 0x2d, 0x81,
		0xbe, 0x3b, 0x7f, 0xb5, 0xac, 0xca, 0xa6, 0x5f, 0xbd, 0x28, 0x41, 0x97, 0xb7, 0x66, 0xd7, 0xe8,
		0xf6, 0xfb, 0x43, 0x32, 0x42, 0x79, 0x39, 0x20, 0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0x80,
		0x4b, 0xc0, 0x25, 0xe0, 0x12, 0x70, 0x89, 0x00, 0x97, 0x70, 0x62, 0x2c, 0xe1, 0xa0, 0x12, 0x50,
		0x09, 0xa8, 0x04, 0x54, 0x02, 0x2a, 0x01, 0x95, 0x80, 0x4a, 0x40, 0x25, 0xc2, 0xd3, 0x7c, 0xdf,
		0xf5, 0x8c, 0xbe, 0x7b, 0x67, 0xb8, 0x0f, 0xcc, 0xeb, 0xf5, 0xdd, 0x6f, 0x64, 0x78, 0xb2, 0x6e,
		0x60, 0x70, 0x0a, 0x38, 0x05, 0x9c, 0x02, 0x4e, 0x01, 0xa7, 0x80, 0x53, 0xc0, 0x29, 0xe0, 0x94,
		0x98, 0xd3, 0x6c, 0x4f, 0xec, 0x9e, 0x43, 0x58, 0x77, 0xf2, 0x72, 0x40, 0x70, 0x09, 0xb8, 0x04,
		0x5c, 0x02, 0x2e, 0x01, 0x97, 0x80, 0x4b, 0xc0, 0x25, 0xe0, 0x92, 0x98, 0xd3, 0xec, 0x31, 0x8b,
		0xd9, 0x0f, 0xcc, 0x23, 0xe3, 0x92, 0x97, 0x03, 0x82, 0x4b, 0xc0, 0x25, 0xe0, 0x12, 0x70, 0x09,
		0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0xc4, 0xe6, 0x92, 0xbe, 0xf9, 0x68, 0x78, 0x6e, 0xbf,
		0xef, 0xd2, 0xd2, 0xc9, 0xaa, 0x61, 0xc1, 0x28, 0x60, 0x14, 0x30, 0x0a, 0x18, 0x05, 0x8c, 0x02,
		0x46, 0x01, 0xa3, 0x80, 0x51, 0x62, 0x33, 0xca, 0x70, 0x42, 0x13, 0xdc, 0x1e, 0x30, 0x77, 0xc4,
		0x09, 0x19, 0x65, 0xd5, 0xb0, 0x60, 0x14, 0x30, 0x0a, 0x18, 0x05, 0x8c, 0x02, 0x46, 0x01, 0xa3,
		0x80, 0x51, 0xc0, 0x28, 0x31, 0xa7, 0x99, 0xbb, 0x94, 0xcd, 0x4e, 0x16, 0x46, 0x03, 0x91, 0x80,
		0x48, 0x40, 0x24, 0x20, 0x12, 0x10, 0x09, 0x88, 0x04, 0x44, 0xb2, 0x9d, 0x44, 0xa2, 0xb5, 0xdd,
		0x9b, 0xe4, 0x4d, 0x72, 0xd1, 0xf3, 0x6a, 0x37, 0xca, 0x0d, 0x2d, 0x9b, 0x95, 0x94, 0xfb, 0x23,
		0x16, 0x54, 0xaf, 0x9a, 0x3b, 0xb7, 0x6c, 0xd6, 0xf9, 0xf4, 0xfc, 0x1a, 0x47, 0xd3, 0xb7, 0xc8,
		0xc0, 0xcd, 0xbc, 0x4a, 0x7d, 0xf4, 0x22, 0x47, 0xa8, 0xd0, 0x32, 0x0f, 0xbd, 0x27, 0xd3, 0x43,
		0x44, 0xf4, 0x9e, 0x8c, 0xfb, 0xa0, 0x69, 0xf9, 0xc6, 0x83, 0xed, 0xf6, 0x03, 0x43, 0x46, 0xd7,
		0x76, 0x72, 0xd5, 0xa8, 0x88, 0xc8, 0x10, 0x91, 0x21, 0x22, 0x43, 0x44, 0x86, 0x88, 0x0c, 0x11,
		0x19, 0x22, 0xb2, 0xed, 0x8c, 0xc8, 0x24, 0x98, 0xd2, 0xe4, 0xee, 0xc0, 0xb6, 0x0c, 0x77, 0x68,
		0xdc, 0xf6, 0x5d, 0xeb, 0x2f, 0xd6, 0xa5, 0xa3, 0x94, 0x75, 0x23, 0x83, 0x54, 0x40, 0x2a, 0x20,
		0x15, 0x90, 0x0a, 0x48, 0x05, 0xa4, 0x02, 0x52, 0x01, 0xa9, 0xc4, 0x9c, 0xe6, 0x19, 0x45, 0x90,
		0xf6, 0xa1, 0x5c, 0x1e, 0x13, 0x74, 0x02, 0x3a, 0x01, 0x9d, 0x80, 0x4e, 0x40, 0x27, 0xa0, 0x13,
		0xd0, 0x09, 0xe8, 0x24, 0xe6, 0x34, 0x5b, 0xee, 0x60, 0xd8, 0x67, 0xc1, 0x86, 0x8c, 0x79, 0xeb,
		0x7a, 0x74, 0x27, 0x02, 0xd6, 0x0d, 0x0c, 0x4e, 0x01, 0xa7, 0x80, 0x53, 0xc0, 0x29, 0xe0, 0x14,
		0x70, 0x0a, 0x38, 0x05, 0x9c, 0x22, 0xce, 0x29, 0xd4, 0x67, 0x17, 0xd7, 0x0f, 0x0d, 0x56, 0x01,
		0xab, 0x80, 0x55, 0xc0, 0x2a, 0x60, 0x15, 0xb0, 0x0a, 0x58, 0x05, 0xac, 0x12, 0x73, 0x9a, 0xbb,
		0x26, 0x37, 0x8d, 0xbe, 0xed, 0xfc, 0x45, 0x86, 0x28, 0x4b, 0x23, 0x82, 0x4c, 0x40, 0x26, 0x20,
		0x13, 0x90, 0x09, 0xc8, 0x04, 0x64, 0x02, 0x32, 0x01, 0x99, 0xc4, 0x9c, 0x66, 0x66, 0x79, 0x16,
		0x19, 0x94, 0xcc, 0x0f, 0x06, 0x1e, 0x01, 0x8f, 0x80, 0x47, 0xc0, 0x23, 0xe0, 0x11, 0xf0, 0x08,
		0x78, 0x04, 0x3c, 0x12, 0x73, 0x9a, 0x83, 0x4b, 0x4a, 0x2d, 0xd7, 0xe1, 0x9e, 0xdb, 0x37, 0x86,
		0x9e, 0xcb, 0x5d, 0xcb, 0xa5, 0xeb, 0xfc, 0xf4, 0xea, 0xe8, 0x20, 0x16, 0x10, 0x0b, 0x88, 0x05,
		0xc4, 0x02, 0x62, 0x01, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x31, 0xa7, 0x19, 0x77, 0xa2, 0x82, 0x4b,
		0xc0, 0x25, 0xe0, 0x12, 0x70, 0x09, 0xb8, 0x04, 0x5c, 0x02, 0x2e, 0xc9, 0x0a, 0x97, 0x0c, 0xcc,
		0xfe, 0xc4, 0xe4, 0x13, 0x9f, 0x33, 0x5e, 0x39, 0x2a, 0x08, 0x05, 0x84, 0x02, 0x42, 0x01, 0xa1,
		0x80, 0x50, 0x40, 0x28, 0x20, 0x14, 0x10, 0x4a, 0xcc, 0x69, 0x1e, 0xba, 0xb6, 0xef, 0x3a, 0xc4,
		0x80, 0xb2, 0x6a, 0x50, 0xf0, 0x09, 0xf8, 0x04, 0x7c, 0x02, 0x3e, 0x01, 0x9f, 0x80, 0x4f, 0xc0,
		0x27, 0xe0, 0x93, 0x98, 0xd3, 0xec, 0x31, 0x8b, 0xd9, 0x0f, 0xcc, 0x33, 0xdc, 0x07, 0xe6, 0x05,
		0xa5, 0x23, 0x74, 0x97, 0xa3, 0xae, 0x19, 0x19, 0xa4, 0x02, 0x52, 0x01, 0xa9, 0x80, 0x54, 0x40,
		0x2a, 0x20, 0x15, 0x90, 0x0a, 0x48, 0x25, 0xe6, 0x34, 0xfb, 0x23, 0x6f, 0xe8, 0xd9, 0x3e, 0x33,
		0xba, 0xee, 0x37, 0xba, 0xdb, 0x79, 0x56, 0x8e, 0x0a, 0x42, 0x01, 0xa1, 0x80, 0x50, 0x40, 0x28,
		0x20, 0x14, 0x10, 0x0a, 0x08, 0x05, 0x84, 0x12, 0x73, 0x9a, 0x79, 0x7f, 0x68, 0x4c, 0xbd, 0x13,
		0xf9, 0xf5, 0x3c, 0xeb, 0x87, 0x06, 0xab, 0x80, 0x55, 0xc0, 0x2a, 0x60, 0x15, 0xb0, 0x0a, 0x58,
		0x05, 0xac, 0x02, 0x56, 0x89, 0xcb, 0x2a, 0x2e, 0x27, 0x3c, 0xce, 0xb3, 0x30, 0x1a, 0x88, 0x04,
		0x44, 0x02, 0x22, 0x01, 0x91, 0x80, 0x48, 0x40, 0x24, 0x20, 0x12, 0x10, 0x49, 0xcc, 0x69, 0x1e,
		0x39, 0x5d, 0xd6, 0xb3, 0x1d, 0xc2, 0xa4, 0xc9, 0xd2, 0x88, 0x20, 0x13, 0x90, 0x09, 0xc8, 0x04,
		0x64, 0x02, 0x32, 0x01, 0x99, 0x80, 0x4c, 0x40, 0x26, 0xb1, 0xc9, 0x84, 0x7d, 0x1f, 0x32, 0x8b,
		0xb3, 0xae, 0x31, 0x77, 0x6b, 0x0e, 0x1d, 0xa5, 0xbc, 0x32, 0x3a, 0x88, 0x05, 0xc4, 0x02, 0x62,
		0x01, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x20, 0x16, 0x10, 0x4b, 0x6c, 0x62, 0xf1, 0x47, 0xc3, 0xa1,
		0xeb, 0x4d, 0xa0, 0xc2, 0x63, 0xff, 0x1d, 0x31, 0x9f, 0x13, 0xf2, 0xca, 0xda, 0xb1, 0x41, 0x2b,
		0xa0, 0x15, 0xd0, 0x0a, 0x68, 0x05, 0xb4, 0x02, 0x5a, 0x01, 0xad, 0x6c, 0x27, 0xad, 0xbc, 0xd3,
		0x28, 0xa3, 0xc5, 0x43, 0xc7, 0x71, 0xb9, 0x39, 0x59, 0x12, 0x29, 0xb1, 0x2c, 0xfa, 0xd6, 0x3d,
		0x1b, 0x98, 0x43, 0x93, 0xdf, 0x4f, 0x2c, 0x6e, 0xc9, 0x1d, 0x32, 0xc7, 0x0a, 0xe8, 0x21, 0xf2,
		0x3b, 0x25, 0xcb, 0x1d, 0x0c, 0x5d, 0x87, 0x39, 0xdc, 0x7f, 0xfe, 0x6d, 0xc9, 0xe7, 0x26, 0x67,
		0xa5, 0xa1, 0x65, 0xb3, 0x52, 0xcf, 0x54, 0x2a, 0x75, 0x29, 0xfa, 0xdc, 0x1b, 0x59, 0xdc, 0x09,
		0x8d, 0xfe, 0x59, 0xf4, 0x06, 0xe7, 0xe1, 0x0b, 0x74, 0x3e, 0x45, 0x2f, 0xf0, 0xfc, 0xdb, 0xce,
		0xe5, 0xe4, 0x05, 0x3a, 0xe7, 0x96, 0xcd, 0x3a, 0x5f, 0x26, 0x2f, 0x70, 0x34, 0xfd, 0xfc, 0x77,
		0x7a, 0x96, 0x46, 0x60, 0x59, 0x8a, 0x8e, 0xeb, 0x18, 0x0b, 0x73, 0x22, 0xba, 0x30, 0x91, 0x03,
		0x5c, 0x1a, 0x49, 0x50, 0x38, 0x42, 0xfb, 0x52, 0x11, 0x7c, 0x4c, 0x16, 0x1f, 0x55, 0xb0, 0x91,
		0x08, 0x17, 0x55, 0x31, 0x91, 0x0c, 0x0f, 0xc9, 0xb0, 0x90, 0x0e, 0x07, 0xf5, 0x1a, 0xa2, 0xcf,
		0xb6, 0x27, 0xb7, 0xf0, 0xa6, 0xe5, 0x1b, 0x0f, 0xb6, 0xdb, 0x37, 0x49, 0x73, 0xc8, 0x2b, 0x47,
		0x45, 0x34, 0x86, 0x68, 0x0c, 0xd1, 0x18, 0xa2, 0x31, 0x44, 0x63, 0x88, 0xc6, 0x10, 0x8d, 0x6d,
		0x67, 0x34, 0x26, 0xc1, 0x94, 0x26, 0x77, 0x07, 0xb6, 0x65, 0xb8, 0x43, 0xf2, 0x43, 0x8c, 0x6b,
		0x47, 0x06, 0xa9, 0x80, 0x54, 0x40, 0x2a, 0x20, 0x15, 0x90, 0x0a, 0x48, 0x05, 0xa4, 0x02, 0x52,
		0x89, 0x39, 0xcd, 0x33, 0x8a, 0xa0, 0x6c, 0xad, 0xbd, 0x62, 0x4c, 0xd0, 0x09, 0xe8, 0x04, 0x74,
		0x02, 0x3a, 0x01, 0x9d, 0x80, 0x4e, 0x40, 0x27, 0xa0, 0x93, 0x98, 0xd3, 0x3c, 0x57, 0xcc, 0x6f,
		0xde, 0xba, 0x1e, 0x5d, 0x01, 0xde, 0xba, 0x81, 0xc1, 0x29, 0xe0, 0x14, 0x70, 0x0a, 0x38, 0x05,
		0x9c, 0x02, 0x4e, 0x01, 0xa7, 0x80, 0x53, 0xc4, 0x39, 0x85, 0xdb, 0x03, 0xe6, 0x8e, 0xb4, 0x90,
		0xca, 0x8b, 0xa1, 0xc1, 0x2a, 0x60, 0x15, 0xb0, 0x0a, 0x58, 0x05, 0xac, 0x02, 0x56, 0x01, 0xab,
		0x80, 0x55, 0x62, 0x4e, 0x73, 0xd7, 0xe4, 0xa6, 0xd1, 0xb7, 0x9d, 0xbf, 0xc8, 0x10, 0x65, 0x69,
		0x44, 0x90, 0x09, 0xc8, 0x04, 0x64, 0x02, 0x32, 0x01, 0x99, 0x80, 0x4c, 0x40, 0x26, 0x20, 0x93,
		0x98, 0xd3, 0xcc, 0x2c, 0xcf, 0x22, 0x83, 0x92, 0xf9, 0xc1, 0xc0, 0x23, 0xe0, 0x11, 0xf0, 0x08,
		0x78, 0x04, 0x3c, 0x02, 0x1e, 0x01, 0x8f, 0x80, 0x47, 0x62, 0x4e, 0x73, 0x70, 0xe1, 0xba, 0xe5,
		0x3a, 0xdc, 0x73, 0xfb, 0xc6, 0xd0, 0x73, 0xb9, 0x6b, 0xb9, 0x74, 0xf7, 0x7d, 0xbc, 0x3a, 0x3a,
		0x88, 0x05, 0xc4, 0x02, 0x62, 0x01, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x20, 0x16, 0x10, 0x4b, 0xcc,
		0x69, 0xb6, 0x27, 0x76, 0xcf, 0x21, 0xbc, 0x94, 0xec, 0xe5, 0x80, 0xe0, 0x12, 0x70, 0x09, 0xb8,
		0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0x80, 0x4b, 0xc0, 0x25, 0x31, 0xa7, 0x79, 0x60, 0xf6, 0x27,
		0x26, 0x9f, 0xf8, 0x9c, 0xf1, 0xca, 0x51, 0x41, 0x28, 0x20, 0x14, 0x10, 0x0a, 0x08, 0x05, 0x84,
		0x02, 0x42, 0x01, 0xa1, 0x80, 0x50, 0x62, 0x4e, 0xf3, 0xd0, 0xb5, 0x7d, 0xd7, 0x21, 0x06, 0x94,
		0x55, 0x83, 0x82, 0x4f, 0xc0, 0x27, 0xe0, 0x13, 0xf0, 0x09, 0xf8, 0x04, 0x7c, 0x02, 0x3e, 0x01,
		0x9f, 0xc4, 0x9c, 0x66, 0x8f, 0x59, 0xcc, 0x7e, 0x60, 0x9e, 0xe1, 0x3e, 0x30, 0x2f, 0x28, 0x1d,
		0xa1, 0x82, 0x94, 0xb5, 0x23, 0x83, 0x54, 0x40, 0x2a, 0x20, 0x15, 0x90, 0x0a, 0x48, 0x05, 0xa4,
		0x02, 0x52, 0x01, 0xa9, 0xc4, 0x9c, 0x66, 0x7f, 0xe4, 0x0d, 0x3d, 0xdb, 0x67, 0x46, 0xd7, 0xfd,
		0x46, 0x77, 0x3b, 0xcf, 0xca, 0x51, 0x41, 0x28, 0x20, 0x14, 0x10, 0x0a, 0x08, 0x05, 0x84, 0x02,
		0x42, 0x01, 0xa1, 0x80, 0x50, 0x62, 0x4e, 0x33, 0xef, 0x0f, 0x8d, 0xa9, 0x77, 0x22, 0xbf, 0x9e,
		0x67, 0xfd, 0xd0, 0x60, 0x15, 0xb0, 0x0a, 0x58, 0x05, 0xac, 0x02, 0x56, 0x01, 0xab, 0x80, 0x55,
		0xc0, 0x2a, 0x71, 0x59, 0xc5, 0xe5, 0x84, 0xc7, 0x79, 0x16, 0x46, 0x03, 0x91, 0x80, 0x48, 0x40,
		0x24, 0x20, 0x12, 0x10, 0x09, 0x88, 0x04, 0x44, 0x02, 0x22, 0x89, 0x39, 0xcd, 0x23, 0xa7, 0xcb,
		0x7a, 0xb6, 0x43, 0x98, 0x34, 0x59, 0x1a, 0x11, 0x64, 0x02, 0x32, 0x01, 0x99, 0x80, 0x4c, 0x40,
		0x26, 0x20, 0x13, 0x90, 0x09, 0xc8, 0x24, 0x36, 0x99, 0xb0, 0xef, 0x43, 0x66, 0x71, 0xd6, 0x35,
		0xe6, 0x6e, 0xcd, 0xa1, 0xa3, 0x94, 0x57, 0x46, 0x07, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x20, 0x16,
		0x10, 0x0b, 0x88, 0x05, 0xc4, 0x02, 0x62, 0x89, 0x4d, 0x2c, 0xfe, 0x68, 0x38, 0x74, 0xbd, 0x09,
		0x54, 0x78, 0xec, 0xbf, 0x23, 0xe6, 0x73, 0x42, 0x5e, 0x59, 0x3b, 0x36, 0x68, 0x05, 0xb4, 0x02,
		0x5a, 0x01, 0xad, 0x80, 0x56, 0x40, 0x2b, 0xa0, 0x95, 0xed, 0xa4, 0x95, 0x77, 0x1a, 0x65, 0xb4,
		0x78, 0xe8, 0x38, 0x2e, 0x37, 0x27, 0x4b, 0x22, 0x25, 0x96, 0x45, 0xdf, 0xba, 0x67, 0x03, 0x73,
		0x68, 0xf2, 0xfb, 0x89, 0xc5, 0x2d, 0xb9, 0x43, 0xe6, 0x58, 0x01, 0x3d, 0x44, 0x7e, 0xa7, 0x64,
		0xb9, 0x83, 0xa1, 0xeb, 0x30, 0x87, 0xfb, 0xcf, 0xbf, 0x2d, 0xf9, 0xdc, 0xe4, 0xac, 0x34, 0xb4,
		0x6c, 0x56, 0x72, 0x5c, 0xc7, 0xe8, 0x99, 0x4a, 0xe5, 0x2e, 0x45, 0x9f, 0x7b, 0x23, 0x8b, 0x3b,
		0xa1, 0xe1, 0x3f, 0x8b, 0xde, 0xe2, 0x3c, 0x7c, 0x89, 0xce, 0xa7, 0xe8, 0x25, 0x9e, 0x7f, 0xdb,
		0xb9, 0x9c, 0xbc, 0x44, 0xe7, 0xdc, 0xb2, 0x59, 0xe7, 0xd4, 0x75, 0xbe, 0x4c, 0xde, 0xe1, 0x68,
		0xfa, 0x0a, 0xef, 0xf4, 0xac, 0x50, 0xbc, 0x9f, 0x8c, 0xb9, 0x86, 0xb2, 0x6b, 0x47, 0xb0, 0x66,
		0x02, 0x4b, 0xa4, 0xbc, 0x34, 0xf1, 0xd6, 0xe2, 0xed, 0x99, 0x8d, 0x31, 0xab, 0x45, 0x8f, 0x0d,
		0xdc, 0x07, 0xf3, 0xb6, 0x1f, 0x1f, 0x40, 0xe6, 0x0e, 0xe7, 0xcf, 0x1e, 0x8d, 0xb9, 0x7a, 0x62,
		0xc6, 0x5b, 0x98, 0xc9, 0x65, 0x18, 0x5c, 0x91, 0xb9, 0x65, 0x19, 0x5b, 0x99, 0xa9, 0x95, 0x19,
		0x5a, 0x9d, 0x99, 0x69, 0x35, 0x5b, 0x98, 0x81, 0xa3, 0x95, 0xbb, 0x75, 0xdd, 0x3e, 0x33, 0x1d,
		0x91, 0x55, 0x0b, 0x05, 0xb1, 0x52, 0x49, 0x50, 0xd1, 0x7c, 0xe6, 0xd9, 0x66, 0xdf, 0x70, 0x5c,
		0x71, 0x45, 0x7b, 0x7e, 0x14, 0x8a, 0x06, 0x45, 0x4b, 0x4d, 0xd1, 0x7c, 0xee, 0xd9, 0xce, 0x9d,
		0x8c, 0x9e, 0xed, 0x27, 0xa9, 0x67, 0x6e, 0x8f, 0x7f, 0x33, 0x3d, 0x66, 0x3c, 0x30, 0xcf, 0x17,
		0x01, 0x85, 0xe7, 0xef, 0xf9, 0x72, 0x04, 0x68, 0x1d, 0xb4, 0x0e, 0x5a, 0xf7, 0xea, 0x67, 0x72,
		0x36, 0x18, 0x32, 0xcf, 0xe4, 0x23, 0x4f, 0x02, 0x24, 0xe7, 0x1f, 0x16, 0xd3, 0xb5, 0x0a, 0x74,
		0x0d, 0xba, 0xf6, 0xf2, 0x75, 0x3e, 0xdb, 0x9e, 0xd8, 0xc2, 0x99, 0x7d, 0xd3, 0x1b, 0x18, 0x3e,
		0x7b, 0x60, 0x9e, 0xcd, 0x1f, 0xc5, 0x57, 0x60, 0xb6, 0xf0, 0x2f, 0xc6, 0x11, 0x9c, 0x45, 0xb9,
		0xd4, 0x96, 0xf4, 0xce, 0x85, 0xca, 0x8e, 0x05, 0xd1, 0x4e, 0x85, 0xea, 0x0e, 0x05, 0xd9, 0xce,
		0x04, 0xd9, 0x8e, 0x04, 0xdd, 0x4e, 0x84, 0xde, 0x1c, 0x98, 0xf4, 0x8e, 0xc3, 0xf3, 0xe5, 0x4b,
		0x5d, 0xe6, 0x70, 0x9b, 0x3f, 0x7a, 0xac, 0x27, 0xb3, 0xf2, 0x33, 0xfb, 0x2d, 0x91, 0x65, 0x2d,
		0x1e, 0x87, 0x1f, 0xfd, 0xd1, 0xf4, 0x99, 0xfa, 0x56, 0xe4, 0xd9, 0xf9, 0xd1, 0xe9, 0xa7, 0xb3,
		0xd3, 0x2f, 0xc7, 0x3f, 0x77, 0x0e, 0xbf, 0x1e, 0x5e, 0x9c, 0x74, 0x2e, 0x8f, 0x7e, 0x3b, 0xba,
		0x38, 0xbe, 0xfa, 0x8f, 0xac, 0x2c, 0x05, 0x39, 0x65, 0x5f, 0x69, 0xf3, 0x43, 0x71, 0xc3, 0x6e,
		0xf6, 0xd5, 0x4e, 0x0e, 0xff, 0xdf, 0xd9, 0x85, 0xc2, 0x26, 0xd8, 0xfb, 0xb4, 0xbf, 0xc0, 0xaf,
		0xa7, 0xbf, 0x9c, 0x9e, 0xfd, 0x7e, 0x9a, 0xe7, 0xaf, 0xf0, 0xfb, 0xe1, 0xc5, 0xe9, 0xf1, 0xe9,
		0xcf, 0x79, 0xfe, 0x0a, 0x9f, 0x2e, 0x8e, 0xaf, 0x8e, 0x3f, 0x1d, 0x7e, 0xcd, 0xf3, 0x77, 0x38,
		0x39, 0x3e, 0x55, 0x52, 0x05, 0xa9, 0x27, 0xdb, 0xba, 0xad, 0xfe, 0x3b, 0x0d, 0x0b, 0x30, 0xa3,
		0x18, 0x6e, 0xf2, 0x91, 0xaf, 0xcc, 0x42, 0xd3, 0x51, 0x40, 0x42, 0x20, 0xa1, 0x8d, 0x25, 0x21,
		0xf1, 0xfc, 0xf3, 0x12, 0x05, 0x55, 0x32, 0xa3, 0xf6, 0xfc, 0xde, 0x63, 0xfe, 0xbd, 0xdb, 0xef,
		0xaa, 0x6a, 0xfe, 0xf3, 0x40, 0x50, 0x7e, 0x28, 0xff, 0xc6, 0x2a, 0xff, 0xc8, 0x76, 0x78, 0xad,
		0xaa, 0xa0, 0xfb, 0x2d, 0x89, 0x47, 0xd5, 0xaa, 0xab, 0x14, 0xca, 0xcc, 0x28, 0xaa, 0xa9, 0x88,
		0x4a, 0x78, 0xa8, 0xaa, 0xa7, 0x28, 0xeb, 0x73, 0x14, 0x30, 0x97, 0xa4, 0x4a, 0x8a, 0x7a, 0x6a,
		0xeb, 0xd5, 0x83, 0xfa, 0x41, 0xb3, 0x55, 0x3d, 0x68, 0x64, 0x68, 0x8e, 0x13, 0xaa, 0x41, 0x6a,
		0x67, 0xc1, 0x25, 0x3f, 0xdc, 0x29, 0xb8, 0xe1, 0x87, 0xbb, 0x2d, 0x73, 0xbd, 0x06, 0x7f, 0x1c,
		0x32, 0x1f, 0x0e, 0xf8, 0x15, 0x07, 0x1c, 0x4e, 0xd1, 0xc6, 0xb9, 0xe1, 0x2e, 0xb3, 0xec, 0x81,
		0xd9, 0x97, 0xaa, 0x7b, 0x8e, 0x28, 0xbc, 0x2a, 0xf1, 0xec, 0x92, 0x65, 0xab, 0x6c, 0xab, 0x3f,
		0xaf, 0xc2, 0x9f, 0xeb, 0xf2, 0xe7, 0xb5, 0x0d, 0x9c, 0xda, 0x2d, 0x72, 0xe3, 0xb6, 0xe3, 0x73,
		0x33, 0x30, 0xc5, 0x92, 0xae, 0x7c, 0x36, 0x00, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39,
		0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x79, 0x7a, 0xee, 0x9c, 0x33, 0xef, 0xc1, 0xec, 0xab, 0xf8, 0xf3,
		0x70, 0x84, 0xed, 0x70, 0xe8, 0xf0, 0xe3, 0xeb, 0xfc, 0xf8, 0x86, 0xba, 0x6f, 0x9f, 0x9b, 0xdc,
		0x90, 0x14, 0xf2, 0x82, 0xda, 0x09, 0xe4, 0xe2, 0xaf, 0xce, 0xd4, 0x96, 0x15, 0x1d, 0xd3, 0x71,
		0x7d, 0x66, 0xb9, 0x4e, 0x57, 0x4a, 0xf6, 0x90, 0x63, 0x87, 0x13, 0x4f, 0x62, 0x6a, 0xe9, 0x4f,
		0x1e, 0xc3, 0xaf, 0xcb, 0xf9, 0xf5, 0x81, 0x84, 0x74, 0x44, 0x26, 0x6f, 0xf2, 0x30, 0xc2, 0x73,
		0xb8, 0x75, 0x84, 0xe7, 0x08, 0xcf, 0x11, 0x9e, 0x23, 0x3c, 0x47, 0x78, 0x9e, 0xa2, 0x1b, 0x37,
		0xb8, 0x3d, 0x60, 0x4a, 0xbe, 0x7c, 0x3a, 0x02, 0xc2, 0x73, 0x84, 0xe7, 0x1b, 0xe8, 0xbe, 0x27,
		0xb2, 0xcd, 0x6d, 0xeb, 0x2f, 0x5f, 0xc9, 0x81, 0x23, 0x38, 0x47, 0x70, 0x8e, 0xe0, 0x1c, 0x5e,
		0x3d, 0x21, 0xaf, 0x2e, 0xa1, 0x78, 0xcf, 0x0e, 0xdd, 0x76, 0x10, 0x9c, 0xc3, 0xa9, 0x23, 0x38,
		0x47, 0x70, 0x8e, 0xe0, 0x1c, 0xc1, 0x39, 0x82, 0xf3, 0x34, 0xdd, 0xb8, 0x6a, 0x70, 0x3e, 0x1b,
		0x01, 0xc1, 0x39, 0x82, 0x73, 0x04, 0xe7, 0x08, 0xce, 0x11, 0x9c, 0x23, 0x38, 0x47, 0x70, 0x4e,
		0xef, 0xd5, 0x37, 0xa0, 0x6f, 0xb3, 0x78, 0x5f, 0xb9, 0x82, 0x6a, 0xfb, 0xe6, 0xab, 0xb9, 0x8f,
		0x4c, 0xb2, 0xfd, 0x9e, 0x88, 0xdf, 0x79, 0xf6, 0x35, 0x93, 0xa7, 0xd0, 0xdc, 0x12, 0x0d, 0xf7,
		0x14, 0xb5, 0x5b, 0xbe, 0xb9, 0xe5, 0xc8, 0x89, 0xdf, 0x5f, 0x75, 0x21, 0x41, 0x71, 0x20, 0xf0,
		0x4c, 0xf8, 0x7a, 0x62, 0x3c, 0x82, 0xd6, 0x68, 0x0b, 0xad, 0xd1, 0xfe, 0x75, 0x78, 0xf1, 0xf9,
		0xf7, 0xc3, 0x8b, 0xa3, 0xce, 0xa7, 0xb3, 0x93, 0xf3, 0xb3, 0xd3, 0xa3, 0xd3, 0xab, 0xfc, 0xb7,
		0x47, 0x3b, 0x3e, 0xbd, 0x3a, 0xfa, 0xf9, 0xe2, 0xf0, 0xea, 0xe8, 0x73, 0xe7, 0xd3, 0xf1, 0xc5,
		0xa7, 0x5f, 0x8f, 0xaf, 0xf2, 0xdc, 0xe1, 0xea, 0xf2, 0xe8, 0xf4, 0x32, 0xdf, 0xdd, 0xde, 0xce,
		0xcf, 0x7e, 0x3f, 0xba, 0xe8, 0x5c, 0xfe, 0x7a, 0x7e, 0xfe, 0xf5, 0x3f, 0x79, 0xfe, 0x1e, 0x57,
		0x17, 0x87, 0xa7, 0x97, 0x9f, 0x8e, 0x8e, 0x7f, 0x3b, 0xca, 0xf5, 0x72, 0x7c, 0xb9, 0xf8, 0x35,
		0xd7, 0xaf, 0x7f, 0x98, 0xeb, 0xbe, 0x81, 0x9f, 0xce, 0x4e, 0xaf, 0x2e, 0xce, 0xbe, 0x7e, 0x3d,
		0xba, 0xe8, 0x7c, 0x3a, 0xbc, 0xf8, 0x9c, 0x6f, 0xbd, 0xbe, 0xc8, 0xb7, 0x65, 0xbd, 0x3a, 0xbb,
		0x38, 0xfc, 0xf9, 0x28, 0xdf, 0xca, 0xf0, 0xf1, 0xe2, 0xf8, 0x53, 0xae, 0xf5, 0xe1, 0x3c, 0xd7,
		0xd6, 0xe8, 0xe3, 0xe1, 0xa7, 0x5f, 0xce, 0xbf, 0x1e, 0x9e, 0xe6, 0x5a, 0x8a, 0x3e, 0xfd, 0xeb,
		0xf0, 0xf2, 0xf2, 0xf8, 0x32, 0xcf, 0x5f, 0xe1, 0xeb, 0xf1, 0xe9, 0x91, 0xa2, 0x3d, 0xcd, 0x66,
		0x2b, 0xd0, 0xf7, 0x88, 0x6e, 0xe4, 0xa3, 0x9b, 0xcb, 0xb3, 0x2f, 0x57, 0x9b, 0x16, 0xdd, 0x44,
		0xdf, 0xe9, 0xe4, 0xec, 0xf3, 0xaf, 0x5f, 0x73, 0x6d, 0x77, 0xce, 0xce, 0x8f, 0x2e, 0x0e, 0xaf,
		0x8e, 0x4f, 0x7f, 0xee, 0x5c, 0xfe, 0xe7, 0xf2, 0xea, 0xe8, 0x24, 0xd7, 0x8e, 0xe0, 0xec, 0xec,
		0xaa, 0xf3, 0xf5, 0xec, 0xf0, 0x73, 0xbe, 0x83, 0x83, 0x97, 0x4b, 0xd2, 0xf9, 0xf5, 0xfc, 0xf3,
		0xe1, 0xd5, 0xd1, 0xf6, 0x76, 0x58, 0x6e, 0x27, 0x98, 0xed, 0x1d, 0xf9, 0xac, 0x6b, 0x0c, 0xdd,
		0x6f, 0xcc, 0x13, 0xcf, 0xf9, 0xce, 0x3d, 0x8b, 0xcc, 0x2f, 0x32, 0xbf, 0x6a, 0x06, 0x46, 0x25,
		0xf3, 0x2b, 0xda, 0x38, 0x55, 0xa2, 0x61, 0xaa, 0xe4, 0x56, 0xb4, 0x04, 0x1c, 0xa9, 0x6c, 0x3d,
		0xab, 0x5e, 0x5d, 0xaf, 0xb8, 0xd5, 0x4c, 0xb1, 0xe9, 0x29, 0xe1, 0x8f, 0x94, 0xb6, 0x94, 0xa9,
		0xa6, 0x4c, 0xb5, 0xc1, 0x29, 0xc9, 0xdc, 0x65, 0xdd, 0x21, 0xbd, 0x53, 0x58, 0xf9, 0xe2, 0xe1,
		0xe8, 0x6e, 0x62, 0xae, 0x58, 0x37, 0x96, 0x16, 0x0a, 0xfa, 0xb2, 0xd2, 0x9c, 0x05, 0xfc, 0x30,
		0xb7, 0x0f, 0xbc, 0xf2, 0xaf, 0x17, 0xfe, 0x36, 0xd8, 0x1f, 0x8e, 0xeb, 0x00, 0x3f, 0x33, 0xdf,
		0xf2, 0xec, 0x61, 0xb8, 0x7b, 0x5d, 0x3c, 0xec, 0x76, 0xfd, 0x82, 0x3f, 0x64, 0x96, 0xdd, 0xb3,
		0xad, 0x42, 0xd0, 0xed, 0xdc, 0x2f, 0x78, 0xac, 0x6f, 0x72, 0xd6, 0x2d, 0x70, 0xb7, 0x60, 0x16,
		0xa2, 0xcf, 0xdc, 0xdb, 0x90, 0xeb, 0xcc, 0xa6, 0x5f, 0x72, 0x2b, 0x3d, 0x6c, 0xf8, 0xd5, 0xf3,
		0x72, 0x95, 0x19, 0xfb, 0xef, 0xc8, 0x1e, 0x4e, 0x5e, 0xdf, 0xe8, 0x99, 0x76, 0x5f, 0xe4, 0x36,
		0xbe, 0xa5, 0x75, 0x5f, 0x1e, 0x4a, 0x70, 0x26, 0x5f, 0xe8, 0xcd, 0x71, 0x6f, 0xba, 0x1c, 0x05,
		0x7e, 0xcf, 0x0a, 0xf7, 0xa6, 0xd7, 0xfd, 0x66, 0x7a, 0xac, 0x60, 0x3b, 0x5d, 0xdb, 0x32, 0x39,
		0xf3, 0x0b, 0xfc, 0xde, 0xe4, 0xc1, 0xbf, 0x45, 0xea, 0xf3, 0x3f, 0x7e, 0x61, 0x78, 0xff, 0xe8,
		0xdb, 0x96, 0xd9, 0x2f, 0x44, 0x6f, 0x73, 0xe3, 0xdc, 0x9b, 0x7e, 0x61, 0xf2, 0x4a, 0xac, 0x2b,
		0xfe, 0x46, 0x3d, 0x73, 0xd4, 0x0f, 0x96, 0xb6, 0x67, 0xf6, 0xfd, 0x6d, 0x29, 0x22, 0x15, 0x56,
		0x5f, 0x55, 0x35, 0x26, 0x53, 0x67, 0x32, 0xb5, 0xa6, 0x52, 0xef, 0x44, 0xb2, 0x73, 0xb8, 0x94,
		0x64, 0xd9, 0x9c, 0x0d, 0x6c, 0x7f, 0x60, 0x72, 0xeb, 0x9e, 0xc2, 0x9e, 0x45, 0x63, 0x25, 0x6d,
		0xd0, 0x0a, 0xb6, 0xe3, 0x33, 0x6f, 0xc2, 0x09, 0xb6, 0xc3, 0xdd, 0xc9, 0xbf, 0xdd, 0x38, 0x66,
		0xaf, 0xc7, 0xac, 0xc9, 0x5f, 0xad, 0x34, 0x7b, 0x7d, 0xd7, 0x0a, 0xca, 0xe6, 0x0a, 0xb6, 0x5f,
		0x70, 0x7b, 0x05, 0xb3, 0xd0, 0xb5, 0x7b, 0x3d, 0xe6, 0x4d, 0xc6, 0xe2, 0x8f, 0x43, 0x36, 0xf9,
		0x0c, 0xa7, 0xf0, 0xed, 0xde, 0xe4, 0x37, 0x8e, 0xed, 0x17, 0xa6, 0x75, 0x6a, 0x23, 0x0f, 0x96,
		0x11, 0x96, 0x11, 0x96, 0x31, 0x7f, 0x96, 0x31, 0x91, 0x90, 0xad, 0xfd, 0x56, 0xc8, 0x26, 0x56,
		0xab, 0xab, 0x56, 0xa3, 0x5b, 0x8c, 0x73, 0xa3, 0xbb, 0x7c, 0x3d, 0xee, 0xeb, 0xe2, 0xbb, 0x7e,
		0x9e, 0x5e, 0x11, 0xcb, 0xa2, 0xcf, 0x5d, 0xcf, 0xbc, 0x7b, 0x5b, 0x0a, 0xe7, 0xda, 0x21, 0x4e,
		0x1f, 0x78, 0x63, 0xde, 0xe3, 0xc5, 0x80, 0xb1, 0x4d, 0xa6, 0x88, 0x89, 0x94, 0xcc, 0xa7, 0x8a,
		0x1a, 0x41, 0x69, 0xa3, 0x27, 0x6d, 0xe4, 0xe4, 0xf3, 0xa5, 0x6a, 0x69, 0x8f, 0xb8, 0x71, 0x5b,
		0xd1, 0x9a, 0xad, 0xa6, 0x60, 0xea, 0x23, 0x7c, 0x0e, 0xb7, 0xa5, 0x23, 0x85, 0xaf, 0x98, 0x62,
		0x48, 0xfe, 0x68, 0x46, 0x60, 0x0d, 0x4b, 0x42, 0x12, 0xac, 0xe4, 0x07, 0x82, 0xcf, 0xeb, 0x84,
		0x42, 0x9d, 0xe0, 0x36, 0xdd, 0xd4, 0xc1, 0x09, 0xab, 0xb6, 0x50, 0x6e, 0x52, 0x56, 0xb3, 0xab,
		0xd0, 0x6c, 0x68, 0xb6, 0x26, 0xcd, 0x16, 0x11, 0x60, 0x02, 0xc5, 0x8e, 0x01, 0x7a, 0x89, 0xed,
		0x76, 0x24, 0x86, 0xce, 0x71, 0x88, 0x52, 0x7d, 0x6e, 0xb5, 0xe0, 0xf3, 0xe8, 0xf6, 0xf9, 0x3b,
		0x09, 0x40, 0xf4, 0xc2, 0x63, 0x40, 0x69, 0xa0, 0xf4, 0x6b, 0x82, 0x25, 0xe1, 0x75, 0xe7, 0x9f,
		0x06, 0x56, 0xc3, 0xf9, 0x2a, 0x3a, 0x5f, 0xe1, 0x9d, 0x3b, 0xc1, 0x48, 0x50, 0x2d, 0x22, 0x94,
		0x14, 0xe1, 0xcc, 0xe4, 0x6d, 0x71, 0xdb, 0x36, 0xa9, 0xe8, 0x27, 0x93, 0xbb, 0x15, 0x55, 0x89,
		0xe8, 0xc1, 0x90, 0x5e, 0x14, 0xeb, 0xbd, 0x83, 0x51, 0xde, 0xa7, 0x52, 0x6f, 0x24, 0xab, 0x2e,
		0x14, 0x6a, 0x43, 0xac, 0x3e, 0x54, 0x6a, 0x44, 0xae, 0x4e, 0xe4, 0x6a, 0x45, 0xaf, 0x5e, 0x72,
		0x6a, 0x26, 0xa9, 0x6e, 0xd1, 0xeb, 0x4b, 0x6f, 0x99, 0x2c, 0x49, 0x4e, 0x9f, 0x99, 0x3d, 0xb9,
		0x63, 0x1f, 0x4b, 0xfe, 0xa6, 0xa5, 0x30, 0xc6, 0x79, 0x18, 0x2f, 0xed, 0xed, 0x95, 0xe6, 0xff,
		0xff, 0x1c, 0x1e, 0x4d, 0x5d, 0x61, 0x29, 0x50, 0xf8, 0x84, 0xda, 0xb0, 0xe8, 0xb5, 0x9c, 0x92,
		0x91, 0xbc, 0x7a, 0x9c, 0x39, 0x1f, 0x74, 0x2d, 0xfc, 0xa9, 0x24, 0x85, 0x1b, 0x2a, 0x11, 0xe9,
		0xfc, 0xab, 0x2c, 0xfc, 0x49, 0x28, 0xb3, 0x27, 0xbe, 0x5e, 0x22, 0xe5, 0x0a, 0x52, 0x8e, 0x4a,
		0xc5, 0x41, 0xe5, 0xbd, 0x4f, 0x2d, 0xf8, 0x2d, 0x47, 0xfc, 0xa6, 0xbe, 0xf7, 0x2e, 0xef, 0x40,
		0x54, 0x1c, 0xc7, 0xbc, 0xc3, 0x90, 0x76, 0x0d, 0x7a, 0x0c, 0x86, 0xd8, 0x16, 0xc1, 0x72, 0xd2,
		0x42, 0x30, 0xd3, 0x4a, 0x12, 0xf2, 0x55, 0x61, 0x32, 0x60, 0x32, 0x10, 0xf2, 0x21, 0xe4, 0x43,
		0xc8, 0x87, 0x90, 0x0f, 0x21, 0xdf, 0xf6, 0x84, 0x7c, 0x32, 0xb4, 0xa1, 0x27, 0xe2, 0x13, 0xd8,
		0xf2, 0x95, 0xe0, 0x37, 0xd2, 0x7d, 0x80, 0x5f, 0xd8, 0xa3, 0xa0, 0x27, 0x2a, 0x7e, 0xb5, 0x7d,
		0x7e, 0xc8, 0xb9, 0xe0, 0xfe, 0xc1, 0x89, 0xed, 0x1c, 0xf5, 0xd9, 0x20, 0xdc, 0x55, 0x15, 0xf0,
		0x3a, 0xc5, 0x13, 0xf3, 0xfb, 0xdc, 0x93, 0x6a, 0x6d, 0x75, 0x8b, 0x67, 0x5e, 0x97, 0x79, 0xac,
		0xfb, 0x71, 0xf2, 0xad, 0x9d, 0x51, 0xbf, 0x9f, 0xef, 0x8a, 0x86, 0xb5, 0xca, 0x90, 0x40, 0x79,
		0xc3, 0x5a, 0xf1, 0xdf, 0xb2, 0x5a, 0x07, 0x81, 0x8d, 0x7f, 0xaa, 0xe9, 0x96, 0xae, 0x7b, 0x78,
		0x27, 0x30, 0x93, 0x31, 0x4c, 0x43, 0x3c, 0x53, 0x10, 0x5f, 0xf5, 0x95, 0x54, 0x3d, 0x9e, 0x6a,
		0xaf, 0xfb, 0xb2, 0x31, 0xc5, 0x45, 0x56, 0x4c, 0x8a, 0xaf, 0x16, 0x6c, 0x4b, 0x08, 0xc4, 0x6a,
		0x11, 0x58, 0x5e, 0xe0, 0xc5, 0xbf, 0x79, 0xf1, 0xed, 0xdf, 0xfa, 0xd6, 0x62, 0xdf, 0x76, 0xc5,
		0x77, 0x14, 0xf9, 0x6e, 0x8b, 0xdf, 0xe8, 0xf9, 0xbd, 0xe7, 0xde, 0xb9, 0x78, 0x67, 0xfa, 0x7f,
		0xb1, 0xe5, 0xea, 0x89, 0x08, 0x07, 0xc3, 0x7f, 0x7f, 0xf1, 0x2d, 0x57, 0x67, 0x14, 0xd6, 0x86,
		0x40, 0xaf, 0x85, 0x36, 0xaf, 0x7f, 0x52, 0x9c, 0x28, 0x24, 0x76, 0x74, 0x11, 0x3b, 0x6a, 0x58,
		0x88, 0x06, 0xc2, 0xf7, 0x12, 0x94, 0x83, 0x75, 0x71, 0x70, 0xd1, 0xe2, 0x5e, 0xdf, 0xb0, 0x1d,
		0xce, 0xbc, 0x9e, 0xf9, 0xda, 0x97, 0x8a, 0x76, 0xf9, 0x17, 0x7f, 0x7e, 0x9d, 0x65, 0x79, 0x35,
		0x76, 0x7d, 0x33, 0x36, 0x8d, 0x13, 0x7b, 0xbe, 0xbd, 0x50, 0xa2, 0x61, 0xa3, 0x70, 0x58, 0x28,
		0x1c, 0xf6, 0xc5, 0x5a, 0x48, 0x39, 0x5b, 0xfe, 0x66, 0xc4, 0x35, 0x97, 0xb3, 0xf3, 0x6c, 0xe7,
		0xb5, 0x8d, 0x93, 0x48, 0x9d, 0xf6, 0xe3, 0x9a, 0xa0, 0x15, 0x4a, 0xe2, 0x99, 0x5d, 0x7b, 0xe4,
		0x1b, 0x26, 0xe7, 0x9e, 0x7d, 0x3b, 0xe2, 0x31, 0x24, 0x6b, 0xe9, 0x09, 0xc8, 0x16, 0x64, 0x4b,
		0x9b, 0x7b, 0x9b, 0xce, 0x50, 0x69, 0xbd, 0x95, 0x5f, 0xe7, 0xd8, 0x7e, 0x0e, 0x9e, 0xe8, 0xfc,
		0xbc, 0x62, 0x86, 0x57, 0xbb, 0xb4, 0xff, 0xcf, 0xb5, 0x1d, 0xd6, 0x35, 0xcc, 0xa1, 0xbf, 0xde,
		0xad, 0xcd, 0xfd, 0x4c, 0x02, 0xae, 0xcd, 0x1c, 0x1a, 0x03, 0xd3, 0x31, 0xef, 0x56, 0xb6, 0xe0,
		0x4a, 0xd9, 0xbd, 0xcd, 0xbd, 0x1b, 0x95, 0x8b, 0x8b, 0x26, 0xf7, 0x6d, 0x1b, 0xf4, 0xfc, 0xa3,
		0xaf, 0x1b, 0x9f, 0xca, 0x5b, 0xc6, 0xa7, 0x4a, 0x60, 0x7c, 0x5e, 0x5d, 0xa6, 0x8c, 0x1b, 0xa0,
		0xd7, 0x96, 0x51, 0xce, 0x08, 0xbd, 0x95, 0xc9, 0x2f, 0xde, 0xbb, 0x3e, 0x8f, 0x95, 0xb5, 0x8f,
		0x26, 0x38, 0x7a, 0x22, 0x5e, 0x35, 0x77, 0x39, 0xcd, 0x6a, 0xee, 0x58, 0xc2, 0x20, 0x9b, 0x28,
		0x4f, 0xb9, 0x98, 0x3b, 0x8e, 0xb0, 0xd0, 0xe4, 0x0c, 0x62, 0xe7, 0xa5, 0x25, 0xf2, 0xcf, 0x22,
		0x79, 0xe6, 0xf9, 0x7c, 0xf2, 0xf4, 0xaa, 0xa0, 0x48, 0x16, 0xb5, 0x1c, 0x18, 0x8e, 0xb3, 0xc9,
		0x2b, 0xb4, 0xa9, 0x2b, 0x7c, 0xc2, 0xa1, 0x0a, 0x9d, 0xc8, 0xa8, 0x4e, 0xc4, 0x3e, 0xdf, 0xc0,
		0x1c, 0xf3, 0xb6, 0x1f, 0x34, 0x52, 0x13, 0x3c, 0xda, 0x30, 0x7b, 0x70, 0x03, 0xfa, 0x7d, 0x0a,
		0x89, 0x9c, 0xea, 0xbe, 0x65, 0xc6, 0x0e, 0x35, 0x88, 0x88, 0xa4, 0x9e, 0xbd, 0x0c, 0xf9, 0x6e,
		0x9f, 0xe2, 0x4d, 0x37, 0x04, 0x9b, 0x6d, 0xd0, 0x9c, 0xd8, 0x8d, 0xcd, 0x30, 0xb2, 0x2c, 0x03,
		0x25, 0x83, 0x92, 0x69, 0x53, 0xb2, 0xae, 0x3b, 0x30, 0x6d, 0xc7, 0x10, 0x2c, 0x7a, 0x79, 0x4e,
		0x09, 0x08, 0x3c, 0xf3, 0x95, 0x39, 0x77, 0x01, 0x41, 0x6d, 0x45, 0x67, 0xdd, 0x0a, 0x3a, 0xeb,
		0x8a, 0x4e, 0x59, 0xb5, 0x51, 0xdb, 0xc0, 0x96, 0xba, 0x02, 0x1a, 0x72, 0x6e, 0x72, 0xce, 0x3c,
		0x47, 0x58, 0x45, 0x8a, 0x3b, 0x3b, 0x3b, 0x3b, 0xd7, 0xa6, 0xf1, 0xf7, 0xa1, 0xf1, 0x47, 0xd9,
		0x38, 0xe8, 0xb4, 0xe7, 0xfe, 0x70, 0x73, 0x63, 0x74, 0xda, 0xbb, 0x3f, 0xca, 0xef, 0x9b, 0x95,
		0xf1, 0xee, 0x4f, 0xcf, 0x7f, 0xdf, 0xbe, 0xb9, 0xd9, 0xdb, 0xfd, 0xa7, 0xcc, 0x53, 0x3f, 0xed,
		0x3e, 0x4d, 0x9e, 0x2d, 0xea, 0x99, 0x82, 0xb3, 0xcb, 0xe3, 0x7f, 0x4b, 0xcf, 0xc3, 0x9f, 0x69,
		0x4c, 0xc4, 0x3f, 0x8a, 0x99, 0x6c, 0xf8, 0x6f, 0x0f, 0x1f, 0xea, 0xe2, 0x4c, 0x12, 0x3c, 0x05,
		0x1e, 0x01, 0x8f, 0xa4, 0xc4, 0x23, 0x13, 0xf9, 0x33, 0xcc, 0x6e, 0xd7, 0x63, 0xbe, 0xaf, 0x1b,
		0x48, 0xe4, 0xcd, 0xed, 0xf5, 0xc4, 0x02, 0x3c, 0x5d, 0x57, 0x8c, 0x83, 0xf6, 0xf4, 0xb7, 0x95,
		0xe0, 0x97, 0x1f, 0xd5, 0xf1, 0x53, 0xf5, 0xba, 0x6c, 0xd4, 0xc3, 0xbf, 0xad, 0x36, 0xae, 0xcb,
		0x46, 0xa3, 0xbd, 0xbb, 0x73, 0x73, 0xb3, 0x27, 0xfa, 0xcc, 0xee, 0x8f, 0xda, 0x38, 0xa3, 0x26,
		0x36, 0xa1, 0x6f, 0x9f, 0x61, 0xc3, 0xda, 0x94, 0x32, 0xac, 0x4d, 0x18, 0x56, 0x18, 0xd6, 0x14,
		0x0d, 0x6b, 0x33, 0xfb, 0x86, 0x35, 0xb0, 0x13, 0xa6, 0xd1, 0x3b, 0x34, 0xbe, 0xb4, 0x7f, 0x54,
		0xde, 0xd7, 0xc7, 0x1f, 0x76, 0x7f, 0xb4, 0xc6, 0x2f, 0xff, 0xf2, 0x69, 0xd5, 0x8f, 0x55, 0xde,
		0xb7, 0xc6, 0x1f, 0xd6, 0xfc, 0x4b, 0x73, 0xfc, 0x21, 0xe6, 0x18, 0x8d, 0xf1, 0xce, 0xd2, 0x8f,
		0x4e, 0xfe, 0xbe, 0xba, 0xee, 0x81, 0xfa, 0x9a, 0x07, 0x6a, 0xeb, 0x1e, 0xa8, 0xad, 0x79, 0x60,
		0xed, 0x2b, 0x55, 0xd7, 0x3c, 0xd0, 0x18, 0x3f, 0x2d, 0xfd, 0xfc, 0xce, 0xea, 0x1f, 0x6d, 0x8e,
		0x77, 0x9f, 0xd6, 0xfd, 0x5b, 0x6b, 0xfc, 0xf4, 0x61, 0x77, 0x37, 0xc3, 0xae, 0x06, 0xe2, 0x90,
		0xbc, 0x38, 0x64, 0xd4, 0xf5, 0x0e, 0x4c, 0x4b, 0xdc, 0xf3, 0x4e, 0x1e, 0x82, 0xe3, 0x85, 0xe3,
		0x4d, 0xc9, 0xf1, 0x0e, 0x4c, 0x2b, 0xf3, 0x7e, 0x77, 0xde, 0x10, 0xbc, 0xb4, 0x2f, 0xd5, 0xf1,
		0xee, 0x8f, 0x46, 0x36, 0x43, 0x91, 0xb7, 0x5f, 0x3b, 0xab, 0x76, 0xcc, 0xed, 0xb2, 0xbe, 0x84,
		0x25, 0x0b, 0x1e, 0x83, 0x2d, 0x83, 0x2d, 0x4b, 0xc9, 0x96, 0xbd, 0x59, 0x2b, 0xba, 0xde, 0x8c,
		0x25, 0xa8, 0x5d, 0xee, 0x50, 0xb2, 0x8b, 0xf2, 0xec, 0x41, 0x68, 0x18, 0x34, 0x2c, 0xad, 0x30,
		0x5d, 0xea, 0xa6, 0x74, 0x99, 0x1b, 0xd2, 0xd5, 0x6e, 0x46, 0x8f, 0x5e, 0xf8, 0xf0, 0xbc, 0x73,
		0x79, 0x75, 0x78, 0x75, 0x24, 0xba, 0xe2, 0x0a, 0x97, 0x9e, 0x2b, 0x36, 0x78, 0xf8, 0xf5, 0xfc,
		0xe7, 0x8b, 0xc3, 0xcf, 0xc7, 0xa7, 0x3f, 0x17, 0x93, 0xd8, 0x59, 0x55, 0x7e, 0xd9, 0x3c, 0xbc,
		0xe5, 0xe7, 0xb3, 0xdf, 0x4f, 0x75, 0xb7, 0x11, 0x69, 0x27, 0x7f, 0x25, 0x4e, 0x0c, 0x5f, 0x13,
		0xdc, 0x8a, 0x6d, 0xf8, 0x82, 0x75, 0x8a, 0xb3, 0x79, 0x5b, 0x78, 0x1a, 0x5e, 0x07, 0x5e, 0x27,
		0x25, 0xaf, 0xc3, 0x9c, 0xd1, 0x80, 0x79, 0xd3, 0x43, 0x39, 0x12, 0x5e, 0xa7, 0x2e, 0xf0, 0xcc,
		0x91, 0x33, 0x1a, 0x4c, 0x5e, 0x32, 0x49, 0x25, 0xf5, 0x99, 0x67, 0x9b, 0x12, 0xf1, 0x56, 0xf8,
		0x1c, 0x14, 0x13, 0x8a, 0x89, 0x80, 0xeb, 0x35, 0xfd, 0x72, 0x7b, 0xfc, 0x9b, 0xe9, 0x31, 0xe3,
		0x81, 0x79, 0xbe, 0x48, 0xa3, 0x8d, 0xe7, 0xef, 0xf9, 0x72, 0x04, 0xe8, 0x1c, 0x74, 0x0e, 0x3a,
		0xf7, 0xca, 0x67, 0x8e, 0x86, 0xdc, 0x96, 0x29, 0x3a, 0x0f, 0x9f, 0x83, 0x7e, 0x41, 0xbf, 0x52,
		0xd2, 0xaf, 0x91, 0xed, 0xf0, 0x5a, 0x55, 0x42, 0xbf, 0x04, 0x9a, 0xc1, 0x15, 0x2f, 0x4c, 0x27,
		0xb8, 0x6e, 0x73, 0x2b, 0x6a, 0xcd, 0xcb, 0xa8, 0x35, 0x17, 0x9d, 0xb2, 0x7a, 0xf5, 0xa0, 0x7e,
		0xd0, 0x6c, 0x55, 0x0f, 0x1a, 0x1b, 0x58, 0x72, 0xbe, 0x61, 0xbd, 0xbe, 0x9e, 0x8d, 0x5d, 0xe9,
		0xb9, 0xe9, 0xc2, 0xf3, 0x6f, 0xd5, 0x2f, 0x05, 0x3e, 0x1c, 0x9e, 0x4c, 0xc7, 0xef, 0xfc, 0xbf,
		0x60, 0xd0, 0xc3, 0xa1, 0x1f, 0xfd, 0x4e, 0xf1, 0x4e, 0x60, 0x99, 0xe6, 0x5e, 0x6f, 0x9c, 0x0b,
		0x43, 0x83, 0xaf, 0xf8, 0xb2, 0x21, 0xd3, 0xe2, 0xeb, 0x35, 0x69, 0x48, 0xbb, 0xc3, 0xd7, 0xca,
		0xaf, 0x2b, 0xd2, 0x0a, 0x65, 0xc5, 0x97, 0x8b, 0xd3, 0x10, 0x65, 0xc0, 0x7c, 0xdf, 0xbc, 0x63,
		0xaf, 0xb4, 0x43, 0x89, 0x7e, 0x22, 0x81, 0x66, 0x28, 0xae, 0x65, 0xac, 0xf9, 0xb8, 0x42, 0xfa,
		0xdd, 0x50, 0xe6, 0x5f, 0x8e, 0xac, 0xe3, 0xd7, 0xeb, 0xf7, 0x7c, 0xc5, 0xbb, 0xcf, 0x2b, 0x76,
		0x23, 0x14, 0x8a, 0x2e, 0x4c, 0xaf, 0x2f, 0x91, 0x28, 0x8d, 0x27, 0xdc, 0x09, 0xe5, 0xd5, 0x25,
		0x94, 0x33, 0xed, 0x6f, 0xb6, 0x42, 0xf1, 0xd9, 0x03, 0xf3, 0x6c, 0xfe, 0x28, 0xd0, 0xf3, 0x61,
		0xf6, 0x44, 0x0e, 0x5a, 0xa1, 0xc4, 0x13, 0x07, 0xd9, 0x20, 0x2d, 0xfd, 0x8b, 0x2d, 0xdf, 0x16,
		0x17, 0x1a, 0xa8, 0x12, 0x6f, 0x86, 0xe2, 0x3f, 0xfa, 0x7d, 0xf7, 0xce, 0x88, 0x29, 0x2c, 0xa2,
		0x69, 0xfd, 0x98, 0xe9, 0x7c, 0x2a, 0x40, 0x52, 0xe7, 0x85, 0xd9, 0x42, 0x95, 0xa2, 0xdf, 0xbc,
		0x79, 0x29, 0xd1, 0x5a, 0x5f, 0x7a, 0x12, 0x0e, 0xd1, 0x89, 0x7e, 0xf3, 0xda, 0xad, 0x42, 0xf1,
		0x7a, 0xf0, 0x75, 0xd9, 0xed, 0xe8, 0xce, 0x60, 0x0e, 0xf7, 0x6c, 0xe6, 0xbf, 0x6d, 0xf0, 0x17,
		0x7f, 0x1c, 0x76, 0x3f, 0x7f, 0x76, 0x7f, 0xba, 0x82, 0x3e, 0xf3, 0x1e, 0x6c, 0x4b, 0xa0, 0xe1,
		0xcf, 0xe2, 0x63, 0xf9, 0xb8, 0xda, 0x18, 0x1e, 0x80, 0xc0, 0x03, 0xc4, 0x6e, 0xfd, 0x23, 0x78,
		0x37, 0xac, 0xdc, 0x9d, 0xb0, 0x59, 0xbf, 0xce, 0x58, 0x40, 0xe4, 0x36, 0x2c, 0x43, 0x2c, 0x24,
		0x92, 0x7a, 0x52, 0xc4, 0xc2, 0xd7, 0x19, 0x8b, 0x76, 0xab, 0x5a, 0x5a, 0x71, 0xb1, 0xae, 0x55,
		0xcf, 0x2f, 0xca, 0x7a, 0xe6, 0xa8, 0x1f, 0x4c, 0x5b, 0xcf, 0xec, 0xfb, 0xdb, 0x72, 0xa1, 0x9e,
		0x84, 0x72, 0xa8, 0x2a, 0x09, 0x99, 0xb2, 0x90, 0x29, 0x0d, 0x9d, 0xf2, 0x48, 0xa6, 0x75, 0x13,
		0xbf, 0x50, 0x4f, 0xbc, 0xaf, 0xd6, 0x92, 0xb5, 0xaf, 0x64, 0xe1, 0x1a, 0xbc, 0x98, 0xc8, 0xf4,
		0x4a, 0xfc, 0x1c, 0x07, 0x9e, 0xa0, 0xec, 0x50, 0xf6, 0x1c, 0x2b, 0xbb, 0x5c, 0x3d, 0xf9, 0x92,
		0xc2, 0x4b, 0xec, 0x92, 0xa9, 0xd5, 0x97, 0x2f, 0x7d, 0x91, 0xcf, 0x47, 0x1f, 0x7f, 0xfd, 0xb9,
		0x73, 0x79, 0x74, 0xf1, 0xdb, 0xf1, 0xa7, 0xa3, 0x62, 0x66, 0xf6, 0xda, 0xc6, 0x19, 0xbf, 0xab,
		0x68, 0x39, 0xdf, 0xb1, 0x90, 0x32, 0x28, 0x2d, 0xc4, 0x91, 0xe2, 0x17, 0x34, 0x0b, 0xe4, 0x46,
		0x3e, 0x4f, 0x3e, 0xe9, 0x68, 0xfa, 0xb1, 0xd3, 0x3f, 0x5c, 0x4e, 0x3f, 0x55, 0xe8, 0x2e, 0x66,
		0xb2, 0x82, 0x50, 0x21, 0xdf, 0x21, 0xe9, 0x33, 0x32, 0x5d, 0x3e, 0x83, 0xe8, 0x28, 0xdd, 0xe8,
		0x48, 0xbe, 0x80, 0x46, 0xfc, 0x7e, 0x45, 0x99, 0xfb, 0x14, 0x57, 0xdc, 0x80, 0x3c, 0x93, 0xfe,
		0x24, 0x35, 0x55, 0xee, 0x24, 0x9f, 0xcc, 0x39, 0x3e, 0xe1, 0x1c, 0x46, 0x15, 0x5a, 0x8a, 0x1c,
		0x06, 0x72, 0x18, 0x08, 0x6b, 0x10, 0xd6, 0x20, 0x87, 0x81, 0x1c, 0x06, 0x94, 0x1d, 0xca, 0x8e,
		0x1c, 0x06, 0x72, 0x18, 0x29, 0xe7, 0x30, 0x44, 0x6f, 0x1c, 0x27, 0x49, 0x61, 0x08, 0x5c, 0x2e,
		0xae, 0xbb, 0xee, 0x3a, 0x2c, 0x22, 0x8e, 0x59, 0x1a, 0x20, 0x74, 0x6f, 0xb8, 0xf8, 0x7d, 0xe1,
		0x24, 0xf7, 0x84, 0x8b, 0xdd, 0x0f, 0x9e, 0x5c, 0x5d, 0xba, 0x90, 0x5c, 0xaa, 0xd4, 0xa7, 0x0b,
		0x48, 0x62, 0x31, 0xb7, 0x75, 0x58, 0x71, 0x4a, 0x99, 0x14, 0x66, 0x49, 0xa5, 0x28, 0xeb, 0xf5,
		0x24, 0x44, 0xac, 0xa4, 0x43, 0xa2, 0xb7, 0x10, 0xa2, 0x08, 0x4b, 0x2c, 0x88, 0x9f, 0x15, 0xaf,
		0xc7, 0x2f, 0xbf, 0x9a, 0x3d, 0x90, 0x83, 0x1b, 0xd7, 0x50, 0x78, 0x45, 0xe3, 0x57, 0x63, 0x17,
		0x5e, 0x99, 0xc3, 0xa1, 0x21, 0x77, 0x21, 0x54, 0xf4, 0x24, 0xb6, 0x17, 0x90, 0xb8, 0x4c, 0x6d,
		0x7b, 0x41, 0xfb, 0xf9, 0xf7, 0x98, 0xdf, 0x80, 0x7d, 0xe7, 0x9e, 0x69, 0x8c, 0x1c, 0x9f, 0x9b,
		0xb7, 0x7d, 0xc1, 0xef, 0xe2, 0xb1, 0x1e, 0xf3, 0x98, 0x63, 0x25, 0x72, 0x04, 0x78, 0x36, 0x71,
		0xc7, 0x47, 0x57, 0x5f, 0x0a, 0x17, 0x5f, 0x3e, 0x15, 0x1a, 0xf5, 0x6a, 0xfd, 0x7d, 0xe1, 0x92,
		0x05, 0x07, 0x44, 0x0b, 0xcd, 0xbd, 0xea, 0x5e, 0x63, 0x2f, 0xe5, 0x9c, 0xc5, 0xf3, 0x84, 0x64,
		0x29, 0x6d, 0xf1, 0xfa, 0x8c, 0x6d, 0xde, 0x81, 0xda, 0x38, 0xad, 0x61, 0x7d, 0x89, 0x9a, 0xdd,
		0xc9, 0x43, 0xf0, 0x19, 0xf0, 0x19, 0x9b, 0xeb, 0x33, 0xa8, 0x74, 0xcb, 0xee, 0x4a, 0x69, 0x97,
		0xdd, 0x85, 0x7e, 0x41, 0xbf, 0xc0, 0x64, 0x9b, 0xc4, 0x64, 0x2d, 0x30, 0x99, 0x20, 0x93, 0xb5,
		0xb6, 0x94, 0xc9, 0x86, 0x9e, 0xed, 0xc6, 0x3a, 0x9b, 0xbd, 0x24, 0x7e, 0xd1, 0x93, 0xf0, 0x1e,
		0xf0, 0x1e, 0xa9, 0x79, 0x8f, 0x91, 0xed, 0xf0, 0x7d, 0x09, 0xe7, 0xd1, 0x40, 0xc3, 0xad, 0xc5,
		0xc7, 0xd1, 0x70, 0x4b, 0x7a, 0xca, 0xaa, 0x8d, 0xed, 0xed, 0xb4, 0xb5, 0x85, 0x70, 0x55, 0x01,
		0x5b, 0x89, 0xb1, 0x55, 0x65, 0x5b, 0xd1, 0xca, 0xb5, 0x64, 0x62, 0xf2, 0xf0, 0x39, 0x60, 0x15,
		0xb0, 0x0a, 0x41, 0xf9, 0x06, 0xf9, 0x8d, 0x26, 0x82, 0x72, 0x41, 0xc7, 0xd1, 0xdc, 0xc4, 0xa0,
		0x5c, 0x69, 0xa7, 0xfe, 0xe8, 0x3b, 0x8f, 0x77, 0xb1, 0x90, 0x78, 0x89, 0x83, 0x6b, 0x19, 0xec,
		0x3b, 0xff, 0xc0, 0x59, 0x9f, 0x0d, 0x18, 0xf7, 0x1e, 0x0d, 0x93, 0xbb, 0x03, 0xdb, 0x92, 0xab,
		0x79, 0x08, 0xce, 0x69, 0x48, 0x14, 0x3d, 0xa8, 0x56, 0x3a, 0xbc, 0x71, 0x43, 0xa3, 0x8c, 0x3d,
		0x91, 0xb0, 0x23, 0x12, 0x06, 0x77, 0x41, 0x0b, 0x0a, 0x46, 0xe1, 0xea, 0x9e, 0x15, 0x2e, 0x83,
		0xfe, 0x66, 0x85, 0x73, 0xcf, 0xe5, 0xae, 0xe5, 0xf6, 0x13, 0x76, 0xa1, 0xb2, 0xd6, 0x82, 0xd6,
		0x8b, 0xc6, 0x99, 0x97, 0xc4, 0x6f, 0x4f, 0x6a, 0x67, 0xb6, 0x4a, 0x33, 0xa8, 0xd3, 0x2b, 0xc5,
		0x2b, 0xe1, 0x2a, 0x88, 0x55, 0x1c, 0x06, 0x75, 0xc0, 0xb3, 0x3f, 0x4a, 0xd7, 0x62, 0xbe, 0x47,
		0x9b, 0x48, 0xd4, 0xaa, 0xa9, 0x68, 0x0f, 0xda, 0x44, 0x92, 0x97, 0x27, 0xbf, 0x75, 0xac, 0x40,
		0xd4, 0x48, 0xa4, 0xdd, 0x49, 0x7a, 0xe9, 0x1b, 0x8a, 0x74, 0x91, 0x5e, 0xfa, 0x4e, 0x71, 0x7a,
		0x48, 0x0f, 0x3d, 0xf7, 0xc1, 0xf6, 0x6d, 0xd7, 0x09, 0x7a, 0x56, 0xaf, 0x6d, 0x24, 0xbd, 0xf8,
		0x63, 0x09, 0x74, 0x93, 0x7e, 0xf5, 0x1e, 0x91, 0x94, 0x9b, 0x49, 0xbf, 0x76, 0xcf, 0x87, 0x64,
		0x2f, 0xe9, 0xf9, 0xf9, 0x7d, 0xbb, 0xa6, 0x7d, 0xe1, 0xa7, 0x33, 0xd0, 0x5f, 0x34, 0xd6, 0xa5,
		0x2f, 0x19, 0xad, 0x6c, 0x8f, 0x73, 0x69, 0x0b, 0x71, 0x61, 0x7b, 0xcc, 0x26, 0x90, 0x62, 0xcd,
		0x1f, 0x33, 0xd1, 0x4f, 0x54, 0xe8, 0xf6, 0x9f, 0x9c, 0x91, 0x82, 0xc8, 0xed, 0x3e, 0x89, 0x75,
		0x13, 0x1d, 0x39, 0x93, 0x78, 0xd7, 0x72, 0xbb, 0x4c, 0xa6, 0xa7, 0xe8, 0xdc, 0xd3, 0xb8, 0x7a,
		0x0a, 0x57, 0x4f, 0xe5, 0x2f, 0x63, 0x2b, 0xd6, 0x38, 0x87, 0x33, 0xcf, 0x11, 0xce, 0xa8, 0x16,
		0xff, 0xbc, 0x3e, 0x34, 0xfe, 0x68, 0xff, 0xa8, 0x8e, 0xff, 0x11, 0x7f, 0x6a, 0xdb, 0x22, 0x2f,
		0x76, 0x76, 0x79, 0xfc, 0xef, 0x64, 0xdf, 0x2e, 0xc1, 0xad, 0xa4, 0xe8, 0xda, 0x1c, 0x61, 0xf3,
		0xf4, 0xc6, 0x85, 0x3b, 0x30, 0x4d, 0x30, 0x4d, 0xda, 0x4d, 0x53, 0xd7, 0x1d, 0x98, 0xb6, 0x23,
		0x72, 0xfc, 0x4b, 0xda, 0x3e, 0x7d, 0x65, 0xce, 0x5d, 0x10, 0x10, 0x6e, 0x45, 0xad, 0x4e, 0x05,
		0xb5, 0x3a, 0xa2, 0x53, 0x56, 0x6d, 0xd4, 0x36, 0xb0, 0x56, 0x27, 0x09, 0x0f, 0xbe, 0xb3, 0xb3,
		0xb3, 0x73, 0x6d, 0x1a, 0x7f, 0x1f, 0x1a, 0x7f, 0x94, 0x8d, 0x83, 0x4e, 0x7b, 0xee, 0x0f, 0x37,
		0x37, 0x46, 0xa7, 0xbd, 0xfb, 0xa3, 0xfc, 0xbe, 0x59, 0x19, 0xef, 0xfe, 0xf4, 0xfc, 0xf7, 0xed,
		0x9b, 0x9b, 0xbd, 0xdd, 0x7f, 0xca, 0x3c, 0xf5, 0xd3, 0xee, 0xd3, 0xe4, 0xd9, 0x4c, 0xb2, 0x42,
		0x1a, 0x13, 0x91, 0x51, 0x2e, 0x19, 0x98, 0x96, 0xc4, 0x99, 0x13, 0xd3, 0x02, 0x8d, 0x80, 0x46,
		0xd2, 0xa2, 0x91, 0x81, 0x69, 0x19, 0x66, 0xb7, 0xeb, 0x31, 0xdf, 0xcf, 0x6c, 0xb4, 0x74, 0x5d,
		0x36, 0x0e, 0x4c, 0xa3, 0x77, 0x68, 0x7c, 0x99, 0x04, 0x25, 0x3b, 0x1f, 0x16, 0xff, 0xbc, 0xfb,
		0xa3, 0x31, 0xce, 0x66, 0x14, 0xf5, 0xe6, 0x6b, 0xa7, 0x61, 0xc7, 0xb2, 0x77, 0xd5, 0xeb, 0xc2,
		0x3e, 0xc0, 0xc2, 0x9f, 0xe2, 0xb7, 0xa9, 0x8e, 0x71, 0x0d, 0xe6, 0xf9, 0x6c, 0xe0, 0xc3, 0xa1,
		0x3f, 0xff, 0x87, 0x58, 0x5d, 0xa9, 0xe5, 0xf6, 0x70, 0xe3, 0x38, 0x04, 0x01, 0x47, 0x90, 0x89,
		0x9d, 0x5b, 0xa4, 0x63, 0x29, 0x14, 0x49, 0x7c, 0xdf, 0x36, 0x7e, 0x2f, 0x68, 0x91, 0x1e, 0xd0,
		0x2b, 0x7a, 0x3f, 0x4f, 0xe4, 0x50, 0x47, 0x3d, 0x43, 0xac, 0xfe, 0xce, 0x42, 0x7d, 0x9d, 0x33,
		0xd1, 0x75, 0x07, 0xfa, 0x40, 0xa1, 0x0f, 0xd8, 0x9e, 0x00, 0x75, 0x6f, 0x11, 0x75, 0x63, 0x7b,
		0x02, 0xdb, 0x13, 0x2b, 0xc4, 0x02, 0xdb, 0x13, 0x30, 0x4d, 0x69, 0x9b, 0x26, 0x6c, 0x4f, 0x68,
		0xca, 0xb5, 0x63, 0x7b, 0x42, 0x78, 0xca, 0xb0, 0x3d, 0x81, 0xed, 0x09, 0x6c, 0x4f, 0x60, 0x7b,
		0x02, 0x34, 0x82, 0xed, 0x09, 0x6c, 0x4f, 0x50, 0x47, 0x51, 0xd8, 0x9e, 0x50, 0xdd, 0x9e, 0x88,
		0x7b, 0x03, 0x85, 0xca, 0xee, 0x44, 0x8c, 0x0b, 0x27, 0xa8, 0x4e, 0xd3, 0x84, 0x17, 0x4a, 0xac,
		0x37, 0xf9, 0xf1, 0x2e, 0x91, 0x88, 0x7f, 0x79, 0x84, 0xd2, 0xa5, 0x11, 0xf1, 0x2e, 0x8b, 0xd0,
		0x77, 0x72, 0x28, 0x96, 0x88, 0xc8, 0x9c, 0x23, 0x7a, 0x5b, 0x28, 0xd2, 0x3e, 0x52, 0xb4, 0xee,
		0xab, 0x8b, 0x9c, 0x2c, 0x5a, 0xfd, 0x2d, 0xe3, 0x1c, 0x2f, 0xf2, 0xcc, 0xae, 0xed, 0xbe, 0x72,
		0xae, 0x28, 0xfc, 0xf7, 0x04, 0x0e, 0x14, 0xb9, 0x96, 0xf1, 0xcd, 0xee, 0xd9, 0xc6, 0xf0, 0xfe,
		0x31, 0x7b, 0x27, 0x8a, 0xe6, 0x5f, 0x8e, 0xea, 0x48, 0x51, 0x30, 0xb5, 0x6f, 0x9f, 0x25, 0x9a,
		0xfe, 0x58, 0x06, 0x0e, 0x11, 0xbd, 0xbe, 0x40, 0xa2, 0x9c, 0x97, 0xfc, 0xfd, 0x18, 0xeb, 0x17,
		0x50, 0xce, 0xc2, 0x6f, 0xf1, 0x31, 0xa2, 0x78, 0xa2, 0x20, 0x8b, 0xfe, 0xe9, 0x9f, 0x38, 0x7e,
		0x5b, 0x54, 0x68, 0x18, 0x2b, 0xfe, 0xed, 0x18, 0xfd, 0xbe, 0xfb, 0x8d, 0x75, 0x0d, 0xeb, 0xde,
		0x74, 0x1c, 0xd6, 0xf7, 0x25, 0x6e, 0xc9, 0x78, 0x39, 0xc2, 0x66, 0x34, 0x81, 0x12, 0x10, 0xc3,
		0x0d, 0x8b, 0x44, 0x85, 0xc4, 0x34, 0x6b, 0xa1, 0xe8, 0x4c, 0x0a, 0x0d, 0x3e, 0x19, 0x02, 0x3d,
		0x36, 0x91, 0x18, 0x4f, 0x71, 0xca, 0xea, 0xb9, 0xc9, 0x8b, 0xbf, 0xdf, 0x06, 0x11, 0xae, 0x35,
		0x21, 0xc3, 0xb9, 0x9a, 0x33, 0xc8, 0xf0, 0xd2, 0x7a, 0xd4, 0xd1, 0xeb, 0x38, 0x5f, 0x73, 0x06,
		0x19, 0x5e, 0x5e, 0x8f, 0x3a, 0x64, 0x38, 0x57, 0x73, 0x06, 0x19, 0x5e, 0x5e, 0x8f, 0x7d, 0xc8,
		0x70, 0xae, 0xe6, 0x0c, 0x32, 0xbc, 0xb4, 0x1e, 0x8d, 0x2a, 0x64, 0x38, 0x57, 0x73, 0x06, 0x19,
		0x5e, 0x5e, 0x0f, 0xc4, 0x74, 0xf9, 0x9a, 0x33, 0xc8, 0xf0, 0xd2, 0x7a, 0x34, 0x11, 0xd3, 0xe5,
		0x6b, 0xce, 0x20, 0xc3, 0xcb, 0xeb, 0x81, 0x98, 0x2e, 0x5f, 0x73, 0x06, 0x19, 0x5e, 0x5a, 0x8f,
		0x4a, 0x19, 0x86, 0x38, 0x67, 0x93, 0x06, 0x29, 0x5e, 0xb1, 0x20, 0x30, 0xc5, 0x39, 0x9b, 0x34,
		0x48, 0xf1, 0x8a, 0x05, 0x41, 0x82, 0x2d, 0x67, 0x93, 0x06, 0x29, 0x5e, 0x5e, 0x90, 0x0a, 0x52,
		0x6c, 0x39, 0x9b, 0x34, 0x48, 0xf1, 0x8a, 0x05, 0x41, 0x92, 0x2d, 0x67, 0x93, 0x06, 0x29, 0x5e,
		0x5e, 0x90, 0x2a, 0xa2, 0xbb, 0x9c, 0x4d, 0x1a, 0xa4, 0x78, 0xc5, 0x82, 0x20, 0xba, 0xcb, 0xd9,
		0xa4, 0x41, 0x8a, 0x57, 0x2c, 0x08, 0xa2, 0xbb, 0x9c, 0x4d, 0x1a, 0xa4, 0x78, 0x79, 0x41, 0x6a,
		0x88, 0xee, 0x72, 0x36, 0x69, 0x90, 0xe2, 0x15, 0x0b, 0x82, 0xe8, 0x2e, 0x67, 0x93, 0x06, 0x29,
		0x5e, 0x5e, 0x10, 0x14, 0xc6, 0xe7, 0x6d, 0xd2, 0x20, 0xc5, 0x2b, 0x16, 0x04, 0xd1, 0x5d, 0xce,
		0x26, 0x0d, 0x52, 0xbc, 0x62, 0x41, 0x0e, 0x20, 0xc5, 0xf9, 0x9a, 0x34, 0x48, 0xf1, 0xf2, 0x82,
		0xa4, 0xda, 0xd6, 0x32, 0xaf, 0x52, 0x9c, 0xa3, 0x5e, 0xa0, 0x5b, 0x22, 0xc5, 0x2d, 0x48, 0x71,
		0xbe, 0x26, 0x0d, 0x52, 0xbc, 0xbc, 0x20, 0x4d, 0xb4, 0x9f, 0xc8, 0xd9, 0xa4, 0x41, 0x8a, 0x57,
		0x2c, 0x48, 0x03, 0x52, 0x9c, 0xaf, 0x49, 0xd3, 0xd5, 0x5d, 0x9c, 0xb4, 0x5b, 0x52, 0xac, 0x7e,
		0x9f, 0xab, 0x34, 0x22, 0x5e, 0xff, 0xcf, 0x55, 0x62, 0x21, 0xdd, 0x0f, 0x74, 0x69, 0xb0, 0x58,
		0xfd, 0x41, 0xc5, 0x67, 0x3a, 0x4e, 0xab, 0x6d, 0xd3, 0xe1, 0xcc, 0x71, 0x4c, 0xe3, 0xce, 0x14,
		0x30, 0x0e, 0xcf, 0x7d, 0xcf, 0xe6, 0x9f, 0x46, 0xcf, 0x33, 0xf4, 0x3c, 0x53, 0xd4, 0x62, 0xf9,
		0x9e, 0x67, 0xb6, 0xc3, 0xf7, 0x65, 0xfa, 0x6e, 0x6f, 0x6a, 0xab, 0xb3, 0x0a, 0xaa, 0x13, 0x52,
		0xf0, 0xd3, 0xd5, 0xd6, 0xd6, 0xfa, 0x69, 0x12, 0x6f, 0x74, 0xeb, 0xfb, 0x86, 0xe5, 0xf6, 0x5d,
		0xcf, 0xb0, 0xbb, 0xe2, 0xde, 0x68, 0xe1, 0x69, 0x78, 0x23, 0x78, 0xa3, 0xd4, 0xbc, 0xd1, 0x48,
		0xd2, 0x1d, 0xa1, 0xf3, 0xe6, 0x3a, 0xcb, 0x0a, 0x67, 0x24, 0x3a, 0x65, 0xcd, 0x1a, 0x7c, 0x11,
		0x89, 0x2f, 0xb2, 0x9d, 0x3b, 0x05, 0x5f, 0x14, 0xff, 0xf6, 0xcc, 0xe2, 0x67, 0xd6, 0x33, 0x47,
		0xfd, 0xc0, 0xfa, 0x4d, 0x8c, 0x27, 0x5c, 0x18, 0x5c, 0x58, 0x7a, 0x2e, 0xec, 0xd6, 0x75, 0xfb,
		0xcc, 0x74, 0x64, 0x62, 0xaa, 0x4a, 0x82, 0x5a, 0x1a, 0xf6, 0xba, 0x96, 0xb8, 0x60, 0x39, 0x7c,
		0x10, 0x4a, 0x06, 0x25, 0x03, 0x27, 0x82, 0x13, 0xb1, 0xb9, 0x00, 0x50, 0x54, 0x72, 0x41, 0xc6,
		0x37, 0xbb, 0x1b, 0x5c, 0x40, 0x25, 0xe7, 0x88, 0xc2, 0xc7, 0xc5, 0x51, 0xb1, 0x5a, 0x86, 0x0f,
		0x83, 0x0f, 0x83, 0x0f, 0xdb, 0x18, 0x1f, 0x86, 0x22, 0x7e, 0xe1, 0x29, 0xab, 0x36, 0xe0, 0xc3,
		0x94, 0x7c, 0x58, 0xd7, 0x32, 0xc5, 0x3d, 0xd7, 0xe4, 0x21, 0xa4, 0x36, 0xe0, 0xb1, 0x90, 0xda,
		0xd0, 0xa3, 0x93, 0x7c, 0x28, 0xa1, 0x93, 0x7c, 0x08, 0x9d, 0x84, 0x4e, 0x42, 0x27, 0xb5, 0xe9,
		0xa4, 0x31, 0x10, 0x00, 0x9e, 0x79, 0xbd, 0x0c, 0x1e, 0x14, 0xd7, 0xcd, 0x4a, 0x03, 0x9a, 0x09,
		0xcd, 0x4c, 0x4f, 0x33, 0x51, 0x59, 0x25, 0xfd, 0xc5, 0x56, 0xe7, 0xdb, 0x50, 0x59, 0x25, 0x33,
		0x69, 0x2d, 0x54, 0x40, 0xbf, 0xfe, 0x45, 0xd9, 0x77, 0xee, 0x99, 0xc6, 0xc8, 0xf1, 0xb9, 0x79,
		0xdb, 0x17, 0xd4, 0xf5, 0x6f, 0xf7, 0xcc, 0x49, 0x42, 0xff, 0x66, 0x36, 0x65, 0x6f, 0xaf, 0xd4,
		0xe5, 0xc3, 0xc2, 0xff, 0x2d, 0xfc, 0xcf, 0xc4, 0xb2, 0xfe, 0x4f, 0x51, 0x42, 0x2a, 0x25, 0x3d,
		0xc3, 0x2a, 0x0f, 0x11, 0x7c, 0x7b, 0x49, 0xf1, 0x52, 0xf5, 0x13, 0x2b, 0xfd, 0xc5, 0xcb, 0xe9,
		0xd9, 0xce, 0x94, 0xc4, 0x84, 0x98, 0x64, 0x8a, 0xd2, 0x67, 0x0f, 0x8a, 0xa3, 0x56, 0x0d, 0xa4,
		0x05, 0xd2, 0x02, 0x69, 0x81, 0xb4, 0x40, 0x5a, 0x20, 0x2d, 0x90, 0x16, 0x48, 0x6b, 0x3b, 0x48,
		0x8b, 0x39, 0x13, 0x39, 0x96, 0x38, 0x70, 0x31, 0x7b, 0x10, 0x09, 0x67, 0xc0, 0x56, 0xde, 0x60,
		0x2b, 0x27, 0x09, 0x67, 0x99, 0x73, 0x50, 0x38, 0xfd, 0x04, 0xd5, 0x4a, 0x53, 0xb5, 0x50, 0x11,
		0x44, 0xcc, 0xe4, 0xa8, 0x08, 0x12, 0x9e, 0x32, 0x54, 0x04, 0x29, 0x3a, 0x1e, 0x77, 0xc8, 0x3c,
		0x93, 0xdb, 0xce, 0x9d, 0xd1, 0xf3, 0xd8, 0x7f, 0x47, 0xcc, 0xb1, 0x1e, 0xc5, 0x3d, 0xd1, 0xaa,
		0x41, 0xe0, 0x9a, 0xe0, 0x9a, 0xd2, 0x4b, 0xb1, 0x75, 0x99, 0xc3, 0x6d, 0xfe, 0xe8, 0xb1, 0x9e,
		0x0c, 0xf9, 0x89, 0x78, 0xa8, 0xe3, 0xf0, 0xa3, 0x3e, 0x9a, 0xbe, 0xc4, 0x9a, 0xcf, 0x5e, 0xf8,
		0xec, 0xfc, 0xe8, 0xe2, 0xf0, 0xea, 0xf8, 0xf4, 0xe7, 0xce, 0x97, 0x8b, 0xa3, 0xff, 0xfd, 0xf5,
		0xe8, 0xf4, 0xd3, 0x7f, 0x44, 0x57, 0x3f, 0x30, 0x89, 0xbe, 0xb0, 0xaf, 0x94, 0xf3, 0x97, 0x0b,
		0x2f, 0x3f, 0x79, 0xe5, 0x4e, 0xf5, 0xe7, 0x7f, 0xfd, 0x51, 0x4c, 0xc2, 0xef, 0x90, 0xbc, 0x6c,
		0xa7, 0xd1, 0xc9, 0xd3, 0xfb, 0x36, 0xe4, 0x5e, 0x56, 0xe8, 0x89, 0x36, 0xb5, 0x96, 0x93, 0xf8,
		0x27, 0xdf, 0x32, 0x1d, 0x47, 0xea, 0x68, 0x6e, 0xf4, 0x24, 0xd2, 0x16, 0x70, 0x60, 0x48, 0x5b,
		0x68, 0xd5, 0x4e, 0xa3, 0xcb, 0x7a, 0xcc, 0x33, 0xac, 0xbe, 0x1d, 0x76, 0x4a, 0x93, 0xd4, 0xd5,
		0x17, 0xe3, 0x40, 0x05, 0xa1, 0x82, 0x48, 0x6f, 0x20, 0xbd, 0x81, 0xf4, 0x06, 0xd2, 0x1b, 0x24,
		0x0e, 0x8a, 0x7b, 0x66, 0xaf, 0x67, 0x5b, 0xca, 0x0e, 0x6a, 0x36, 0x0e, 0x1c, 0x14, 0x1c, 0x14,
		0x18, 0x31, 0xae, 0x0a, 0x7e, 0x63, 0xfd, 0xbe, 0xc1, 0xed, 0x01, 0x53, 0xd1, 0xbf, 0xe7, 0x41,
		0xa0, 0x7c, 0x50, 0xbe, 0x54, 0xe9, 0xb0, 0xd2, 0x94, 0xd0, 0xbd, 0x26, 0xf0, 0x10, 0x78, 0x48,
		0xd5, 0xfb, 0xaf, 0xd1, 0xa8, 0x01, 0x10, 0x69, 0xbc, 0x93, 0xed, 0x70, 0xe6, 0x3d, 0x98, 0x7d,
		0x05, 0xdf, 0x14, 0x0d, 0x01, 0xcf, 0x04, 0xcf, 0x84, 0xbc, 0x05, 0x1c, 0x13, 0xf2, 0x16, 0x70,
		0x4b, 0x72, 0x6e, 0x89, 0x7b, 0xa6, 0xe3, 0x0f, 0x6c, 0x6e, 0x30, 0xdb, 0x93, 0x68, 0x0f, 0xb1,
		0xf8, 0x38, 0xdc, 0x11, 0xdc, 0x11, 0xdc, 0x11, 0xdc, 0x11, 0xdc, 0x11, 0xdc, 0x91, 0xa2, 0x3b,
		0x1a, 0xba, 0xdf, 0x98, 0xa7, 0xe0, 0x8f, 0xa6, 0xcf, 0x8b, 0x57, 0x64, 0x1c, 0xc0, 0x89, 0xc1,
		0x89, 0xa5, 0xe7, 0xc4, 0x70, 0x64, 0x57, 0xfa, 0x8b, 0xad, 0x34, 0xc8, 0x38, 0xb2, 0x2b, 0x35,
		0x69, 0xb8, 0x76, 0x4a, 0xf2, 0x27, 0xde, 0x58, 0xf2, 0xe2, 0xa1, 0xe3, 0xb8, 0xdc, 0x9c, 0x4c,
		0x51, 0xac, 0x55, 0x2e, 0xfa, 0xd6, 0x3d, 0x1b, 0x98, 0x43, 0x33, 0x68, 0x04, 0x5d, 0x2c, 0xb9,
		0x43, 0xe6, 0x58, 0x81, 0x27, 0x89, 0x6c, 0x5c, 0xc9, 0x33, 0xbb, 0xb6, 0xeb, 0x4f, 0x7f, 0x29,
		0x4d, 0xff, 0xb1, 0x18, 0x27, 0x1f, 0xc9, 0xbd, 0x91, 0xc5, 0x9d, 0x59, 0x59, 0x70, 0x34, 0xf0,
		0xef, 0x76, 0xcf, 0x3e, 0xbf, 0x7f, 0xec, 0x5c, 0x04, 0xc3, 0x4e, 0x7f, 0xe9, 0x84, 0xde, 0xeb,
		0x9d, 0xdc, 0xc4, 0xbc, 0x32, 0x29, 0x71, 0xce, 0xa3, 0xc5, 0x3f, 0x87, 0x16, 0x53, 0x01, 0x62,
		0x3b, 0x63, 0x11, 0x27, 0x2c, 0xe9, 0x7c, 0x45, 0x9d, 0xae, 0xb4, 0xb3, 0x95, 0x76, 0xb2, 0xf2,
		0xce, 0x55, 0x4d, 0x55, 0x62, 0x3b, 0xd1, 0x68, 0xe6, 0xfb, 0xcc, 0xec, 0xc5, 0x2b, 0xc4, 0x8f,
		0xdc, 0x4b, 0x0c, 0x43, 0x57, 0x3c, 0x0f, 0xb5, 0x6f, 0x6f, 0x2f, 0x54, 0xaf, 0x92, 0xdd, 0xd5,
		0xa1, 0x0a, 0x0e, 0xb3, 0xef, 0xee, 0x6f, 0x5d, 0xcf, 0x8f, 0xaf, 0x11, 0xcf, 0x8f, 0xc4, 0x53,
		0x8c, 0x0a, 0x14, 0x23, 0xff, 0x8a, 0xf1, 0xd9, 0x8e, 0x17, 0x18, 0x45, 0xd2, 0x21, 0x1e, 0x46,
		0x45, 0x4f, 0x8a, 0x05, 0x43, 0x15, 0xd1, 0x60, 0xa8, 0x8a, 0x60, 0x68, 0xe3, 0x83, 0xa1, 0xb8,
		0xe2, 0x1a, 0x3d, 0x70, 0xeb, 0xfb, 0x02, 0xa7, 0xd4, 0x97, 0xd6, 0x7b, 0xfa, 0xb8, 0xe0, 0x9c,
		0xc9, 0x91, 0xb3, 0xb0, 0x20, 0xab, 0x08, 0x34, 0x91, 0x60, 0xab, 0x0a, 0x38, 0x99, 0xa0, 0x93,
		0x09, 0x3c, 0x9d, 0xe0, 0x4b, 0xc6, 0x20, 0x82, 0x6b, 0x2f, 0x9c, 0x1d, 0x50, 0x00, 0x1d, 0x15,
		0xf0, 0x79, 0x0d, 0x84, 0x7c, 0x6e, 0x72, 0x56, 0x9a, 0xaa, 0x9a, 0xa6, 0x80, 0x4d, 0x60, 0x5a,
		0x8b, 0xc1, 0xeb, 0xc8, 0x9b, 0x8c, 0xe9, 0xe3, 0x72, 0x26, 0xa3, 0x02, 0x93, 0x01, 0x93, 0xa1,
		0xdb, 0x64, 0x88, 0xfa, 0xd0, 0x79, 0x5f, 0x2a, 0x7e, 0x01, 0xf6, 0x6b, 0xae, 0x55, 0xf4, 0x42,
		0x6c, 0xea, 0x1c, 0x95, 0x68, 0x1e, 0x9d, 0x52, 0x8d, 0x88, 0xd5, 0x89, 0x4a, 0xad, 0xc8, 0xd5,
		0x8b, 0x5c, 0xcd, 0xe8, 0xd5, 0x4d, 0x4e, 0xed, 0x14, 0x12, 0xb3, 0x6a, 0x9e, 0x7b, 0x49, 0x72,
		0x44, 0x37, 0xab, 0xd7, 0xa9, 0x51, 0x43, 0x61, 0x08, 0xb9, 0x8d, 0x80, 0x97, 0xff, 0x53, 0x93,
		0xd9, 0x82, 0xea, 0x46, 0x01, 0xb1, 0x7d, 0x59, 0x1a, 0x4e, 0xf1, 0x22, 0xc8, 0xa5, 0xf1, 0x08,
		0x32, 0xe4, 0x44, 0xd2, 0xbc, 0xb8, 0x04, 0xe6, 0xf7, 0xcc, 0x2f, 0x81, 0xec, 0x05, 0xe4, 0x89,
		0xac, 0xc1, 0xbb, 0x74, 0x9e, 0x6e, 0xbf, 0x4b, 0xe6, 0xf3, 0x64, 0xb6, 0xb2, 0xe4, 0xe2, 0x78,
		0x92, 0x78, 0x1e, 0xb4, 0x01, 0xda, 0x00, 0x6d, 0x44, 0x92, 0x33, 0x30, 0x2d, 0xc3, 0xec, 0x76,
		0x3d, 0xe6, 0xfb, 0x04, 0xcc, 0x51, 0xd9, 0x57, 0x18, 0xe3, 0xdc, 0xe4, 0x9c, 0x79, 0x8e, 0x32,
		0x76, 0x14, 0xaf, 0xcb, 0xc6, 0x81, 0x69, 0xf4, 0x0e, 0x8d, 0x2f, 0xed, 0x1f, 0xd5, 0xf1, 0xce,
		0x87, 0xc5, 0x3f, 0xef, 0xfe, 0x68, 0x8c, 0xe5, 0xd7, 0xb9, 0xad, 0xf2, 0x05, 0xcf, 0x2e, 0x8f,
		0xff, 0x4d, 0xf6, 0x2d, 0xff, 0x7c, 0xfb, 0x6b, 0xfe, 0xa3, 0xb8, 0x91, 0xde, 0x43, 0xf4, 0x22,
		0xfe, 0xb5, 0xc2, 0x2f, 0x76, 0x31, 0x3f, 0x3c, 0x08, 0x3c, 0x08, 0x3c, 0xc8, 0xca, 0x78, 0x55,
		0xe8, 0x14, 0xea, 0x3a, 0x3d, 0x6a, 0x22, 0x60, 0x4d, 0x26, 0x5a, 0x2a, 0x23, 0x60, 0x4d, 0x3d,
		0x60, 0x95, 0x3f, 0x35, 0x8b, 0x98, 0x35, 0x1d, 0xea, 0xe8, 0x9b, 0x3e, 0x37, 0x7c, 0xc6, 0x1c,
		0x75, 0xee, 0x78, 0x1e, 0x0a, 0xe4, 0x01, 0xf2, 0x00, 0x79, 0x48, 0x4a, 0x0e, 0xb7, 0x07, 0x8c,
		0xdb, 0xd6, 0x5f, 0x7e, 0xb3, 0x4e, 0x80, 0x1f, 0x2a, 0xa1, 0xeb, 0xaf, 0xce, 0xd4, 0xf2, 0x16,
		0x1d, 0xd3, 0x71, 0x7d, 0x66, 0xb9, 0x4e, 0x57, 0x29, 0x9c, 0x06, 0xce, 0x00, 0x67, 0xf2, 0x84,
		0x33, 0x95, 0xfd, 0x7a, 0xbd, 0xd9, 0xaa, 0xd7, 0xcb, 0xad, 0x5a, 0xab, 0x7c, 0xd0, 0x68, 0x54,
		0x9a, 0x15, 0xd0, 0x4d, 0xae, 0xe8, 0xc6, 0x1d, 0x0e, 0xdc, 0x2e, 0x53, 0x47, 0x9b, 0x70, 0x1c,
		0x70, 0x0d, 0xb8, 0x06, 0x5c, 0x23, 0x29, 0x39, 0xcc, 0x19, 0x0d, 0x82, 0xcb, 0x2c, 0x5c, 0x87,
		0x22, 0x27, 0x5f, 0x57, 0x18, 0xe3, 0xc8, 0x19, 0x0d, 0x26, 0x5f, 0x2a, 0xd9, 0xa9, 0x54, 0xb8,
		0xf5, 0x70, 0x69, 0x2c, 0x8f, 0xf5, 0x98, 0xc7, 0x1c, 0x2b, 0x13, 0x38, 0x35, 0x5b, 0xe1, 0x4b,
		0x16, 0xf8, 0xb4, 0x42, 0xa5, 0xba, 0xd7, 0xdc, 0xab, 0xec, 0xd5, 0x0a, 0x6e, 0xaf, 0xc0, 0xef,
		0x59, 0x61, 0xbf, 0x5c, 0xdd, 0xab, 0x54, 0x8c, 0x6a, 0xb9, 0xd2, 0x2c, 0xf8, 0x43, 0x66, 0xd9,
		0x3d, 0xdb, 0x0a, 0xe4, 0x60, 0xaf, 0x48, 0x40, 0x12, 0x44, 0xa6, 0x64, 0x95, 0x49, 0x79, 0x9e,
		0x65, 0x22, 0xb7, 0x4f, 0x6d, 0x5d, 0x56, 0x5a, 0x19, 0x89, 0x65, 0x00, 0x7c, 0x68, 0x80, 0x8f,
		0xa1, 0x67, 0x0f, 0x4c, 0xef, 0xd1, 0x20, 0xdb, 0xd8, 0x79, 0x39, 0x20, 0x70, 0x04, 0x38, 0x02,
		0x1c, 0x91, 0x94, 0x1c, 0x6c, 0xf0, 0x20, 0x23, 0x82, 0x8c, 0x88, 0xe0, 0x12, 0x60, 0x83, 0x27,
		0x77, 0x14, 0xe2, 0xf9, 0xbe, 0xad, 0x8e, 0x1e, 0xc1, 0x28, 0xe0, 0x0d, 0xf0, 0x06, 0x78, 0x43,
		0x52, 0x72, 0x88, 0xce, 0x3f, 0x54, 0x40, 0x1b, 0xe4, 0x13, 0xb3, 0xd2, 0xd5, 0x49, 0x37, 0x52,
		0x02, 0x6f, 0x50, 0x2e, 0x42, 0x0b, 0xb4, 0x91, 0x27, 0xda, 0xa0, 0x39, 0x01, 0x81, 0x03, 0x10,
		0xa0, 0x0d, 0xd0, 0x86, 0x92, 0x06, 0x71, 0x2f, 0xfe, 0x05, 0xad, 0xaf, 0xba, 0xd5, 0xfd, 0xa4,
		0xac, 0x8d, 0xd6, 0xf3, 0xe4, 0x82, 0x6d, 0xe8, 0x96, 0xed, 0x9a, 0x60, 0x5b, 0xba, 0xa8, 0x4f,
		0x55, 0xf4, 0xbb, 0x92, 0x4c, 0xcf, 0x85, 0x82, 0x70, 0xe3, 0xba, 0xd3, 0xd9, 0x07, 0x47, 0xbf,
		0xeb, 0x5c, 0x06, 0x1f, 0xac, 0xab, 0x69, 0x05, 0x69, 0xeb, 0x9c, 0x5f, 0xd8, 0xa3, 0xe8, 0x09,
		0xb8, 0xe2, 0x57, 0xdb, 0xe7, 0x87, 0x9c, 0x0b, 0xf6, 0xdc, 0x39, 0xb1, 0x9d, 0xa3, 0x3e, 0x1b,
		0x84, 0x97, 0xaa, 0x0a, 0x18, 0xfb, 0x09, 0x37, 0xcd, 0x3d, 0xa9, 0x56, 0x23, 0x52, 0x3c, 0xf3,
		0xba, 0xcc, 0x63, 0xdd, 0x8f, 0x93, 0xaf, 0xed, 0x8c, 0xfa, 0x7d, 0xd2, 0xd9, 0x94, 0x14, 0x7a,
		0x02, 0x61, 0x2f, 0x0a, 0xb5, 0x32, 0x51, 0x12, 0xef, 0xe2, 0x56, 0xb4, 0xb9, 0x8c, 0xdb, 0xf7,
		0x4e, 0x61, 0x46, 0x75, 0x74, 0xf8, 0x73, 0x87, 0xc1, 0x8e, 0xbf, 0x73, 0x67, 0xf4, 0x3c, 0xf6,
		0xdf, 0x11, 0x73, 0xac, 0xc7, 0xf8, 0xbd, 0xfe, 0x56, 0x3d, 0x8c, 0x76, 0x98, 0x68, 0x87, 0xb9,
		0x76, 0xe6, 0x13, 0x6b, 0x87, 0xb9, 0x4a, 0x32, 0x35, 0x68, 0x4f, 0xbc, 0x26, 0x4f, 0x42, 0x4d,
		0x9d, 0x84, 0xfb, 0x62, 0x56, 0xa1, 0x21, 0x99, 0xd5, 0x90, 0xd8, 0x7d, 0x31, 0xcd, 0x7e, 0xdf,
		0xfd, 0xc6, 0xba, 0xb3, 0xc2, 0x01, 0x89, 0x6b, 0xe4, 0x97, 0x46, 0xc0, 0xa5, 0x01, 0xe8, 0x93,
		0xa9, 0x88, 0xa7, 0xf2, 0x97, 0x06, 0xcc, 0xa4, 0xd0, 0xe0, 0x93, 0x21, 0x70, 0x03, 0x0e, 0x5d,
		0x23, 0x7c, 0xdc, 0x1d, 0x20, 0x3c, 0x65, 0xf5, 0xdc, 0x5c, 0x1d, 0xf0, 0x7e, 0x1b, 0x44, 0xb8,
		0xd6, 0x84, 0x0c, 0xe7, 0x6a, 0xce, 0x20, 0xc3, 0x4b, 0xeb, 0x51, 0xc7, 0x4d, 0x64, 0xf9, 0x9a,
		0x33, 0xc8, 0xf0, 0xf2, 0x7a, 0xd4, 0x21, 0xc3, 0xb9, 0x9a, 0x33, 0xc8, 0xf0, 0xf2, 0x7a, 0xe0,
		0x2e, 0xad, 0x7c, 0xcd, 0x19, 0x64, 0x78, 0x69, 0x3d, 0x1a, 0x55, 0xc8, 0x70, 0xae, 0xe6, 0x0c,
		0x32, 0xbc, 0xbc, 0x1e, 0x88, 0xe9, 0xf2, 0x35, 0x67, 0x90, 0xe1, 0xa5, 0xf5, 0x68, 0x22, 0xa6,
		0xcb, 0xd7, 0x9c, 0x41, 0x86, 0x97, 0xd7, 0x03, 0x31, 0x5d, 0xbe, 0xe6, 0x0c, 0x32, 0xbc, 0xb4,
		0x1e, 0x95, 0x32, 0x0c, 0x71, 0xce, 0x26, 0x0d, 0x52, 0xbc, 0x62, 0x41, 0x60, 0x8a, 0x73, 0x36,
		0x69, 0x90, 0xe2, 0x15, 0x0b, 0x82, 0x04, 0x5b, 0xce, 0x26, 0x0d, 0x52, 0xbc, 0xbc, 0x20, 0x15,
		0xa4, 0xd8, 0x72, 0x36, 0x69, 0x90, 0xe2, 0x15, 0x0b, 0x82, 0x24, 0x5b, 0xce, 0x26, 0x0d, 0x52,
		0xbc, 0xbc, 0x20, 0x55, 0x44, 0x77, 0x39, 0x9b, 0x34, 0x48, 0xf1, 0x8a, 0x05, 0x41, 0x74, 0x97,
		0xb3, 0x49, 0x83, 0x14, 0xaf, 0x58, 0x10, 0x44, 0x77, 0x39, 0x9b, 0x34, 0x48, 0xf1, 0xf2, 0x82,
		0xd4, 0x10, 0xdd, 0xe5, 0x6c, 0xd2, 0x20, 0xc5, 0x2b, 0x16, 0x04, 0xd1, 0x5d, 0xce, 0x26, 0x0d,
		0x52, 0xbc, 0xbc, 0x20, 0x28, 0x8c, 0xcf, 0xdb, 0xa4, 0x41, 0x8a, 0x57, 0x2c, 0x08, 0xa2, 0xbb,
		0x9c, 0x4d, 0x1a, 0xa4, 0x78, 0xc5, 0x82, 0x1c, 0x40, 0x8a, 0xf3, 0x35, 0x69, 0x90, 0xe2, 0xe5,
		0x05, 0x69, 0xd4, 0x20, 0xc5, 0xf9, 0x9a, 0x34, 0x48, 0xf1, 0x8a, 0x05, 0x69, 0x41, 0x8a, 0xf3,
		0x35, 0x69, 0x90, 0xe2, 0xe5, 0x05, 0x69, 0xa2, 0xfd, 0x44, 0xce, 0x26, 0x0d, 0x52, 0xbc, 0x62,
		0x41, 0x1a, 0x90, 0xe2, 0x7c, 0x4d, 0x9a, 0xa6, 0xd6, 0xa8, 0x6d, 0xd2, 0x6e, 0x49, 0x5b, 0xd8,
		0xe6, 0xf4, 0x1d, 0xc1, 0xdc, 0x45, 0x9d, 0xcb, 0x3c, 0x76, 0x37, 0xea, 0x9b, 0xdc, 0x7d, 0xbe,
		0x3f, 0x4d, 0xa1, 0x0d, 0xda, 0xaa, 0xc1, 0xd0, 0x11, 0x0d, 0x1d, 0xd1, 0x14, 0x75, 0x1c, 0x1d,
		0xd1, 0xb2, 0xe7, 0xce, 0xe1, 0xcc, 0xc5, 0x93, 0x5c, 0x20, 0xd2, 0x2c, 0x89, 0x30, 0xb6, 0x7e,
		0x73, 0x36, 0x67, 0x90, 0xe1, 0xa5, 0xf5, 0xc0, 0xc6, 0x6f, 0xce, 0xe6, 0x0c, 0x32, 0xbc, 0xbc,
		0x1e, 0xd8, 0xf6, 0xcd, 0xd7, 0x9c, 0x41, 0x86, 0x97, 0xd7, 0x03, 0x25, 0xbd, 0xf9, 0x9a, 0x33,
		0xc8, 0xf0, 0xd2, 0x7a, 0xa0, 0x23, 0x5a, 0xce, 0xe6, 0x0c, 0x32, 0xbc, 0xbc, 0x1e, 0x88, 0xe9,
		0xf2, 0x35, 0x67, 0x90, 0xe1, 0xa5, 0xf5, 0x40, 0x47, 0xb4, 0x9c, 0xcd, 0x19, 0x64, 0x78, 0x79,
		0x3d, 0x10, 0xd3, 0xe5, 0x6b, 0xce, 0x20, 0xc3, 0x4b, 0xeb, 0x81, 0x8e, 0x68, 0xb9, 0x9b, 0x34,
		0x48, 0xf1, 0x8a, 0x05, 0x81, 0x29, 0xce, 0xd9, 0xa4, 0x41, 0x8a, 0x57, 0x2c, 0x08, 0x12, 0x6c,
		0x39, 0x9b, 0x34, 0x48, 0xf1, 0xf2, 0x82, 0xa0, 0x23, 0x5a, 0xde, 0x26, 0x0d, 0x52, 0xbc, 0x62,
		0x41, 0x90, 0x64, 0xcb, 0xd9, 0xa4, 0x41, 0x8a, 0x97, 0x17, 0x04, 0x1d, 0xd1, 0xf2, 0x36, 0x69,
		0x90, 0xe2, 0x15, 0x0b, 0x82, 0xe8, 0x2e, 0x67, 0x93, 0x06, 0x29, 0x5e, 0xb1, 0x20, 0x88, 0xee,
		0x72, 0x36, 0x69, 0x90, 0xe2, 0xe5, 0x05, 0x41, 0x47, 0xb4, 0xbc, 0x4d, 0x1a, 0xa4, 0x78, 0xc5,
		0x82, 0x20, 0xba, 0xcb, 0xd9, 0xa4, 0x41, 0x8a, 0x97, 0x17, 0x04, 0x85, 0xf1, 0x79, 0x9b, 0x34,
		0x48, 0xf1, 0x8a, 0x05, 0x41, 0x74, 0x97, 0xb3, 0x49, 0x83, 0x14, 0xaf, 0x58, 0x10, 0x74, 0x44,
		0xcb, 0xd9, 0xa4, 0x41, 0x8a, 0x97, 0x17, 0x04, 0x1d, 0xd1, 0xf2, 0x36, 0x69, 0x90, 0xe2, 0x15,
		0x0b, 0x82, 0x8e, 0x68, 0x39, 0x9b, 0x34, 0x48, 0xf1, 0xf2, 0x82, 0xa0, 0x23, 0x5a, 0xde, 0x26,
		0x0d, 0x52, 0xbc, 0x62, 0x41, 0xd0, 0x11, 0x2d, 0x67, 0x93, 0x86, 0x8e, 0x68, 0xab, 0xc5, 0x62,
		0x33, 0x3a, 0xa2, 0x39, 0x9c, 0x39, 0x8e, 0x69, 0xdc, 0x99, 0x02, 0xc6, 0xe1, 0xb9, 0x05, 0xda,
		0xfc, 0xd3, 0xe8, 0x79, 0x86, 0x9e, 0x67, 0x8a, 0x5a, 0x2c, 0xdf, 0xf3, 0xcc, 0x76, 0xf8, 0xbe,
		0x44, 0xab, 0xb3, 0xca, 0xa6, 0xb6, 0x3a, 0xab, 0xa0, 0x3a, 0x21, 0x05, 0x3f, 0x5d, 0x6d, 0x6d,
		0xad, 0x9f, 0x26, 0xf1, 0x46, 0xb7, 0xa6, 0xcf, 0x0c, 0xcf, 0xec, 0xda, 0xae, 0x31, 0x30, 0x2d,
		0x71, 0x7f, 0xf4, 0xe2, 0x79, 0x78, 0x24, 0x78, 0xa4, 0xd4, 0x3c, 0xd2, 0xc0, 0xb4, 0x0c, 0xb3,
		0xdb, 0xf5, 0x98, 0xef, 0xcb, 0x38, 0x26, 0x01, 0xf3, 0x5b, 0x3c, 0x37, 0x39, 0x67, 0x9e, 0x23,
		0xec, 0x9b, 0x8a, 0xd7, 0x65, 0xe3, 0xc0, 0x34, 0x7a, 0x87, 0xc6, 0x97, 0xf6, 0x8f, 0xea, 0x78,
		0xe7, 0xc3, 0xe2, 0x9f, 0x77, 0x7f, 0x34, 0xc6, 0xf1, 0xe7, 0xbd, 0x2d, 0xf2, 0xc2, 0x67, 0x97,
		0xc7, 0xff, 0x96, 0x7e, 0xeb, 0x3f, 0xdf, 0x7e, 0xed, 0x7f, 0x14, 0xb3, 0x69, 0xdf, 0x7c, 0xdf,
		0xb0, 0xdc, 0xbe, 0xeb, 0x19, 0x76, 0x57, 0xc2, 0xba, 0xcd, 0x3f, 0x0d, 0xdb, 0x06, 0xdb, 0x96,
		0x9a, 0x6d, 0x1b, 0x49, 0xe2, 0x36, 0x3a, 0x0b, 0xaf, 0x23, 0x47, 0xc0, 0xb6, 0xe8, 0x94, 0x35,
		0x6b, 0x60, 0x6d, 0x12, 0x5f, 0x64, 0x3b, 0x77, 0x0a, 0xbe, 0x68, 0xf2, 0x74, 0x4c, 0x7b, 0xf3,
		0x99, 0xf5, 0xcc, 0x51, 0x3f, 0xb0, 0x7e, 0x13, 0xe3, 0x09, 0x17, 0x06, 0x17, 0x96, 0x9e, 0x0b,
		0xbb, 0x75, 0xdd, 0x3e, 0x33, 0x1d, 0x19, 0x34, 0xaf, 0x24, 0xa8, 0xa5, 0x61, 0x2f, 0x7f, 0x71,
		0x05, 0x9d, 0x3d, 0x08, 0x25, 0x83, 0x92, 0x81, 0x13, 0xc1, 0x89, 0xd8, 0x3c, 0x05, 0x28, 0x2a,
		0xb9, 0xa0, 0xe0, 0x72, 0xa3, 0x3b, 0x66, 0x78, 0xcc, 0xf4, 0x5d, 0x47, 0xda, 0x21, 0xbd, 0x18,
		0x06, 0xee, 0x09, 0xee, 0x29, 0x35, 0xf7, 0x64, 0x77, 0x99, 0xc3, 0x6d, 0xfe, 0xe8, 0xb1, 0x9e,
		0x0c, 0x07, 0x8a, 0x78, 0xa9, 0xe3, 0xf0, 0xa3, 0x3e, 0x9a, 0xbe, 0xc4, 0x9a, 0xcf, 0x5e, 0xf8,
		0xd3, 0xbf, 0x0e, 0x4f, 0x7f, 0x3e, 0xea, 0x5c, 0x1c, 0x1d, 0x5e, 0x9e, 0x9d, 0x76, 0xae, 0xfe,
		0x73, 0x7e, 0x24, 0xba, 0xf8, 0x81, 0x55, 0xf4, 0x85, 0xdd, 0xa5, 0x9c, 0xcb, 0x5c, 0x78, 0xf7,
		0x8f, 0x47, 0x57, 0x57, 0x47, 0x17, 0x9d, 0xc9, 0x57, 0x38, 0x3d, 0xfa, 0x5a, 0x4c, 0xc2, 0xff,
		0x28, 0xbe, 0xf1, 0xe7, 0x2f, 0x97, 0x79, 0x78, 0xcd, 0xd3, 0xb3, 0xe3, 0xcb, 0xa3, 0x3c, 0xbc,
		0xe8, 0xd1, 0xc5, 0xc5, 0xd9, 0x85, 0xcc, 0x94, 0x0a, 0x3d, 0xd1, 0xa6, 0x36, 0x43, 0xa4, 0x4e,
		0xf4, 0x9b, 0xdd, 0xe5, 0xf7, 0xf2, 0xce, 0x73, 0xfa, 0xb8, 0x78, 0xbe, 0xa5, 0x5a, 0x86, 0xa7,
		0x85, 0xa7, 0x45, 0x20, 0xb8, 0x31, 0x81, 0x20, 0x4e, 0xfa, 0x0a, 0x4f, 0x59, 0xb5, 0x81, 0x40,
		0x50, 0xcd, 0x87, 0xb9, 0x23, 0x87, 0x33, 0x4f, 0xe2, 0xaa, 0xdc, 0xe8, 0x49, 0x31, 0x27, 0x54,
		0x81, 0x13, 0x82, 0x13, 0x5a, 0xa2, 0x1a, 0x5b, 0xb0, 0xc8, 0xbb, 0x67, 0xda, 0x7d, 0xd6, 0x35,
		0x7a, 0x96, 0x6f, 0xf4, 0x3c, 0x73, 0xc0, 0x7c, 0xf9, 0xf8, 0x6b, 0x79, 0x28, 0xc1, 0xb9, 0x94,
		0x33, 0x65, 0xc2, 0x02, 0xae, 0x22, 0xe8, 0x44, 0x02, 0xaf, 0x2a, 0xf8, 0x64, 0x0a, 0x40, 0xa6,
		0x08, 0x74, 0x0a, 0x21, 0xe9, 0x14, 0x04, 0xd7, 0x5e, 0x98, 0xd6, 0xd6, 0x99, 0xed, 0x66, 0x5d,
		0x66, 0xdd, 0x43, 0x51, 0x97, 0x28, 0x23, 0x96, 0x24, 0x39, 0xb5, 0x28, 0x55, 0x99, 0xec, 0x88,
		0x70, 0x85, 0x8a, 0xf4, 0x28, 0xe1, 0x45, 0x81, 0xfc, 0x48, 0x08, 0x50, 0xd7, 0xd4, 0xaa, 0x1d,
		0xdb, 0xd1, 0x3e, 0xdb, 0xef, 0x92, 0x79, 0xaa, 0xad, 0x09, 0x4d, 0x05, 0xa4, 0xa5, 0xe8, 0xb8,
		0xb6, 0xcf, 0x8c, 0x5e, 0xdf, 0x75, 0x3d, 0x79, 0xef, 0x3c, 0x3f, 0x08, 0xfc, 0x32, 0xfc, 0xf2,
		0xc6, 0xfa, 0x65, 0xc1, 0x64, 0x8a, 0x64, 0x58, 0xb5, 0x79, 0x2e, 0xb9, 0x42, 0xe5, 0x37, 0x64,
		0x0f, 0x47, 0xc1, 0x29, 0xc7, 0x99, 0xdc, 0x16, 0x7c, 0x30, 0x99, 0x0f, 0x26, 0x0d, 0xbd, 0x0f,
		0x1d, 0xc7, 0xe5, 0xe6, 0x64, 0x6a, 0xc5, 0x22, 0x70, 0xdf, 0xba, 0x67, 0x03, 0x73, 0x68, 0x06,
		0x3b, 0x1f, 0xc5, 0x92, 0x3b, 0x64, 0x8e, 0x15, 0x78, 0xce, 0xc8, 0x46, 0x97, 0x82, 0x43, 0x5b,
		0xfe, 0xf4, 0x97, 0x92, 0xcf, 0x4d, 0xce, 0x4a, 0x82, 0x49, 0xa3, 0xe9, 0x27, 0x71, 0x6f, 0x64,
		0x71, 0x27, 0xb4, 0x93, 0x67, 0xd1, 0x07, 0xfd, 0x6e, 0xf7, 0xec, 0xf3, 0xfb, 0xc7, 0xce, 0x45,
		0xf0, 0x31, 0xd3, 0x5f, 0x3a, 0x97, 0x93, 0x8f, 0xe9, 0x7c, 0x9a, 0x7d, 0x4c, 0x82, 0x99, 0xb4,
		0xae, 0x65, 0x8a, 0x27, 0xd1, 0x26, 0x0f, 0xa1, 0xd2, 0x16, 0x69, 0xb7, 0x74, 0x74, 0x7f, 0xe3,
		0x2b, 0x6d, 0xbb, 0x3d, 0xdf, 0xb8, 0xb7, 0xb9, 0xc1, 0xed, 0x01, 0x93, 0x50, 0xce, 0xf9, 0xa7,
		0xa1, 0x6e, 0x50, 0xb7, 0xd4, 0xd4, 0x6d, 0x22, 0x81, 0xdc, 0xb6, 0xfe, 0xf2, 0x85, 0xd2, 0x76,
		0x12, 0xe9, 0xba, 0xe2, 0xaf, 0xce, 0x14, 0xaf, 0x8a, 0x8e, 0xe9, 0xb8, 0x3e, 0xb3, 0x5c, 0xa7,
		0x2b, 0xe4, 0xac, 0xb1, 0x61, 0x9b, 0x0c, 0xcc, 0xe6, 0xb6, 0x72, 0x97, 0x2c, 0x3d, 0x87, 0x1d,
		0xdc, 0xd0, 0xc7, 0xf1, 0xa1, 0x84, 0x6b, 0xe3, 0x43, 0x70, 0x27, 0x1c, 0x21, 0xb8, 0x53, 0x9b,
		0x4e, 0x1a, 0x03, 0x01, 0x6b, 0x3b, 0xaf, 0x97, 0xc1, 0x83, 0xe2, 0xba, 0x59, 0x69, 0x40, 0x33,
		0xa1, 0x99, 0xe9, 0x69, 0x26, 0x9a, 0x75, 0x91, 0xe4, 0xa5, 0xd1, 0xac, 0x2b, 0x95, 0x3c, 0xf3,
		0xf6, 0x34, 0xd5, 0x64, 0xdf, 0xb9, 0x67, 0x1a, 0x23, 0xc7, 0xe7, 0xe6, 0x6d, 0x5f, 0x50, 0xd7,
		0xbf, 0xdd, 0x33, 0x27, 0x09, 0xfd, 0x9b, 0xd9, 0x94, 0xbd, 0xbd, 0x52, 0x97, 0x0f, 0x0b, 0xff,
		0xb7, 0xf0, 0x3f, 0x13, 0xcb, 0xfa, 0x3f, 0x29, 0xef, 0x88, 0x06, 0xdf, 0x3e, 0x4b, 0xfb, 0xa1,
		0x2f, 0xa7, 0x67, 0x5b, 0xc3, 0x1f, 0x63, 0x20, 0xd3, 0xe7, 0x74, 0xf6, 0xa0, 0x38, 0x6a, 0xd5,
		0x40, 0x5a, 0x20, 0x2d, 0x90, 0x16, 0x48, 0x0b, 0xa4, 0x05, 0xd2, 0x02, 0x69, 0x81, 0xb4, 0xb6,
		0x83, 0xb4, 0x98, 0x33, 0x91, 0x63, 0x89, 0x1e, 0x97, 0xb3, 0x07, 0x91, 0x70, 0x06, 0x6c, 0xe5,
		0x0d, 0xb6, 0x72, 0x92, 0x70, 0x96, 0x69, 0x3d, 0x8b, 0x86, 0xb3, 0x50, 0xad, 0x34, 0x55, 0x0b,
		0xe7, 0xc7, 0x89, 0x99, 0x1c, 0xe5, 0x08, 0xc2, 0x53, 0x86, 0xf3, 0xe3, 0x8a, 0x8e, 0xc7, 0x1d,
		0x32, 0xcf, 0xe4, 0xb6, 0x73, 0x67, 0xf4, 0x3c, 0xf6, 0xdf, 0x11, 0x73, 0xac, 0x47, 0x71, 0x4f,
		0xb4, 0x6a, 0x10, 0xb8, 0x26, 0xb8, 0xa6, 0xf4, 0x52, 0x6c, 0x79, 0x6b, 0x22, 0x76, 0x76, 0x7e,
		0x74, 0x71, 0x78, 0x75, 0x7c, 0xfa, 0x73, 0xe7, 0xcb, 0xc5, 0xd1, 0xff, 0xfe, 0x7a, 0x74, 0xfa,
		0xe9, 0x3f, 0xf9, 0xe9, 0x22, 0x36, 0x79, 0xe5, 0x4e, 0xf5, 0xe7, 0x7f, 0xfd, 0x91, 0x87, 0x86,
		0x57, 0xd3, 0x97, 0xed, 0x34, 0x3a, 0x79, 0x7a, 0xdf, 0x86, 0xdc, 0xcb, 0x6e, 0x40, 0x8f, 0x2e,
		0xef, 0xbb, 0xd1, 0x75, 0x79, 0xa5, 0x62, 0xcc, 0xba, 0x6d, 0x8d, 0xb8, 0xdd, 0xb7, 0xff, 0x16,
		0x3b, 0xf0, 0x12, 0x4d, 0xe6, 0xab, 0xa3, 0xc1, 0x63, 0xc1, 0x63, 0xa5, 0xe6, 0xb1, 0x86, 0xcc,
		0xb3, 0x98, 0xc3, 0xcd, 0x3b, 0x86, 0x88, 0x0a, 0x11, 0x55, 0x8a, 0x53, 0x56, 0x29, 0x97, 0x11,
		0x51, 0x29, 0x7a, 0xac, 0x69, 0xd3, 0x03, 0x2a, 0x8f, 0xb5, 0x7e, 0x34, 0x78, 0x2c, 0x78, 0x2c,
		0x78, 0x2c, 0x78, 0x2c, 0x78, 0x2c, 0x78, 0x2c, 0x05, 0x8f, 0xe5, 0x5b, 0xa6, 0xe3, 0x48, 0xdd,
		0x38, 0x15, 0x3d, 0x89, 0xad, 0x61, 0x38, 0xb0, 0xbc, 0x39, 0xb0, 0x9c, 0x6c, 0x0d, 0xcf, 0x74,
		0xcc, 0xe8, 0xb2, 0x1e, 0xf3, 0x0c, 0xab, 0x6f, 0x33, 0x87, 0xfb, 0xf2, 0xba, 0xfa, 0x62, 0x1c,
		0xa8, 0x20, 0x54, 0x30, 0x35, 0x15, 0xc4, 0x16, 0x32, 0xf0, 0x11, 0x5b, 0xc8, 0x1b, 0x82, 0x8f,
		0xa1, 0x63, 0xe1, 0x9e, 0xd9, 0xeb, 0xd9, 0x96, 0xb2, 0x83, 0x9a, 0x8d, 0x03, 0x07, 0x05, 0x07,
		0x05, 0x46, 0x8c, 0xab, 0x82, 0xdf, 0x58, 0xbf, 0x2f, 0xd9, 0x2e, 0x69, 0xd5, 0x20, 0x50, 0x3e,
		0x28, 0x5f, 0xaa, 0x74, 0x58, 0x69, 0x4a, 0xe8, 0x5e, 0x13, 0x78, 0x08, 0x3c, 0xa4, 0xba, 0xd2,
		0xbe, 0xd1, 0xa8, 0x01, 0x10, 0x69, 0xbc, 0x93, 0xed, 0x70, 0xe6, 0x3d, 0x98, 0x7d, 0x05, 0xdf,
		0x14, 0x0d, 0x01, 0xcf, 0x04, 0xcf, 0x84, 0xbc, 0x05, 0x1c, 0x13, 0xf2, 0x16, 0x70, 0x4b, 0x92,
		0x6e, 0xc9, 0xed, 0xf1, 0x6f, 0xa6, 0xc7, 0x0c, 0x9f, 0xf5, 0x99, 0x25, 0x76, 0xc8, 0xf7, 0xd9,
		0x31, 0xad, 0x18, 0x04, 0xae, 0x09, 0xae, 0x09, 0x19, 0x8b, 0x37, 0x94, 0x6f, 0x34, 0x1c, 0xba,
		0x1e, 0x67, 0xdd, 0x59, 0x61, 0x93, 0xcc, 0x8e, 0xd6, 0xf2, 0x18, 0x50, 0x3d, 0xa8, 0x5e, 0x6a,
		0xaa, 0x37, 0x93, 0x42, 0x83, 0x4f, 0x86, 0x00, 0x1d, 0xd2, 0x55, 0xf8, 0x80, 0x0e, 0x85, 0xa7,
		0xac, 0x9e, 0x1b, 0x38, 0x7c, 0xbf, 0x0d, 0x22, 0x5c, 0x6b, 0x42, 0x86, 0x73, 0x35, 0x67, 0x90,
		0xe1, 0xa5, 0xf5, 0xa8, 0x23, 0x4a, 0xcf, 0xd7, 0x9c, 0x41, 0x86, 0x97, 0xd7, 0xa3, 0x0e, 0x19,
		0xce, 0xd5, 0x9c, 0x41, 0x86, 0x97, 0xd7, 0x03, 0xfd, 0x0e, 0xf3, 0x35, 0x67, 0x90, 0xe1, 0xa5,
		0xf5, 0x68, 0x54, 0x21, 0xc3, 0xb9, 0x9a, 0x33, 0xc8, 0xf0, 0xf2, 0x7a, 0x20, 0xa6, 0xcb, 0xd7,
		0x9c, 0x41, 0x86, 0x97, 0xd6, 0xa3, 0x89, 0x98, 0x2e, 0x5f, 0x73, 0x06, 0x19, 0x5e, 0x5e, 0x0f,
		0xc4, 0x74, 0xf9, 0x9a, 0x33, 0xc8, 0xf0, 0xd2, 0x7a, 0xa4, 0x7b, 0x88, 0x19, 0x27, 0xbf, 0x21,
		0xc5, 0x34, 0x0b, 0x02, 0x53, 0x9c, 0xb3, 0x49, 0x83, 0x14, 0xaf, 0x58, 0x10, 0x24, 0xd8, 0x72,
		0x36, 0x69, 0x90, 0xe2, 0xe5, 0x05, 0xa9, 0x20, 0xc5, 0x96, 0xb3, 0x49, 0x83, 0x14, 0xaf, 0x58,
		0x10, 0x24, 0xd9, 0x72, 0x36, 0x69, 0x90, 0xe2, 0xe5, 0x05, 0xa9, 0x22, 0xba, 0xcb, 0xd9, 0xa4,
		0x41, 0x8a, 0x57, 0x2c, 0x08, 0xa2, 0xbb, 0x9c, 0x4d, 0x1a, 0xa4, 0x78, 0xc5, 0x82, 0x20, 0xba,
		0xcb, 0xd9, 0xa4, 0x41, 0x8a, 0x97, 0x17, 0xa4, 0x86, 0xe8, 0x2e, 0x67, 0x93, 0x06, 0x29, 0x5e,
		0xb1, 0x20, 0x88, 0xee, 0x72, 0x36, 0x69, 0x90, 0xe2, 0xe5, 0x05, 0x41, 0x61, 0x7c, 0xde, 0x26,
		0x0d, 0x52, 0xbc, 0x62, 0x41, 0x10, 0xdd, 0xe5, 0x6c, 0xd2, 0x20, 0xc5, 0x2b, 0x16, 0xe4, 0x00,
		0x52, 0x9c, 0xaf, 0x49, 0x83, 0x14, 0x2f, 0x2f, 0x48, 0xa3, 0x06, 0x29, 0xce, 0xd7, 0xa4, 0x41,
		0x8a, 0x57, 0x2c, 0x48, 0x0b, 0x52, 0x9c, 0xaf, 0x49, 0x83, 0x14, 0x2f, 0x2f, 0x48, 0x13, 0xed,
		0x27, 0x72, 0x36, 0x69, 0x90, 0xe2, 0x15, 0x0b, 0xd2, 0x80, 0x14, 0xe7, 0x6b, 0xd2, 0xd2, 0x6d,
		0xb1, 0x17, 0xb3, 0x5b, 0xd2, 0x57, 0xdb, 0xe7, 0x87, 0x9c, 0x7b, 0x62, 0x1d, 0x93, 0x4e, 0x6c,
		0xe7, 0xa8, 0xcf, 0x06, 0xe1, 0x45, 0x36, 0x02, 0xcb, 0x34, 0x11, 0x8b, 0xb9, 0x27, 0x2b, 0xfb,
		0xf5, 0x7a, 0xb3, 0x55, 0xaf, 0x97, 0x5b, 0xb5, 0x56, 0xf9, 0xa0, 0xd1, 0xa8, 0x34, 0x85, 0xee,
		0xee, 0x3e, 0xf3, 0xba, 0xcc, 0x63, 0xdd, 0x8f, 0x8f, 0xc5, 0x0f, 0x05, 0x67, 0xd4, 0xef, 0x27,
		0xd8, 0xff, 0x8c, 0xbb, 0xdc, 0xec, 0xd3, 0x5c, 0x11, 0xb9, 0x7e, 0x28, 0x74, 0x43, 0x43, 0x37,
		0x34, 0x45, 0xfd, 0xc6, 0xfd, 0x90, 0xd9, 0xf2, 0xe3, 0xd8, 0x69, 0x10, 0xf7, 0xe2, 0xb8, 0x1f,
		0x52, 0xd1, 0x57, 0x79, 0xa6, 0xe3, 0x0f, 0x6c, 0x6e, 0x30, 0xdb, 0x1b, 0x4a, 0xf8, 0xa7, 0x85,
		0xc7, 0xe1, 0x93, 0xe0, 0x93, 0x52, 0xf3, 0x49, 0xe8, 0xdb, 0x0e, 0x77, 0x84, 0xbe, 0xed, 0x9b,
		0xe2, 0x8e, 0x86, 0xee, 0x37, 0xe6, 0x29, 0xf8, 0xa3, 0xe9, 0xf3, 0xe2, 0x57, 0x17, 0x1f, 0xc0,
		0x89, 0xc1, 0x89, 0xa5, 0xe7, 0xc4, 0x24, 0x7d, 0x58, 0x65, 0x53, 0x7d, 0x58, 0x05, 0x05, 0xe1,
		0x29, 0x04, 0x55, 0xd5, 0x16, 0xbc, 0x98, 0x92, 0x17, 0xfb, 0x6e, 0x74, 0x5d, 0x5e, 0xa9, 0x10,
		0xe5, 0x00, 0x5f, 0x1b, 0x0d, 0xde, 0x0a, 0xde, 0x0a, 0x69, 0x40, 0xc4, 0x5d, 0x48, 0x03, 0xc2,
		0x63, 0x49, 0xfd, 0xc4, 0x1b, 0x4b, 0x5e, 0x3c, 0x74, 0x1c, 0x97, 0xc7, 0xf7, 0x5c, 0x45, 0xdf,
		0xba, 0x67, 0x03, 0x73, 0x68, 0xf2, 0xfb, 0x89, 0x85, 0x28, 0xb9, 0x43, 0xe6, 0x58, 0x81, 0x37,
		0x89, 0xec, 0x5c, 0xc9, 0x33, 0xbb, 0xb6, 0xeb, 0x4f, 0x7f, 0x29, 0xf9, 0xdc, 0xe4, 0x71, 0xcc,
		0x47, 0xd1, 0xe7, 0xde, 0xc8, 0xe2, 0x4e, 0x68, 0x7a, 0xce, 0xa2, 0x71, 0x7f, 0xb7, 0x7b, 0xf6,
		0xf9, 0xfd, 0x63, 0xe7, 0x22, 0x18, 0x75, 0xfa, 0x4b, 0xe7, 0x32, 0x18, 0xf5, 0x9d, 0xdc, 0xb4,
		0xac, 0xfe, 0x97, 0x35, 0x13, 0x35, 0xf1, 0x27, 0x01, 0xb9, 0x77, 0x0b, 0xee, 0x90, 0x79, 0x26,
		0xb7, 0x9d, 0x3b, 0xa3, 0xe7, 0xb1, 0xff, 0x8e, 0x98, 0x63, 0xad, 0x73, 0x68, 0xf1, 0xb6, 0x56,
		0xe3, 0x6f, 0xa5, 0x2a, 0x6d, 0x9d, 0xc6, 0xdb, 0x2a, 0x5d, 0xf7, 0xf5, 0x63, 0xca, 0x87, 0xa8,
		0x5c, 0xbc, 0x22, 0x11, 0x42, 0x92, 0xb0, 0x5a, 0x06, 0x96, 0x57, 0x78, 0xf1, 0x6f, 0x5e, 0x7c,
		0xd9, 0xb7, 0xbe, 0x64, 0xfc, 0x2f, 0xb7, 0xe2, 0x6b, 0xc5, 0xfc, 0x3a, 0x8b, 0x5f, 0xe4, 0xf9,
		0x75, 0xe7, 0x5e, 0xb5, 0xe8, 0xfb, 0x76, 0x77, 0xf9, 0xae, 0xad, 0xe7, 0x3b, 0xb5, 0x82, 0x7f,
		0x7e, 0xf1, 0xd5, 0x56, 0x07, 0x5a, 0x6b, 0x09, 0xf0, 0x35, 0xd2, 0x5b, 0x22, 0xba, 0x81, 0xb9,
		0xea, 0x8a, 0xff, 0xb7, 0xc8, 0x2d, 0x36, 0xa1, 0xc5, 0x26, 0xb1, 0x95, 0xc4, 0x35, 0x79, 0x39,
		0x41, 0x31, 0xf8, 0x6c, 0x7b, 0x6b, 0xd6, 0xdf, 0xb7, 0xbb, 0xeb, 0xbf, 0xcf, 0xfc, 0xfc, 0xaf,
		0xfb, 0x2a, 0xaf, 0xc7, 0xbb, 0x6f, 0x02, 0x79, 0x1c, 0x00, 0x8f, 0xb9, 0x3c, 0xa2, 0x80, 0x2d,
		0x0c, 0xd4, 0xc2, 0x00, 0x1d, 0x7f, 0xf9, 0xe4, 0x2c, 0xf8, 0xba, 0x65, 0x8d, 0x7e, 0xe0, 0xd6,
		0x74, 0xba, 0x86, 0xcf, 0x19, 0xf3, 0x6c, 0xe7, 0xee, 0xed, 0x09, 0x89, 0xae, 0xeb, 0x5b, 0x78,
		0xec, 0x8d, 0xef, 0x18, 0x2f, 0xe1, 0x11, 0x3b, 0x32, 0x13, 0x89, 0xc8, 0x04, 0x05, 0x43, 0x36,
		0x02, 0x93, 0x8e, 0xbc, 0xa4, 0x23, 0x2e, 0x71, 0xc1, 0xa1, 0x61, 0xa6, 0xb7, 0x04, 0x2a, 0xfa,
		0x41, 0x6b, 0xb6, 0x9a, 0x82, 0x29, 0x81, 0xf0, 0x39, 0xb1, 0xe0, 0xbf, 0x92, 0xe5, 0xe0, 0x3f,
		0x9e, 0xc8, 0x6d, 0x68, 0xf0, 0x1f, 0x4b, 0x24, 0xf5, 0x04, 0xff, 0x71, 0x45, 0x55, 0xd2, 0x16,
		0x92, 0xd8, 0x46, 0xa2, 0xa8, 0x51, 0x58, 0xb0, 0x55, 0x04, 0x9c, 0x48, 0xd0, 0x55, 0x05, 0x9e,
		0x4c, 0xf0, 0xc9, 0x14, 0x80, 0x4e, 0x11, 0x24, 0xe3, 0x6f, 0xc1, 0xb5, 0x17, 0xce, 0x8e, 0x2d,
		0x8b, 0xba, 0xf0, 0xad, 0xbd, 0x4b, 0x96, 0xbb, 0xa2, 0x29, 0xc5, 0x20, 0x30, 0x19, 0xc5, 0x99,
		0xb2, 0x1a, 0x9e, 0xef, 0xdb, 0xf2, 0x8a, 0xbf, 0x38, 0x0c, 0x14, 0x1f, 0x8a, 0xbf, 0xb1, 0x8a,
		0x2f, 0xb8, 0x99, 0x2b, 0xc9, 0x6b, 0x04, 0x89, 0x72, 0xf9, 0x84, 0x39, 0x49, 0xe2, 0x9c, 0xe0,
		0x8b, 0xaf, 0xce, 0x0a, 0xcb, 0x6e, 0xfe, 0x52, 0x66, 0x87, 0x15, 0x52, 0xeb, 0x24, 0x29, 0x76,
		0xa2, 0x54, 0xfb, 0x8a, 0xc9, 0x6d, 0x65, 0x68, 0x72, 0xdf, 0x25, 0xf3, 0x54, 0x5b, 0x97, 0x1f,
		0x26, 0x65, 0x7a, 0xc1, 0x94, 0x7d, 0xdc, 0x2c, 0xe6, 0xc0, 0xb4, 0x4a, 0x41, 0x0a, 0x31, 0xf8,
		0x6f, 0x69, 0x81, 0xe0, 0x4b, 0x42, 0x11, 0xe9, 0x9b, 0x69, 0xcf, 0x13, 0xd3, 0xea, 0x5c, 0x4e,
		0x3e, 0x2a, 0xf8, 0x6f, 0xe7, 0xa3, 0xe9, 0x74, 0x2f, 0xc3, 0x4f, 0xea, 0x84, 0xce, 0x3c, 0xc1,
		0xed, 0xfc, 0xe9, 0x16, 0x85, 0x70, 0x90, 0x1e, 0x77, 0x67, 0x43, 0x29, 0x46, 0xaf, 0x22, 0x46,
		0x47, 0x8c, 0x8e, 0x18, 0x1d, 0xa8, 0x0e, 0x54, 0x47, 0x8c, 0x8e, 0x18, 0x1d, 0x8a, 0x0f, 0xc5,
		0x47, 0x8c, 0x8e, 0x18, 0x1d, 0x31, 0x3a, 0x62, 0x74, 0xc4, 0xe8, 0x2f, 0x62, 0x74, 0x91, 0x80,
		0x54, 0x29, 0x44, 0x8f, 0x51, 0x7d, 0x27, 0x10, 0xa1, 0x67, 0xa9, 0x7c, 0xf1, 0xb5, 0xf9, 0x55,
		0x2d, 0x62, 0x7c, 0x65, 0x46, 0xa5, 0x2b, 0x19, 0x5f, 0x29, 0xef, 0xb9, 0x5d, 0x5d, 0x2d, 0xb6,
		0x1e, 0x91, 0x57, 0x95, 0x8f, 0x49, 0xba, 0x07, 0x94, 0xb1, 0x6c, 0x54, 0x19, 0xcb, 0xed, 0xab,
		0xf5, 0x6f, 0xaf, 0x4b, 0x14, 0x12, 0x64, 0x48, 0x90, 0x25, 0x9f, 0x20, 0x13, 0x12, 0x58, 0x25,
		0xc1, 0x25, 0x8b, 0x8b, 0xab, 0x88, 0x8b, 0x11, 0x17, 0x27, 0x16, 0x17, 0xf7, 0x99, 0xd9, 0xf3,
		0x58, 0x4f, 0x25, 0x34, 0x96, 0x88, 0x3d, 0x8a, 0xe7, 0x21, 0x78, 0xed, 0xed, 0x4d, 0x69, 0xb5,
		0x34, 0x55, 0xb5, 0x0c, 0xa4, 0xd6, 0x82, 0xfa, 0x7d, 0x43, 0xc5, 0x6a, 0x44, 0x23, 0x20, 0xa1,
		0x06, 0xc3, 0x01, 0xc3, 0xa1, 0xd9, 0x70, 0x44, 0xda, 0x96, 0x89, 0xb4, 0xbc, 0xc8, 0x06, 0xf2,
		0xd2, 0x94, 0x8a, 0xc6, 0xed, 0x0a, 0x79, 0x3a, 0xe0, 0x06, 0xac, 0x86, 0xb8, 0xd5, 0x10, 0xe5,
		0x6f, 0x45, 0x0e, 0x27, 0xe1, 0x71, 0xa2, 0x9c, 0xab, 0xb4, 0x9b, 0xa5, 0x50, 0x1c, 0x62, 0x05,
		0xa2, 0x52, 0x24, 0x72, 0x85, 0x22, 0x57, 0x2c, 0x7a, 0x05, 0x53, 0xcc, 0x72, 0x4b, 0xca, 0x8e,
		0xb4, 0xbb, 0x5e, 0x92, 0x9c, 0x81, 0x69, 0x19, 0x66, 0xb7, 0xeb, 0x31, 0xdf, 0x57, 0x91, 0x9c,
		0x99, 0xd7, 0x51, 0xd8, 0xd4, 0x99, 0xb8, 0x72, 0xce, 0x3c, 0x47, 0x7a, 0x87, 0x2c, 0x1a, 0xe8,
		0xba, 0x6c, 0x1c, 0x98, 0x46, 0xef, 0xd0, 0xf8, 0xd2, 0xfe, 0x51, 0x1d, 0xef, 0x7c, 0x58, 0xfc,
		0xf3, 0xee, 0x8f, 0xc6, 0x58, 0x7e, 0x9d, 0xdb, 0x2a, 0x5f, 0xf0, 0xec, 0xf2, 0xf8, 0xdf, 0x64,
		0xdf, 0xf2, 0xcf, 0xb7, 0xbf, 0xe6, 0x3f, 0x14, 0xbe, 0x67, 0x42, 0xbb, 0x36, 0x32, 0x9d, 0x27,
		0x2c, 0x77, 0xe4, 0x70, 0xe6, 0xf9, 0xea, 0x0e, 0x24, 0x1a, 0xe9, 0x7d, 0x2a, 0xdd, 0xaa, 0x64,
		0xa1, 0x0b, 0x3e, 0x04, 0x3e, 0x44, 0xd9, 0x87, 0xc8, 0xc2, 0xdb, 0x3c, 0xc4, 0x29, 0x35, 0xba,
		0x8a, 0x83, 0x77, 0x0a, 0xbd, 0xaf, 0x34, 0x81, 0x1f, 0x19, 0x00, 0x52, 0x2a, 0xb1, 0x26, 0x65,
		0xa6, 0x56, 0x6a, 0x6d, 0xca, 0xad, 0x4d, 0xc9, 0xf5, 0x29, 0xbb, 0x9a, 0xd2, 0x2b, 0x2a, 0x3f,
		0x1d, 0x48, 0x2e, 0x49, 0x9e, 0x54, 0x6f, 0xb0, 0xb7, 0x74, 0xb5, 0x41, 0x30, 0x94, 0x5a, 0xf9,
		0xd5, 0xcb, 0xff, 0xd1, 0x28, 0x42, 0x81, 0xaa, 0x3c, 0x4b, 0x93, 0x91, 0x5b, 0x1a, 0x56, 0xb1,
		0x57, 0xd9, 0xda, 0x71, 0x09, 0xeb, 0x8d, 0x88, 0x55, 0x64, 0x71, 0xa9, 0xcc, 0xef, 0xb9, 0x5b,
		0x2a, 0xe9, 0x1e, 0x69, 0xa9, 0x2c, 0xd6, 0xbb, 0x6c, 0x8c, 0xd2, 0x7e, 0x97, 0xce, 0xe7, 0xab,
		0x54, 0x22, 0x7a, 0xdf, 0x8d, 0x09, 0x31, 0xa9, 0x77, 0x20, 0x7d, 0xd3, 0xc6, 0xbf, 0xf9, 0x49,
		0x20, 0x34, 0x10, 0x1a, 0x08, 0x0d, 0x84, 0x06, 0x42, 0x03, 0xa1, 0x81, 0xd0, 0x40, 0x68, 0x20,
		0xb4, 0x88, 0xd0, 0x1e, 0x39, 0xf3, 0x8d, 0xae, 0xc9, 0x4d, 0x5a, 0x1c, 0x7b, 0x1e, 0x16, 0xec,
		0x05, 0xf6, 0x02, 0x7b, 0x65, 0x94, 0xbd, 0xc2, 0x0d, 0xa7, 0x66, 0x9d, 0x10, 0xbd, 0xf6, 0x81,
		0x5e, 0x40, 0x2f, 0xa0, 0x97, 0x1c, 0x7a, 0x29, 0x5d, 0x36, 0x0d, 0x16, 0xcb, 0x35, 0x8b, 0x59,
		0xae, 0xc3, 0x3d, 0xb7, 0x4f, 0x0a, 0x62, 0xb3, 0x31, 0x41, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28,
		0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xeb, 0x28, 0xac, 0x6b, 0x72, 0xd3,
		0xe8, 0xda, 0x3e, 0x27, 0xe5, 0xb0, 0xe7, 0x51, 0xdf, 0x67, 0xa2, 0xef, 0x0d, 0x48, 0x0c, 0x24,
		0x96, 0x7b, 0x12, 0x53, 0x2d, 0x19, 0x9d, 0x57, 0xfb, 0xb2, 0xd1, 0xac, 0xd3, 0x89, 0xc8, 0x9c,
		0xe6, 0x07, 0x03, 0x13, 0xad, 0x23, 0xad, 0xdf, 0x23, 0x33, 0x02, 0x3a, 0x8c, 0x81, 0x66, 0xa3,
		0xa0, 0xcb, 0x38, 0x68, 0x37, 0x12, 0xda, 0x8d, 0x85, 0x7e, 0xa3, 0x41, 0x0c, 0x2a, 0x44, 0xb2,
		0x4b, 0x16, 0xd6, 0x69, 0x0d, 0xef, 0x34, 0x84, 0x79, 0x9a, 0xc2, 0x3d, 0xfa, 0xb0, 0x4f, 0x6b,
		0xf8, 0xa7, 0x39, 0xb6, 0xd0, 0x1d, 0x0e, 0x26, 0x11, 0x58, 0x68, 0x08, 0x0f, 0xb5, 0x86, 0x89,
		0x49, 0x2f, 0xa9, 0xfe, 0xb0, 0x31, 0xd1, 0x55, 0x7e, 0x97, 0xcd, 0xd1, 0xda, 0x19, 0x09, 0x6f,
		0x09, 0xb4, 0x60, 0x82, 0x87, 0x95, 0x72, 0xb5, 0x61, 0x54, 0xcb, 0xf5, 0x7d, 0x2d, 0xf0, 0xf9,
		0x3c, 0x3a, 0x08, 0x14, 0x04, 0x0a, 0x02, 0x05, 0x81, 0x82, 0x40, 0x41, 0xa0, 0x20, 0x50, 0x10,
		0x28, 0x08, 0x14, 0x04, 0x1a, 0x12, 0x68, 0xf5, 0xc0, 0xa8, 0x36, 0x9a, 0x7a, 0xf8, 0x33, 0x1c,
		0x1b, 0xf4, 0x09, 0xfa, 0x04, 0x7d, 0x82, 0x3e, 0x41, 0x9f, 0xa0, 0x4f, 0xd0, 0x27, 0xe8, 0x13,
		0xf4, 0x09, 0xfa, 0x0c, 0xe9, 0xb3, 0x56, 0x29, 0xb7, 0x6a, 0x46, 0xb5, 0x59, 0xad, 0xd4, 0xf5,
		0x6c, 0xc0, 0x2f, 0x7e, 0x02, 0x48, 0x14, 0x24, 0x0a, 0x12, 0x05, 0x89, 0x82, 0x44, 0x41, 0xa2,
		0x20, 0x51, 0x90, 0x28, 0x48, 0x14, 0x24, 0x1a, 0x92, 0x68, 0xb3, 0xb6, 0xdf, 0x30, 0x6a, 0xd5,
		0x56, 0x53, 0xd3, 0x5e, 0xfc, 0xdc, 0xf8, 0xa0, 0x50, 0x50, 0x28, 0x28, 0x14, 0x14, 0x0a, 0x0a,
		0x05, 0x85, 0x82, 0x42, 0x41, 0xa1, 0xa0, 0x50, 0x50, 0xe8, 0x94, 0x42, 0xab, 0xe5, 0xfa, 0x81,
		0x51, 0x2f, 0x1f, 0xe8, 0xd9, 0x8f, 0x7f, 0x1e, 0x1d, 0x04, 0x0a, 0x02, 0x05, 0x81, 0x82, 0x40,
		0x41, 0xa0, 0x20, 0x50, 0x10, 0x28, 0x08, 0x14, 0x04, 0x0a, 0x02, 0x0d, 0x09, 0xb4, 0xd1, 0x32,
		0x1a, 0x95, 0xaa, 0x1e, 0xfe, 0x0c, 0xc7, 0x06, 0x7d, 0x82, 0x3e, 0x41, 0x9f, 0xa0, 0x4f, 0xd0,
		0x27, 0xe8, 0x13, 0xf4, 0x09, 0xfa, 0x04, 0x7d, 0x82, 0x3e, 0x43, 0xfa, 0x6c, 0x56, 0x2b, 0xf5,
		0x86, 0xd1, 0xa8, 0xd6, 0xab, 0xfb, 0x7a, 0xf6, 0xe1, 0x17, 0x3f, 0x01, 0x24, 0x0a, 0x12, 0x05,
		0x89, 0x82, 0x44, 0x41, 0xa2, 0x20, 0x51, 0x90, 0x28, 0x48, 0x14, 0x24, 0x0a, 0x12, 0x9d, 0x92,
		0x68, 0xad, 0xda, 0x6a, 0x1e, 0x18, 0xcd, 0x46, 0xa3, 0xa6, 0x67, 0x2f, 0x7e, 0x7e, 0x7c, 0x50,
		0x28, 0x28, 0x14, 0x14, 0x0a, 0x0a, 0x05, 0x85, 0x82, 0x42, 0x41, 0xa1, 0xa0, 0x50, 0x50, 0x28,
		0x28, 0x74, 0x4a, 0xa1, 0xf5, 0xf2, 0x41, 0xcb, 0xd8, 0xaf, 0x1c, 0xe8, 0xd9, 0x8f, 0x7f, 0x1e,
		0x1d, 0x04, 0x0a, 0x02, 0x05, 0x81, 0x82, 0x40, 0x41, 0xa0, 0x20, 0x50, 0x10, 0x28, 0x08, 0x14,
		0x04, 0x0a, 0x02, 0x9d, 0x12, 0x68, 0xa3, 0x52, 0x33, 0x2a, 0xe5, 0xaa, 0x9e, 0xe6, 0x4c, 0xd1,
		0xe0, 0xe0, 0x4f, 0xf0, 0x27, 0xf8, 0x13, 0xfc, 0x09, 0xfe, 0x04, 0x7f, 0x82, 0x3f, 0xc1, 0x9f,
		0xe0, 0x4f, 0xf0, 0x67, 0xc8, 0x9f, 0xd5, 0x7a, 0x75, 0xff, 0xc0, 0xa8, 0x94, 0xeb, 0xfb, 0x8d,
		0x96, 0x9e, 0xad, 0xf8, 0x17, 0x1f, 0x01, 0x16, 0x05, 0x8b, 0x82, 0x45, 0xc1, 0xa2, 0x60, 0x51,
		0xb0, 0x28, 0x58, 0x14, 0x2c, 0x0a, 0x16, 0x05, 0x8b, 0x4e, 0x59, 0xb4, 0xd9, 0x30, 0x2a, 0x55,
		0x3d, 0xc7, 0x92, 0xc2, 0xa1, 0xc1, 0x9e, 0x60, 0x4f, 0xb0, 0x27, 0xd8, 0x13, 0xec, 0x09, 0xf6,
		0x04, 0x7b, 0x82, 0x3d, 0xc1, 0x9e, 0x60, 0xcf, 0x19, 0x7b, 0x36, 0x6a, 0xad, 0xe9, 0x6d, 0x46,
		0x55, 0x4d, 0x04, 0x3a, 0xf7, 0x01, 0xe0, 0x50, 0x70, 0x28, 0x38, 0x14, 0x1c, 0x0a, 0x0e, 0x05,
		0x87, 0x82, 0x43, 0xc1, 0xa1, 0xe0, 0x50, 0x70, 0xe8, 0x94, 0x43, 0xf7, 0x2b, 0x07, 0xb5, 0xe0,
		0x32, 0x23, 0x3d, 0x15, 0xa1, 0x73, 0xc3, 0x83, 0x41, 0xc1, 0xa0, 0x60, 0x50, 0x30, 0x28, 0x18,
		0x14, 0x0c, 0x0a, 0x06, 0x05, 0x83, 0x82, 0x41, 0xf3, 0xcf, 0xa0, 0xef, 0x52, 0xd4, 0xa1, 0xe2,
		0xa1, 0xe3, 0xb8, 0xdc, 0x9c, 0x88, 0x00, 0x89, 0xda, 0x14, 0x7d, 0xeb, 0x9e, 0x0d, 0xcc, 0xa1,
		0xc9, 0xef, 0x27, 0x1e, 0xab, 0xe4, 0x0e, 0x99, 0x63, 0x05, 0x74, 0x18, 0xf9, 0xfd, 0x92, 0xef,
		0xdb, 0x5d, 0x3f, 0xf8, 0x6f, 0xe9, 0x76, 0xfa, 0xfb, 0xe0, 0x97, 0x92, 0xcf, 0x4d, 0xce, 0x4a,
		0xa1, 0x93, 0xf3, 0x4b, 0xde, 0x77, 0xa3, 0x6b, 0x72, 0xd3, 0xe8, 0xda, 0x3e, 0x27, 0x70, 0x78,
		0x45, 0x9f, 0x7b, 0x23, 0x8b, 0x3b, 0xa1, 0x2f, 0x3d, 0x8b, 0x5e, 0xec, 0x77, 0xbb, 0x67, 0x9f,
		0x98, 0x56, 0xe7, 0x72, 0xf2, 0x2a, 0xc1, 0x7f, 0x3b, 0x1f, 0x83, 0xd7, 0x9a, 0xfe, 0xd2, 0xb9,
		0x9c, 0xbc, 0x56, 0xe7, 0x53, 0xf8, 0x5a, 0x9d, 0x8b, 0xef, 0x9f, 0x4d, 0x6e, 0x7e, 0x9e, 0xbc,
		0xd4, 0xbb, 0x74, 0x96, 0x5d, 0x61, 0xc9, 0x8b, 0xb3, 0x49, 0xfd, 0x36, 0x18, 0x28, 0xaf, 0xf7,
		0x7c, 0x88, 0x12, 0x0d, 0xaa, 0x28, 0x8e, 0xa1, 0x85, 0xad, 0x28, 0x0e, 0x43, 0x15, 0x90, 0x50,
		0x06, 0x22, 0x9a, 0x02, 0x10, 0xea, 0xc0, 0x43, 0x5b, 0xc0, 0xa1, 0x2d, 0xd0, 0xd0, 0x17, 0x60,
		0xa4, 0x6b, 0x9a, 0x3f, 0xdb, 0x1e, 0x8d, 0xe0, 0xdd, 0x32, 0xfa, 0xb4, 0xc4, 0x2d, 0x43, 0x2e,
		0x02, 0xb9, 0x08, 0xe4, 0x22, 0x90, 0x8b, 0x40, 0x2e, 0x02, 0xb9, 0x08, 0xe4, 0x22, 0x90, 0x8b,
		0x40, 0x2e, 0x62, 0x03, 0x72, 0x11, 0x04, 0xf1, 0xc8, 0xed, 0x5f, 0x1a, 0x68, 0xf3, 0x2f, 0xd0,
		0x26, 0x68, 0x13, 0xb4, 0x09, 0xda, 0x04, 0x6d, 0x82, 0x36, 0x41, 0x9b, 0xa0, 0x4d, 0xd0, 0x26,
		0x68, 0x73, 0xb2, 0x8c, 0x0f, 0x36, 0x3d, 0x6d, 0x3e, 0xd8, 0xa0, 0x4d, 0xd0, 0x26, 0x68, 0x13,
		0xb4, 0x09, 0xda, 0x04, 0x6d, 0x82, 0x36, 0x41, 0x9b, 0xa0, 0x4d, 0xd0, 0x66, 0x40, 0x9b, 0xae,
		0x06, 0xda, 0x74, 0x41, 0x9b, 0xa0, 0x4d, 0xd0, 0x26, 0x68, 0x13, 0xb4, 0x09, 0xda, 0x04, 0x6d,
		0x82, 0x36, 0x41, 0x9b, 0x1b, 0x40, 0x9b, 0xa8, 0xea, 0x7f, 0xb5, 0xaa, 0x5f, 0xbd, 0x56, 0xbc,
		0x40, 0x5e, 0xd4, 0xff, 0xfb, 0x60, 0x90, 0xd3, 0x9a, 0xfe, 0x81, 0xe5, 0x93, 0x96, 0xf3, 0x4f,
		0xc6, 0x43, 0x25, 0x7f, 0xc2, 0x41, 0x07, 0x2a, 0xf9, 0x51, 0xc9, 0xff, 0xc6, 0x40, 0x03, 0xcb,
		0x2f, 0xd3, 0x67, 0x20, 0x82, 0x51, 0x91, 0x83, 0x40, 0x0e, 0x02, 0x39, 0x08, 0xe4, 0x20, 0x90,
		0x83, 0x40, 0x0e, 0x02, 0x39, 0x08, 0xe4, 0x20, 0x90, 0x83, 0xc8, 0x7f, 0x0e, 0xe2, 0x3d, 0x09,
		0x71, 0x56, 0xb4, 0x10, 0x67, 0x05, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20,
		0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x9c, 0x11, 0xa7, 0x9e, 0x24, 0x67, 0x05, 0x59,
		0x4e, 0x30, 0x27, 0x98, 0x13, 0xcc, 0x09, 0xe6, 0x04, 0x73, 0x82, 0x39, 0xc1, 0x9c, 0x60, 0x4e,
		0x30, 0x67, 0xc4, 0x9c, 0x9a, 0xd2, 0x9c, 0xc8, 0x73, 0x82, 0x39, 0xc1, 0x9c, 0x60, 0x4e, 0x30,
		0x27, 0x98, 0x13, 0xcc, 0x09, 0xe6, 0x04, 0x73, 0x82, 0x39, 0x67, 0xcc, 0x59, 0xd5, 0x82, 0x9c,
		0xb8, 0xa9, 0x14, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27,
		0x88, 0x13, 0xc4, 0x39, 0x23, 0xce, 0x9a, 0x16, 0xe2, 0xac, 0x81, 0x38, 0x41, 0x9c, 0x20, 0x4e,
		0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x21, 0x71, 0xd6,
		0xb5, 0x10, 0x27, 0x6e, 0xc2, 0x07, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88,
		0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0xce, 0x88, 0xb3, 0xa1, 0x85, 0x38, 0x1b, 0x20, 0x4e, 0x10,
		0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x67,
		0x48, 0x9c, 0x4d, 0x2d, 0xc4, 0xd9, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27,
		0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x43, 0xe2, 0x6c, 0x69, 0x21, 0xce, 0x16,
		0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88,
		0x13, 0xc4, 0x19, 0x12, 0xe7, 0xbe, 0x16, 0xe2, 0xdc, 0x07, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20,
		0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x43, 0xe2, 0x3c, 0xd0,
		0x42, 0x9c, 0x07, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82, 0x38,
		0x41, 0x9c, 0x20, 0xce, 0x0d, 0x20, 0xce, 0x54, 0xaf, 0x77, 0x3f, 0x74, 0x1c, 0x97, 0x9b, 0x13,
		0x11, 0xa0, 0xb9, 0xe5, 0xdd, 0xb7, 0xee, 0xd9, 0xc0, 0x1c, 0x9a, 0xfc, 0x7e, 0xe2, 0xb1, 0x4a,
		0xee, 0x90, 0x39, 0x56, 0x40, 0x87, 0x91, 0xdf, 0x2f, 0xf9, 0xbe, 0xdd, 0xf5, 0x83, 0xff, 0x96,
		0x6e, 0xa7, 0xbf, 0x0f, 0x7e, 0x29, 0xf9, 0xdc, 0xe4, 0xac, 0x14, 0x3a, 0x39, 0xbf, 0xe4, 0x7d,
		0x37, 0x06, 0x96, 0x4f, 0xe0, 0xea, 0x8a, 0x3e, 0xf7, 0x46, 0x16, 0x77, 0x42, 0x2f, 0x7a, 0x16,
		0xbd, 0xd2, 0xef, 0x76, 0xcf, 0x3e, 0x31, 0xad, 0xce, 0xe5, 0xe4, 0x25, 0x82, 0xff, 0x76, 0x3e,
		0x06, 0x2f, 0x34, 0xfd, 0xa5, 0x73, 0x39, 0x79, 0xa1, 0xce, 0xa7, 0xf0, 0x85, 0x3a, 0x17, 0xdf,
		0x4f, 0x2c, 0x5f, 0x8d, 0x5a, 0xe4, 0xd7, 0x5a, 0x61, 0x9d, 0x8b, 0x93, 0x99, 0xbc, 0x1b, 0x70,
		0xe5, 0x05, 0x8e, 0x40, 0x64, 0x36, 0xa0, 0xa2, 0xec, 0xd1, 0x98, 0x53, 0xb2, 0xe8, 0x83, 0x32,
		0xea, 0xd0, 0x14, 0x6d, 0x50, 0x47, 0x19, 0xda, 0xa2, 0x0b, 0x6d, 0x51, 0x85, 0xbe, 0x68, 0x22,
		0x5d, 0x3b, 0x4c, 0x16, 0x35, 0x68, 0x89, 0x16, 0x08, 0xa3, 0x04, 0xe2, 0xe8, 0x80, 0x30, 0xcc,
		0xd2, 0x11, 0x0d, 0x68, 0x42, 0x46, 0x5d, 0xf4, 0xaf, 0x93, 0x07, 0x09, 0x69, 0x5f, 0x0b, 0xe5,
		0xeb, 0x5e, 0x2a, 0xfd, 0x54, 0xaf, 0x75, 0xf5, 0x32, 0x42, 0xcb, 0xed, 0x7c, 0xf2, 0x97, 0xc7,
		0xb8, 0x67, 0x33, 0x9f, 0x14, 0xc1, 0x66, 0x63, 0x82, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18,
		0x28, 0x0c, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0xde, 0xa0, 0x30, 0xa3, 0x6b, 0x72, 0x53,
		0x07, 0x8a, 0x4d, 0x07, 0x06, 0x8f, 0x81, 0xc7, 0xc0, 0x63, 0xe0, 0x31, 0xf0, 0x18, 0x78, 0x0c,
		0x3c, 0x06, 0x1e, 0x03, 0x8f, 0xbd, 0xc5, 0x63, 0xfe, 0xe8, 0xb6, 0xe7, 0x4d, 0x0d, 0x34, 0x3d,
		0x93, 0x45, 0x83, 0x83, 0xcb, 0xc0, 0x65, 0xe0, 0x32, 0x70, 0x19, 0xb8, 0x0c, 0x5c, 0x06, 0x2e,
		0x03, 0x97, 0x81, 0xcb, 0x56, 0x2e, 0x0b, 0xff, 0x6e, 0xdc, 0xfa, 0xbe, 0xd1, 0x75, 0x79, 0xa5,
		0x62, 0x58, 0xf7, 0xa6, 0xe3, 0xb0, 0xbe, 0x31, 0xe2, 0x76, 0xdf, 0xfe, 0x9b, 0xa6, 0x4e, 0x30,
		0xb2, 0xf9, 0x6f, 0x7e, 0x12, 0x88, 0x0d, 0xc4, 0x06, 0x62, 0xcb, 0x28, 0xb1, 0x0d, 0x99, 0x67,
		0x31, 0x87, 0x9b, 0x77, 0x8c, 0x10, 0xd9, 0x1a, 0x40, 0x36, 0x20, 0x1b, 0x90, 0x4d, 0x0e, 0xd9,
		0xca, 0x65, 0x10, 0xda, 0xb6, 0x10, 0xda, 0x23, 0x27, 0xdf, 0xc7, 0x5c, 0x1c, 0x16, 0xec, 0x05,
		0xf6, 0x02, 0x7b, 0x21, 0x5b, 0x06, 0xf4, 0x02, 0x7a, 0x01, 0xbd, 0x90, 0x2d, 0x03, 0x8b, 0xad,
		0x63, 0x31, 0xcb, 0x75, 0xb8, 0xe7, 0xf6, 0x49, 0x41, 0x6c, 0x36, 0x26, 0x28, 0x0c, 0x14, 0x06,
		0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x6c, 0x1d, 0x85, 0x75,
		0x4d, 0x6e, 0x1a, 0x5d, 0xdb, 0xe7, 0xa4, 0x1c, 0xf6, 0x3c, 0x2a, 0x0d, 0x89, 0x55, 0x40, 0x62,
		0x20, 0xb1, 0x6d, 0x27, 0xb1, 0xcf, 0xb6, 0x47, 0x23, 0x78, 0xfc, 0xbb, 0x51, 0x36, 0x9a, 0x75,
		0xfa, 0x5e, 0x9b, 0xb3, 0x81, 0xd1, 0x6e, 0x33, 0x63, 0x46, 0x41, 0x97, 0x71, 0xd0, 0x6e, 0x24,
		0xb4, 0x1b, 0x0b, 0xfd, 0x46, 0x83, 0x18, 0x54, 0xd0, 0x6e, 0x93, 0x68, 0x48, 0xb4, 0xdb, 0x44,
		0xbb, 0xcd, 0x84, 0xc3, 0x43, 0xad, 0x61, 0x62, 0xd2, 0x4b, 0x8a, 0x76, 0x9b, 0x49, 0x8c, 0xb6,
		0x49, 0x0d, 0xde, 0xf9, 0x77, 0xa3, 0x52, 0xae, 0x36, 0x8c, 0x6a, 0xb9, 0xbe, 0xaf, 0x05, 0x3e,
		0x9f, 0x47, 0x07, 0x81, 0x82, 0x40, 0x41, 0xa0, 0x20, 0x50, 0x10, 0x28, 0x08, 0x14, 0x04, 0x0a,
		0x02, 0x05, 0x81, 0x82, 0x40, 0x43, 0x02, 0xad, 0x1e, 0x18, 0xd5, 0x46, 0x53, 0x0f, 0x7f, 0x86,
		0x63, 0x83, 0x3e, 0x41, 0x9f, 0xa0, 0x4f, 0xd0, 0x27, 0xe8, 0x13, 0xf4, 0x09, 0xfa, 0x04, 0x7d,
		0x82, 0x3e, 0x41, 0x9f, 0x21, 0x7d, 0xd6, 0x2a, 0xe5, 0x56, 0xcd, 0xa8, 0x36, 0xab, 0x95, 0xba,
		0x9e, 0x0d, 0xf8, 0xc5, 0x4f, 0x00, 0x89, 0x82, 0x44, 0x41, 0xa2, 0x20, 0x51, 0x90, 0x28, 0x48,
		0x14, 0x24, 0x0a, 0x12, 0x05, 0x89, 0x82, 0x44, 0x43, 0x12, 0x6d, 0xd6, 0xf6, 0x1b, 0x46, 0xad,
		0xda, 0x6a, 0x6a, 0xda, 0x8b, 0x9f, 0x1b, 0x1f, 0x14, 0x0a, 0x0a, 0x05, 0x85, 0x82, 0x42, 0x41,
		0xa1, 0xa0, 0x50, 0x50, 0x28, 0x28, 0x14, 0x14, 0x0a, 0x0a, 0x9d, 0x52, 0x68, 0xb5, 0x5c, 0x3f,
		0x30, 0xea, 0xe5, 0x03, 0x3d, 0xfb, 0xf1, 0xcf, 0xa3, 0x83, 0x40, 0x41, 0xa0, 0x20, 0x50, 0x10,
		0x28, 0x08, 0x14, 0x04, 0x0a, 0x02, 0x05, 0x81, 0x82, 0x40, 0x41, 0xa0, 0x21, 0x81, 0x36, 0x5a,
		0x46, 0xa3, 0x52, 0xd5, 0xc3, 0x9f, 0xe1, 0xd8, 0xa0, 0x4f, 0xd0, 0x27, 0xe8, 0x13, 0xf4, 0x09,
		0xfa, 0x04, 0x7d, 0x82, 0x3e, 0x41, 0x9f, 0xa0, 0x4f, 0xd0, 0x67, 0x48, 0x9f, 0xcd, 0x6a, 0xa5,
		0xde, 0x30, 0x1a, 0xd5, 0x7a, 0x75, 0x5f, 0xcf, 0x3e, 0xfc, 0xe2, 0x27, 0x80, 0x44, 0x41, 0xa2,
		0x20, 0x51, 0x90, 0x28, 0x48, 0x14, 0x24, 0x0a, 0x12, 0x05, 0x89, 0x82, 0x44, 0x41, 0xa2, 0x53,
		0x12, 0xad, 0x55, 0x5b, 0xcd, 0x03, 0xa3, 0xd9, 0x68, 0xd4, 0xf4, 0xec, 0xc5, 0xcf, 0x8f, 0x0f,
		0x0a, 0x05, 0x85, 0x82, 0x42, 0x41, 0xa1, 0xa0, 0x50, 0x50, 0x28, 0x28, 0x14, 0x14, 0x0a, 0x0a,
		0x05, 0x85, 0x4e, 0x29, 0xb4, 0x5e, 0x3e, 0x68, 0x19, 0xfb, 0x95, 0x03, 0x3d, 0xfb, 0xf1, 0xcf,
		0xa3, 0x83, 0x40, 0x41, 0xa0, 0x20, 0x50, 0x10, 0x28, 0x08, 0x14, 0x04, 0x0a, 0x02, 0x05, 0x81,
		0x82, 0x40, 0x41, 0xa0, 0x53, 0x02, 0x6d, 0x54, 0x6a, 0x46, 0xa5, 0x5c, 0xd5, 0xd3, 0x9c, 0x29,
		0x1a, 0x1c, 0xfc, 0x09, 0xfe, 0x04, 0x7f, 0x82, 0x3f, 0xc1, 0x9f, 0xe0, 0x4f, 0xf0, 0x27, 0xf8,
		0x13, 0xfc, 0x09, 0xfe, 0x0c, 0xf9, 0xb3, 0x5a, 0xaf, 0xee, 0x1f, 0x18, 0x95, 0x72, 0x7d, 0xbf,
		0xd1, 0xd2, 0xb3, 0x15, 0xff, 0xe2, 0x23, 0xc0, 0xa2, 0x60, 0x51, 0xb0, 0x28, 0x58, 0x14, 0x2c,
		0x0a, 0x16, 0x05, 0x8b, 0x82, 0x45, 0xc1, 0xa2, 0x60, 0xd1, 0x29, 0x8b, 0x36, 0x1b, 0x46, 0xa5,
		0xaa, 0xe7, 0x58, 0x52, 0x38, 0x34, 0xd8, 0x13, 0xec, 0x09, 0xf6, 0x04, 0x7b, 0x82, 0x3d, 0xc1,
		0x9e, 0x60, 0x4f, 0xb0, 0x27, 0xd8, 0x13, 0xec, 0x39, 0x63, 0xcf, 0x46, 0xad, 0x35, 0xbd, 0xcd,
		0xa8, 0xaa, 0x89, 0x40, 0xe7, 0x3e, 0x00, 0x1c, 0x0a, 0x0e, 0x05, 0x87, 0x82, 0x43, 0xc1, 0xa1,
		0xe0, 0x50, 0x70, 0x28, 0x38, 0x14, 0x1c, 0x0a, 0x0e, 0x9d, 0x72, 0xe8, 0x7e, 0xe5, 0xa0, 0x16,
		0x5c, 0x66, 0xa4, 0xa7, 0x22, 0x74, 0x6e, 0x78, 0x30, 0x28, 0x18, 0x14, 0x0c, 0x0a, 0x06, 0x05,
		0x83, 0x82, 0x41, 0xc1, 0xa0, 0x60, 0x50, 0x30, 0x68, 0xfe, 0x19, 0xf4, 0x5d, 0x8a, 0x3a, 0x54,
		0x3c, 0x74, 0x1c, 0x97, 0x9b, 0x13, 0x11, 0x20, 0x51, 0x9b, 0xa2, 0x6f, 0xdd, 0xb3, 0x81, 0x39,
		0x34, 0xf9, 0xfd, 0xc4, 0x63, 0x95, 0xdc, 0x21, 0x73, 0xac, 0x80, 0x0e, 0x23, 0xbf, 0x5f, 0xf2,
		0x7d, 0xbb, 0xeb, 0x07, 0xff, 0x2d, 0xdd, 0x4e, 0x7f, 0x1f, 0xfc, 0x52, 0xf2, 0xb9, 0xc9, 0x59,
		0x29, 0x74, 0x72, 0x7e, 0x89, 0x7f, 0x37, 0xba, 0x26, 0x37, 0x8d, 0xae, 0xed, 0x73, 0x02, 0x87,
		0x57, 0xf4, 0xb9, 0x37, 0xb2, 0xb8, 0x13, 0xfa, 0xd2, 0xb3, 0xe8, 0xc5, 0x7e, 0xb7, 0x7b, 0xf6,
		0x89, 0x69, 0x75, 0x2e, 0x27, 0xaf, 0x12, 0xfc, 0xb7, 0xf3, 0x31, 0x78, 0xad, 0xe9, 0x2f, 0x9d,
		0xcb, 0xc9, 0x6b, 0x75, 0x3e, 0x85, 0xaf, 0xd5, 0xb9, 0xfa, 0xfe, 0xd9, 0xe4, 0xe6, 0xe7, 0xc9,
		0x4b, 0xbd, 0x4b, 0x67, 0xd9, 0x15, 0x96, 0xbc, 0x38, 0x9b, 0xd4, 0x6f, 0x83, 0x81, 0xf2, 0x7a,
		0xcf, 0x87, 0x28, 0xd1, 0xa0, 0x8a, 0xe2, 0x18, 0x5a, 0xd8, 0x8a, 0xe2, 0x30, 0x54, 0x01, 0x09,
		0x65, 0x20, 0xa2, 0x29, 0x00, 0xa1, 0x0e, 0x3c, 0xb4, 0x05, 0x1c, 0xda, 0x02, 0x0d, 0x7d, 0x01,
		0x46, 0xba, 0xa6, 0xf9, 0xb3, 0xed, 0xd1, 0x08, 0xde, 0x2d, 0xa3, 0x4f, 0x4b, 0xdc, 0x32, 0xe4,
		0x22, 0x90, 0x8b, 0x40, 0x2e, 0x02, 0xb9, 0x08, 0xe4, 0x22, 0x90, 0x8b, 0x40, 0x2e, 0x02, 0xb9,
		0x08, 0xe4, 0x22, 0x36, 0x20, 0x17, 0x41, 0x10, 0x8f, 0xdc, 0xfe, 0xa5, 0x81, 0x36, 0xff, 0x02,
		0x6d, 0x82, 0x36, 0x41, 0x9b, 0xa0, 0x4d, 0xd0, 0x26, 0x68, 0x13, 0xb4, 0x09, 0xda, 0x04, 0x6d,
		0x82, 0x36, 0x27, 0xcb, 0xf8, 0x60, 0xd3, 0xd3, 0xe6, 0x83, 0x0d, 0xda, 0x04, 0x6d, 0x82, 0x36,
		0x41, 0x9b, 0xa0, 0x4d, 0xd0, 0x26, 0x68, 0x13, 0xb4, 0x09, 0xda, 0x04, 0x6d, 0x06, 0xb4, 0xe9,
		0x6a, 0xa0, 0x4d, 0x17, 0xb4, 0x09, 0xda, 0x04, 0x6d, 0x82, 0x36, 0x41, 0x9b, 0xa0, 0x4d, 0xd0,
		0x26, 0x68, 0x13, 0xb4, 0xb9, 0x01, 0xb4, 0x89, 0xaa, 0xfe, 0x57, 0xab, 0xfa, 0xd5, 0x6b, 0xc5,
		0x0b, 0xe4, 0x45, 0xfd, 0xbf, 0x0f, 0x06, 0x39, 0xad, 0xe9, 0x1f, 0x58, 0x3e, 0x69, 0x39, 0xff,
		0x64, 0x3c, 0x54, 0xf2, 0x27, 0x1c, 0x74, 0xa0, 0x92, 0x1f, 0x95, 0xfc, 0x6f, 0x0c, 0x34, 0xb0,
		0xfc, 0x32, 0x7d, 0x06, 0x22, 0x18, 0x15, 0x39, 0x08, 0xe4, 0x20, 0x90, 0x83, 0x40, 0x0e, 0x02,
		0x39, 0x08, 0xe4, 0x20, 0x90, 0x83, 0x40, 0x0e, 0x02, 0x39, 0x88, 0xfc, 0xe7, 0x20, 0xde, 0x93,
		0x10, 0x67, 0x45, 0x0b, 0x71, 0x56, 0x40, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09,
		0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0xce, 0x19, 0x71, 0xea, 0x49, 0x72, 0x56, 0x90,
		0xe5, 0x04, 0x73, 0x82, 0x39, 0xc1, 0x9c, 0x60, 0x4e, 0x30, 0x27, 0x98, 0x13, 0xcc, 0x09, 0xe6,
		0x04, 0x73, 0x46, 0xcc, 0xa9, 0x29, 0xcd, 0x89, 0x3c, 0x27, 0x98, 0x13, 0xcc, 0x09, 0xe6, 0x04,
		0x73, 0x82, 0x39, 0xc1, 0x9c, 0x60, 0x4e, 0x30, 0x27, 0x98, 0x73, 0xc6, 0x9c, 0x55, 0x2d, 0xc8,
		0x89, 0x9b, 0x4a, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71,
		0x82, 0x38, 0x41, 0x9c, 0x33, 0xe2, 0xac, 0x69, 0x21, 0xce, 0x1a, 0x88, 0x13, 0xc4, 0x09, 0xe2,
		0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x19, 0x12, 0x67,
		0x5d, 0x0b, 0x71, 0xe2, 0x26, 0x7c, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82,
		0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0xe7, 0x8c, 0x38, 0x1b, 0x5a, 0x88, 0xb3, 0x01, 0xe2, 0x04,
		0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71,
		0x86, 0xc4, 0xd9, 0xd4, 0x42, 0x9c, 0x4d, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71,
		0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x33, 0x24, 0xce, 0x96, 0x16, 0xe2, 0x6c,
		0x81, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09, 0xe2, 0x04, 0x71, 0x82,
		0x38, 0x41, 0x9c, 0x21, 0x71, 0xee, 0x6b, 0x21, 0xce, 0x7d, 0x10, 0x27, 0x88, 0x13, 0xc4, 0x09,
		0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88, 0x33, 0x24, 0xce, 0x03,
		0x2d, 0xc4, 0x79, 0x00, 0xe2, 0x04, 0x71, 0x82, 0x38, 0x41, 0x9c, 0x20, 0x4e, 0x10, 0x27, 0x88,
		0x13, 0xc4, 0x09, 0xe2, 0xdc, 0x00, 0xe2, 0x4c, 0xf5, 0x7a, 0xf7, 0x43, 0xc7, 0x71, 0xb9, 0x39,
		0x11, 0x01, 0x9a, 0x5b, 0xde, 0x7d, 0xeb, 0x9e, 0x0d, 0xcc, 0xa1, 0xc9, 0xef, 0x27, 0x1e, 0xab,
		0xe4, 0x0e, 0x99, 0x63, 0x05, 0x74, 0x18, 0xf9, 0xfd, 0x92, 0xef, 0xdb, 0x5d, 0x3f, 0xf8, 0x6f,
		0xe9, 0x76, 0xfa, 0xfb, 0xe0, 0x97, 0x92, 0xcf, 0x4d, 0xce, 0x4a, 0xa1, 0x93, 0xf3, 0x4b, 0xfc,
		0xbb, 0x31, 0xb0, 0x7c, 0x02, 0x57, 0x57, 0xf4, 0xb9, 0x37, 0xb2, 0xb8, 0x13, 0x7a, 0xd1, 0xb3,
		0xe8, 0x95, 0x7e, 0xb7, 0x7b, 0xf6, 0x89, 0x69, 0x75, 0x2e, 0x27, 0x2f, 0x11, 0xfc, 0xb7, 0xf3,
		0x31, 0x78, 0xa1, 0xe9, 0x2f, 0x9d, 0xcb, 0xc9, 0x0b, 0x75, 0x3e, 0x85, 0x2f, 0xd4, 0xb9, 0xfa,
		0x7e, 0x62, 0xf9, 0x6a, 0xd4, 0x22, 0xbf, 0xd6, 0x0a, 0xeb, 0x5c, 0x9c, 0xcc, 0xe4, 0xdd, 0x80,
		0x2b, 0x2f, 0x70, 0x04, 0x22, 0xb3, 0x01, 0x15, 0x65, 0x8f, 0xc6, 0x9c, 0x92, 0x45, 0x1f, 0x94,
		0x51, 0x87, 0xa6, 0x68, 0x83, 0x3a, 0xca, 0xd0, 0x16, 0x5d, 0x68, 0x8b, 0x2a, 0xf4, 0x45, 0x13,
		0xe9, 0xda, 0x61, 0xb2, 0xa8, 0x41, 0x4b, 0xb4, 0x40, 0x18, 0x25, 0x10, 0x47, 0x07, 0x84, 0x61,
		0x96, 0x8e, 0x68, 0x40, 0x13, 0x32, 0xea, 0xa2, 0x7f, 0x9d, 0x3c, 0x48, 0x48, 0xfb, 0x5a, 0x28,
		0x5f, 0xf7, 0x52, 0xe9, 0xa7, 0x7a, 0xad, 0xab, 0x97, 0x11, 0x5a, 0x6e, 0xe7, 0x93, 0xbf, 0x3c,
		0xc6, 0x3d, 0x9b, 0xf9, 0xa4, 0x08, 0x36, 0x1b, 0x13, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2,
		0x40, 0x61, 0xa0, 0x30, 0x50, 0x18, 0x28, 0x0c, 0x14, 0xf6, 0x06, 0x85, 0x19, 0x5d, 0x93, 0x9b,
		0x3a, 0x50, 0x6c, 0x3a, 0x30, 0x78, 0x0c, 0x3c, 0x06, 0x1e, 0x03, 0x8f, 0x81, 0xc7, 0xc0, 0x63,
		0xe0, 0x31, 0xf0, 0x18, 0x78, 0xec, 0x2d, 0x1e, 0xf3, 0x47, 0xb7, 0x3d, 0x6f, 0x6a, 0xa0, 0xe9,
		0x99, 0x2c, 0x1a, 0x1c, 0x5c, 0x06, 0x2e, 0x03, 0x97, 0x81, 0xcb, 0xc0, 0x65, 0xe0, 0x32, 0x70,
		0x19, 0xb8, 0x6c, 0x93, 0xb9, 0xec, 0x5d, 0x82, 0x32, 0x4f, 0x55, 0x43, 0x48, 0x57, 0x3b, 0xa8,
		0xe0, 0x43, 0x88, 0x8a, 0x05, 0xe5, 0x1c, 0xbc, 0xf8, 0xb2, 0x49, 0x2c, 0x59, 0xd1, 0x19, 0x0d,
		0x0c, 0xd3, 0xf7, 0x5d, 0xcb, 0x36, 0x39, 0xeb, 0x1a, 0x56, 0xdf, 0x66, 0x0e, 0x97, 0xdf, 0x9a,
		0x8e, 0x5c, 0xf8, 0x9a, 0x71, 0x25, 0x85, 0x4a, 0xcd, 0xbe, 0x29, 0x63, 0x36, 0x05, 0x5e, 0x13,
		0x63, 0x35, 0x15, 0x4e, 0x93, 0x63, 0x34, 0x39, 0x3e, 0xd3, 0x63, 0x73, 0xb2, 0x06, 0x51, 0x19,
		0x8f, 0x23, 0xc9, 0x19, 0xd9, 0x0e, 0x57, 0xe9, 0x33, 0x31, 0x53, 0x23, 0x05, 0xdf, 0x4d, 0x84,
		0xc0, 0x04, 0xb1, 0x02, 0x25, 0xf2, 0x52, 0x1f, 0x81, 0x24, 0x46, 0x5c, 0x1d, 0x70, 0x44, 0x71,
		0xb4, 0x95, 0x12, 0x65, 0x75, 0x2d, 0x41, 0xb5, 0xd1, 0xc8, 0xf0, 0x22, 0xa4, 0x44, 0x84, 0xed,
		0x0c, 0x03, 0x89, 0x67, 0x76, 0x6d, 0xd7, 0xb0, 0xbb, 0xea, 0x08, 0x12, 0x8d, 0x04, 0xe8, 0x00,
		0x74, 0x00, 0x3a, 0x00, 0x1d, 0x80, 0x0e, 0x40, 0x07, 0xa0, 0x63, 0xe3, 0xa1, 0xe3, 0xff, 0x67,
		0xef, 0x6d, 0x9b, 0x12, 0x49, 0xb2, 0xb0, 0xe1, 0xef, 0xfd, 0x2b, 0x08, 0x62, 0x23, 0x56, 0xf6,
		0xb6, 0x54, 0x10, 0xb0, 0xed, 0x88, 0x3b, 0x26, 0xe8, 0x6e, 0x7a, 0xc6, 0x7b, 0x6d, 0x75, 0xd5,
		0x9e, 0x9d, 0x19, 0x65, 0x8c, 0x12, 0x52, 0xad, 0xa7, 0xa1, 0x8a, 0xad, 0x2a, 0x9c, 0x76, 0x94,
		0xff, 0xfe, 0x04, 0x05, 0x94, 0x20, 0x6f, 0x95, 0x27, 0x4f, 0xd6, 0x0b, 0x5c, 0xfd, 0x61, 0x9c,
		0xb6, 0xc9, 0xa4, 0xea, 0x64, 0x9e, 0x73, 0xae, 0xf3, 0xfe, 0x4e, 0xe3, 0x95, 0x54, 0x75, 0x6f,
		0x29, 0xbb, 0xb5, 0x08, 0x92, 0x58, 0xcd, 0x8b, 0x25, 0xa7, 0xf1, 0xa2, 0x13, 0x3f, 0xda, 0x27,
		0x23, 0x1e, 0xcf, 0x00, 0x50, 0x4c, 0x42, 0xbe, 0x5c, 0x40, 0xb1, 0x88, 0xb4, 0xca, 0x1f, 0x5b,
		0x9e, 0x5f, 0xf3, 0x7d, 0x57, 0xea, 0x44, 0x07, 0xba, 0xa0, 0xde, 0x16, 0x9d, 0x91, 0xbb, 0x4c,
		0x42, 0x84, 0x0c, 0x44, 0xd8, 0xc4, 0x4a, 0x35, 0xe7, 0x7a, 0xfe, 0xd4, 0x6d, 0x09, 0x57, 0xb4,
		0x3e, 0x0e, 0xde, 0xdf, 0xee, 0xb5, 0xdb, 0xac, 0x64, 0x25, 0xde, 0x76, 0x85, 0x5b, 0x2e, 0x71,
		0xbf, 0xa9, 0xf7, 0x3a, 0xda, 0x8d, 0x5e, 0x7d, 0x3f, 0x97, 0x7f, 0x62, 0x05, 0x89, 0x65, 0x49,
		0x4b, 0x22, 0x69, 0x04, 0x62, 0xca, 0x13, 0x71, 0x39, 0xf9, 0x16, 0x13, 0x65, 0x09, 0x41, 0xf2,
		0x51, 0xdd, 0xce, 0xaf, 0x11, 0xe2, 0x48, 0xfe, 0xe4, 0xb1, 0x7e, 0x2f, 0xae, 0xf8, 0x58, 0x54,
		0x53, 0x4d, 0xc6, 0x24, 0x23, 0x9a, 0x5e, 0xb2, 0x26, 0x16, 0xd9, 0x94, 0x22, 0x9b, 0x4c, 0x74,
		0xd3, 0x48, 0x8d, 0x61, 0x3e, 0x5b, 0xd1, 0x04, 0xf4, 0xe8, 0x6e, 0x44, 0xa7, 0xe0, 0xf4, 0x9d,
		0x8a, 0x4a, 0xbe, 0x68, 0x57, 0x6b, 0xf6, 0x8a, 0x95, 0x22, 0x2e, 0x20, 0x58, 0xff, 0x8a, 0xd6,
		0x3e, 0xd5, 0xba, 0x57, 0xb6, 0xe6, 0x95, 0xad, 0x77, 0x75, 0x6b, 0x9d, 0x17, 0x8d, 0x44, 0xbd,
		0xaa, 0x6f, 0xae, 0xac, 0xd1, 0x34, 0xbb, 0xe6, 0xad, 0xd5, 0xb6, 0x7c, 0x4a, 0x75, 0xe8, 0x9b,
		0x7b, 0x3c, 0xbd, 0x99, 0x24, 0x3d, 0xe5, 0x2e, 0x37, 0xf9, 0x92, 0x73, 0xb8, 0xba, 0x98, 0x5c,
		0x5c, 0xaa, 0xae, 0x2d, 0x36, 0x97, 0x16, 0x9b, 0x2b, 0x8b, 0xcf, 0x85, 0xa5, 0xd7, 0xa2, 0x92,
		0x65, 0x96, 0x09, 0xe4, 0x32, 0x30, 0x4f, 0x94, 0xdd, 0xc4, 0x54, 0xb3, 0x4a, 0x81, 0x51, 0xe0,
		0x23, 0x86, 0x8f, 0x38, 0x79, 0x1f, 0x31, 0x95, 0xf1, 0x5e, 0xb5, 0xd6, 0x83, 0x69, 0xdb, 0xa2,
		0x6d, 0x78, 0xbd, 0x6e, 0xd7, 0x71, 0x19, 0x5b, 0x4a, 0xbd, 0xdd, 0x18, 0xc9, 0xda, 0x31, 0x31,
		0x2f, 0x37, 0x13, 0x6b, 0x63, 0x66, 0x6d, 0x4c, 0xad, 0x8f, 0xb9, 0x99, 0xfc, 0xaf, 0xa9, 0x4b,
		0xd6, 0x56, 0x0d, 0x10, 0xbd, 0x65, 0xd3, 0x0a, 0x12, 0xb5, 0x13, 0x91, 0x6f, 0x33, 0xdb, 0x22,
		0x51, 0x3b, 0x73, 0x47, 0xc5, 0x16, 0x78, 0x8a, 0xe5, 0xb0, 0xd6, 0x23, 0x2f, 0x5b, 0x51, 0x20,
		0x93, 0x82, 0x0f, 0xcb, 0xe4, 0x0b, 0x2d, 0x28, 0xb1, 0x8c, 0x0d, 0xd8, 0x82, 0x15, 0x0b, 0xbf,
		0x84, 0x14, 0xc4, 0xe0, 0xbf, 0x11, 0x2a, 0x15, 0x8c, 0x1c, 0x2e, 0x1c, 0x8d, 0x2e, 0x1d, 0x80,
		0x62, 0x80, 0x62, 0x80, 0xe2, 0xd8, 0x40, 0xb1, 0xd5, 0x12, 0xb6, 0x6f, 0xf9, 0x4f, 0xae, 0xb8,
		0x63, 0x84, 0xc6, 0x2c, 0xb2, 0xf6, 0x68, 0xf4, 0x68, 0x1f, 0x4d, 0x4f, 0xf0, 0x0f, 0xa6, 0xf9,
		0x74, 0x7c, 0x54, 0x3f, 0xb9, 0xbc, 0xf9, 0x54, 0x3b, 0xab, 0x7d, 0x3c, 0x3a, 0x3e, 0xba, 0x3c,
		0xaa, 0x5f, 0xe4, 0x39, 0xb3, 0x6b, 0x3c, 0xd6, 0x51, 0x12, 0xcc, 0xe8, 0x6e, 0x4c, 0x84, 0xcf,
		0xa7, 0x97, 0x37, 0xc5, 0xe2, 0xaf, 0xf9, 0x34, 0xe2, 0x5a, 0x4d, 0xaf, 0xfc, 0xf5, 0xdb, 0xcd,
		0xc7, 0x7a, 0xed, 0xeb, 0x97, 0xd3, 0xf3, 0xaf, 0xf5, 0xfa, 0xa6, 0xbe, 0xf8, 0xf9, 0x26, 0xbd,
		0xf8, 0xe9, 0x97, 0xcf, 0x5f, 0x6b, 0x9b, 0xf4, 0xc2, 0x43, 0xae, 0x3e, 0x4f, 0xdb, 0xa8, 0xa2,
		0x46, 0xc6, 0x95, 0x2f, 0x0c, 0xa0, 0x14, 0x19, 0x40, 0x1b, 0x50, 0x2a, 0x3c, 0x4a, 0x1d, 0x1a,
		0xfd, 0xdc, 0x9d, 0x63, 0x5a, 0xed, 0xaa, 0x84, 0x04, 0x73, 0x92, 0x49, 0x55, 0x9f, 0x86, 0x8f,
		0x33, 0xfa, 0x39, 0xfa, 0xf1, 0x69, 0xe2, 0x69, 0x28, 0x69, 0x98, 0xf4, 0xf3, 0x5c, 0xa7, 0xec,
		0xd9, 0xd5, 0x27, 0xad, 0x39, 0x9b, 0x76, 0xe5, 0xd9, 0x6a, 0x4b, 0xae, 0xdd, 0x96, 0xcf, 0x3d,
		0x71, 0x6c, 0x5b, 0x34, 0x49, 0x47, 0x33, 0xe3, 0xa6, 0x78, 0xdd, 0x0a, 0x79, 0x27, 0x9a, 0x9d,
		0x0a, 0xc8, 0x3b, 0xa1, 0xca, 0x22, 0xe4, 0x9d, 0x20, 0xef, 0x24, 0x0e, 0xaf, 0x1c, 0xf2, 0x4e,
		0x98, 0x18, 0xef, 0xad, 0xc6, 0x52, 0xe3, 0xc3, 0x45, 0xca, 0x4b, 0x15, 0xfb, 0xe5, 0xe0, 0x5c,
		0x4f, 0x92, 0x7d, 0xb5, 0xb1, 0xb1, 0x36, 0x76, 0xd6, 0xc7, 0xd6, 0xe9, 0xb0, 0xef, 0xe1, 0x5c,
		0x67, 0x7b, 0xf1, 0x91, 0x73, 0xfd, 0xe2, 0xb2, 0x76, 0x59, 0xdf, 0x3c, 0xaf, 0xfa, 0xc7, 0xe3,
		0xda, 0xa7, 0x7f, 0x1f, 0x1f, 0x5d, 0x5c, 0xd6, 0x3f, 0x6f, 0x92, 0xdb, 0xb1, 0xf6, 0xed, 0xf2,
		0x97, 0xfa, 0xc9, 0xe5, 0xd1, 0xa7, 0xda, 0x86, 0xbd, 0xf8, 0xd9, 0xe9, 0x7f, 0xeb, 0xe7, 0x17,
		0xb5, 0x5f, 0x37, 0x2a, 0x9c, 0x50, 0xbb, 0xb8, 0x38, 0xfd, 0x74, 0xb4, 0x69, 0x47, 0x7d, 0x5c,
		0x1a, 0xdc, 0xf2, 0x9b, 0x2f, 0xb5, 0xa3, 0xe3, 0x6f, 0xe7, 0xf5, 0x9b, 0xcb, 0xa3, 0xaf, 0xf5,
		0xd3, 0x6f, 0x97, 0x1b, 0x4c, 0x81, 0xf3, 0xfa, 0xff, 0xab, 0x7f, 0xda, 0x2c, 0x02, 0xec, 0x4f,
		0x12, 0x60, 0xa3, 0xe2, 0x4a, 0xbf, 0x7c, 0x3a, 0xdb, 0xd8, 0xf7, 0x3e, 0xaf, 0xff, 0x67, 0x13,
		0x25, 0xdd, 0xc6, 0xbd, 0xf6, 0xbe, 0x8e, 0xd7, 0x5e, 0x8f, 0xf8, 0x69, 0x32, 0xe9, 0x8a, 0xa1,
		0x8f, 0xde, 0xf0, 0x2d, 0xce, 0x61, 0x0b, 0x6f, 0x37, 0x86, 0x27, 0x05, 0x9e, 0x14, 0x78, 0x52,
		0x52, 0xea, 0x49, 0x19, 0x70, 0xa8, 0x6f, 0x35, 0xbf, 0x7b, 0xa9, 0x1b, 0xb5, 0xf0, 0xcd, 0x1e,
		0x96, 0x1b, 0xe4, 0x6d, 0xd3, 0x76, 0x3c, 0xd1, 0x74, 0xec, 0x96, 0x97, 0x47, 0x65, 0x50, 0x22,
		0xd2, 0x73, 0xbe, 0xcf, 0x08, 0x95, 0x41, 0x59, 0x3a, 0x2a, 0x8c, 0x70, 0xd8, 0xd4, 0xd1, 0x5a,
		0x0f, 0x8e, 0x37, 0xce, 0x56, 0x61, 0x82, 0x78, 0xe1, 0x8e, 0xc0, 0x76, 0xc0, 0x76, 0xc0, 0x76,
		0x29, 0xc5, 0x76, 0x9e, 0xef, 0x5a, 0xf6, 0x3d, 0x67, 0x80, 0xec, 0x7d, 0x06, 0xa5, 0x9f, 0xd5,
		0x7d, 0x2c, 0x1b, 0x66, 0xab, 0xe5, 0x0a, 0x8f, 0xb1, 0x1e, 0x6f, 0x6a, 0x57, 0x48, 0x41, 0x48,
		0x41, 0x48, 0xc1, 0x94, 0x4a, 0x41, 0x46, 0x4e, 0x9d, 0x96, 0x85, 0x0c, 0x7b, 0x9d, 0x99, 0xbe,
		0x2f, 0x5c, 0x9b, 0xcd, 0x1a, 0xcd, 0x6f, 0x5d, 0xed, 0x19, 0x87, 0x8d, 0x97, 0xab, 0xa2, 0x71,
		0xd8, 0x18, 0xfe, 0x6f, 0x31, 0xf8, 0xf1, 0x5c, 0xea, 0xbf, 0x94, 0xae, 0xf6, 0x8c, 0xf2, 0xe8,
		0xb7, 0xa5, 0xca, 0xd5, 0x9e, 0x51, 0x69, 0x14, 0xb6, 0xae, 0xaf, 0x77, 0x64, 0xd7, 0x14, 0x9e,
		0xf7, 0xfb, 0xea, 0xd7, 0xac, 0xc1, 0x41, 0xbe, 0xd3, 0x8b, 0xa3, 0xdf, 0xd8, 0x69, 0xf8, 0xe7,
		0x56, 0x5c, 0x54, 0x2c, 0xfc, 0x23, 0x8f, 0xde, 0x05, 0xd3, 0x1e, 0x10, 0x94, 0xee, 0x24, 0x05,
		0x92, 0xaa, 0x63, 0x21, 0x29, 0x78, 0x61, 0xd2, 0xe4, 0xbe, 0x00, 0x4a, 0x00, 0x4a, 0x00, 0x4a,
		0xe9, 0x05, 0x4a, 0xd5, 0xcd, 0x01, 0x4a, 0x81, 0xbe, 0x36, 0x8d, 0xbb, 0x9a, 0xf1, 0xa5, 0xf1,
		0x5c, 0xdc, 0x2e, 0xf7, 0x3f, 0x14, 0x9e, 0x0f, 0xfa, 0x6f, 0x7f, 0xf9, 0x32, 0xef, 0x63, 0xc5,
		0xed, 0x83, 0xfe, 0x87, 0x05, 0xff, 0x52, 0xed, 0x7f, 0x88, 0xb8, 0x47, 0xa5, 0xbf, 0x35, 0xf3,
		0xd1, 0xc1, 0xef, 0x4b, 0x8b, 0x16, 0x94, 0x17, 0x2c, 0xd8, 0x5f, 0xb4, 0x60, 0x7f, 0xc1, 0x82,
		0x85, 0x8f, 0x54, 0x5a, 0xb0, 0xa0, 0xd2, 0x7f, 0x99, 0xf9, 0xfc, 0xd6, 0xfc, 0x8f, 0x56, 0xfb,
		0x85, 0x97, 0x45, 0xff, 0x76, 0xd0, 0x7f, 0xf9, 0x50, 0x28, 0x6c, 0x00, 0x74, 0xc4, 0xb5, 0x8a,
		0xff, 0x5a, 0x01, 0x4a, 0x03, 0x4a, 0xa7, 0x02, 0x4a, 0x3b, 0x5d, 0xe1, 0x9a, 0xbe, 0x65, 0xdf,
		0x1b, 0xde, 0x93, 0xe7, 0x8b, 0x0e, 0x1f, 0x98, 0x9e, 0xd9, 0x19, 0x70, 0x1a, 0x70, 0x1a, 0x70,
		0x3a, 0xa5, 0x70, 0x1a, 0xd1, 0x97, 0xc1, 0xb3, 0xf7, 0x3c, 0xe1, 0xf2, 0xc6, 0x9e, 0xc3, 0x1d,
		0x21, 0xfd, 0x20, 0xfd, 0x20, 0xfd, 0x20, 0xfd, 0x74, 0x4b, 0xbf, 0xcd, 0xed, 0x88, 0x14, 0x26,
		0x72, 0xa7, 0xa0, 0x1f, 0x52, 0xf8, 0x2c, 0xe8, 0x86, 0xa4, 0xeb, 0x94, 0x13, 0xe9, 0x85, 0xf4,
		0xfa, 0xed, 0xe9, 0xe9, 0x84, 0xe4, 0xde, 0x29, 0x77, 0x40, 0x72, 0xef, 0xd0, 0xf9, 0x48, 0x37,
		0x9e, 0x40, 0xe7, 0x23, 0xaa, 0xdc, 0x41, 0xe7, 0x23, 0x74, 0x3e, 0x8a, 0x03, 0x90, 0xa3, 0xf3,
		0x11, 0x13, 0xe3, 0xbd, 0x6a, 0xa8, 0xd7, 0xe2, 0xba, 0x8e, 0xd3, 0xd2, 0x53, 0xb5, 0x17, 0x6c,
		0x0c, 0xeb, 0x1a, 0xd6, 0x35, 0xac, 0xeb, 0x94, 0x5a, 0xd7, 0xc2, 0xee, 0x75, 0x82, 0x58, 0x00,
		0x09, 0xb4, 0x2f, 0xd4, 0xa8, 0x65, 0x86, 0xbd, 0xea, 0x76, 0x2f, 0x08, 0x79, 0x64, 0xb1, 0x24,
		0xfa, 0xce, 0x15, 0xff, 0xeb, 0x09, 0xbb, 0xf9, 0xc4, 0x27, 0x56, 0x5f, 0xb7, 0x84, 0x40, 0x85,
		0x40, 0x85, 0x40, 0x4d, 0xa9, 0x40, 0xc5, 0x08, 0x43, 0x89, 0x07, 0x43, 0xa1, 0x32, 0x0a, 0x95,
		0x31, 0xc2, 0x90, 0x43, 0x10, 0xf2, 0xed, 0x92, 0xc5, 0xba, 0xe4, 0xee, 0xc3, 0x93, 0xe1, 0xb2,
		0x76, 0xf0, 0x0d, 0x77, 0x04, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x4a, 0x31, 0xd8, 0x2a, 0x56, 0x19,
		0xd1, 0x56, 0x15, 0x68, 0x0b, 0x68, 0x0b, 0x68, 0x8b, 0x74, 0x54, 0xd5, 0x4a, 0x65, 0x1f, 0x78,
		0x6b, 0x23, 0xf0, 0x96, 0xeb, 0x79, 0x16, 0x1f, 0xd6, 0x0a, 0x76, 0x03, 0xce, 0x02, 0xce, 0x02,
		0xce, 0x4a, 0x29, 0xce, 0x62, 0xf6, 0x69, 0x15, 0x81, 0xb2, 0x12, 0x23, 0xdc, 0x5c, 0xd5, 0x5d,
		0x2c, 0xbd, 0x07, 0xce, 0xca, 0x0a, 0xce, 0x2a, 0x96, 0x0e, 0x80, 0xb2, 0x36, 0x01, 0x65, 0x79,
		0xb6, 0xcb, 0x07, 0xb2, 0x06, 0x9b, 0x01, 0x63, 0x01, 0x63, 0x01, 0x63, 0xa5, 0xd8, 0x97, 0x85,
		0xc0, 0x21, 0x5c, 0x59, 0x80, 0x58, 0xc9, 0x1f, 0x15, 0x02, 0x87, 0x9b, 0x02, 0xb1, 0x18, 0x3b,
		0x54, 0xa1, 0x7d, 0x27, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16,
		0x00, 0xd6, 0xfa, 0x00, 0xac, 0x8d, 0xad, 0x5b, 0x77, 0xef, 0x92, 0xaf, 0x57, 0x3f, 0xbf, 0x43,
		0x9d, 0x3a, 0xf7, 0xa9, 0x26, 0x51, 0x9f, 0x7e, 0x7e, 0x97, 0x86, 0xba, 0xf4, 0x96, 0xe3, 0x17,
		0x8b, 0xdf, 0x0d, 0x5b, 0x58, 0xf7, 0x0f, 0xb7, 0x8e, 0xeb, 0xd1, 0xcb, 0xd3, 0x67, 0x76, 0x42,
		0x95, 0xba, 0x66, 0x63, 0x05, 0x55, 0xea, 0x54, 0xa9, 0x83, 0x2a, 0x75, 0x54, 0xa9, 0xc7, 0x61,
		0xed, 0xa3, 0x4a, 0x9d, 0x89, 0xf1, 0xc2, 0x0d, 0x9a, 0x0f, 0xa6, 0x6d, 0x8b, 0xb6, 0xd1, 0x76,
		0xcc, 0x96, 0xe1, 0x8a, 0xae, 0xe3, 0xfa, 0x8c, 0x95, 0xea, 0x73, 0x36, 0x87, 0x0b, 0x0f, 0x2e,
		0x3c, 0xb8, 0xf0, 0xe0, 0xc2, 0x83, 0x0b, 0x0f, 0x2e, 0x3c, 0xb8, 0xf0, 0xe0, 0xc2, 0x5b, 0x13,
		0x17, 0x9e, 0x02, 0xd8, 0x1e, 0x5b, 0xf8, 0x86, 0x69, 0xfb, 0xc2, 0xb6, 0x4d, 0x3e, 0xfc, 0x35,
		0xb3, 0x33, 0xc0, 0x17, 0xc0, 0x17, 0xc0, 0x17, 0xc0, 0x17, 0xc0, 0x17, 0xc0, 0x17, 0xc0, 0x17,
		0xc0, 0x17, 0xc0, 0x57, 0x08, 0x91, 0x6e, 0x3d, 0xcf, 0x6a, 0x69, 0x80, 0x5e, 0xc3, 0x7d, 0x01,
		0xbc, 0x00, 0xbc, 0x00, 0xbc, 0x52, 0x0a, 0xbc, 0x3a, 0x66, 0x73, 0x63, 0xa6, 0x29, 0x4e, 0x8e,
		0x65, 0x7b, 0x3b, 0xed, 0xad, 0xd4, 0x2f, 0x3c, 0x57, 0xd6, 0x7b, 0x60, 0xf4, 0xea, 0xd7, 0x4f,
		0x7e, 0x3a, 0x5d, 0xb2, 0x7a, 0x70, 0x14, 0xb3, 0xd1, 0xa0, 0x09, 0xc7, 0x3b, 0x43, 0x17, 0x42,
		0x17, 0x42, 0x17, 0xc2, 0x09, 0x01, 0x27, 0x04, 0x9c, 0x10, 0x70, 0x42, 0xc0, 0x09, 0x01, 0x27,
		0x44, 0x08, 0x91, 0x78, 0xfb, 0x3e, 0x4d, 0x6f, 0x0b, 0xd8, 0x05, 0xd8, 0x05, 0xd8, 0x95, 0x52,
		0xd8, 0x85, 0x06, 0x50, 0xe9, 0x40, 0x5d, 0x68, 0x00, 0x05, 0xdc, 0x85, 0x06, 0x50, 0x99, 0xc2,
		0x5d, 0x9b, 0x57, 0x3c, 0xf7, 0xb6, 0x32, 0x28, 0xc9, 0x1a, 0xba, 0xcf, 0x83, 0x67, 0xf9, 0xf7,
		0xc9, 0xf8, 0x51, 0x50, 0x4a, 0xa7, 0xe9, 0x8c, 0xe3, 0xad, 0xa8, 0x7b, 0x73, 0xaa, 0x69, 0x28,
		0xac, 0x1b, 0xc0, 0x46, 0x72, 0x2d, 0x9d, 0x3c, 0xa0, 0x27, 0xea, 0x18, 0x94, 0xcf, 0xa1, 0x7c,
		0x4e, 0x5e, 0xd2, 0x90, 0xed, 0x89, 0xf0, 0xe4, 0xdb, 0xc2, 0xbc, 0x73, 0x05, 0xa9, 0xee, 0x76,
		0x8c, 0x7c, 0x09, 0x98, 0x27, 0x7f, 0x36, 0x12, 0x6e, 0x3b, 0x3b, 0x43, 0x1d, 0xb4, 0x2b, 0x4d,
		0x5c, 0x3d, 0xc2, 0x82, 0x56, 0x56, 0xa8, 0x54, 0x4e, 0x88, 0x7a, 0x5b, 0x08, 0x8c, 0xd8, 0x04,
		0x06, 0xb9, 0xde, 0xb6, 0xe9, 0xf4, 0x6c, 0x5f, 0xb8, 0x9e, 0x7a, 0xc9, 0x6d, 0xb8, 0x13, 0xaa,
		0x6e, 0x51, 0x75, 0x9b, 0xb8, 0x5f, 0x30, 0x63, 0x55, 0xb7, 0xee, 0x0f, 0xe3, 0xf6, 0xc9, 0x17,
		0x8c, 0xcd, 0xf1, 0xc2, 0x1d, 0xe1, 0xe6, 0x8f, 0x89, 0x5d, 0xb9, 0xd9, 0x56, 0x1b, 0xfb, 0x6a,
		0x63, 0x63, 0x7d, 0xec, 0xcc, 0xe3, 0x96, 0x4a, 0x9f, 0x9b, 0x7f, 0xa4, 0x34, 0xab, 0x65, 0x46,
		0x5f, 0xff, 0x7b, 0xf8, 0xfa, 0x13, 0x91, 0x71, 0x33, 0xdb, 0x22, 0xc3, 0x22, 0x7b, 0x9e, 0xfe,
		0xf7, 0xe5, 0x72, 0xf5, 0xa0, 0x5c, 0xde, 0x3b, 0xd8, 0x3f, 0xd8, 0x3b, 0xac, 0x54, 0x8a, 0xd5,
		0x22, 0x52, 0x2e, 0xa4, 0xff, 0x64, 0x72, 0xc2, 0xd6, 0x0f, 0xc3, 0x15, 0xbe, 0x6b, 0x31, 0x63,
		0xb0, 0xf1, 0x9e, 0x40, 0x61, 0x40, 0x61, 0x40, 0x61, 0x40, 0x61, 0x40, 0x61, 0x40, 0x61, 0x40,
		0x61, 0x40, 0x61, 0x40, 0x61, 0x73, 0x8f, 0xc5, 0x67, 0xf7, 0x83, 0xf9, 0xf0, 0x83, 0x01, 0x81,
		0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0xad, 0x42,
		0x60, 0xec, 0x7e, 0x30, 0x1f, 0x7e, 0x30, 0xa0, 0x30, 0xa0, 0x30, 0xa0, 0x30, 0xa0, 0x30, 0xa0,
		0x30, 0xa0, 0x30, 0xa0, 0xb0, 0xcd, 0x40, 0x61, 0x9b, 0x57, 0x88, 0x34, 0xcc, 0xf9, 0x56, 0xcc,
		0x04, 0xcd, 0xa9, 0x95, 0xaa, 0x04, 0x05, 0x47, 0x37, 0x9f, 0xc6, 0xcf, 0x10, 0x57, 0xe5, 0x11,
		0x21, 0x5b, 0x9a, 0x52, 0xc1, 0x32, 0xa3, 0xb3, 0xe9, 0x28, 0x51, 0x51, 0x7a, 0x21, 0xe3, 0x36,
		0x46, 0x90, 0x8c, 0x8c, 0x5b, 0x6e, 0xf0, 0xcb, 0xdc, 0xec, 0x8f, 0xa3, 0xc9, 0x1f, 0x5b, 0x73,
		0x3f, 0xad, 0x4d, 0xfd, 0x1a, 0x2a, 0x2f, 0xc8, 0xd9, 0xc4, 0x4f, 0x73, 0xf3, 0xbe, 0x06, 0x6a,
		0x56, 0x59, 0xe0, 0x40, 0xbc, 0x85, 0xaa, 0x84, 0x72, 0x63, 0x89, 0x8a, 0xb3, 0x77, 0x8c, 0x47,
		0x34, 0xd0, 0x11, 0x72, 0x0a, 0x3c, 0x7f, 0x6c, 0x79, 0x7e, 0xcd, 0xf7, 0xe5, 0x6a, 0x0d, 0x06,
		0x46, 0x6a, 0xbd, 0x2d, 0x06, 0xb2, 0xde, 0x93, 0x53, 0xd6, 0x03, 0x9b, 0x69, 0x62, 0xa5, 0x9a,
		0x35, 0x92, 0x3f, 0x75, 0x5b, 0xc2, 0x15, 0xad, 0x8f, 0x83, 0x97, 0xb6, 0x7b, 0xed, 0x36, 0x2b,
		0x2d, 0x89, 0xd7, 0x5c, 0xe9, 0x7a, 0xe7, 0xa5, 0xea, 0x0f, 0x89, 0x17, 0x3a, 0xda, 0x55, 0x5e,
		0x7d, 0x31, 0x97, 0x7f, 0x62, 0x05, 0x99, 0x65, 0xc9, 0x4b, 0x23, 0x6b, 0x04, 0x7a, 0x12, 0xe8,
		0xb8, 0x9c, 0x80, 0x8b, 0xc9, 0xb2, 0x84, 0x24, 0xf9, 0xe6, 0x18, 0xf9, 0x2e, 0x27, 0xc5, 0x84,
		0x5f, 0x2d, 0xf8, 0xfc, 0x0a, 0x22, 0x47, 0x2b, 0x80, 0x8b, 0x0c, 0xbb, 0x65, 0xe0, 0x35, 0x11,
		0x46, 0xcb, 0xc2, 0x65, 0x32, 0x2c, 0x26, 0xc3, 0x5f, 0x3a, 0xcc, 0x55, 0x63, 0x98, 0xa8, 0x05,
		0x61, 0x79, 0xb3, 0xf5, 0x28, 0x5c, 0xdf, 0xf2, 0x84, 0x61, 0x76, 0x47, 0xd7, 0x3a, 0x22, 0x2d,
		0xc7, 0x47, 0x36, 0xb3, 0x43, 0x54, 0xf5, 0x23, 0x65, 0xfd, 0x49, 0x5b, 0x7b, 0x14, 0xeb, 0x4e,
		0xd1, 0x9a, 0xa3, 0x5a, 0x6f, 0xca, 0xd6, 0x9a, 0xb2, 0x75, 0xa6, 0x6e, 0x8d, 0xf1, 0x42, 0x13,
		0x69, 0xeb, 0x2a, 0x3c, 0xb9, 0x5b, 0xc7, 0x69, 0x0b, 0xd3, 0x96, 0x39, 0xb5, 0xb1, 0xdc, 0x2b,
		0x72, 0xa9, 0xba, 0x08, 0x82, 0xeb, 0xd6, 0xf4, 0xac, 0xa6, 0xd1, 0x32, 0x7d, 0xd3, 0x70, 0x4d,
		0x5f, 0x78, 0x46, 0xe9, 0x5e, 0x9e, 0xf3, 0xe6, 0x6d, 0x02, 0xe6, 0x03, 0xf3, 0x25, 0xc6, 0x7c,
		0x56, 0x4b, 0xd8, 0xbe, 0xe5, 0x3f, 0xc9, 0x35, 0xfe, 0x08, 0x19, 0x50, 0x06, 0xcd, 0x1f, 0x8d,
		0xbe, 0xea, 0xa3, 0xe9, 0x29, 0xf4, 0xd5, 0xf8, 0x5c, 0xbb, 0xac, 0xdd, 0x9c, 0xd7, 0x2e, 0xeb,
		0xb2, 0x67, 0x1e, 0x44, 0x48, 0x3c, 0x92, 0x0b, 0x41, 0xd1, 0xdf, 0x3a, 0x78, 0xda, 0x9b, 0xd2,
		0xd7, 0x8f, 0xf9, 0x38, 0x5c, 0xc4, 0x1c, 0xcf, 0x5a, 0x2c, 0x66, 0xe9, 0x61, 0x33, 0xf4, 0xac,
		0x95, 0x9d, 0x4a, 0x86, 0x9e, 0xb6, 0x9a, 0x25, 0xca, 0x96, 0xb3, 0x74, 0x65, 0xb3, 0x24, 0x0c,
		0xf6, 0xb3, 0x74, 0x0d, 0x4a, 0x59, 0xba, 0x06, 0xe5, 0xf7, 0x19, 0x7a, 0xd8, 0xc3, 0x2c, 0xf1,
		0x17, 0x8d, 0xb0, 0x52, 0x2b, 0x1a, 0x09, 0x41, 0xbd, 0x0d, 0x74, 0xe8, 0xea, 0x31, 0xdf, 0x2a,
		0x1c, 0xe6, 0x5b, 0x05, 0xe6, 0x1b, 0xcc, 0x37, 0x98, 0x6f, 0x30, 0xdf, 0x60, 0xbe, 0xc1, 0x7c,
		0x83, 0xf9, 0x06, 0xf3, 0x0d, 0xe6, 0x1b, 0xcc, 0x37, 0x98, 0x6f, 0x30, 0xdf, 0x60, 0xbe, 0x31,
		0x9b, 0x6f, 0xae, 0x63, 0xb6, 0x9a, 0xa6, 0xe7, 0x1b, 0x77, 0x56, 0xdb, 0x17, 0x2e, 0xc1, 0x76,
		0x7b, 0xbb, 0x03, 0x0c, 0x37, 0x18, 0x6e, 0x89, 0x19, 0x6e, 0x19, 0x09, 0x7a, 0x37, 0x3d, 0x53,
		0x9e, 0xd3, 0x06, 0x8b, 0x22, 0x12, 0xf0, 0xb3, 0xb8, 0x33, 0x7b, 0xed, 0xe0, 0x38, 0x07, 0xb7,
		0x01, 0x3c, 0x09, 0x9e, 0x04, 0x4f, 0xae, 0xf8, 0xce, 0xd6, 0x90, 0x67, 0x8c, 0xc7, 0xb6, 0x69,
		0xcb, 0x33, 0xe7, 0xd4, 0x6a, 0xb0, 0x1b, 0xd8, 0x2d, 0x31, 0x76, 0x1b, 0xdc, 0x40, 0xc3, 0x6a,
		0x11, 0xd8, 0xad, 0x2a, 0xb1, 0x84, 0x56, 0x08, 0x4e, 0x28, 0x7b, 0x50, 0x29, 0xec, 0x56, 0xad,
		0xab, 0x0b, 0xab, 0x7f, 0x89, 0xeb, 0x19, 0x4a, 0x7a, 0x29, 0xd5, 0x8c, 0x2a, 0x05, 0xd6, 0x5c,
		0x24, 0x2b, 0xef, 0x1d, 0x96, 0x13, 0xa4, 0x9a, 0xa6, 0xb2, 0x93, 0x46, 0x9c, 0xfa, 0xe8, 0xa1,
		0xd9, 0x35, 0x5c, 0xf1, 0xbf, 0x9e, 0xe5, 0x8a, 0x16, 0x41, 0x21, 0x4d, 0x2d, 0x87, 0x46, 0x82,
		0x46, 0x02, 0x00, 0x5c, 0xc1, 0x70, 0xc1, 0x5c, 0x47, 0x02, 0xa7, 0x0d, 0xd7, 0x81, 0xc5, 0xc0,
		0x62, 0x60, 0xb1, 0x15, 0x2c, 0xf6, 0x48, 0xf0, 0x7b, 0x0c, 0x16, 0x81, 0xb9, 0xc0, 0x5c, 0x60,
		0xae, 0xe5, 0xdf, 0x29, 0x6c, 0xf3, 0xb6, 0x4d, 0x81, 0x8a, 0xe3, 0x85, 0x70, 0x2e, 0x82, 0x37,
		0xc1, 0x9b, 0x5a, 0x78, 0xf3, 0xde, 0xff, 0x6e, 0xf8, 0x56, 0x47, 0x38, 0x3d, 0x5f, 0x9e, 0x3f,
		0x27, 0x17, 0x83, 0xd9, 0xc0, 0x6c, 0x89, 0x31, 0x5b, 0xcf, 0xb2, 0xfd, 0x62, 0x15, 0x9e, 0x45,
		0x3e, 0x37, 0xd9, 0x1e, 0x3c, 0x8b, 0xb2, 0x24, 0xab, 0x56, 0x2a, 0xfb, 0x15, 0xb8, 0x16, 0x55,
		0xb4, 0xd1, 0x83, 0xd5, 0x6a, 0x09, 0x42, 0x90, 0x6b, 0xb4, 0x4e, 0x1e, 0x27, 0xde, 0x99, 0x6d,
		0x0f, 0x40, 0x11, 0xba, 0x0b, 0x40, 0x71, 0xd5, 0x77, 0x5a, 0xdd, 0xc7, 0xaa, 0x61, 0xb7, 0xba,
		0xe4, 0x7c, 0xac, 0xb7, 0x1b, 0x80, 0xe9, 0xc0, 0x74, 0x60, 0x3a, 0x29, 0xa6, 0x0b, 0x8c, 0x2d,
		0x75, 0xd6, 0x1b, 0x6d, 0x03, 0x06, 0x04, 0x03, 0xc2, 0x62, 0x83, 0xc5, 0x06, 0x8b, 0x0d, 0x16,
		0x1b, 0x59, 0x43, 0x75, 0x7a, 0x6d, 0xdf, 0x52, 0xca, 0xd3, 0x9f, 0xd9, 0x01, 0x7a, 0x09, 0x7a,
		0x09, 0xc0, 0x70, 0xf9, 0x77, 0xd2, 0xfa, 0x40, 0xa2, 0xf7, 0x23, 0xd8, 0x2b, 0x59, 0xf6, 0xf2,
		0x7c, 0xd7, 0xb2, 0xef, 0x29, 0xdc, 0xf5, 0x3e, 0x46, 0xee, 0x72, 0xbe, 0x37, 0xe5, 0x99, 0x6b,
		0xb0, 0x08, 0xbc, 0x05, 0xde, 0x82, 0xea, 0x5a, 0xc1, 0x5c, 0x5d, 0xe1, 0x9a, 0xbe, 0x65, 0xdf,
		0x1b, 0x77, 0xae, 0xf8, 0x5f, 0x4f, 0xd8, 0xcd, 0x27, 0x02, 0xb3, 0xcd, 0xd9, 0x44, 0xde, 0xfb,
		0x3f, 0x3e, 0x6e, 0xff, 0xa9, 0x2b, 0xbc, 0x0f, 0x5f, 0xce, 0xeb, 0xff, 0xb9, 0x29, 0xdd, 0x54,
		0x6e, 0x7e, 0xfe, 0xe5, 0x0f, 0x70, 0x32, 0x38, 0x39, 0x39, 0x4e, 0xce, 0x5c, 0x97, 0x9f, 0xd3,
		0xb3, 0xfa, 0x79, 0xed, 0xf2, 0xe8, 0xe4, 0xe7, 0x9b, 0x01, 0x13, 0x7d, 0xab, 0x9f, 0x7c, 0xfa,
		0x3d, 0x3b, 0xfd, 0x7e, 0x86, 0x7c, 0x3f, 0x60, 0xfa, 0x0c, 0x34, 0x4c, 0x98, 0x12, 0x52, 0x59,
		0x79, 0xde, 0x0a, 0xed, 0x61, 0x93, 0x6d, 0xf0, 0xc0, 0xa4, 0xec, 0x3a, 0x4e, 0x4b, 0x50, 0xf4,
		0x5b, 0xb0, 0x4e, 0x5e, 0xa5, 0x9d, 0x9e, 0xd5, 0x4f, 0xa0, 0xbc, 0xa0, 0xbc, 0x92, 0x53, 0x5e,
		0xc2, 0xee, 0x75, 0x02, 0x70, 0xe6, 0x90, 0xa0, 0xa8, 0x44, 0x71, 0x5e, 0xbe, 0x6e, 0xf7, 0x3a,
		0x83, 0x87, 0x8c, 0x93, 0xa3, 0xbb, 0x2a, 0x09, 0x93, 0x5d, 0x24, 0x4c, 0x82, 0x49, 0xd3, 0xc0,
		0xa4, 0x08, 0xbf, 0x11, 0x19, 0x6c, 0x3e, 0x6e, 0x45, 0xf8, 0x8d, 0x42, 0x32, 0x84, 0xdf, 0x94,
		0xb5, 0xd1, 0xff, 0x6e, 0x3d, 0xcf, 0x68, 0x3b, 0x26, 0xa1, 0xb8, 0xe6, 0x75, 0x29, 0x34, 0x11,
		0x34, 0x11, 0xbc, 0x96, 0xcb, 0xbf, 0xd3, 0x13, 0xee, 0xa3, 0x70, 0x8d, 0x7b, 0xd7, 0xe9, 0x75,
		0xe5, 0x79, 0x6d, 0x6a, 0x35, 0xd8, 0x0d, 0xec, 0x96, 0x18, 0xbb, 0x69, 0x0f, 0xc0, 0x45, 0x7c,
		0x03, 0xf1, 0xc3, 0x77, 0x4d, 0xa3, 0x67, 0x7b, 0xbe, 0x79, 0xdb, 0x96, 0x7c, 0x97, 0xbf, 0x1e,
		0x84, 0x1d, 0x07, 0xac, 0x1c, 0xd3, 0x6c, 0x67, 0x67, 0x77, 0xe8, 0x8f, 0xc9, 0xfd, 0xdf, 0xdc,
		0x3f, 0xff, 0x7b, 0x56, 0x2b, 0xdd, 0xd4, 0x4f, 0x2e, 0xeb, 0xe7, 0x67, 0xe7, 0x47, 0x17, 0xf5,
		0x7f, 0xe6, 0x1c, 0x37, 0x37, 0xf1, 0x81, 0x6b, 0x7b, 0xf8, 0x89, 0xb3, 0xfa, 0xf9, 0xc5, 0xe9,
		0x49, 0xed, 0xf8, 0x9f, 0x94, 0xd9, 0xc6, 0x8a, 0x23, 0xe6, 0x27, 0xf9, 0x25, 0xa0, 0x15, 0x11,
		0x63, 0x71, 0x0d, 0x94, 0x9f, 0xe2, 0x1e, 0x35, 0x62, 0x6e, 0x24, 0xc8, 0xf3, 0x86, 0x73, 0x75,
		0x0d, 0xcb, 0x73, 0xda, 0x72, 0x03, 0x8c, 0x27, 0xd8, 0xfe, 0xed, 0x16, 0xd0, 0x42, 0xd0, 0x42,
		0x00, 0x7d, 0x2b, 0x18, 0xaf, 0xd7, 0xed, 0x3a, 0xae, 0x2f, 0x5a, 0xaa, 0x63, 0x40, 0x17, 0x6d,
		0x04, 0x26, 0x04, 0x13, 0x26, 0xc6, 0x84, 0x98, 0x25, 0xa3, 0x05, 0x36, 0xe6, 0x30, 0x4b, 0x26,
		0xb6, 0x87, 0xc5, 0x2c, 0x19, 0x4d, 0x4f, 0x8b, 0x59, 0x32, 0xba, 0xae, 0x2c, 0x66, 0xc9, 0xe8,
		0x92, 0xb2, 0x98, 0x25, 0xa3, 0xe9, 0x61, 0x31, 0x4b, 0x86, 0x62, 0xfb, 0xe7, 0x30, 0x4b, 0x66,
		0x72, 0xb3, 0x04, 0x67, 0xc9, 0xcc, 0xb5, 0xbe, 0x2a, 0x5c, 0x66, 0x1c, 0x46, 0x82, 0xc2, 0x8c,
		0x83, 0x19, 0x07, 0x33, 0x0e, 0x66, 0x1c, 0xcc, 0x38, 0x98, 0x71, 0x30, 0xe3, 0x60, 0xc6, 0xc1,
		0x8c, 0x83, 0x19, 0x07, 0x33, 0x0e, 0x66, 0x1c, 0xb3, 0x19, 0x17, 0xcc, 0x8f, 0x6a, 0x5b, 0x1e,
		0x21, 0xef, 0xfe, 0x75, 0x29, 0x4c, 0x35, 0x98, 0x6a, 0x89, 0x99, 0x6a, 0x98, 0x80, 0x46, 0xe5,
		0xb0, 0xf9, 0xb6, 0x20, 0x26, 0xa0, 0x51, 0x48, 0xb6, 0xd1, 0x13, 0xd0, 0xa0, 0xa3, 0xb5, 0xea,
		0xe8, 0xbf, 0xba, 0x66, 0xc9, 0xe8, 0x7a, 0x84, 0x61, 0x55, 0xe1, 0x4a, 0x68, 0x68, 0x68, 0xe8,
		0xc4, 0x34, 0xb4, 0x42, 0x7a, 0xb4, 0xc4, 0x9a, 0x63, 0x61, 0xdf, 0xfb, 0x0f, 0x9b, 0xa2, 0xa2,
		0xdf, 0x43, 0x45, 0xcb, 0x92, 0xac, 0xba, 0x0f, 0x05, 0xbd, 0xfc, 0x45, 0xb3, 0x5d, 0x3f, 0x80,
		0xea, 0x80, 0x05, 0xca, 0x63, 0x19, 0xa9, 0xd6, 0x2f, 0xf7, 0xff, 0x9d, 0x02, 0x27, 0xe4, 0x6b,
		0xb6, 0xed, 0xf8, 0xd1, 0xcb, 0x01, 0xf2, 0x5e, 0xf3, 0x41, 0x74, 0xcc, 0xae, 0x19, 0x28, 0x9e,
		0xfc, 0xae, 0xd3, 0x15, 0x76, 0x33, 0x00, 0x45, 0xa1, 0xba, 0xde, 0xf5, 0x3c, 0xab, 0xe5, 0x05,
		0xff, 0xdd, 0x1d, 0xfe, 0x53, 0x3e, 0x52, 0x75, 0x82, 0xdb, 0x6b, 0xfa, 0xf6, 0xb8, 0x13, 0x50,
		0xb8, 0xed, 0x7f, 0xad, 0x3b, 0xeb, 0xab, 0xd9, 0xbc, 0xb9, 0x18, 0x6c, 0x1a, 0xfc, 0xf7, 0x66,
		0x04, 0xc2, 0xde, 0xd1, 0x88, 0xb2, 0x84, 0x20, 0xc3, 0x51, 0xa7, 0xab, 0xd1, 0xfa, 0xf4, 0x68,
		0xd4, 0x55, 0xad, 0x66, 0x43, 0xdd, 0xbe, 0xe2, 0x63, 0x51, 0xb1, 0xa5, 0x0c, 0xa6, 0x24, 0x62,
		0x49, 0x59, 0xe1, 0x40, 0xc6, 0x8e, 0x64, 0xf6, 0xa7, 0x63, 0x45, 0x35, 0x76, 0xf9, 0x6c, 0x45,
		0x33, 0xe6, 0xf2, 0xcd, 0xf1, 0x69, 0x4a, 0x1a, 0x30, 0x91, 0x39, 0x46, 0xe2, 0x6a, 0xc1, 0x7c,
		0xd9, 0x44, 0xf3, 0x25, 0xea, 0x55, 0x95, 0x95, 0x7e, 0x6a, 0xd2, 0x90, 0x09, 0xeb, 0x4a, 0x5f,
		0x65, 0x95, 0x2b, 0xcd, 0x74, 0xb5, 0x75, 0x40, 0x2f, 0xd2, 0x55, 0xd7, 0x0b, 0xbe, 0x48, 0x57,
		0x9f, 0x08, 0xb6, 0x24, 0xcf, 0x5e, 0xda, 0xa2, 0x9f, 0x39, 0x79, 0xf9, 0x92, 0xb3, 0x19, 0x59,
		0x5d, 0xd4, 0x84, 0x27, 0x25, 0x88, 0x31, 0x62, 0x55, 0xa3, 0xe5, 0x74, 0x4c, 0xcb, 0xb6, 0x5a,
		0xaa, 0x3c, 0xff, 0xba, 0x11, 0x98, 0x1f, 0xcc, 0xbf, 0xb6, 0xcc, 0x2f, 0xdd, 0xee, 0xea, 0xed,
		0x3d, 0xaf, 0x12, 0x96, 0xd2, 0xe2, 0x70, 0x74, 0x7f, 0x03, 0x8b, 0xd3, 0x8f, 0xc9, 0x93, 0x35,
		0xe3, 0xd1, 0x52, 0xdd, 0x87, 0xc1, 0xb1, 0xa5, 0xe0, 0x14, 0x64, 0x71, 0x0e, 0xea, 0x22, 0xad,
		0x42, 0x1b, 0x2d, 0x2d, 0xe4, 0x7d, 0x17, 0xcf, 0xaa, 0x46, 0x7a, 0xb4, 0x71, 0x47, 0xf8, 0x0f,
		0x8e, 0xba, 0x2e, 0x1e, 0x6d, 0x23, 0x29, 0x1d, 0x27, 0x9b, 0xbf, 0xfe, 0x5a, 0x83, 0x1e, 0x87,
		0x1e, 0x5f, 0x5f, 0x3d, 0x4e, 0xeb, 0x2d, 0x3b, 0x03, 0xe4, 0x09, 0xe9, 0x0f, 0x92, 0xbd, 0x66,
		0x63, 0x11, 0x3b, 0x6e, 0xf1, 0xbb, 0x78, 0x92, 0x6e, 0x46, 0xbb, 0x48, 0xfa, 0x4c, 0xef, 0x06,
		0x31, 0x02, 0x31, 0x02, 0x73, 0x00, 0xe6, 0x00, 0xcc, 0x01, 0x98, 0x03, 0x9b, 0x6d, 0x0e, 0xb0,
		0xba, 0xf6, 0x25, 0x83, 0xb6, 0xe1, 0x3a, 0xb9, 0xe0, 0xed, 0x50, 0xa3, 0xef, 0x4a, 0x45, 0xa4,
		0x72, 0x92, 0xb1, 0xdc, 0xcf, 0x83, 0xef, 0x38, 0x8f, 0x14, 0xd2, 0x8d, 0x4e, 0xca, 0xa8, 0xdd,
		0xf0, 0x04, 0xad, 0x03, 0x9e, 0xd0, 0x1d, 0x9d, 0x2b, 0x21, 0x3a, 0xc7, 0x0e, 0x4f, 0x10, 0x9d,
		0x43, 0x74, 0x0e, 0x88, 0x1c, 0xd1, 0xb9, 0x55, 0xb2, 0x1a, 0xd1, 0x39, 0x30, 0x3f, 0x98, 0x1f,
		0xe6, 0x38, 0xcc, 0x71, 0x98, 0xe3, 0x30, 0xc7, 0xd7, 0xd6, 0x1c, 0x47, 0x74, 0x0e, 0x7a, 0x1c,
		0x7a, 0x3c, 0x95, 0x7a, 0x1c, 0xd1, 0xb9, 0x1c, 0xa2, 0x73, 0x10, 0x23, 0x10, 0x23, 0x30, 0x07,
		0x60, 0x0e, 0xc0, 0x1c, 0x80, 0x39, 0x10, 0x83, 0x39, 0x90, 0xdd, 0xe8, 0x9c, 0x4c, 0x40, 0x2a,
		0x47, 0x0b, 0xce, 0x5d, 0x04, 0x5f, 0xb1, 0x01, 0xd5, 0xaa, 0x91, 0x43, 0x24, 0xf2, 0x44, 0xd4,
		0x56, 0xad, 0xfa, 0x28, 0x59, 0xad, 0xfa, 0x88, 0x6a, 0x55, 0x54, 0xab, 0xce, 0x7c, 0x10, 0xd5,
		0xaa, 0x88, 0x87, 0x67, 0x31, 0x1e, 0xfe, 0x68, 0xdc, 0x0e, 0x24, 0x77, 0x5b, 0x28, 0x5a, 0xc6,
		0xaf, 0xfb, 0xc0, 0x26, 0x86, 0x4d, 0x8c, 0xf8, 0xf8, 0x62, 0xd9, 0x9d, 0x9a, 0xf8, 0x78, 0xc8,
		0xb2, 0x4c, 0xce, 0xb1, 0xd9, 0xfd, 0x20, 0x0a, 0x20, 0x0a, 0xe0, 0x1e, 0x83, 0x7b, 0x0c, 0xee,
		0x31, 0xb8, 0xc7, 0x10, 0x2d, 0x97, 0xd6, 0xcd, 0xbe, 0x6b, 0xda, 0x9e, 0x25, 0xed, 0x06, 0x5b,
		0xa0, 0x99, 0x27, 0x76, 0x83, 0x5e, 0x86, 0x5e, 0x06, 0x44, 0xcf, 0x04, 0x44, 0x6f, 0x75, 0x3c,
		0x65, 0xe6, 0x1f, 0xec, 0x01, 0x96, 0x07, 0xcb, 0x83, 0xe5, 0x13, 0x60, 0xf9, 0xac, 0x06, 0xc6,
		0x1e, 0x63, 0x28, 0x5b, 0xfb, 0x15, 0x65, 0x6b, 0x28, 0x5b, 0xd3, 0x2c, 0x0d, 0xe1, 0xa6, 0x87,
		0x9b, 0x1e, 0x80, 0x00, 0x80, 0x20, 0xc3, 0x36, 0x00, 0xdc, 0xf4, 0x10, 0x05, 0x10, 0x05, 0xc4,
		0x93, 0x87, 0x9b, 0x3e, 0x69, 0x5f, 0x32, 0xdc, 0xf4, 0xda, 0x48, 0x0b, 0x37, 0x7d, 0x0a, 0x74,
		0x33, 0xdc, 0xf4, 0xd0, 0xcb, 0xd0, 0xcb, 0x9b, 0x0d, 0xd1, 0xe1, 0xa6, 0x07, 0xcb, 0x83, 0xe5,
		0x33, 0xcc, 0xf2, 0xd9, 0x75, 0xd3, 0x6b, 0xaf, 0x5f, 0xf9, 0x75, 0xc3, 0xea, 0x57, 0x1e, 0x75,
		0xd4, 0xaf, 0xfc, 0xaa, 0xab, 0x7e, 0xe5, 0x47, 0xe0, 0xc6, 0x71, 0x3d, 0xb9, 0x2a, 0x96, 0x70,
		0x15, 0x6a, 0x59, 0x50, 0xcb, 0xf2, 0xf6, 0x83, 0xa8, 0x65, 0x41, 0x90, 0x2c, 0x63, 0x41, 0xb2,
		0xdb, 0xb6, 0xd9, 0xfc, 0xde, 0xb6, 0x3c, 0x3f, 0x90, 0x6b, 0x74, 0x28, 0xfe, 0x66, 0x1f, 0xc0,
		0x71, 0xc0, 0x71, 0x78, 0xc6, 0x17, 0xdd, 0x73, 0x78, 0xc6, 0x15, 0xdd, 0xb7, 0xf0, 0x8c, 0x6b,
		0x23, 0x2d, 0x3c, 0xe3, 0x89, 0xb9, 0xc4, 0x3a, 0xe6, 0x0f, 0xc3, 0xec, 0xf9, 0x0f, 0xc6, 0x9d,
		0x69, 0xb5, 0x7b, 0xae, 0x50, 0xf0, 0x8c, 0xcd, 0x6e, 0x05, 0x8d, 0x0c, 0x8d, 0xbc, 0xd6, 0x1a,
		0xf9, 0xbd, 0x82, 0x42, 0xae, 0x40, 0x21, 0x43, 0x21, 0xa7, 0x54, 0x21, 0x97, 0x2a, 0x50, 0xc7,
		0x7c, 0xea, 0x38, 0xa3, 0xee, 0xea, 0xb1, 0xdb, 0x51, 0x7f, 0x6e, 0xf9, 0x6f, 0x97, 0xc1, 0x17,
		0x21, 0xc1, 0x1c, 0x09, 0xe6, 0xf0, 0x9d, 0xc1, 0x77, 0x06, 0xa4, 0x0e, 0xa4, 0x0e, 0xdf, 0x19,
		0xa0, 0x3a, 0xa0, 0x3a, 0x7c, 0x67, 0xf0, 0x9d, 0x41, 0x23, 0x43, 0x23, 0xc3, 0x77, 0x06, 0xdf,
		0x19, 0x14, 0x32, 0x7c, 0x67, 0xf0, 0x9d, 0x65, 0xcd, 0x77, 0xa6, 0x3b, 0xe1, 0x73, 0xec, 0x3a,
		0xdb, 0xa8, 0xac, 0xcf, 0x88, 0x09, 0x91, 0x0a, 0xf4, 0xd4, 0x91, 0x00, 0x3a, 0x7a, 0x86, 0x88,
		0x89, 0x9f, 0xc1, 0xa7, 0xa3, 0x25, 0x7c, 0xee, 0x21, 0xe1, 0x93, 0x0f, 0x94, 0x25, 0x95, 0xf0,
		0x19, 0x19, 0x54, 0x85, 0x94, 0x6f, 0x0b, 0xf3, 0xce, 0x15, 0x77, 0x51, 0xa8, 0x3e, 0x76, 0x41,
		0x1f, 0x44, 0xf8, 0xec, 0xd9, 0x88, 0x11, 0x77, 0x76, 0x46, 0x8e, 0xff, 0xdd, 0xe0, 0x2a, 0x6a,
		0x60, 0x88, 0x68, 0xce, 0x77, 0x29, 0xa7, 0xbb, 0x74, 0x0e, 0x74, 0x09, 0x2c, 0x91, 0x5a, 0x96,
		0x88, 0x9c, 0x03, 0x6d, 0xb6, 0x1e, 0x85, 0xeb, 0x5b, 0x9e, 0x30, 0xcc, 0x6e, 0x24, 0x29, 0x3b,
		0x73, 0x64, 0x33, 0x3b, 0xc8, 0xc5, 0x76, 0xf6, 0x90, 0x17, 0x8d, 0xd8, 0x8e, 0xb2, 0x99, 0xac,
		0x50, 0x7b, 0x25, 0x59, 0x73, 0xc5, 0x13, 0x3c, 0xbd, 0x35, 0x3d, 0xab, 0x69, 0xb4, 0x4c, 0xdf,
		0x34, 0x5c, 0xd3, 0x17, 0x9e, 0x51, 0x22, 0xd4, 0x21, 0xcc, 0xdb, 0x04, 0xcc, 0x07, 0xe6, 0x4b,
		0x8c, 0xf9, 0xac, 0x96, 0xb0, 0x7d, 0xcb, 0x7f, 0x8a, 0x06, 0xad, 0x66, 0x18, 0x50, 0xc2, 0xf8,
		0xcf, 0x1f, 0x8d, 0xbe, 0xea, 0xa3, 0xe9, 0x29, 0x84, 0x72, 0x3f, 0xd7, 0x2e, 0x6b, 0x37, 0xe7,
		0xb5, 0xcb, 0xba, 0xec, 0x99, 0x07, 0x1e, 0x0b, 0x8f, 0xe4, 0x12, 0x23, 0xba, 0x5c, 0xc7, 0x8f,
		0x3c, 0x78, 0xda, 0x9b, 0xd2, 0xd7, 0x8f, 0x04, 0xcf, 0xe6, 0x76, 0x22, 0xcf, 0x5a, 0x2c, 0x66,
		0xe9, 0x61, 0x33, 0xf4, 0xac, 0x95, 0x9d, 0x4a, 0x86, 0x9e, 0xb6, 0x9a, 0x25, 0xca, 0x96, 0xb3,
		0x74, 0x65, 0xb3, 0x24, 0x0c, 0xf6, 0xb3, 0x74, 0x0d, 0x4a, 0x59, 0xba, 0x06, 0xe5, 0xf7, 0x19,
		0x7a, 0xd8, 0xc3, 0x2c, 0xf1, 0x17, 0x8d, 0xb0, 0x52, 0x2b, 0x1a, 0x09, 0x41, 0xbd, 0x63, 0xcb,
		0xf3, 0x6b, 0xbe, 0x2f, 0x99, 0x48, 0xf7, 0xd5, 0xb2, 0xeb, 0x6d, 0x31, 0x40, 0xac, 0x9e, 0x5c,
		0xf0, 0x27, 0xff, 0xd5, 0xfc, 0x31, 0xb1, 0xb2, 0xf8, 0xbe, 0x5c, 0xae, 0x1e, 0x94, 0xcb, 0x7b,
		0x07, 0xfb, 0x07, 0x7b, 0x87, 0x95, 0x4a, 0xb1, 0x2a, 0x05, 0x01, 0x4f, 0xdd, 0x96, 0x70, 0x45,
		0xeb, 0xe3, 0x53, 0xfe, 0x43, 0xce, 0xee, 0xb5, 0xdb, 0x49, 0x9a, 0x6f, 0x15, 0x0e, 0xf3, 0xad,
		0x02, 0xf3, 0x0d, 0xe6, 0x1b, 0xcc, 0x37, 0x98, 0x6f, 0x30, 0xdf, 0x60, 0xbe, 0xc1, 0x7c, 0x83,
		0xf9, 0x06, 0xf3, 0x0d, 0xe6, 0x1b, 0xcc, 0x37, 0x98, 0x6f, 0x30, 0xdf, 0x98, 0xcd, 0x37, 0xd7,
		0x31, 0x5b, 0x4d, 0xd3, 0xf3, 0x8d, 0x3b, 0xab, 0xed, 0x0b, 0x97, 0x60, 0xbb, 0xbd, 0xdd, 0x01,
		0x86, 0x1b, 0x0c, 0xb7, 0xc4, 0x0c, 0xb7, 0x8c, 0x04, 0xbd, 0x9b, 0x9e, 0x49, 0x68, 0xb6, 0xe7,
		0x99, 0x51, 0x99, 0xeb, 0xb3, 0xb8, 0x33, 0x7b, 0xed, 0xe0, 0x38, 0x07, 0xb7, 0x01, 0x3c, 0x09,
		0x9e, 0x04, 0x4f, 0xae, 0xf8, 0xce, 0xd6, 0x90, 0x67, 0x8c, 0xc7, 0xb6, 0x69, 0xcb, 0x33, 0xe7,
		0xd4, 0x6a, 0xb0, 0x1b, 0xd8, 0x2d, 0x31, 0x76, 0x1b, 0xdc, 0x40, 0xc3, 0x6a, 0x11, 0xd8, 0x4d,
		0xa2, 0x42, 0x99, 0x58, 0x08, 0x45, 0xa8, 0xf6, 0x52, 0x29, 0x7c, 0x52, 0xac, 0xca, 0x09, 0xab,
		0x71, 0x8a, 0xc4, 0xf5, 0x0c, 0x35, 0x38, 0x04, 0x5b, 0x51, 0xa9, 0xa0, 0x89, 0x8b, 0x64, 0xe5,
		0xbd, 0xc3, 0x72, 0x82, 0x54, 0xd3, 0x54, 0x49, 0xd4, 0x88, 0x53, 0x1f, 0x3d, 0x34, 0xbb, 0x86,
		0x2b, 0xfe, 0xd7, 0xb3, 0x5c, 0xd1, 0x22, 0x28, 0xa4, 0xa9, 0xe5, 0xd0, 0x48, 0xd0, 0x48, 0x00,
		0x80, 0x2b, 0x18, 0xce, 0xf1, 0x8b, 0xc5, 0xef, 0x04, 0x4e, 0x1b, 0xae, 0x03, 0x8b, 0x81, 0xc5,
		0xc0, 0x62, 0x2b, 0x58, 0xec, 0x91, 0xe0, 0xf7, 0x18, 0x2c, 0x02, 0x73, 0x81, 0xb9, 0xc0, 0x5c,
		0xcb, 0xbf, 0x53, 0xd8, 0xe6, 0x6d, 0x9b, 0x02, 0x15, 0xc7, 0x0b, 0xe1, 0x5c, 0x04, 0x6f, 0x82,
		0x37, 0xb5, 0xf0, 0xe6, 0xbd, 0xff, 0x5d, 0x7a, 0x98, 0x77, 0xf8, 0x8e, 0x93, 0x8b, 0xc1, 0x6c,
		0x60, 0xb6, 0xc4, 0x98, 0x4d, 0xba, 0x07, 0x22, 0x3c, 0x8b, 0x2b, 0xdc, 0x64, 0x7b, 0xf0, 0x2c,
		0xca, 0x92, 0x4c, 0xa1, 0x57, 0x21, 0x5c, 0x8b, 0x43, 0x32, 0x3c, 0x58, 0xad, 0x96, 0x20, 0x04,
		0xb9, 0x46, 0xeb, 0xe4, 0x71, 0xe2, 0x9d, 0xd9, 0xf6, 0x00, 0x14, 0xa1, 0xbb, 0x00, 0x14, 0x57,
		0x7d, 0xa7, 0xd5, 0x7d, 0xac, 0x1a, 0x76, 0xab, 0x4b, 0xce, 0xc7, 0x7a, 0xbb, 0x01, 0x98, 0x0e,
		0x4c, 0x07, 0xa6, 0x93, 0x62, 0xba, 0x61, 0x63, 0x38, 0x65, 0xd6, 0x1b, 0x6d, 0x03, 0x06, 0x04,
		0x03, 0xc2, 0x62, 0x83, 0xc5, 0x06, 0x8b, 0x0d, 0x16, 0x1b, 0x59, 0x43, 0x75, 0x7a, 0x6d, 0xdf,
		0x52, 0xca, 0xd3, 0x9f, 0xd9, 0x01, 0x7a, 0x09, 0x7a, 0x09, 0xc0, 0x70, 0xf9, 0x77, 0xd2, 0xfa,
		0x40, 0xa2, 0xf7, 0x23, 0xd8, 0x2b, 0x59, 0xf6, 0xf2, 0x7c, 0xd7, 0xb2, 0xef, 0x29, 0xdc, 0xf5,
		0x3e, 0x46, 0xee, 0x72, 0xbe, 0x37, 0xe5, 0x99, 0x6b, 0xb0, 0x08, 0xbc, 0x05, 0xde, 0x82, 0xea,
		0x5a, 0xc1, 0x5c, 0x5d, 0xe1, 0x9a, 0xbe, 0x65, 0xdf, 0x1b, 0x77, 0xae, 0xf8, 0x5f, 0x4f, 0xd8,
		0xcd, 0x27, 0x02, 0xb3, 0xcd, 0xd9, 0x44, 0xde, 0xfb, 0x3f, 0x3e, 0x6e, 0xff, 0xa9, 0x2b, 0xbc,
		0x0f, 0x5f, 0xce, 0xeb, 0xff, 0xb9, 0x29, 0xdd, 0x54, 0x6e, 0x7e, 0xfe, 0xe5, 0x0f, 0x70, 0x32,
		0x38, 0x39, 0x39, 0x4e, 0xce, 0x5c, 0x97, 0x9f, 0xd3, 0xb3, 0xfa, 0x79, 0xed, 0xf2, 0xe8, 0xe4,
		0xe7, 0x9b, 0x01, 0x13, 0x7d, 0xab, 0x9f, 0x7c, 0xfa, 0x3d, 0x3b, 0xfd, 0x7e, 0x86, 0x7c, 0x3f,
		0x60, 0xfa, 0x0c, 0x34, 0x4c, 0x98, 0x12, 0x52, 0x59, 0x79, 0xde, 0x0a, 0xed, 0x61, 0x93, 0x6d,
		0xf0, 0xc0, 0xa4, 0xec, 0x3a, 0x4e, 0x4b, 0x50, 0xf4, 0x5b, 0xb0, 0x4e, 0x5e, 0xa5, 0x9d, 0x9e,
		0xd5, 0x4f, 0xa0, 0xbc, 0xa0, 0xbc, 0x92, 0x53, 0x5e, 0xc2, 0xee, 0x75, 0x02, 0x70, 0xe6, 0x90,
		0xa0, 0xa8, 0x44, 0x71, 0x5e, 0xbe, 0x6e, 0xf7, 0x3a, 0x83, 0x87, 0x8c, 0x93, 0xa3, 0xbb, 0x2a,
		0x09, 0x93, 0x5d, 0x24, 0x4c, 0x82, 0x49, 0xd3, 0xc0, 0xa4, 0x08, 0xbf, 0x11, 0x19, 0x6c, 0x3e,
		0x6e, 0x45, 0xf8, 0x8d, 0x42, 0x32, 0x84, 0xdf, 0x94, 0xb5, 0xd1, 0xff, 0x6e, 0x3d, 0xcf, 0x68,
		0x3b, 0x26, 0xa1, 0xb8, 0xe6, 0x75, 0x29, 0x34, 0x11, 0x34, 0x11, 0xbc, 0x96, 0xcb, 0xbf, 0xd3,
		0x13, 0xee, 0xa3, 0x70, 0x8d, 0x7b, 0xd7, 0xe9, 0x75, 0xe5, 0x79, 0x6d, 0x6a, 0x35, 0xd8, 0x0d,
		0xec, 0x96, 0x18, 0xbb, 0x69, 0x0f, 0xc0, 0x45, 0x7c, 0x03, 0xf1, 0xc3, 0x77, 0x4d, 0xa3, 0x67,
		0x7b, 0xbe, 0x79, 0xdb, 0x96, 0x7c, 0x97, 0xbf, 0x1e, 0x82, 0x1a, 0x01, 0xed, 0xb0, 0x72, 0x4c,
		0xb3, 0x9d, 0x9d, 0xdd, 0xa1, 0x3f, 0x26, 0xf7, 0x7f, 0x73, 0xff, 0xfc, 0xef, 0x59, 0xad, 0x74,
		0x53, 0x3f, 0xb9, 0xac, 0x9f, 0x9f, 0x9d, 0x1f, 0x5d, 0xd4, 0xff, 0x99, 0x73, 0xdc, 0xdc, 0xc4,
		0x07, 0xae, 0xed, 0xe1, 0x27, 0xce, 0xea, 0xe7, 0x17, 0xa7, 0x27, 0xb5, 0xe3, 0x7f, 0x26, 0x3c,
		0xfb, 0x3f, 0xa0, 0x55, 0x9a, 0x26, 0xff, 0xab, 0x11, 0x73, 0x23, 0x41, 0x9e, 0x37, 0x9c, 0x37,
		0x6d, 0x58, 0x9e, 0xd3, 0x96, 0x9b, 0xef, 0x3d, 0x35, 0x5d, 0x76, 0x7a, 0x0b, 0x68, 0x21, 0x68,
		0x21, 0x80, 0xbe, 0x15, 0x8c, 0xd7, 0xeb, 0x76, 0x1d, 0xd7, 0x17, 0x2d, 0xd5, 0x31, 0xa0, 0x8b,
		0x36, 0x02, 0x13, 0x82, 0x09, 0x13, 0x63, 0x42, 0xcc, 0x92, 0xd1, 0x02, 0x1b, 0x73, 0x98, 0x25,
		0x13, 0xdb, 0xc3, 0x62, 0x96, 0x8c, 0xa6, 0xa7, 0xc5, 0x2c, 0x19, 0x5d, 0x57, 0x16, 0xb3, 0x64,
		0x74, 0x49, 0x59, 0xcc, 0x92, 0xd1, 0xf4, 0xb0, 0x98, 0x25, 0x43, 0xb1, 0xfd, 0x73, 0x98, 0x25,
		0x33, 0xb9, 0x59, 0x82, 0xb3, 0x64, 0xe6, 0x5a, 0x5f, 0x15, 0x2e, 0x33, 0x0e, 0x23, 0x41, 0x61,
		0xc6, 0xc1, 0x8c, 0x83, 0x19, 0x07, 0x33, 0x0e, 0x66, 0x1c, 0xcc, 0x38, 0x98, 0x71, 0x30, 0xe3,
		0x60, 0xc6, 0xc1, 0x8c, 0x83, 0x19, 0x07, 0x33, 0x8e, 0xd9, 0x8c, 0x0b, 0xe6, 0x47, 0xb5, 0x2d,
		0x8f, 0x90, 0x77, 0xff, 0xba, 0x14, 0xa6, 0x1a, 0x4c, 0xb5, 0xc4, 0x4c, 0x35, 0x4c, 0x40, 0xa3,
		0x72, 0xd8, 0x7c, 0x5b, 0x10, 0x13, 0xd0, 0x28, 0x24, 0xdb, 0xe8, 0x09, 0x68, 0xd0, 0xd1, 0x5a,
		0x75, 0xf4, 0x5f, 0x5d, 0xb3, 0x64, 0x74, 0x3d, 0xc2, 0xb0, 0xaa, 0x70, 0x25, 0x34, 0x34, 0x34,
		0x74, 0x62, 0x1a, 0x5a, 0x21, 0x3d, 0x5a, 0x62, 0xcd, 0xb1, 0xb0, 0xef, 0xfd, 0x87, 0x4d, 0x51,
		0xd1, 0xef, 0xa1, 0xa2, 0x65, 0x49, 0x56, 0xdd, 0x87, 0x82, 0x5e, 0xfe, 0xa2, 0xd9, 0xae, 0x1f,
		0x40, 0x75, 0xc0, 0x02, 0xe5, 0xb1, 0x8c, 0x54, 0xeb, 0x97, 0xfb, 0xff, 0x4e, 0x81, 0x13, 0xf2,
		0x35, 0xdb, 0x76, 0xfc, 0xe8, 0xe5, 0x00, 0x79, 0xaf, 0xf9, 0x20, 0x3a, 0x66, 0xd7, 0x0c, 0x14,
		0x4f, 0x7e, 0xd7, 0xe9, 0x0a, 0xbb, 0x19, 0x80, 0xa2, 0x50, 0x5d, 0xef, 0x7a, 0x9e, 0xd5, 0xf2,
		0x82, 0xff, 0xee, 0x7a, 0xbe, 0xe9, 0x47, 0xe9, 0x3f, 0x32, 0xd0, 0x98, 0xbd, 0xa6, 0x6f, 0x8f,
		0x1b, 0x01, 0x85, 0xbb, 0xfe, 0xd7, 0xba, 0xb3, 0xbe, 0x9a, 0xcd, 0x9b, 0x8b, 0xc1, 0x9e, 0xc1,
		0x7f, 0x6f, 0x2e, 0x82, 0x3d, 0xdf, 0xd1, 0x48, 0xb2, 0x84, 0x1c, 0xf9, 0xbf, 0x3a, 0x9d, 0x95,
		0x34, 0x78, 0x05, 0x9a, 0x9d, 0xce, 0x8a, 0xf7, 0x0a, 0x75, 0xfa, 0x8a, 0x8f, 0x45, 0xc5, 0x94,
		0x32, 0x58, 0x92, 0x88, 0x21, 0x65, 0x85, 0x02, 0x19, 0x33, 0x92, 0xd9, 0x9e, 0x8e, 0x11, 0xd5,
		0xd8, 0xe4, 0xb3, 0x15, 0xcd, 0x88, 0xcb, 0x37, 0xc7, 0xa7, 0x29, 0x69, 0xb8, 0x8c, 0xd6, 0xc9,
		0x99, 0x2d, 0x45, 0x98, 0x2d, 0x30, 0x5b, 0xa8, 0x57, 0x35, 0x5c, 0xe0, 0xbb, 0x3d, 0xcf, 0x37,
		0x5a, 0x5e, 0xb3, 0x4b, 0xcf, 0xc6, 0x98, 0xd8, 0x43, 0x92, 0x7a, 0xb4, 0x71, 0x9b, 0x8a, 0x50,
		0x59, 0x9a, 0x23, 0x54, 0x38, 0x83, 0x89, 0x43, 0x74, 0x20, 0x37, 0x12, 0xc7, 0xe8, 0xc5, 0x6e,
		0x24, 0x0e, 0x22, 0x62, 0x35, 0xc9, 0xb3, 0x97, 0x76, 0x08, 0xcc, 0x9c, 0xbc, 0x7c, 0xc5, 0xda,
		0x8c, 0xc8, 0x2f, 0x6a, 0x82, 0xa3, 0x12, 0xc4, 0x18, 0x80, 0x1f, 0xe3, 0x56, 0x18, 0xae, 0xe8,
		0x98, 0xee, 0x77, 0xba, 0xd0, 0x98, 0xde, 0x06, 0x8c, 0x0f, 0xc6, 0x5f, 0x5b, 0xc6, 0xef, 0x59,
		0xb6, 0xff, 0x5e, 0x81, 0xed, 0x09, 0x0d, 0x8e, 0x88, 0x11, 0x3c, 0xba, 0xa7, 0x82, 0xc5, 0x5d,
		0xc8, 0xe4, 0x03, 0x9b, 0xf1, 0x85, 0xa9, 0xee, 0xc3, 0xe0, 0x12, 0x53, 0x70, 0x27, 0xb2, 0xb8,
		0x15, 0x75, 0x91, 0xb6, 0x54, 0xa9, 0xa4, 0x88, 0xb8, 0xef, 0xe2, 0x59, 0xd5, 0xd0, 0x2a, 0x70,
		0x48, 0x81, 0xc3, 0x49, 0xfe, 0xa3, 0x05, 0x10, 0x27, 0xaf, 0xd9, 0xc4, 0x0e, 0x04, 0xd7, 0x3b,
		0x2d, 0x7a, 0x18, 0x03, 0x6a, 0xf9, 0xce, 0x83, 0x5a, 0xbe, 0x03, 0xb5, 0x00, 0xb5, 0x00, 0xb5,
		0x00, 0xb5, 0x00, 0xb5, 0x00, 0xb5, 0x00, 0xb5, 0x00, 0xb5, 0x68, 0x45, 0x2d, 0x8f, 0x16, 0x0b,
		0x6a, 0x79, 0xdd, 0x06, 0xa8, 0x05, 0xa8, 0x05, 0xa8, 0x05, 0xa8, 0x05, 0xa8, 0x05, 0xa8, 0x05,
		0xa8, 0x05, 0xa8, 0x45, 0x0f, 0x6a, 0x71, 0x78, 0x50, 0x8b, 0x03, 0xd4, 0x02, 0xd4, 0x02, 0xd4,
		0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x22, 0x87, 0x5a, 0x58, 0x93, 0xeb,
		0x24, 0xd3, 0xa5, 0xc3, 0x75, 0x72, 0x69, 0xd3, 0x7f, 0x75, 0x3a, 0xbb, 0x52, 0x09, 0xa1, 0x39,
		0xc9, 0x1c, 0xea, 0xff, 0x76, 0x3a, 0x37, 0x23, 0x9c, 0x13, 0x73, 0x07, 0x7a, 0x41, 0xeb, 0x3a,
		0x2f, 0x74, 0x67, 0xc6, 0x96, 0x90, 0x19, 0xcb, 0x0e, 0xe2, 0x90, 0x19, 0x8b, 0xcc, 0x58, 0x98,
		0x3f, 0x30, 0x7f, 0xa2, 0x9c, 0x3c, 0x32, 0x63, 0x91, 0x19, 0x0b, 0xc6, 0x87, 0xdf, 0x03, 0x7e,
		0x0f, 0xf8, 0x3d, 0xe0, 0xf7, 0x80, 0xdf, 0x03, 0x7e, 0x8f, 0xb8, 0x51, 0x0b, 0x32, 0x63, 0x81,
		0x5a, 0x80, 0x5a, 0x80, 0x5a, 0x80, 0x5a, 0x80, 0x5a, 0x80, 0x5a, 0x80, 0x5a, 0x32, 0x81, 0x5a,
		0x90, 0x19, 0x0b, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4,
		0x92, 0x11, 0xd4, 0x82, 0xcc, 0x58, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16,
		0xa0, 0x16, 0xa0, 0x96, 0x64, 0x50, 0x4b, 0x46, 0x33, 0x63, 0x65, 0xf2, 0x41, 0x73, 0x84, 0xc4,
		0xd8, 0x08, 0x0d, 0x86, 0xa3, 0x93, 0x30, 0xcd, 0xdd, 0x99, 0x57, 0xf7, 0x30, 0x26, 0x90, 0x8f,
		0xdc, 0x99, 0xf9, 0x9d, 0x04, 0x81, 0x06, 0x70, 0x6c, 0xf0, 0x30, 0xc1, 0x43, 0x2d, 0xf8, 0x48,
		0x24, 0x39, 0x10, 0x9d, 0xdf, 0x95, 0x86, 0xab, 0x44, 0x63, 0xe9, 0x45, 0x2f, 0x1b, 0xf1, 0x16,
		0xc8, 0x9d, 0xfe, 0x92, 0x93, 0x97, 0x38, 0xf1, 0xf9, 0xa7, 0x3d, 0x7b, 0x96, 0xd3, 0xbf, 0x79,
		0xf3, 0xa2, 0xab, 0x5e, 0x30, 0xf2, 0x8b, 0xcd, 0x79, 0xa7, 0x68, 0xef, 0x32, 0xfd, 0x1a, 0xaf,
		0x0f, 0x3b, 0xf1, 0xa0, 0x79, 0xef, 0xc9, 0xf3, 0xc5, 0x6c, 0x87, 0xf0, 0xd7, 0x34, 0xf5, 0xe1,
		0xbf, 0xbf, 0x79, 0xb5, 0xf9, 0xf9, 0xe8, 0x0b, 0x4d, 0xa9, 0x65, 0xa6, 0xd2, 0xa4, 0x29, 0xe4,
		0x3d, 0xcd, 0x7d, 0xd9, 0x15, 0x56, 0x4e, 0x64, 0x2b, 0x26, 0xb2, 0x95, 0xf2, 0xd6, 0x0a, 0x19,
		0x3c, 0x97, 0xe4, 0xe1, 0x2f, 0xca, 0xca, 0xce, 0x9b, 0xa6, 0xb9, 0xf8, 0x4d, 0xc6, 0xb4, 0x18,
		0x7c, 0x68, 0x91, 0x8c, 0x58, 0x5a, 0x0a, 0xb0, 0xd2, 0x9a, 0x8d, 0x62, 0xb5, 0x4e, 0x1e, 0xc9,
		0xe2, 0x27, 0x91, 0x31, 0x40, 0xa5, 0x0d, 0x4d, 0x69, 0x83, 0xf2, 0xed, 0x91, 0x0d, 0x9e, 0x9b,
		0x49, 0x2a, 0xaf, 0x4a, 0xb0, 0xcf, 0x9b, 0xcd, 0xa6, 0xd3, 0xb3, 0x7d, 0xcb, 0xbe, 0x8f, 0xde,
		0x69, 0x7f, 0x62, 0x4d, 0x36, 0x1a, 0xee, 0x2f, 0xbf, 0x08, 0x54, 0x8f, 0x44, 0xf2, 0xbd, 0xf6,
		0x97, 0x5e, 0x14, 0x1e, 0xbc, 0x83, 0x36, 0xfb, 0xfc, 0x17, 0x4d, 0xd5, 0x05, 0x96, 0xbe, 0x3a,
		0xa2, 0x48, 0x17, 0x51, 0x8f, 0x95, 0x23, 0x5d, 0x42, 0xf4, 0x2a, 0xbd, 0x8c, 0x8e, 0xf0, 0x1f,
		0x9c, 0x16, 0xdd, 0xe5, 0x3b, 0xbb, 0xd5, 0x66, 0xb8, 0x7d, 0xe5, 0xae, 0xf9, 0xe6, 0x78, 0x7c,
		0xa5, 0xd8, 0x20, 0x33, 0xce, 0x5e, 0x7b, 0x60, 0x05, 0x28, 0x54, 0x01, 0x1d, 0x12, 0xd6, 0x8e,
		0x1e, 0x3b, 0x76, 0x67, 0xef, 0xf8, 0xa5, 0xad, 0x96, 0xb0, 0x7d, 0xcb, 0x7f, 0x72, 0xc5, 0x5d,
		0x5e, 0xc1, 0xc1, 0x39, 0x26, 0x81, 0x82, 0x4b, 0x31, 0x7f, 0x34, 0x7a, 0x94, 0x8f, 0xa6, 0x27,
		0xd4, 0xbd, 0xa5, 0xe3, 0x17, 0xac, 0xd5, 0x6a, 0x37, 0x5f, 0xeb, 0x97, 0xbf, 0x9c, 0x7e, 0xbe,
		0xb9, 0xfc, 0xfd, 0xac, 0x9e, 0xe7, 0xf0, 0x9e, 0x7a, 0xe4, 0x13, 0xe3, 0x39, 0xbd, 0xb9, 0x2f,
		0x7a, 0x59, 0xfb, 0x54, 0xfb, 0x74, 0x71, 0x53, 0x3b, 0x3e, 0xce, 0x2b, 0x6f, 0xdc, 0xdf, 0x4e,
		0xdb, 0xdb, 0x1d, 0x9f, 0x7e, 0xaa, 0xad, 0xe5, 0x8b, 0x9d, 0xd7, 0x3e, 0x1f, 0x7d, 0xe3, 0x3a,
		0x36, 0xa5, 0x1d, 0x1a, 0x71, 0x7b, 0xef, 0xb7, 0x93, 0x12, 0x7a, 0xd2, 0x43, 0x52, 0x17, 0xca,
		0xbb, 0xf7, 0x88, 0x5b, 0xb0, 0xc7, 0x2d, 0xd4, 0x86, 0x47, 0xcf, 0xf5, 0x7b, 0x12, 0x71, 0x58,
		0x88, 0x0c, 0x3c, 0xe1, 0x52, 0x21, 0x98, 0x22, 0x16, 0x7c, 0x8b, 0x07, 0x9d, 0xe1, 0x5b, 0x19,
		0xb7, 0x4f, 0x2a, 0xd7, 0x97, 0x0b, 0x17, 0xce, 0x60, 0xc3, 0x80, 0x52, 0x31, 0xf1, 0x44, 0x7f,
		0x43, 0x83, 0x53, 0x43, 0x6f, 0xef, 0xee, 0xe8, 0x87, 0x69, 0x9a, 0xbb, 0xaf, 0xe6, 0x19, 0x63,
		0xef, 0x96, 0x8b, 0x60, 0xff, 0x9b, 0xd1, 0x8f, 0x9a, 0x69, 0xde, 0xd4, 0xc2, 0xaf, 0x49, 0xa0,
		0x83, 0x8b, 0x78, 0x1c, 0x89, 0x07, 0x49, 0xb7, 0xcb, 0x68, 0x1d, 0xdc, 0x2e, 0x70, 0xbb, 0xc4,
		0xe3, 0x76, 0x09, 0x2e, 0x1c, 0xdd, 0xd5, 0x32, 0x5c, 0x4e, 0x73, 0xaf, 0x14, 0xe1, 0x5e, 0x81,
		0x7b, 0x45, 0x0f, 0x44, 0x94, 0x65, 0x83, 0x70, 0xa1, 0xa4, 0xbb, 0x7c, 0xe1, 0x75, 0x91, 0x56,
		0x6c, 0x0c, 0x0c, 0xa2, 0xcc, 0x28, 0x1c, 0x0c, 0xc3, 0xc7, 0x38, 0x9c, 0x98, 0x94, 0x95, 0x91,
		0xb4, 0xe0, 0x52, 0x36, 0xc6, 0x4a, 0xc4, 0xca, 0x25, 0x33, 0xdc, 0xb4, 0x1e, 0x32, 0x7c, 0xaa,
		0x5b, 0x74, 0xb1, 0x72, 0x1a, 0xee, 0xb9, 0x9d, 0x8a, 0x64, 0x46, 0x55, 0xc6, 0xe4, 0x64, 0x50,
		0x7e, 0x46, 0xe5, 0x66, 0x58, 0x6d, 0x8c, 0xab, 0x8d, 0x81, 0xb5, 0x30, 0x32, 0x8f, 0xbb, 0x4c,
		0xd1, 0x95, 0x48, 0x0f, 0x58, 0x2c, 0xbc, 0x6f, 0x3c, 0xbe, 0xfc, 0x19, 0x9d, 0x59, 0x61, 0xd8,
		0x8b, 0xd5, 0xb7, 0x3f, 0xf3, 0xe2, 0xb5, 0x5a, 0xed, 0xa6, 0xf6, 0xe9, 0xd3, 0xe9, 0xb7, 0x93,
		0xcb, 0xa3, 0x93, 0x9f, 0x6f, 0xea, 0xbf, 0xd6, 0x4f, 0x2e, 0x39, 0xbc, 0xfd, 0xe1, 0x17, 0x31,
		0x7a, 0xfd, 0xd5, 0xdd, 0x98, 0xf2, 0xa4, 0xf8, 0x74, 0xfa, 0xf5, 0x6b, 0xed, 0xe4, 0x73, 0x9e,
		0xed, 0x2b, 0xfb, 0xdb, 0x99, 0xa4, 0xc3, 0xf1, 0xe9, 0xcf, 0x47, 0x27, 0x8c, 0x54, 0x60, 0xd9,
		0xa9, 0x91, 0xb4, 0x1c, 0x4b, 0xa4, 0x22, 0xc2, 0x15, 0xcd, 0xa1, 0x02, 0x62, 0x42, 0x26, 0xa3,
		0xfd, 0x80, 0x4a, 0x80, 0x4a, 0x80, 0x4a, 0x52, 0x85, 0x4a, 0x84, 0xdd, 0xeb, 0x08, 0x77, 0xe8,
		0x01, 0x67, 0x44, 0x25, 0x65, 0x86, 0xbd, 0xea, 0x76, 0x2f, 0xc8, 0xaa, 0x4e, 0x4c, 0x80, 0xc6,
		0x6a, 0x51, 0x12, 0x23, 0x11, 0x33, 0xfb, 0x10, 0x23, 0x13, 0x43, 0x47, 0xfc, 0xf0, 0xc7, 0xae,
		0x92, 0x37, 0x27, 0x47, 0x0e, 0x5b, 0xd4, 0x83, 0x67, 0x18, 0xfe, 0x90, 0x8a, 0x61, 0xa8, 0x9f,
		0x1c, 0xe1, 0xd4, 0x38, 0x4c, 0x78, 0x3e, 0xd3, 0x5d, 0x51, 0x39, 0xc2, 0x87, 0x06, 0x1f, 0x5a,
		0xdc, 0x12, 0x4f, 0x59, 0x99, 0x85, 0xf7, 0xa5, 0x2d, 0xcc, 0x3b, 0xa6, 0x14, 0xb9, 0x03, 0x85,
		0x3d, 0xce, 0x46, 0x42, 0x77, 0x67, 0x67, 0x24, 0x41, 0x77, 0x27, 0xd8, 0x3a, 0xc5, 0x82, 0x4c,
		0x6e, 0xfc, 0xc6, 0xc2, 0x53, 0x90, 0x2d, 0xbf, 0x9c, 0x4b, 0x7f, 0x55, 0xf1, 0x55, 0x82, 0xf8,
		0x82, 0xf8, 0x8a, 0x45, 0x7c, 0x21, 0x04, 0x00, 0x63, 0x1b, 0xc6, 0x36, 0x8c, 0x6d, 0x89, 0xfb,
		0x86, 0x10, 0x00, 0x42, 0x00, 0x08, 0x01, 0x20, 0x04, 0x10, 0x9b, 0x07, 0x0b, 0x21, 0x00, 0xa0,
		0x12, 0xa0, 0x12, 0xa0, 0x92, 0xe5, 0x36, 0x03, 0x42, 0x00, 0xe9, 0xb0, 0x28, 0xd3, 0x14, 0x02,
		0x50, 0x71, 0xe6, 0xe4, 0x78, 0x22, 0x00, 0x12, 0xed, 0xb6, 0x18, 0xfc, 0x66, 0x5a, 0xf3, 0x73,
		0x47, 0x5d, 0xa9, 0xc8, 0xd6, 0xf9, 0xfa, 0xd7, 0x80, 0xc9, 0xb7, 0xb3, 0x93, 0xad, 0x59, 0x50,
		0x63, 0x2e, 0x0e, 0xa6, 0xca, 0x93, 0x7c, 0xb3, 0x8a, 0x6c, 0x94, 0x47, 0x1d, 0xd6, 0xa2, 0x53,
		0xd1, 0x5e, 0x87, 0x35, 0x3c, 0x07, 0x4c, 0xd2, 0x8e, 0x75, 0x92, 0x36, 0xaa, 0xb0, 0x62, 0xe7,
		0x5e, 0x34, 0xbf, 0x89, 0xc7, 0x64, 0x44, 0x75, 0x96, 0x26, 0x13, 0x0f, 0xcd, 0x6f, 0x16, 0x3f,
		0x36, 0x9a, 0xdf, 0xa0, 0xf9, 0x8d, 0xe2, 0x8b, 0xa2, 0xf9, 0x4d, 0x26, 0x5f, 0x0c, 0xcd, 0x6f,
		0xe2, 0x17, 0x7a, 0x68, 0x7e, 0xb3, 0x61, 0x8e, 0x0f, 0x34, 0xbf, 0xd1, 0x83, 0x0b, 0x73, 0x68,
		0x7e, 0x93, 0x32, 0xa7, 0x0b, 0xdb, 0x78, 0x86, 0xa5, 0x3e, 0x97, 0xb5, 0x1c, 0xd2, 0xb0, 0x8c,
		0xae, 0x2a, 0x93, 0x1a, 0x96, 0x51, 0x92, 0x3c, 0xaf, 0x61, 0x49, 0xaf, 0x73, 0xb3, 0xe7, 0x3f,
		0x0c, 0x90, 0x74, 0x33, 0x1a, 0x55, 0x5e, 0x8d, 0xfc, 0xe9, 0x75, 0x68, 0xf7, 0x8d, 0x76, 0xdf,
		0xa3, 0x0b, 0xd5, 0xea, 0x58, 0xb6, 0x11, 0x88, 0x76, 0x69, 0xa7, 0xe7, 0xc4, 0x5a, 0xf4, 0x9f,
		0x82, 0xe7, 0x33, 0x1e, 0xcf, 0x27, 0xb1, 0xe1, 0x8e, 0x5a, 0xa3, 0x1d, 0x74, 0xa0, 0x82, 0x8f,
		0x33, 0xad, 0x1d, 0xa8, 0x86, 0x52, 0xb8, 0x6b, 0x7a, 0xde, 0x5f, 0x2a, 0xf9, 0x66, 0x6f, 0xa4,
		0x7a, 0xb8, 0x1f, 0xaa, 0xe9, 0x50, 0x8e, 0x12, 0x33, 0xa3, 0x25, 0xe2, 0x7a, 0x62, 0xac, 0xa6,
		0x4b, 0xdc, 0x05, 0x45, 0xa4, 0x40, 0xfd, 0x87, 0xaf, 0xe6, 0xfd, 0xe6, 0xbb, 0xdd, 0x4e, 0xd3,
		0x10, 0x3f, 0xfc, 0x0f, 0x13, 0x16, 0xdc, 0x83, 0xe9, 0x3d, 0x88, 0x96, 0xf1, 0x18, 0x8c, 0xf7,
		0x64, 0xbd, 0xf5, 0x77, 0x66, 0xdb, 0xe3, 0xbc, 0xf6, 0x71, 0x5f, 0xf8, 0x46, 0x2c, 0x35, 0x8e,
		0xd3, 0x6a, 0x61, 0x74, 0x1c, 0xdc, 0xda, 0x66, 0xbc, 0x2d, 0x94, 0x0e, 0x94, 0x0e, 0x94, 0x8e,
		0x9c, 0x5d, 0xe3, 0x3e, 0x75, 0xfd, 0x57, 0x46, 0x52, 0xac, 0x60, 0x8c, 0x3d, 0x08, 0xd2, 0x5f,
		0x9f, 0xdc, 0xc5, 0x29, 0x57, 0xdb, 0xee, 0xab, 0x93, 0x84, 0xde, 0x15, 0x44, 0xc6, 0xfd, 0x38,
		0xf5, 0xed, 0x37, 0xb5, 0xc1, 0xb7, 0x7f, 0xf3, 0x84, 0x4b, 0x6a, 0x07, 0x22, 0xe1, 0x57, 0x97,
		0xf2, 0x4a, 0x53, 0xaa, 0xe5, 0x95, 0xaa, 0xe4, 0x95, 0xed, 0xf7, 0x12, 0xec, 0x77, 0xd8, 0xef,
		0xb0, 0xdf, 0x01, 0xa5, 0x00, 0xa5, 0x60, 0xbf, 0xc3, 0x7e, 0x87, 0xfd, 0x0e, 0xfb, 0x1d, 0xf6,
		0x3b, 0x94, 0x0e, 0x94, 0x0e, 0xec, 0x77, 0x55, 0x91, 0x34, 0x30, 0x8d, 0x47, 0x96, 0x2d, 0x8b,
		0x2c, 0x0a, 0xf7, 0x83, 0x10, 0x82, 0x10, 0x82, 0x10, 0xca, 0x16, 0xf2, 0x85, 0xdf, 0x70, 0x8e,
		0xdf, 0x90, 0xda, 0x4a, 0x80, 0xc3, 0x6d, 0x48, 0xe8, 0x21, 0xb0, 0xd6, 0xd9, 0xb8, 0x8b, 0x0e,
		0x49, 0x53, 0x5a, 0xee, 0x82, 0x63, 0x89, 0xb3, 0x22, 0x5a, 0x32, 0xe1, 0x8a, 0x96, 0x68, 0x85,
		0xcc, 0xc0, 0x1c, 0x32, 0x03, 0xd5, 0x1c, 0xaa, 0x6f, 0x72, 0x9c, 0xd5, 0xeb, 0xa2, 0xe7, 0x6e,
		0x87, 0xda, 0x68, 0x7d, 0x60, 0x11, 0x71, 0x07, 0xd4, 0x46, 0x6b, 0xf6, 0x53, 0xa2, 0x36, 0x9a,
		0xb8, 0x2d, 0x6a, 0xa3, 0x93, 0x79, 0x3b, 0xd4, 0x46, 0x6b, 0x33, 0xb7, 0xc7, 0x7f, 0x50, 0x1b,
		0x9d, 0x5e, 0xf3, 0x1e, 0xb5, 0xd1, 0xd2, 0x9b, 0xa2, 0x36, 0x3a, 0x1e, 0xa7, 0x21, 0x6a, 0xa3,
		0xd3, 0xe6, 0x8d, 0x91, 0xce, 0xaf, 0xa3, 0x7b, 0x62, 0x64, 0xb2, 0xe9, 0xd0, 0x98, 0x0e, 0x4e,
		0x18, 0x38, 0x61, 0xe0, 0x84, 0x81, 0x13, 0x06, 0x4e, 0x18, 0x38, 0x61, 0xe0, 0x84, 0x81, 0x13,
		0x06, 0x4e, 0x18, 0x38, 0x61, 0xe0, 0x84, 0x81, 0x13, 0x06, 0x4e, 0x18, 0x38, 0x61, 0xe0, 0x84,
		0x59, 0x2f, 0x27, 0x8c, 0xce, 0x26, 0x75, 0xd3, 0x3e, 0x18, 0xde, 0x46, 0x75, 0x11, 0x5c, 0x30,
		0x83, 0xfb, 0xe5, 0xc9, 0xbb, 0x60, 0x86, 0xcb, 0x90, 0x07, 0x03, 0x17, 0x4c, 0x3c, 0x2e, 0x18,
		0xa9, 0x66, 0x6e, 0x1c, 0xea, 0x06, 0xdd, 0xb1, 0xe0, 0x60, 0x49, 0x6b, 0x75, 0x2d, 0xb1, 0x5d,
		0xdc, 0xcc, 0x75, 0x21, 0xd7, 0xee, 0xe7, 0x38, 0x87, 0xb3, 0xa3, 0xa6, 0x40, 0x07, 0x23, 0x69,
		0x41, 0xa6, 0xb9, 0x0d, 0x1f, 0xce, 0xae, 0x5c, 0xd0, 0x3e, 0x73, 0xf1, 0x14, 0x4b, 0xda, 0xdf,
		0x32, 0x23, 0x46, 0xa0, 0xc6, 0xc9, 0xac, 0xda, 0x98, 0x56, 0x1b, 0xf3, 0x6a, 0x61, 0x62, 0x1e,
		0x67, 0x59, 0xfa, 0x46, 0xa0, 0x2a, 0x3b, 0xb5, 0x98, 0x9c, 0x5b, 0x5c, 0x14, 0x52, 0x2e, 0xa5,
		0x57, 0x77, 0x18, 0x2e, 0x74, 0xc2, 0xe8, 0x2c, 0xad, 0x5f, 0xc0, 0x4d, 0x0c, 0x25, 0xf6, 0x73,
		0xd9, 0x29, 0xc3, 0x5e, 0xe7, 0x6d, 0x75, 0xd5, 0xa8, 0x5a, 0x84, 0xbf, 0x50, 0x43, 0xaa, 0x95,
		0xe1, 0x43, 0x51, 0x42, 0x51, 0x42, 0x51, 0x6a, 0x52, 0x94, 0xbc, 0x65, 0xfe, 0xdc, 0x5a, 0x33,
		0x11, 0x71, 0xe8, 0x3a, 0x6d, 0xc6, 0x90, 0x7b, 0xb0, 0x1b, 0x04, 0x1f, 0x04, 0x1f, 0x04, 0x5f,
		0xaa, 0x04, 0x1f, 0x35, 0xc1, 0x69, 0xa1, 0xa8, 0x3b, 0x64, 0xd8, 0x4b, 0x29, 0x01, 0x4a, 0x0f,
		0xd4, 0xd7, 0x63, 0x56, 0x31, 0x2b, 0x0a, 0xa6, 0x6b, 0xa6, 0x91, 0x72, 0x3c, 0xa9, 0x65, 0x0b,
		0xc9, 0x57, 0x61, 0xdc, 0x93, 0x35, 0xf5, 0x6c, 0x21, 0x41, 0x2e, 0x7e, 0xbf, 0xb8, 0xac, 0x7f,
		0xbd, 0xf9, 0x5c, 0xff, 0x72, 0x74, 0x52, 0xff, 0x7c, 0x73, 0x7e, 0x7a, 0x5c, 0xbf, 0x60, 0xa4,
		0x4c, 0x8e, 0x39, 0x3f, 0x4d, 0xdf, 0x15, 0x59, 0x46, 0x9d, 0x01, 0x55, 0x6e, 0x6a, 0x9f, 0xbf,
		0x1e, 0x9d, 0xe4, 0xd9, 0xbf, 0xaf, 0xcf, 0xba, 0x63, 0xe3, 0x5d, 0xba, 0x9e, 0x4b, 0x7d, 0x97,
		0x46, 0x06, 0xa1, 0xab, 0xe7, 0x3d, 0x18, 0xdf, 0xc5, 0x13, 0x1f, 0x7a, 0x1d, 0x6f, 0x08, 0x00,
		0x0b, 0x00, 0x0b, 0x00, 0x9b, 0x2a, 0x00, 0x9b, 0x3a, 0x17, 0x77, 0x22, 0x12, 0x4f, 0xb9, 0x5b,
		0xdf, 0xac, 0x61, 0xa0, 0xd6, 0xaf, 0x0f, 0x32, 0x0f, 0x32, 0x0f, 0x32, 0x0f, 0x32, 0x4f, 0xcb,
		0x4a, 0x6a, 0xf6, 0x84, 0x62, 0xdf, 0xc0, 0x57, 0x7c, 0x49, 0xcf, 0xc3, 0x0d, 0xb2, 0x4e, 0x77,
		0xd5, 0xe6, 0x8e, 0xbc, 0x3e, 0x07, 0x35, 0x47, 0xf7, 0xdb, 0xe0, 0x29, 0x6e, 0xc8, 0x03, 0x48,
		0xe8, 0xa7, 0xd7, 0x27, 0xb5, 0x4b, 0xa4, 0x0c, 0x26, 0x99, 0xc3, 0x34, 0xb4, 0x76, 0x8d, 0x39,
		0xce, 0x4c, 0xb1, 0x12, 0x32, 0xc5, 0x34, 0x6a, 0x27, 0x64, 0x8a, 0xbd, 0x3e, 0x39, 0x32, 0xc5,
		0x00, 0x29, 0x01, 0x29, 0x01, 0x29, 0xb3, 0x0a, 0x29, 0x91, 0x29, 0xc6, 0xc9, 0x4d, 0xc8, 0x14,
		0xe3, 0xf4, 0xb6, 0x20, 0x53, 0x0c, 0x8a, 0x12, 0x8a, 0x72, 0x33, 0x15, 0x25, 0x32, 0xc5, 0x66,
		0x9e, 0x1d, 0x99, 0x62, 0x10, 0x7c, 0x10, 0x7c, 0xeb, 0x2e, 0xf8, 0x90, 0x29, 0x96, 0xa4, 0x59,
		0xc5, 0xac, 0x28, 0x98, 0xae, 0x99, 0x46, 0xca, 0x21, 0x53, 0xec, 0x0d, 0x41, 0x90, 0x29, 0x16,
		0x81, 0x3a, 0xc8, 0x14, 0x4b, 0x6e, 0x17, 0x64, 0x8a, 0x21, 0x53, 0x0c, 0x00, 0x16, 0x00, 0x36,
		0xad, 0x00, 0x16, 0x99, 0x62, 0xc8, 0x14, 0x83, 0xcc, 0x83, 0xcc, 0x83, 0xcc, 0xcb, 0xa4, 0xcc,
		0xdb, 0xe0, 0x4c, 0x31, 0x95, 0xd4, 0xa5, 0x1c, 0x57, 0xa2, 0x18, 0x61, 0xe4, 0x2c, 0xfd, 0xec,
		0x28, 0x79, 0x62, 0x7c, 0x13, 0xcb, 0x31, 0xab, 0x1c, 0xd9, 0x62, 0x49, 0x6b, 0xa4, 0xac, 0xce,
		0x2a, 0x6f, 0x0b, 0xf3, 0x8e, 0x69, 0x70, 0xc0, 0x81, 0xc2, 0x1e, 0x67, 0x23, 0x91, 0xbb, 0xb3,
		0x33, 0xca, 0xb3, 0xdd, 0x0d, 0x99, 0x7a, 0x2d, 0x46, 0xa0, 0xff, 0x3b, 0x70, 0x5a, 0x50, 0x25,
		0xd5, 0xfa, 0x77, 0xf7, 0xb6, 0x7b, 0xed, 0xf6, 0xba, 0xce, 0xa0, 0x7f, 0x45, 0x06, 0xb1, 0x4e,
		0x9f, 0x7f, 0xc5, 0x02, 0x18, 0x3c, 0xbf, 0xec, 0x64, 0x62, 0xe9, 0xb2, 0x1d, 0x1c, 0x06, 0x5b,
		0x97, 0xed, 0x77, 0x0a, 0xf4, 0x96, 0xa5, 0xb3, 0x02, 0x7d, 0xf3, 0x91, 0x06, 0xb2, 0xd1, 0x28,
		0xba, 0x9c, 0x96, 0x8b, 0x29, 0xb4, 0x84, 0x3a, 0xc1, 0x98, 0x2c, 0xc7, 0xb5, 0xfe, 0x8e, 0x46,
		0x9c, 0xa9, 0xe9, 0x5a, 0xaf, 0xcb, 0x56, 0x50, 0x3f, 0x5a, 0x65, 0x42, 0x64, 0x4c, 0x29, 0x83,
		0x1d, 0xe5, 0x31, 0xa2, 0x2c, 0x16, 0x24, 0x63, 0x3e, 0x32, 0xb6, 0x23, 0x61, 0x38, 0x35, 0xfe,
		0x89, 0x9a, 0xa9, 0x2f, 0xdb, 0x34, 0x99, 0xd6, 0x24, 0x19, 0xad, 0xee, 0x73, 0x68, 0x75, 0x4f,
		0xbb, 0xa0, 0xf3, 0xe5, 0x1e, 0xcb, 0xb0, 0xc1, 0x99, 0xdd, 0x30, 0x6b, 0x50, 0x9f, 0xc5, 0x8d,
		0x56, 0xf8, 0x98, 0x35, 0x18, 0xe9, 0x0f, 0x66, 0x0d, 0xae, 0x7e, 0x41, 0xcc, 0x1a, 0x8c, 0xcf,
		0x8d, 0xa5, 0xf1, 0xed, 0x30, 0x6b, 0x50, 0x9b, 0xcf, 0x72, 0xfc, 0x07, 0xb3, 0x06, 0xe5, 0xe5,
		0x1d, 0x66, 0x0d, 0x62, 0xd6, 0xa0, 0x56, 0x2c, 0x98, 0xc3, 0xac, 0x41, 0x26, 0x3c, 0xb9, 0xe6,
		0x5e, 0xd0, 0xd0, 0x42, 0x93, 0xef, 0x6b, 0x22, 0xe9, 0xb3, 0x0b, 0xbf, 0x49, 0xaa, 0x77, 0x09,
		0xcf, 0xac, 0x41, 0xf1, 0x38, 0x12, 0x12, 0x92, 0x2e, 0x98, 0xd1, 0x3a, 0xb8, 0x60, 0xe0, 0x82,
		0x89, 0xc7, 0x05, 0x13, 0x5c, 0x38, 0xba, 0xcf, 0x65, 0xb8, 0x1c, 0xf3, 0x06, 0xe1, 0x64, 0x49,
		0x95, 0x93, 0x05, 0xf3, 0x06, 0x91, 0x17, 0xa4, 0x8d, 0x91, 0xb4, 0xa0, 0xd3, 0xdc, 0x86, 0x77,
		0x91, 0x0a, 0x14, 0xc9, 0xb0, 0x4a, 0x9e, 0xcd, 0xa5, 0x36, 0xb1, 0x27, 0x52, 0xce, 0xf5, 0x33,
		0x2a, 0x37, 0xc3, 0x6a, 0x63, 0x5c, 0x6d, 0x0c, 0xac, 0x85, 0x91, 0x79, 0x9c, 0x66, 0xe9, 0x4b,
		0x39, 0xe7, 0x2d, 0xdc, 0xe5, 0x2c, 0xd8, 0xd5, 0x53, 0xa8, 0x3b, 0xe5, 0xe9, 0xaf, 0x7d, 0xbb,
		0xfc, 0xe5, 0xf4, 0xfc, 0xe8, 0x8f, 0xda, 0xe5, 0xd1, 0xe9, 0xc9, 0x4d, 0xfd, 0xd7, 0xfa, 0xc9,
		0x25, 0x87, 0xdb, 0x3f, 0xfc, 0x2e, 0x0d, 0x05, 0xba, 0x9a, 0xca, 0x95, 0x17, 0x51, 0xe3, 0xd3,
		0xe9, 0xc9, 0x97, 0xa3, 0x9f, 0xf9, 0xaa, 0x73, 0xfb, 0xdb, 0xd9, 0xa5, 0xc4, 0xd7, 0xaf, 0xb5,
		0x93, 0xcf, 0xf9, 0x94, 0x15, 0x02, 0x37, 0x92, 0x96, 0x68, 0x28, 0x11, 0x89, 0xe8, 0x68, 0x1b,
		0x3a, 0x95, 0x86, 0x3f, 0x62, 0xef, 0x26, 0xfc, 0xea, 0x85, 0xab, 0x07, 0x8f, 0x31, 0xfc, 0x91,
		0x81, 0x76, 0xc2, 0x0c, 0x88, 0x94, 0x0f, 0x89, 0xa2, 0x54, 0x04, 0x26, 0x21, 0x4a, 0x45, 0xd2,
		0x56, 0x2a, 0x32, 0xc1, 0xd6, 0xe8, 0x8b, 0x1e, 0x8b, 0x47, 0x0b, 0x7d, 0xd1, 0x21, 0xbe, 0xe0,
		0xd1, 0x82, 0x47, 0x0b, 0x1e, 0x2d, 0x78, 0xb4, 0xe0, 0xd1, 0x82, 0x47, 0x0b, 0x1e, 0x2d, 0x78,
		0xb4, 0xe0, 0xd1, 0xda, 0x6c, 0x8f, 0x56, 0xcc, 0x5d, 0x4f, 0x16, 0x38, 0xb4, 0xe2, 0x6d, 0x7b,
		0x12, 0x47, 0xcf, 0x00, 0x32, 0xd8, 0x44, 0xd7, 0x00, 0xe5, 0x23, 0x88, 0xbb, 0x6b, 0xc0, 0x7c,
		0xd6, 0xd2, 0xdf, 0x36, 0x60, 0x3e, 0x33, 0xa1, 0x6f, 0xc0, 0xb2, 0xb3, 0x89, 0x23, 0x63, 0x76,
		0x78, 0x1a, 0x71, 0x66, 0xcc, 0xca, 0x79, 0xa9, 0x48, 0x5e, 0x29, 0x72, 0xbe, 0x6c, 0x09, 0xf9,
		0xb2, 0x9c, 0x46, 0x26, 0x4a, 0x96, 0x51, 0xb2, 0x8c, 0x6c, 0x5a, 0x4e, 0xcf, 0x0a, 0x4a, 0x96,
		0x17, 0x3f, 0x36, 0x4a, 0x96, 0x51, 0xb2, 0xac, 0xf8, 0xa2, 0x28, 0x59, 0xce, 0xe4, 0x8b, 0xa1,
		0x64, 0x39, 0x7e, 0xa1, 0x87, 0x92, 0xe5, 0x0d, 0x73, 0x85, 0xa0, 0x64, 0x59, 0x0f, 0x2e, 0xcc,
		0xa1, 0x64, 0x39, 0x7d, 0x0e, 0x18, 0x59, 0x57, 0x33, 0xd9, 0xff, 0x22, 0xe1, 0x4d, 0xce, 0x7a,
		0xdb, 0xc6, 0xa8, 0x1d, 0x0c, 0x55, 0xe8, 0xa9, 0xa3, 0x69, 0x63, 0xc4, 0x52, 0x41, 0xb9, 0x92,
		0x40, 0xb4, 0x69, 0xe4, 0x95, 0xaa, 0x09, 0xb4, 0x69, 0xd4, 0xc9, 0x2f, 0x91, 0x93, 0xb7, 0x25,
		0x18, 0x25, 0x4a, 0x26, 0x36, 0x8d, 0x43, 0x3c, 0xe1, 0x3e, 0x0a, 0xd7, 0xb8, 0x77, 0x9d, 0x5e,
		0xd7, 0x8b, 0xce, 0x28, 0xd3, 0xcb, 0xc0, 0x2f, 0x68, 0x6b, 0x3a, 0x7b, 0x9d, 0x08, 0x81, 0x82,
		0xc9, 0xd5, 0xe8, 0xaf, 0x11, 0xa3, 0xcb, 0x74, 0xa3, 0xe3, 0x05, 0xc4, 0x86, 0x02, 0x6a, 0x8d,
		0x04, 0xd0, 0x61, 0x23, 0xd6, 0x0b, 0xce, 0x6e, 0xfb, 0xad, 0x73, 0x87, 0x0d, 0x9e, 0xc9, 0x3b,
		0x98, 0xba, 0x83, 0x5a, 0x84, 0x24, 0x98, 0x2a, 0x11, 0xb7, 0x2c, 0x63, 0x29, 0x55, 0xf6, 0xdc,
		0xb3, 0x94, 0x8a, 0x27, 0x9e, 0xa2, 0x4d, 0x94, 0x6b, 0x42, 0xc6, 0x40, 0xc6, 0xc8, 0xdf, 0x97,
		0x8d, 0x88, 0x7b, 0x5f, 0xd4, 0xcf, 0x7f, 0xad, 0x9f, 0x6f, 0x44, 0xdc, 0x7b, 0x7d, 0x43, 0xc3,
		0x1b, 0x17, 0x16, 0x4e, 0x99, 0x11, 0x11, 0x67, 0x96, 0xf3, 0x94, 0x57, 0x71, 0xea, 0x6f, 0xf4,
		0x96, 0x18, 0x12, 0x5e, 0xd6, 0x8b, 0xe0, 0x0b, 0x7f, 0x0e, 0xbe, 0x7d, 0xf2, 0x2f, 0xa4, 0x46,
		0x18, 0x12, 0x01, 0x37, 0x09, 0xff, 0x10, 0xc9, 0x32, 0x53, 0xb1, 0xc8, 0x90, 0xba, 0x08, 0x37,
		0x45, 0xea, 0x53, 0x17, 0xe9, 0xcd, 0x27, 0x54, 0x9a, 0x4e, 0xcc, 0x69, 0x36, 0x21, 0x3f, 0x93,
		0x54, 0x8f, 0x98, 0x18, 0x8a, 0x4e, 0x8f, 0x2e, 0x29, 0xc6, 0x1b, 0xc0, 0xa7, 0x09, 0x61, 0xb1,
		0x1e, 0x3e, 0xcd, 0xe1, 0x8d, 0x66, 0x68, 0xb1, 0x32, 0xdc, 0x07, 0x5d, 0x83, 0xe1, 0x73, 0xd8,
		0x08, 0x9f, 0x83, 0x72, 0x8f, 0x15, 0xb3, 0xd5, 0x72, 0x85, 0xe7, 0xf1, 0x99, 0xf6, 0xe3, 0x0d,
		0xd1, 0x5d, 0x45, 0x3f, 0x8b, 0x72, 0xb3, 0xaa, 0x36, 0x96, 0xd5, 0xc6, 0xba, 0x5a, 0x58, 0x98,
		0xc7, 0x35, 0x91, 0xbe, 0xee, 0x2a, 0xea, 0x5d, 0xe0, 0x38, 0x80, 0x79, 0x04, 0xa0, 0x3e, 0x96,
		0x21, 0x49, 0xf5, 0x82, 0x50, 0x50, 0x9a, 0x8a, 0xe3, 0x0f, 0x66, 0xce, 0x4c, 0xb9, 0xd9, 0x28,
		0x03, 0xb0, 0x81, 0x34, 0x85, 0x34, 0xcd, 0xba, 0x34, 0x55, 0x05, 0x4a, 0xec, 0x80, 0x49, 0x13,
		0x70, 0x62, 0x06, 0x50, 0xec, 0xac, 0xaf, 0x43, 0x04, 0xe8, 0x13, 0x05, 0xba, 0x44, 0x82, 0x76,
		0xd1, 0xa0, 0x5d, 0x44, 0x68, 0x15, 0x15, 0x3c, 0x22, 0x83, 0x49, 0x74, 0xf0, 0x03, 0xb2, 0x99,
		0xfb, 0x6a, 0x75, 0x0d, 0x5e, 0xee, 0xcf, 0x29, 0x56, 0x7e, 0xaf, 0xa2, 0xc1, 0x15, 0xeb, 0x1d,
		0xe2, 0xe5, 0xa9, 0x37, 0x94, 0x7d, 0x2c, 0x6b, 0xa0, 0xed, 0x0c, 0x8d, 0xdf, 0x6b, 0xd8, 0xfb,
		0xcc, 0xf4, 0x7d, 0xe1, 0xda, 0xec, 0xe4, 0x0e, 0xbf, 0x60, 0xeb, 0x6a, 0xcf, 0x38, 0x6c, 0xbc,
		0x5c, 0x15, 0x8d, 0xc3, 0xc6, 0xf0, 0x7f, 0x8b, 0xc1, 0x8f, 0xe7, 0x52, 0xff, 0xa5, 0x74, 0xb5,
		0x67, 0x94, 0x47, 0xbf, 0x2d, 0x55, 0xae, 0xf6, 0x8c, 0x4a, 0xa3, 0xb0, 0x75, 0x7d, 0xbd, 0x23,
		0xbb, 0xa6, 0xf0, 0xbc, 0xdf, 0xcf, 0xb3, 0x3f, 0x7e, 0x43, 0x07, 0xb9, 0x4f, 0x2f, 0x8e, 0x7e,
		0xd3, 0x4e, 0xf3, 0x3f, 0xb7, 0xe2, 0xa2, 0x7a, 0xe1, 0x1f, 0x1a, 0xe8, 0xce, 0xba, 0x63, 0x7f,
		0x3b, 0x43, 0x62, 0xa4, 0x0a, 0x31, 0xb2, 0x48, 0x8c, 0x04, 0xb7, 0xd3, 0x34, 0xee, 0x6a, 0xc6,
		0x97, 0xc6, 0x73, 0x71, 0xbb, 0xdc, 0xff, 0x50, 0x78, 0x3e, 0xe8, 0xbf, 0xfd, 0xe5, 0xcb, 0xbc,
		0x8f, 0x15, 0xb7, 0x0f, 0xfa, 0x1f, 0x16, 0xfc, 0x4b, 0xb5, 0xff, 0x21, 0xe2, 0x1e, 0x95, 0xfe,
		0xd6, 0xcc, 0x47, 0x07, 0xbf, 0x2f, 0x2d, 0x5a, 0x50, 0x5e, 0xb0, 0x60, 0x7f, 0xd1, 0x82, 0xfd,
		0x05, 0x0b, 0x16, 0x3e, 0x52, 0x69, 0xc1, 0x82, 0x4a, 0xff, 0x65, 0xe6, 0xf3, 0x5b, 0xf3, 0x3f,
		0x5a, 0xed, 0x17, 0x5e, 0x16, 0xfd, 0xdb, 0x41, 0xff, 0xe5, 0x43, 0xa1, 0x00, 0xc1, 0x3a, 0x23,
		0x58, 0x71, 0x0d, 0xe3, 0xbf, 0x86, 0xe9, 0x57, 0x34, 0xef, 0xd2, 0xf5, 0x5c, 0xfd, 0x34, 0xe4,
		0x03, 0xaa, 0xd5, 0x91, 0x2c, 0x54, 0x95, 0x0a, 0x75, 0x25, 0xf0, 0x61, 0xc0, 0x87, 0x01, 0x1f,
		0x46, 0x46, 0x7d, 0x18, 0xca, 0x75, 0x31, 0x8b, 0x41, 0xf1, 0x1a, 0xc9, 0x5c, 0xdf, 0xea, 0x08,
		0xa7, 0xe7, 0xf3, 0x8b, 0xdd, 0xf1, 0xc6, 0x90, 0xbc, 0x90, 0xbc, 0x90, 0xbc, 0x1b, 0x25, 0x79,
		0x7b, 0x96, 0xed, 0x17, 0xab, 0x1a, 0x24, 0x6f, 0x95, 0x71, 0xcb, 0x73, 0xd3, 0xbe, 0xcf, 0x84,
		0xe7, 0xf8, 0xab, 0x65, 0xb3, 0x33, 0xaa, 0x26, 0xb1, 0x3a, 0xb3, 0x7d, 0x50, 0x07, 0xa5, 0x71,
		0xff, 0x2f, 0xae, 0xd9, 0xf4, 0x2d, 0xc7, 0xfe, 0x6c, 0xdd, 0x5b, 0xc3, 0x7e, 0x7a, 0xec, 0xdf,
		0xd3, 0xd7, 0xe0, 0x80, 0xf8, 0x6a, 0xfe, 0xc8, 0xfc, 0x91, 0x56, 0x2b, 0x95, 0xfd, 0x4a, 0x86,
		0x8f, 0x15, 0xf6, 0xbc, 0xc6, 0x1d, 0x54, 0x93, 0x23, 0x98, 0xc6, 0xd1, 0x84, 0xfb, 0x31, 0x55,
		0x95, 0x8d, 0xca, 0x1c, 0x46, 0x3f, 0x77, 0x59, 0x52, 0xa1, 0x72, 0x4c, 0x45, 0x67, 0xc3, 0xff,
		0x1f, 0xff, 0x4e, 0x69, 0x18, 0xb3, 0xfa, 0x1d, 0x50, 0x49, 0x58, 0x73, 0xcd, 0x96, 0xd5, 0x63,
		0xcc, 0xff, 0x1d, 0xed, 0x87, 0x84, 0xb5, 0xf8, 0xec, 0x0c, 0x24, 0xac, 0x21, 0x61, 0x6d, 0xf1,
		0x46, 0x4c, 0x19, 0xa9, 0x33, 0xd7, 0x97, 0x4d, 0x1c, 0x33, 0x32, 0x3c, 0x1c, 0x0e, 0x70, 0x38,
		0xc0, 0xe1, 0xc0, 0x2b, 0x40, 0xc2, 0x0d, 0xcd, 0x66, 0xd3, 0x37, 0xba, 0x8e, 0xeb, 0xf3, 0xdf,
		0xab, 0x30, 0x07, 0x36, 0xfc, 0x0a, 0xe6, 0x63, 0xff, 0x2c, 0xee, 0xcc, 0x5e, 0x3b, 0x38, 0xf5,
		0xe2, 0xfb, 0xe2, 0x3e, 0xf7, 0xf6, 0x7a, 0x8c, 0x40, 0x76, 0x29, 0xa6, 0x53, 0x9a, 0xe9, 0x97,
		0x6a, 0xba, 0xa5, 0x5b, 0x6c, 0x52, 0x2e, 0x36, 0x69, 0x17, 0x8b, 0xd4, 0xd3, 0x64, 0xe2, 0x33,
		0xdf, 0x78, 0x76, 0xf7, 0xeb, 0xcc, 0x7d, 0x1f, 0x88, 0x2d, 0xc3, 0xee, 0x75, 0x6e, 0xc9, 0xf5,
		0xc7, 0x51, 0x44, 0x4c, 0x55, 0xc3, 0xd6, 0x7a, 0x7c, 0xb3, 0xe3, 0x3f, 0x7a, 0x98, 0x34, 0xa7,
		0xdb, 0x57, 0x1b, 0x93, 0x83, 0x6f, 0xc6, 0xd1, 0xa7, 0xfb, 0x7b, 0x62, 0x70, 0xf6, 0x69, 0xe2,
		0xe1, 0xe9, 0xa3, 0xd7, 0xe8, 0xd3, 0x4d, 0xea, 0xe8, 0x35, 0xfa, 0x78, 0x13, 0x39, 0xfe, 0x77,
		0xd9, 0xd8, 0x35, 0xad, 0xb9, 0x66, 0x8c, 0xec, 0x13, 0x8c, 0xc9, 0xd4, 0x8d, 0xdd, 0xc3, 0xaf,
		0xd0, 0x8a, 0xdd, 0x4b, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee,
		0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0x6b, 0x8d, 0xdd, 0x5d, 0xe1, 0xbb, 0xa6, 0xed,
		0x75, 0x2c, 0xdf, 0x30, 0x7d, 0x5f, 0x74, 0xba, 0xbe, 0xa7, 0x0f, 0xc5, 0xcf, 0xfb, 0x32, 0x00,
		0x6e, 0x00, 0x6e, 0x00, 0x6e, 0x00, 0x6e, 0xc6, 0xfb, 0xde, 0xb3, 0x6c, 0xff, 0xbd, 0x46, 0xa8,
		0x5d, 0x01, 0xd4, 0x06, 0xd4, 0x06, 0xd4, 0x5e, 0x4b, 0xa8, 0x5d, 0xaa, 0x00, 0x68, 0x03, 0x68,
		0x6b, 0x00, 0xda, 0x9e, 0x68, 0xba, 0xc2, 0x37, 0xbe, 0x8b, 0x27, 0x7d, 0xf8, 0x7a, 0xe2, 0x3b,
		0x00, 0xab, 0x01, 0xab, 0x01, 0xab, 0x01, 0xab, 0x39, 0xad, 0x77, 0xa7, 0xe7, 0x5b, 0xf6, 0xbd,
		0xd1, 0x35, 0x3d, 0x2f, 0xb8, 0x3e, 0x3a, 0x7b, 0x15, 0x6d, 0x94, 0x46, 0x30, 0x1e, 0x4c, 0xef,
		0x41, 0xb4, 0xe2, 0x50, 0x0c, 0xe3, 0xaf, 0x82, 0x7e, 0x80, 0x7e, 0x80, 0x7e, 0x80, 0x7e, 0x60,
		0xbc, 0xef, 0x4d, 0xf7, 0xa9, 0xeb, 0x87, 0xda, 0xc1, 0x50, 0x98, 0xcf, 0x0a, 0x15, 0x31, 0x56,
		0x11, 0x01, 0xa3, 0x1b, 0xdc, 0x6d, 0xa1, 0x67, 0xf5, 0xc3, 0xf4, 0xf7, 0x40, 0x39, 0x40, 0x39,
		0x40, 0x39, 0x40, 0x39, 0x30, 0xde, 0x77, 0x2d, 0x5d, 0xa8, 0x67, 0x74, 0xc2, 0xa1, 0x86, 0xbd,
		0xb5, 0x74, 0xa5, 0x1e, 0xff, 0xd1, 0xe8, 0x98, 0x8f, 0xa9, 0x4b, 0xf5, 0xac, 0x5e, 0xd6, 0xf8,
		0x1d, 0xba, 0x1b, 0x7d, 0x86, 0x5f, 0x94, 0xdd, 0xee, 0xd5, 0xe3, 0x3f, 0x0d, 0x9d, 0xc7, 0x10,
		0x47, 0xd3, 0xd5, 0xf0, 0xdb, 0xb2, 0xdd, 0xd5, 0x3a, 0x3c, 0x0f, 0x3d, 0xbe, 0xf8, 0xed, 0x0c,
		0x8b, 0xa5, 0x2a, 0xc4, 0x92, 0xac, 0x58, 0x42, 0x1b, 0xe2, 0xb5, 0xe9, 0x86, 0xbd, 0xb6, 0x82,
		0x1a, 0xd7, 0x73, 0x2d, 0xba, 0x64, 0x6b, 0x56, 0x5c, 0x9b, 0x13, 0x44, 0x4e, 0x55, 0xe3, 0x06,
		0xe6, 0x6e, 0x5c, 0xaf, 0x9e, 0x2a, 0x2d, 0x5d, 0xb9, 0x86, 0xfd, 0x9e, 0x76, 0x59, 0xbb, 0xc1,
		0xe4, 0xf4, 0x34, 0xe9, 0x3a, 0x0f, 0x1e, 0x95, 0xa5, 0x57, 0x17, 0xdf, 0xcd, 0xe9, 0xb3, 0xf4,
		0x33, 0x33, 0x7d, 0x0d, 0xad, 0xdc, 0x87, 0xdb, 0xa6, 0xbc, 0xc1, 0x4f, 0x09, 0x0d, 0x7e, 0x32,
		0xe4, 0x39, 0x44, 0x83, 0x1f, 0x34, 0xf8, 0x41, 0x83, 0x9f, 0x59, 0x29, 0x86, 0xf8, 0x48, 0x0c,
		0xd2, 0x2d, 0x36, 0x29, 0x17, 0x9b, 0xb4, 0x8b, 0x45, 0xea, 0xe9, 0xb1, 0x07, 0x50, 0x24, 0x3c,
		0x5f, 0xc4, 0xa0, 0x48, 0x78, 0xe2, 0xc1, 0x51, 0xb9, 0x20, 0xff, 0x3d, 0xa8, 0x5c, 0x48, 0xed,
		0xd1, 0xa3, 0x48, 0x18, 0x6e, 0x27, 0x3d, 0xec, 0x83, 0x06, 0x3f, 0xc0, 0xee, 0xc0, 0xee, 0xc0,
		0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0xc0, 0xee, 0x19,
		0xc1, 0xee, 0x4d, 0xa7, 0x67, 0xfb, 0xc2, 0xd5, 0x58, 0x3c, 0x10, 0x7e, 0x83, 0x1e, 0x68, 0x5d,
		0x04, 0xb4, 0x06, 0xb4, 0x06, 0xb4, 0x4e, 0x23, 0xb4, 0xe6, 0x0e, 0x12, 0xbe, 0x3a, 0x1c, 0x9a,
		0x4d, 0xe1, 0x79, 0xc6, 0xe0, 0x87, 0x8e, 0x86, 0x64, 0xb3, 0xde, 0x87, 0xe9, 0xef, 0xdb, 0xce,
		0xe4, 0x34, 0x47, 0x5d, 0x82, 0x2d, 0x0e, 0x01, 0x17, 0x9f, 0xa0, 0x8b, 0x4b, 0xe0, 0xc5, 0x2e,
		0xf8, 0x62, 0x17, 0x80, 0xb1, 0x0a, 0x42, 0xcd, 0xd0, 0x52, 0x13, 0xc7, 0x68, 0xf3, 0x3d, 0x2c,
		0x02, 0x61, 0xd5, 0x72, 0x0c, 0xb9, 0xf4, 0x3a, 0x53, 0xe9, 0xf5, 0x7a, 0x24, 0xf4, 0x7b, 0x26,
		0x62, 0xf5, 0x50, 0xc4, 0x6c, 0xae, 0xc6, 0xed, 0xb1, 0x48, 0xc2, 0x74, 0x8d, 0xc1, 0x83, 0x11,
		0xab, 0x27, 0x23, 0xe9, 0x2b, 0x52, 0x7c, 0x5f, 0x2e, 0x57, 0x0f, 0xca, 0xe5, 0xbd, 0x83, 0xfd,
		0x83, 0xbd, 0xc3, 0x4a, 0xa5, 0x58, 0x2d, 0x56, 0xd6, 0xf8, 0xd6, 0xbc, 0xcb, 0xe6, 0xee, 0x59,
		0xc9, 0xf1, 0xd7, 0x31, 0xc0, 0x7d, 0x84, 0xfd, 0x5d, 0xf1, 0xff, 0x89, 0x66, 0x8c, 0xb6, 0xc6,
		0xf8, 0xfb, 0x60, 0x6b, 0xc0, 0xd6, 0x80, 0xad, 0x01, 0x5b, 0x03, 0xb6, 0x06, 0x6c, 0x0d, 0xd8,
		0x1a, 0xb0, 0x35, 0x60, 0x6b, 0xc0, 0xd6, 0x80, 0xad, 0xb1, 0xa6, 0xb6, 0x86, 0x2b, 0x7c, 0xd7,
		0x12, 0x2d, 0x23, 0xb4, 0x01, 0xfe, 0xd7, 0x13, 0x5e, 0x1c, 0x46, 0xc7, 0xa2, 0x2f, 0x86, 0xf5,
		0x01, 0xeb, 0x03, 0xd6, 0x07, 0xac, 0x0f, 0x58, 0x1f, 0xb0, 0x3e, 0x60, 0x7d, 0xc0, 0xfa, 0x80,
		0xf5, 0x01, 0xeb, 0x03, 0xd6, 0xc7, 0x9a, 0x5a, 0x1f, 0xbe, 0xd5, 0x11, 0x4e, 0xcf, 0x8f, 0xdf,
		0xfa, 0x58, 0xf4, 0xc5, 0xb0, 0x3e, 0x60, 0x7d, 0xc0, 0xfa, 0x80, 0xf5, 0x01, 0xeb, 0x03, 0xd6,
		0x07, 0xac, 0x0f, 0x58, 0x1f, 0xb0, 0x3e, 0x60, 0x7d, 0xc0, 0xfa, 0x48, 0x83, 0xf5, 0x91, 0xea,
		0xb2, 0x13, 0x4d, 0x3d, 0x4c, 0xc3, 0xfd, 0xb5, 0xf6, 0x32, 0x0d, 0xfa, 0x5e, 0xee, 0x6a, 0xaa,
		0x99, 0xcb, 0x69, 0xed, 0x6d, 0x7a, 0x31, 0x78, 0xf4, 0x9b, 0x4f, 0xe3, 0x47, 0xdf, 0x80, 0xe2,
		0x49, 0x57, 0xf8, 0xae, 0x69, 0x7b, 0x1d, 0xcb, 0x37, 0x4c, 0xdf, 0x17, 0x1d, 0x1d, 0xc5, 0x48,
		0x53, 0x31, 0xba, 0xb7, 0x5f, 0x86, 0x6e, 0x25, 0x28, 0xa9, 0x4c, 0xdc, 0xe2, 0x45, 0x49, 0x65,
		0x7c, 0xba, 0x4d, 0x7f, 0xb7, 0x92, 0x9e, 0x65, 0xfb, 0xef, 0x35, 0xf6, 0x29, 0xa9, 0xa0, 0x4f,
		0x49, 0xbc, 0xd6, 0x29, 0xfa, 0x94, 0xa4, 0xd1, 0xfa, 0x5c, 0xcb, 0x3e, 0x25, 0xa5, 0x0a, 0xba,
		0x94, 0xc4, 0xbe, 0x6b, 0x63, 0xa3, 0x66, 0x61, 0xc7, 0x31, 0x04, 0x1b, 0xb0, 0x1a, 0xb0, 0x1a,
		0xb0, 0x1a, 0xb0, 0x9a, 0xd5, 0x7a, 0x77, 0x7a, 0xbe, 0x65, 0xdf, 0x87, 0xf3, 0xaf, 0x31, 0xfa,
		0x9a, 0x4b, 0x23, 0x18, 0x0f, 0xa6, 0xf7, 0x20, 0x5a, 0x71, 0x28, 0x86, 0xf1, 0x57, 0x41, 0x3f,
		0x40, 0x3f, 0x40, 0x3f, 0x40, 0x3f, 0x30, 0xde, 0xf7, 0xa6, 0xfb, 0xd4, 0xf5, 0x43, 0xed, 0x60,
		0xf8, 0x83, 0x2f, 0x84, 0x8a, 0x50, 0x53, 0x11, 0x01, 0xa3, 0x87, 0x43, 0x64, 0xf5, 0xe9, 0x87,
		0xe9, 0xef, 0x81, 0x72, 0x80, 0x72, 0x80, 0x72, 0x80, 0x72, 0x60, 0xbc, 0xef, 0x56, 0x57, 0xe3,
		0x28, 0xec, 0x50, 0x27, 0x1c, 0x6a, 0xd8, 0x7b, 0x44, 0x9b, 0xab, 0x0c, 0x8f, 0x21, 0x2f, 0x63,
		0x0c, 0xb9, 0xe4, 0x17, 0xc5, 0x35, 0x8f, 0x1f, 0x43, 0xb7, 0x57, 0x7f, 0xdb, 0x68, 0xe8, 0x76,
		0x0c, 0xa7, 0x91, 0xc1, 0x21, 0xd3, 0xdb, 0x19, 0x16, 0x4b, 0x55, 0x88, 0x25, 0x59, 0xb1, 0x84,
		0xf1, 0xf3, 0x09, 0x8d, 0x9f, 0x87, 0xa0, 0x8e, 0x2c, 0xa8, 0x71, 0x3d, 0xe3, 0xbf, 0x9e, 0xd9,
		0x53, 0x5c, 0x9b, 0x13, 0x44, 0x4e, 0xd5, 0xd4, 0x6b, 0x4d, 0x99, 0xc5, 0x31, 0x64, 0x14, 0x73,
		0xce, 0x7f, 0xd7, 0x9b, 0x40, 0xcc, 0xc3, 0x8b, 0xea, 0xf7, 0x46, 0x6d, 0x07, 0xc5, 0x1b, 0xc7,
		0x7d, 0xd3, 0xb4, 0xde, 0x30, 0x86, 0xbb, 0xa5, 0xed, 0x4e, 0xa9, 0xdd, 0x26, 0xfa, 0x1d, 0x50,
		0x38, 0xff, 0xfc, 0x90, 0x61, 0x55, 0x8f, 0xfd, 0xd5, 0x3d, 0xcd, 0xc0, 0xff, 0x4c, 0xc3, 0x76,
		0x5e, 0xbd, 0xce, 0x25, 0xc5, 0x8d, 0x18, 0xbd, 0xcc, 0xfc, 0x5e, 0x65, 0x6e, 0x2f, 0xb2, 0x36,
		0xaf, 0xb1, 0x36, 0x2f, 0xb1, 0x16, 0xaf, 0x70, 0xb2, 0x12, 0x99, 0x6b, 0x98, 0x4d, 0x9e, 0x3b,
		0x1e, 0xf5, 0xda, 0x39, 0x9a, 0xd5, 0x1f, 0xc0, 0x1c, 0x78, 0x62, 0x0f, 0x38, 0xe9, 0x08, 0x34,
		0xe9, 0x0b, 0x30, 0xe9, 0x0a, 0x2c, 0x69, 0x0f, 0x28, 0x69, 0x0f, 0x24, 0x69, 0x0d, 0x20, 0xa5,
		0xcb, 0x7c, 0x60, 0x0f, 0x14, 0xe9, 0x0d, 0x10, 0xe9, 0x08, 0x0c, 0xe9, 0x09, 0x08, 0x69, 0x0d,
		0xbd, 0x69, 0x0d, 0x00, 0xe9, 0xf4, 0xb0, 0x6a, 0xf7, 0xac, 0x66, 0x38, 0xd0, 0xd3, 0xd0, 0x41,
		0xee, 0x38, 0xfc, 0x85, 0x19, 0x0f, 0xe8, 0x34, 0xd2, 0x1c, 0xc9, 0xd7, 0x2b, 0x46, 0xaa, 0x10,
		0x23, 0x8b, 0xc4, 0x08, 0x3c, 0xdf, 0x6b, 0x13, 0x98, 0xc9, 0xbc, 0x60, 0xc5, 0x35, 0x5c, 0x8b,
		0x00, 0x4c, 0x5a, 0x03, 0x1a, 0x8d, 0xb4, 0xb8, 0xb7, 0x19, 0xdc, 0x5c, 0x4d, 0xc7, 0xb6, 0x45,
		0x50, 0x8e, 0x69, 0x98, 0xb7, 0x8e, 0xeb, 0x6b, 0xf0, 0x69, 0xcc, 0x7e, 0x05, 0xbc, 0x1b, 0xf0,
		0x6e, 0xc0, 0xbb, 0xb1, 0x51, 0xde, 0x0d, 0x1d, 0x4d, 0x15, 0x35, 0x34, 0x51, 0xd4, 0xd4, 0x86,
		0x42, 0x83, 0x55, 0xa2, 0xb3, 0xed, 0x84, 0xee, 0xf6, 0xba, 0x9a, 0xdb, 0x4c, 0xc4, 0xd1, 0x61,
		0x40, 0x47, 0xf3, 0x66, 0x9d, 0xed, 0x24, 0xe2, 0x3a, 0xd2, 0xf8, 0x9a, 0x14, 0xc6, 0x72, 0xca,
		0x40, 0xa0, 0x71, 0x22, 0xd0, 0x66, 0xdb, 0xf1, 0x84, 0x5e, 0x04, 0x3a, 0xfa, 0x0a, 0x20, 0x50,
		0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50,
		0x20, 0xd0, 0x01, 0x3c, 0xbc, 0x33, 0xad, 0x76, 0xcf, 0xd5, 0x8c, 0x41, 0xc3, 0x2f, 0x01, 0x0a,
		0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a,
		0x05, 0x0a, 0x1d, 0x00, 0x44, 0xa7, 0x2b, 0x6c, 0xbd, 0x10, 0x74, 0xf8, 0x0d, 0xc0, 0x9f, 0xc0,
		0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0,
		0x9f, 0x03, 0x74, 0x38, 0x1a, 0xe6, 0xad, 0x17, 0x82, 0x86, 0x5f, 0x02, 0x14, 0x0a, 0x14, 0x0a,
		0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0xba, 0xc1, 0x28,
		0x54, 0xb8, 0xae, 0xe3, 0x7a, 0x86, 0x2b, 0x9a, 0xc2, 0x7a, 0x64, 0x9c, 0x08, 0x13, 0xaa, 0x9e,
		0xb7, 0x5f, 0x00, 0xf4, 0x09, 0xf4, 0x09, 0xf4, 0x09, 0xf4, 0x09, 0xf4, 0x09, 0xf4, 0x09, 0xf4,
		0x09, 0xf4, 0x09, 0xf4, 0xb9, 0xc1, 0xe8, 0xb3, 0x23, 0x3c, 0xcf, 0xbc, 0x17, 0x3a, 0xf1, 0xe7,
		0xec, 0x57, 0x00, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 0x81,
		0x02, 0x81, 0x02, 0x81, 0x02, 0x81, 0x7a, 0x86, 0x37, 0x54, 0xb1, 0xba, 0xd0, 0x67, 0xb0, 0x3d,
		0x90, 0x27, 0x90, 0x27, 0x90, 0x27, 0x90, 0x27, 0x90, 0x27, 0x90, 0x27, 0x90, 0x27, 0x90, 0x27,
		0x90, 0xe7, 0x06, 0x23, 0xcf, 0xd1, 0xe0, 0x26, 0x66, 0xc0, 0x19, 0xec, 0x0a, 0x9c, 0x09, 0x9c,
		0x09, 0x9c, 0xb9, 0x51, 0x38, 0xd3, 0xf3, 0x5d, 0xcb, 0xbe, 0xd7, 0x31, 0xc9, 0xe4, 0xfd, 0x1a,
		0xc9, 0xdc, 0x51, 0x0e, 0x3c, 0xbf, 0xd8, 0x1d, 0x6f, 0x0c, 0xc9, 0x0b, 0xc9, 0x0b, 0xc9, 0xbb,
		0x51, 0x92, 0xb7, 0x67, 0xd9, 0x7e, 0xb1, 0xaa, 0x41, 0xf2, 0x56, 0x61, 0xde, 0xc3, 0xbc, 0x87,
		0x79, 0x9f, 0x8a, 0x23, 0xad, 0x56, 0x2a, 0xfb, 0xb0, 0xe7, 0xd7, 0xd7, 0x9e, 0xc7, 0xe0, 0xea,
		0x95, 0x83, 0xab, 0xb9, 0x66, 0xa2, 0x6b, 0x98, 0x5b, 0xcd, 0x30, 0x04, 0x3d, 0x99, 0xb1, 0xd5,
		0xbe, 0xd9, 0x34, 0x9b, 0x1e, 0xdf, 0xdc, 0xea, 0xd1, 0x7e, 0x29, 0x1b, 0x5c, 0xbd, 0x87, 0xc1,
		0xd5, 0x29, 0xb0, 0x2a, 0x30, 0xb8, 0x3a, 0xfa, 0x1b, 0xb1, 0x0d, 0xae, 0x6e, 0x8e, 0x79, 0x80,
		0xbf, 0xae, 0x7f, 0xb0, 0x2f, 0xaf, 0xbb, 0xa1, 0x08, 0x77, 0x03, 0xdc, 0x0d, 0x70, 0x37, 0x70,
		0xbc, 0x29, 0x97, 0x00, 0x09, 0x37, 0xec, 0x3a, 0xae, 0xcf, 0x7f, 0xa5, 0xc6, 0x4c, 0x10, 0xec,
		0xce, 0x7c, 0xd8, 0x9f, 0xc5, 0x9d, 0xd9, 0x6b, 0x07, 0x67, 0x5d, 0x3e, 0xe4, 0xde, 0x5c, 0x8f,
		0xd9, 0xc7, 0x2e, 0xb9, 0x74, 0x4a, 0x30, 0xfd, 0x92, 0x4c, 0xb7, 0x44, 0x8b, 0x4d, 0xb2, 0xc5,
		0x26, 0xe1, 0x62, 0x91, 0x74, 0x9a, 0x8c, 0x7a, 0xe6, 0x1b, 0xcf, 0xee, 0x70, 0x9d, 0x2b, 0xb4,
		0x0c, 0xbb, 0xd7, 0xb9, 0x15, 0xae, 0xc6, 0xf1, 0xd0, 0x55, 0x0d, 0x5b, 0xeb, 0xf1, 0xc6, 0x8e,
		0xff, 0xe8, 0x61, 0xd2, 0x9c, 0x6e, 0xef, 0x6c, 0x4c, 0x2e, 0xbd, 0x19, 0xd7, 0x9e, 0xee, 0xef,
		0x89, 0xc1, 0xbd, 0xa7, 0x89, 0x87, 0xa7, 0x8f, 0x5e, 0xa3, 0x17, 0x37, 0xa9, 0xa3, 0xd7, 0xe8,
		0xd5, 0x4d, 0xe4, 0xf8, 0xdf, 0x65, 0x63, 0xd7, 0xb4, 0xce, 0x99, 0x66, 0x64, 0x9f, 0xbc, 0x27,
		0x9a, 0xae, 0xf0, 0x8d, 0xef, 0xe2, 0x49, 0x1f, 0x6a, 0x9f, 0xf8, 0x0e, 0xc0, 0x6b, 0xc0, 0x6b,
		0xc0, 0x6b, 0xc0, 0x6b, 0xc6, 0xfb, 0xee, 0x3a, 0x3d, 0xdf, 0xb2, 0xef, 0x8d, 0xae, 0xe9, 0x79,
		0xc1, 0xf5, 0xd1, 0x87, 0xb1, 0x99, 0x72, 0xcc, 0xb2, 0xa2, 0x11, 0x8c, 0x07, 0xd3, 0x7b, 0x60,
		0xec, 0x75, 0xb0, 0x44, 0x31, 0x8c, 0xbf, 0x0a, 0xfa, 0x01, 0xfa, 0x01, 0xfa, 0x01, 0xfa, 0x81,
		0xf1, 0xbe, 0x37, 0xdd, 0xa7, 0xae, 0x1f, 0x6a, 0x07, 0xc3, 0x1f, 0x7c, 0x21, 0x54, 0x84, 0x9a,
		0x8a, 0x08, 0x18, 0xdd, 0x30, 0x5b, 0x2d, 0x57, 0x78, 0x9e, 0x46, 0xfd, 0x30, 0xfd, 0x3d, 0x50,
		0x0e, 0x50, 0x0e, 0x50, 0x0e, 0x50, 0x0e, 0x8c, 0xf7, 0xdd, 0xea, 0x6a, 0x92, 0x2e, 0x53, 0x3a,
		0xe1, 0x50, 0xc3, 0xde, 0x23, 0xda, 0x64, 0xce, 0x35, 0xff, 0x4a, 0xf9, 0xc7, 0xb2, 0x46, 0xda,
		0xcf, 0xea, 0x65, 0x8d, 0xdf, 0x71, 0x66, 0xfa, 0xbe, 0x70, 0x6d, 0x6d, 0xc7, 0x11, 0x7e, 0xd1,
		0xd6, 0xd5, 0x9e, 0x71, 0xd8, 0x78, 0xb9, 0x2a, 0x1a, 0x87, 0x8d, 0xe1, 0xff, 0x16, 0x83, 0x1f,
		0xcf, 0xa5, 0xfe, 0x4b, 0xe9, 0x6a, 0xcf, 0x28, 0x8f, 0x7e, 0x5b, 0xaa, 0x5c, 0xed, 0x19, 0x95,
		0x46, 0x61, 0xeb, 0xfa, 0x7a, 0x47, 0x76, 0x4d, 0xe1, 0x79, 0xbf, 0x9f, 0xd7, 0xf6, 0x1a, 0x0d,
		0x9d, 0xc7, 0x70, 0x7a, 0x71, 0xf4, 0x5b, 0x6c, 0x67, 0xf1, 0xe7, 0x56, 0x5c, 0xa7, 0x51, 0xf8,
		0x87, 0xc6, 0xf3, 0xd0, 0xe3, 0x8b, 0xdf, 0xce, 0xb0, 0x58, 0xaa, 0x42, 0x2c, 0xc9, 0x8a, 0xa5,
		0xe0, 0x56, 0x9b, 0xc6, 0x5d, 0xcd, 0xf8, 0xd2, 0x78, 0x2e, 0x6e, 0x97, 0xfb, 0x1f, 0x0a, 0xcf,
		0x07, 0xfd, 0xb7, 0xbf, 0x7c, 0x99, 0xf7, 0xb1, 0xe2, 0xf6, 0x41, 0xff, 0xc3, 0x82, 0x7f, 0xa9,
		0xf6, 0x3f, 0x44, 0xdc, 0xa3, 0xd2, 0xdf, 0x9a, 0xf9, 0xe8, 0xe0, 0xf7, 0xa5, 0x45, 0x0b, 0xca,
		0x0b, 0x16, 0xec, 0x2f, 0x5a, 0xb0, 0xbf, 0x60, 0xc1, 0xc2, 0x47, 0x2a, 0x2d, 0x58, 0x50, 0xe9,
		0xbf, 0xcc, 0x7c, 0x7e, 0x6b, 0xfe, 0x47, 0xab, 0xfd, 0xc2, 0xcb, 0xa2, 0x7f, 0x3b, 0xe8, 0xbf,
		0x7c, 0x28, 0x14, 0x20, 0xa8, 0x23, 0x0b, 0x6a, 0x5c, 0xcf, 0xf8, 0xaf, 0x67, 0xf6, 0x14, 0xd7,
		0xe6, 0x04, 0x91, 0x53, 0x95, 0x87, 0xca, 0x5c, 0x5a, 0xf4, 0xea, 0xa9, 0xd2, 0x52, 0x62, 0x34,
		0x2c, 0x5f, 0xd9, 0x65, 0x4d, 0x6e, 0xcf, 0xe9, 0x29, 0x39, 0xba, 0x0c, 0x1e, 0xf5, 0x66, 0xe4,
		0x94, 0x5a, 0xa3, 0x16, 0x09, 0xc3, 0x32, 0x2f, 0xf6, 0x82, 0x05, 0xae, 0xea, 0xb1, 0x9c, 0xce,
		0x7a, 0x85, 0x12, 0xea, 0x15, 0x32, 0xe4, 0x39, 0x44, 0xbd, 0x02, 0xea, 0x15, 0x18, 0xf7, 0x46,
		0xbd, 0x82, 0x5e, 0x09, 0xa6, 0x5f, 0x92, 0xe9, 0x96, 0x68, 0xb1, 0x49, 0xb6, 0xd8, 0x24, 0x5c,
		0x2c, 0x92, 0x4e, 0x8f, 0x0d, 0x80, 0x7a, 0x85, 0xf9, 0x22, 0x06, 0xf5, 0x0a, 0x13, 0x0f, 0x8e,
		0x7a, 0x05, 0xf9, 0xef, 0x41, 0xbd, 0x42, 0x6a, 0x8f, 0x1e, 0xf5, 0x0a, 0x70, 0x35, 0xe9, 0x61,
		0x1f, 0xd4, 0x2b, 0x00, 0x5e, 0x03, 0x5e, 0x03, 0x5e, 0x67, 0x18, 0x5e, 0xa3, 0x5e, 0x01, 0xf5,
		0x0a, 0xd0, 0x0f, 0xd0, 0x0f, 0xd0, 0x0f, 0xd0, 0x0f, 0xf3, 0xee, 0x3b, 0xea, 0x15, 0xf8, 0x55,
		0x04, 0xea, 0x15, 0xa0, 0x1c, 0xa0, 0x1c, 0xa0, 0x1c, 0x32, 0xaf, 0x1c, 0x50, 0xaf, 0x30, 0xf7,
		0x0f, 0xea, 0x15, 0xe4, 0x24, 0x33, 0xea, 0x15, 0xa2, 0xfe, 0x41, 0xbd, 0x02, 0xea, 0x15, 0x52,
		0x2e, 0x96, 0x50, 0xaf, 0x20, 0x2d, 0x96, 0x90, 0x10, 0x8e, 0x7a, 0x85, 0xb4, 0x0b, 0x6a, 0x5c,
		0x4f, 0xd4, 0x2b, 0xc4, 0x6c, 0x0f, 0xe5, 0x50, 0xaf, 0x10, 0xd5, 0xd6, 0xcd, 0x62, 0xbd, 0x02,
		0x67, 0x6e, 0x7b, 0x4e, 0x6b, 0xb9, 0x02, 0xc3, 0xa0, 0x14, 0xbe, 0x7b, 0x83, 0xa1, 0x3b, 0x51,
		0x6f, 0x58, 0x3a, 0xa7, 0xee, 0x0c, 0xef, 0x54, 0x62, 0x63, 0x77, 0xde, 0xc5, 0x78, 0x6b, 0xf2,
		0xff, 0x0e, 0xf2, 0x62, 0xf2, 0x6a, 0x06, 0x41, 0xfe, 0xd8, 0xf2, 0xfc, 0x9a, 0xef, 0xab, 0xa5,
		0xda, 0xe7, 0xbf, 0x5a, 0x76, 0xbd, 0x2d, 0x3a, 0xc2, 0x1e, 0xa6, 0x67, 0x29, 0x8c, 0x1f, 0xfa,
		0x6a, 0xfe, 0x98, 0xd8, 0x89, 0x77, 0x84, 0x79, 0xfe, 0xd4, 0x6d, 0x09, 0x57, 0xb4, 0x3e, 0x0e,
		0x08, 0x67, 0xf7, 0xda, 0xed, 0x58, 0xcf, 0x8b, 0x89, 0xbb, 0xf5, 0x70, 0xb5, 0x02, 0x3b, 0xf3,
		0xb3, 0x31, 0x8d, 0x7f, 0xe5, 0xb9, 0x4f, 0x6e, 0x85, 0xe4, 0xb9, 0xab, 0x9e, 0x37, 0xf3, 0x39,
		0x13, 0x0e, 0x98, 0xf1, 0x60, 0xe5, 0x4e, 0x34, 0xfa, 0xb9, 0x48, 0x9c, 0x09, 0xb1, 0x8a, 0x50,
		0xa9, 0x5a, 0x90, 0x58, 0x15, 0x48, 0xae, 0xfe, 0x53, 0x89, 0xc3, 0xa9, 0xc7, 0xd9, 0x54, 0xe3,
		0x68, 0x6c, 0x71, 0x32, 0xb6, 0x38, 0x18, 0x4b, 0x9c, 0x4b, 0xaf, 0x94, 0xa1, 0x56, 0xc9, 0xe5,
		0x47, 0x6c, 0x4d, 0x3c, 0xaa, 0xf1, 0x65, 0x09, 0x76, 0xa1, 0x02, 0x18, 0xa5, 0x20, 0xb7, 0x72,
		0x30, 0x9b, 0x23, 0x68, 0xcd, 0x17, 0x9c, 0xe6, 0x0a, 0x42, 0xb3, 0x07, 0x9b, 0xd9, 0x83, 0xca,
		0xac, 0xc1, 0xe3, 0x78, 0x21, 0xb7, 0x72, 0xd0, 0x77, 0x42, 0x9b, 0xb8, 0x96, 0xad, 0xd2, 0x4f,
		0x40, 0x31, 0xa9, 0x87, 0x00, 0x96, 0x08, 0x0a, 0xc1, 0x57, 0xa1, 0xd7, 0xeb, 0x04, 0x51, 0x7a,
		0x5a, 0x14, 0x64, 0x0c, 0x64, 0xcc, 0xc6, 0xca, 0x18, 0xab, 0x25, 0x6c, 0xdf, 0xf2, 0x9f, 0x5c,
		0x71, 0xc7, 0x21, 0x68, 0x54, 0x0c, 0xef, 0xa3, 0xd1, 0xa3, 0x7c, 0x34, 0x3d, 0xc1, 0x37, 0x5a,
		0xb8, 0x56, 0xab, 0xdd, 0x5c, 0xd4, 0xcf, 0x7f, 0xad, 0x9f, 0xdf, 0x5c, 0xfe, 0x7e, 0x56, 0x57,
		0xbd, 0x84, 0x41, 0x49, 0x9b, 0xc7, 0x12, 0xf4, 0x61, 0xee, 0x54, 0x72, 0x59, 0xfb, 0x54, 0xfb,
		0x74, 0x91, 0x4f, 0x43, 0x33, 0x16, 0xe6, 0x37, 0x3b, 0xaf, 0x7d, 0x3e, 0xfa, 0x76, 0x91, 0xf4,
		0x6c, 0xde, 0x46, 0xdc, 0xb2, 0x01, 0xae, 0x8a, 0xb9, 0xae, 0x0a, 0x62, 0xd0, 0x82, 0xc5, 0x51,
		0x21, 0x1f, 0x86, 0x90, 0x70, 0x53, 0xbc, 0x63, 0x3c, 0xb5, 0xb1, 0xe3, 0x57, 0xc2, 0xf4, 0xa2,
		0x79, 0x79, 0xe9, 0x5e, 0x5d, 0x56, 0x2f, 0x2e, 0xcd, 0x6b, 0x1b, 0x95, 0x98, 0xc4, 0xab, 0xcf,
		0x74, 0xe5, 0xf3, 0x52, 0xfe, 0x2b, 0xd5, 0x4b, 0x1e, 0xed, 0x7a, 0xaf, 0xbe, 0xac, 0xcb, 0x3f,
		0xb1, 0x82, 0xf2, 0xb2, 0x14, 0xa7, 0x53, 0x3a, 0x02, 0x71, 0x89, 0x44, 0x5d, 0x4e, 0xc8, 0xc5,
		0xe4, 0x59, 0x42, 0x9a, 0x88, 0xee, 0x49, 0x29, 0x77, 0x64, 0x44, 0xf7, 0x63, 0x64, 0x77, 0xa3,
		0x8c, 0x35, 0x23, 0x6f, 0xb5, 0xc8, 0x5a, 0x27, 0x64, 0x2b, 0x84, 0x6c, 0x6d, 0x90, 0xac, 0x8a,
		0x14, 0x33, 0x4b, 0x44, 0x75, 0x2b, 0xc3, 0x24, 0xab, 0xb5, 0xe8, 0x12, 0xee, 0x78, 0x27, 0x41,
		0xa1, 0xa8, 0x94, 0x91, 0xa1, 0x48, 0x7e, 0x29, 0x7b, 0x46, 0xa4, 0xc1, 0xfc, 0xb7, 0x9f, 0x7d,
		0xb7, 0x39, 0xef, 0x95, 0x37, 0xdb, 0xa6, 0xdb, 0x59, 0x5c, 0xb4, 0x14, 0xf2, 0xd4, 0xe8, 0x73,
		0x0b, 0x28, 0xb3, 0x9c, 0xeb, 0x57, 0x72, 0x7b, 0x14, 0x2e, 0x9f, 0xe2, 0xee, 0x65, 0x0f, 0x23,
		0xc3, 0xd8, 0xd2, 0x0c, 0x2d, 0xcd, 0xc8, 0x33, 0x0c, 0x3c, 0x7c, 0x74, 0xa6, 0x1b, 0xb9, 0xca,
		0x15, 0x3f, 0x3c, 0xb6, 0xe8, 0x22, 0x7e, 0xf8, 0x71, 0x66, 0x11, 0xbf, 0xa7, 0x49, 0xc4, 0xaf,
		0xba, 0x04, 0x19, 0x96, 0xf2, 0x2b, 0x2e, 0x09, 0x8f, 0xa0, 0x8f, 0x1a, 0xc7, 0xc9, 0x37, 0xc7,
		0x27, 0x19, 0x91, 0x7e, 0x61, 0xad, 0xa9, 0x4c, 0x07, 0x5b, 0xc9, 0xc0, 0xa5, 0xb4, 0x9f, 0x94,
		0xe2, 0x17, 0x25, 0x5d, 0x37, 0x55, 0xd7, 0xa7, 0xb2, 0xab, 0x53, 0xd9, 0xb5, 0x49, 0xbd, 0x8e,
		0x7a, 0x6c, 0x4f, 0xed, 0xe6, 0x52, 0xf0, 0x76, 0xc3, 0x1f, 0xf2, 0x4d, 0x97, 0xa3, 0x6a, 0xe9,
		0xe0, 0x4b, 0x86, 0x3f, 0xa4, 0xda, 0x25, 0x47, 0x30, 0x8d, 0x22, 0x48, 0x40, 0xab, 0x25, 0xcf,
		0xbd, 0x56, 0x4b, 0x92, 0x73, 0xf7, 0xc0, 0xb9, 0xe0, 0x5c, 0xa5, 0xb8, 0x42, 0x78, 0x6a, 0x6d,
		0x61, 0xde, 0xc9, 0xc5, 0x10, 0x42, 0xf5, 0x71, 0x20, 0xb1, 0xe6, 0x6c, 0x24, 0x1c, 0x76, 0x76,
		0x86, 0x96, 0xc9, 0xae, 0xd5, 0x8a, 0x93, 0x2b, 0xe5, 0xd2, 0x83, 0x48, 0x69, 0x41, 0x64, 0xad,
		0x5a, 0x02, 0x6f, 0xae, 0x35, 0x6f, 0xca, 0x26, 0xf1, 0xc8, 0xa8, 0x10, 0xba, 0x2a, 0x21, 0xaa,
		0x14, 0xb2, 0x6a, 0x51, 0xb9, 0xc6, 0x2c, 0xd7, 0x59, 0xf5, 0x5a, 0xb3, 0x5d, 0x6f, 0xb6, 0x6b,
		0xce, 0x75, 0xdd, 0xe5, 0x43, 0x1e, 0x39, 0x42, 0x18, 0x8a, 0x1c, 0xfa, 0x56, 0x4f, 0xab, 0x21,
		0xa6, 0xd3, 0xe8, 0xc9, 0x54, 0x75, 0x85, 0x47, 0x94, 0xab, 0x61, 0xe3, 0xb9, 0xf1, 0x0e, 0xe0,
		0x74, 0x70, 0x3a, 0x38, 0x9d, 0x83, 0xd3, 0x25, 0xdf, 0x50, 0xfc, 0xf0, 0x5d, 0xd3, 0xe8, 0xd9,
		0x9e, 0x6f, 0xde, 0xb6, 0x89, 0xef, 0xea, 0x8a, 0x3b, 0xe1, 0x0a, 0xbb, 0x49, 0x6f, 0xa6, 0xc2,
		0x90, 0x45, 0x74, 0x54, 0xbf, 0xfc, 0x92, 0xfb, 0xbd, 0x76, 0xf2, 0x73, 0x2e, 0xb0, 0x97, 0x73,
		0x5f, 0x9d, 0x56, 0xaf, 0x2d, 0x3e, 0xe4, 0x3e, 0xbb, 0xe6, 0x9d, 0x9f, 0x33, 0x72, 0xfe, 0x53,
		0x57, 0xb4, 0xc4, 0x5d, 0x6e, 0x2c, 0x72, 0xae, 0xed, 0x07, 0xdf, 0xef, 0x7a, 0x1f, 0x76, 0x77,
		0x7d, 0xc7, 0x69, 0x7b, 0x3b, 0x96, 0xf0, 0xef, 0x76, 0x1c, 0xf7, 0x7e, 0xf7, 0xc1, 0xef, 0xb4,
		0x77, 0x5b, 0x83, 0x55, 0xc6, 0xa3, 0xd9, 0x6e, 0x5b, 0xb6, 0x61, 0x0b, 0xbf, 0xe3, 0xb4, 0x86,
		0x57, 0xd4, 0xe8, 0x04, 0xfb, 0x1a, 0x7b, 0xa5, 0x94, 0x25, 0xb8, 0xbd, 0x1e, 0x42, 0x9a, 0x73,
		0xdc, 0xe2, 0x3f, 0xa5, 0xd4, 0xa7, 0xcc, 0x34, 0xd2, 0x50, 0x73, 0x22, 0x1e, 0x85, 0x6b, 0xf9,
		0x4f, 0x0a, 0x65, 0x27, 0xe3, 0x1d, 0xa0, 0xc9, 0xa1, 0xc9, 0xd7, 0x52, 0x93, 0xab, 0xa5, 0xa9,
		0xaa, 0xa4, 0xa7, 0xf2, 0xa4, 0xa5, 0x86, 0x2f, 0x72, 0x7a, 0x56, 0x3f, 0xf9, 0x74, 0x7a, 0xf2,
		0xe5, 0xe8, 0xe7, 0x9b, 0xda, 0x71, 0xed, 0xfc, 0xeb, 0xcd, 0x45, 0xfd, 0xd7, 0xfa, 0xf9, 0xd1,
		0xe5, 0xef, 0xd4, 0x9b, 0xc4, 0x90, 0x90, 0xca, 0x94, 0x69, 0xfb, 0xb5, 0xf6, 0xff, 0x4e, 0xcf,
		0x15, 0x44, 0xfe, 0x76, 0xd2, 0x2f, 0xf0, 0xed, 0xe4, 0xdf, 0x27, 0xa7, 0xff, 0x3d, 0xc9, 0xf2,
		0x2b, 0xfc, 0xb7, 0x76, 0x7e, 0x72, 0x74, 0xf2, 0x73, 0x96, 0x5f, 0xe1, 0xd3, 0xf9, 0xd1, 0xe5,
		0xd1, 0xa7, 0xda, 0x71, 0x96, 0xdf, 0xe1, 0xeb, 0xd1, 0x89, 0x12, 0x2b, 0x90, 0x56, 0x36, 0x52,
		0x26, 0xf5, 0x37, 0xce, 0xba, 0x19, 0xc3, 0x30, 0x58, 0x37, 0x69, 0xb6, 0x6e, 0xf8, 0x4e, 0x09,
		0xd6, 0x4d, 0x84, 0x23, 0xf2, 0xc5, 0x0f, 0x9f, 0x6e, 0xd9, 0x04, 0xab, 0x61, 0xd5, 0xc0, 0xaa,
		0x81, 0x7f, 0x12, 0xfe, 0x49, 0xfd, 0x1a, 0x7c, 0x28, 0xe1, 0x07, 0x42, 0x07, 0x3a, 0x3c, 0xcd,
		0x3a, 0x9c, 0xf3, 0x9c, 0xa0, 0xc5, 0xa3, 0x68, 0x71, 0xab, 0x23, 0x8c, 0xa6, 0x2b, 0x4c, 0x5f,
		0x28, 0x64, 0x15, 0x4c, 0xed, 0x02, 0xad, 0x0e, 0xad, 0xbe, 0x96, 0x5a, 0x7d, 0x70, 0xcb, 0x7d,
		0xab, 0xf9, 0xdd, 0xab, 0x96, 0x15, 0x54, 0x3b, 0xa1, 0xb1, 0x76, 0xfe, 0x9b, 0x3d, 0x1c, 0x7d,
		0x9a, 0xb7, 0x4d, 0xdb, 0xf1, 0x44, 0xd3, 0xb1, 0x5b, 0xa4, 0xab, 0xa7, 0x36, 0x37, 0x59, 0xad,
		0x45, 0x20, 0x83, 0xd6, 0x63, 0x99, 0x8b, 0xc3, 0x35, 0xb7, 0x98, 0x73, 0x30, 0x6d, 0x5f, 0xad,
		0x67, 0x62, 0xea, 0x48, 0xcb, 0xdb, 0xb9, 0x91, 0x9d, 0xda, 0x9b, 0xa4, 0xdf, 0x9f, 0xba, 0xc2,
		0x50, 0x49, 0x18, 0x1c, 0x6f, 0x00, 0xad, 0x0e, 0xad, 0xbe, 0x96, 0x5a, 0xbd, 0x67, 0x5b, 0x8e,
		0xad, 0x62, 0xaa, 0x13, 0x86, 0x28, 0xa9, 0x0d, 0x49, 0x5a, 0x87, 0x0e, 0x64, 0xdb, 0x49, 0xbd,
		0xf9, 0xda, 0xf7, 0x45, 0x9a, 0x09, 0x44, 0x5f, 0xfe, 0x7e, 0x56, 0xbf, 0x39, 0xfa, 0xbc, 0xbe,
		0x0d, 0x92, 0x4e, 0x2f, 0xd7, 0xb2, 0x3b, 0x52, 0xed, 0x68, 0x2d, 0x5f, 0xeb, 0xf8, 0x74, 0x2d,
		0x5f, 0xab, 0xfe, 0x9f, 0xb3, 0x4b, 0x74, 0xb2, 0x62, 0x86, 0xc4, 0x70, 0x6b, 0x47, 0x72, 0x97,
		0x0e, 0x21, 0x3a, 0x3c, 0xdb, 0x9a, 0x11, 0xf1, 0x5c, 0x64, 0x9c, 0xd0, 0x51, 0x6d, 0xae, 0xf1,
		0x9b, 0xdd, 0x8a, 0x76, 0xd9, 0x0e, 0x77, 0x94, 0x82, 0x76, 0x89, 0x4e, 0x76, 0xba, 0x5b, 0x7d,
		0x8d, 0x3a, 0xd5, 0xad, 0xf4, 0x1d, 0xc8, 0xf5, 0xa7, 0x93, 0xef, 0x4b, 0xc7, 0xd2, 0x8f, 0x4e,
		0xae, 0x0f, 0x5d, 0x62, 0x8d, 0x9d, 0x26, 0xae, 0x1b, 0x63, 0x6f, 0xa7, 0x89, 0x0b, 0x96, 0xd1,
		0xf6, 0x4e, 0x2b, 0xbb, 0x14, 0xc9, 0x50, 0x42, 0xa5, 0xc9, 0x53, 0xb3, 0xed, 0x34, 0xbf, 0xaf,
		0xee, 0xf1, 0x34, 0xfc, 0x98, 0x62, 0x8b, 0xa7, 0x3d, 0x9e, 0x16, 0x4f, 0xde, 0x53, 0x36, 0xfb,
		0x3b, 0x0d, 0x9e, 0x3b, 0xae, 0xe6, 0x4e, 0x11, 0xfb, 0xf2, 0xc8, 0xf5, 0xe3, 0x49, 0x4b, 0x7b,
		0xa7, 0xe5, 0x17, 0x80, 0x0a, 0x01, 0x93, 0xef, 0xed, 0xb4, 0xf4, 0x82, 0xf0, 0xe8, 0xc0, 0xc8,
		0x8d, 0x9d, 0x7c, 0xab, 0x23, 0xfe, 0x76, 0x6c, 0x61, 0x48, 0x4d, 0xe6, 0x98, 0x0a, 0x4d, 0xbe,
		0x2e, 0x5f, 0x8f, 0x66, 0x31, 0xd1, 0xae, 0x9d, 0xaa, 0x05, 0x92, 0xbe, 0x6e, 0x14, 0x91, 0xae,
		0xa5, 0x1e, 0x38, 0x4c, 0x6f, 0x13, 0x33, 0x75, 0x01, 0x0d, 0xc9, 0xa1, 0x0d, 0x92, 0xce, 0xe4,
		0xa8, 0x6f, 0xa3, 0xe0, 0x0e, 0x50, 0x70, 0x03, 0x28, 0x84, 0x22, 0x8e, 0x6a, 0x27, 0xb5, 0xdc,
		0xa5, 0xd5, 0x11, 0xb9, 0x3f, 0x1c, 0x5b, 0xe4, 0x3e, 0x9b, 0xbe, 0x79, 0x6b, 0x7a, 0xa3, 0x72,
		0xcd, 0x0f, 0xbb, 0xbb, 0x7f, 0xfd, 0xf5, 0xd7, 0x8e, 0x65, 0xda, 0x66, 0x60, 0x2a, 0x06, 0x39,
		0x37, 0x03, 0x92, 0x27, 0x1d, 0xae, 0x52, 0xb5, 0xd3, 0xf5, 0x44, 0xac, 0xa8, 0xb4, 0xd4, 0x1d,
		0xdf, 0x7a, 0xc7, 0x6b, 0x40, 0x67, 0xb5, 0x5f, 0x73, 0x00, 0x70, 0xa3, 0xf7, 0x78, 0x8b, 0x88,
		0xcf, 0x3f, 0x0d, 0x76, 0x8d, 0xd4, 0xd4, 0x0d, 0x6d, 0x9a, 0x01, 0xf2, 0x00, 0xf2, 0x00, 0xf2,
		0x00, 0xf2, 0x00, 0xf2, 0x00, 0xf2, 0x00, 0xf2, 0x00, 0xf2, 0xb4, 0x81, 0x3c, 0xe6, 0x49, 0x03,
		0x43, 0x8c, 0x97, 0xe1, 0x59, 0x03, 0xcb, 0x7c, 0xbb, 0xb2, 0x74, 0x50, 0x72, 0x45, 0x2f, 0xf7,
		0x59, 0x46, 0xf3, 0x55, 0xc2, 0x19, 0x9d, 0x3e, 0x67, 0x74, 0xcb, 0xe9, 0x98, 0x96, 0x1d, 0x0d,
		0x64, 0x86, 0xb4, 0x9d, 0x5c, 0x14, 0xcd, 0x62, 0xd9, 0x83, 0x5b, 0x3a, 0xab, 0x16, 0x4b, 0x64,
		0x08, 0x48, 0xb8, 0x1e, 0xd3, 0x58, 0x2f, 0xc2, 0x67, 0x8f, 0x85, 0x7d, 0x1f, 0xc8, 0xcc, 0x68,
		0x10, 0x4c, 0x6e, 0x84, 0x19, 0xc1, 0x54, 0xa0, 0x65, 0xae, 0x87, 0xa5, 0x0f, 0x92, 0xeb, 0x14,
		0xea, 0x1a, 0xfa, 0x72, 0x33, 0xd9, 0x62, 0x27, 0x45, 0xa9, 0xb2, 0x1f, 0x23, 0x31, 0x98, 0x90,
		0x54, 0x23, 0xc2, 0x8d, 0x3d, 0x33, 0x7d, 0x5f, 0xb8, 0x76, 0xe4, 0x2b, 0x9b, 0xdf, 0xda, 0xda,
		0xda, 0xba, 0x32, 0x8d, 0xbf, 0x6b, 0xc6, 0x1f, 0x7b, 0xc6, 0xe1, 0x4d, 0x63, 0xe2, 0x2f, 0xd7,
		0xd7, 0xc6, 0x4d, 0xa3, 0xf0, 0xbc, 0xb7, 0x5d, 0x2d, 0xf6, 0x0b, 0x3f, 0xbd, 0xfe, 0xbe, 0x71,
		0x7d, 0xbd, 0x53, 0xf8, 0x17, 0x65, 0xd5, 0x4f, 0x85, 0x97, 0xc1, 0xda, 0x3c, 0xcf, 0xab, 0x9e,
		0x5e, 0x1c, 0xfd, 0x26, 0xfd, 0xbe, 0x7f, 0x26, 0xf1, 0xc2, 0xff, 0x88, 0xf0, 0xc6, 0x1a, 0x7c,
		0x82, 0x6d, 0xe7, 0xde, 0xb2, 0x8d, 0x5b, 0xd3, 0xb6, 0x85, 0x1b, 0x5d, 0xdd, 0x4e, 0xad, 0x82,
		0xbe, 0x85, 0xbe, 0x9d, 0x71, 0x1d, 0x47, 0x2c, 0xd0, 0x88, 0xe8, 0x56, 0xa1, 0xdd, 0xed, 0x8e,
		0xe3, 0xb7, 0xa4, 0xaf, 0xf6, 0xe4, 0x22, 0xdc, 0x6c, 0xdc, 0xec, 0xe4, 0x6e, 0x76, 0xb2, 0x66,
		0xfe, 0xaa, 0xd8, 0x56, 0x54, 0x3b, 0x7f, 0x49, 0x34, 0x2b, 0xa2, 0xa1, 0xdf, 0xed, 0x45, 0x18,
		0x2b, 0x18, 0x7c, 0x2a, 0x1d, 0x43, 0x05, 0x61, 0xe4, 0x47, 0xc8, 0x38, 0xeb, 0xf6, 0x24, 0xd2,
		0xcd, 0xba, 0x3d, 0xe4, 0x9a, 0x21, 0x0c, 0x39, 0xfa, 0xa0, 0x65, 0xb7, 0xc4, 0x0f, 0xc2, 0x14,
		0xb2, 0x60, 0x19, 0xc2, 0x8e, 0xb4, 0x00, 0x0a, 0xc2, 0x8e, 0xd9, 0x1b, 0x41, 0x16, 0x5c, 0x78,
		0x4c, 0x21, 0x03, 0x63, 0xae, 0x35, 0x63, 0x4a, 0xcf, 0x1f, 0x7b, 0x30, 0xdd, 0xd6, 0x5f, 0xa6,
		0x2b, 0x0c, 0xcb, 0xf6, 0x85, 0xeb, 0xf6, 0xba, 0x0a, 0x7d, 0x40, 0xe7, 0xec, 0x45, 0xeb, 0x34,
		0x52, 0xcc, 0x58, 0xa7, 0x11, 0xb9, 0x8b, 0xae, 0x7a, 0xe1, 0xd9, 0x2e, 0x3e, 0x1b, 0x03, 0xb0,
		0x30, 0x82, 0x1c, 0x43, 0x10, 0xfc, 0xe6, 0x24, 0x06, 0x09, 0x17, 0x9a, 0x8f, 0xf7, 0xea, 0x83,
		0x05, 0x06, 0x9b, 0x10, 0x49, 0xab, 0xd6, 0xd5, 0x89, 0xcc, 0x22, 0x1c, 0xac, 0x32, 0x8f, 0x65,
		0xfc, 0xa7, 0x2e, 0x29, 0x0f, 0x86, 0x8b, 0x79, 0xd8, 0x99, 0x88, 0x9d, 0x99, 0x16, 0x31, 0xd5,
		0x90, 0x72, 0x71, 0xd7, 0x0c, 0x13, 0x6f, 0x0d, 0xb9, 0xa5, 0xcf, 0xcc, 0x9d, 0xe9, 0x0a, 0xb7,
		0x29, 0x6c, 0xdf, 0xbc, 0x17, 0x0c, 0xad, 0x5e, 0x54, 0x3a, 0xbd, 0xa8, 0xf5, 0xdd, 0x1b, 0xff,
		0x51, 0xef, 0x58, 0xc1, 0xd2, 0x87, 0x8f, 0x49, 0xbc, 0xcc, 0x6c, 0xc7, 0xd4, 0x97, 0x2f, 0xdc,
		0x8f, 0xb1, 0x63, 0x9c, 0xe2, 0x95, 0x9e, 0x3e, 0x02, 0x86, 0x7e, 0x7d, 0xba, 0x8f, 0xa0, 0xb8,
		0x97, 0xe6, 0x43, 0x78, 0x97, 0xcc, 0xea, 0x46, 0x4c, 0x9d, 0x13, 0x08, 0x97, 0x2c, 0x6f, 0xd9,
		0x9e, 0x6f, 0xda, 0xbe, 0x3a, 0xda, 0x18, 0x6f, 0x04, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4,
		0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x01, 0xc4, 0x31, 0x07, 0x71, 0xf8, 0xc2, 0x7d, 0x34, 0xdb,
		0x1c, 0x90, 0x63, 0xb4, 0x13, 0x30, 0x07, 0x30, 0x07, 0x30, 0x87, 0xf4, 0x9d, 0xf1, 0x7c, 0xd3,
		0x37, 0x14, 0x99, 0x28, 0xa7, 0x36, 0xa0, 0x20, 0xdc, 0x82, 0x69, 0x50, 0x01, 0x60, 0x0c, 0x60,
		0x4c, 0x36, 0x61, 0x0c, 0xfb, 0xe0, 0x03, 0xe0, 0x9a, 0x78, 0x71, 0x4d, 0x47, 0xe1, 0x96, 0xbd,
		0xa6, 0xc0, 0x9a, 0x3f, 0x80, 0x66, 0x80, 0x66, 0x80, 0x66, 0xe0, 0x41, 0x01, 0xf4, 0x00, 0xf4,
		0x80, 0x07, 0x05, 0x48, 0x63, 0x2e, 0xd2, 0x30, 0x7c, 0xab, 0x23, 0x58, 0xe0, 0xc6, 0x70, 0x27,
		0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0xe9, 0x3b, 0xa3, 0x36, 0xd8, 0x11, 0xfe, 0x13, 0x80, 0x18,
		0x80, 0x18, 0xf8, 0x4f, 0x80, 0x6a, 0x02, 0x54, 0xa3, 0xc0, 0xe8, 0xaf, 0x80, 0xc6, 0xb2, 0x81,
		0x65, 0x80, 0x65, 0x80, 0x65, 0xe0, 0x3f, 0x01, 0xf4, 0x00, 0xf4, 0x80, 0xff, 0x04, 0x48, 0x63,
		0x2e, 0xd2, 0xe0, 0xf2, 0x9f, 0x8c, 0x77, 0x02, 0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x80, 0xff, 0x04,
		0x20, 0x06, 0x20, 0x06, 0xfe, 0x13, 0xa0, 0x1a, 0x55, 0x54, 0xa3, 0xb5, 0x2c, 0x99, 0x38, 0xbb,
		0x34, 0x5c, 0x1f, 0xb9, 0x91, 0x55, 0xb7, 0xe7, 0x0d, 0xfe, 0x33, 0xea, 0x8a, 0xa1, 0x5c, 0xb1,
		0x9f, 0x93, 0xe8, 0x7d, 0xd5, 0xed, 0x79, 0x83, 0xff, 0x0c, 0xdb, 0x7d, 0xdf, 0xfc, 0x32, 0xfa,
		0xea, 0xa3, 0xf0, 0x9b, 0x75, 0x0d, 0x99, 0x95, 0x68, 0x41, 0x61, 0xb5, 0x08, 0xa3, 0xa6, 0x5f,
		0x93, 0x9f, 0x07, 0xab, 0xd1, 0xf1, 0x40, 0x1f, 0x98, 0x44, 0xc7, 0x03, 0x74, 0x3c, 0x80, 0x25,
		0x06, 0x4b, 0x6c, 0x33, 0x2c, 0x31, 0x78, 0x7f, 0x61, 0x38, 0xc1, 0x70, 0xa2, 0x18, 0x4e, 0xf0,
		0xfe, 0x26, 0x68, 0x27, 0xa1, 0xe3, 0x01, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10,
		0x07, 0x10, 0x07, 0x10, 0x47, 0x4a, 0x11, 0x07, 0x3a, 0x1e, 0x00, 0x73, 0x00, 0x73, 0xa0, 0xe3,
		0xc1, 0xe4, 0x16, 0x88, 0x38, 0x03, 0xc6, 0x6c, 0x34, 0x8c, 0x41, 0xc4, 0x39, 0xe3, 0xb8, 0x06,
		0x1d, 0x0f, 0x80, 0x66, 0x80, 0x66, 0xe0, 0x41, 0x01, 0xf4, 0x00, 0xf4, 0x80, 0x07, 0x05, 0x48,
		0x43, 0x2b, 0xd2, 0x40, 0xc7, 0x03, 0x60, 0x0e, 0x60, 0x0e, 0x64, 0xec, 0xc3, 0x7f, 0x02, 0x10,
		0x03, 0x10, 0x03, 0xff, 0xc9, 0x3a, 0xa0, 0x1a, 0x74, 0x3c, 0x00, 0x96, 0x01, 0x96, 0x81, 0xff,
		0x04, 0xd0, 0x03, 0xd0, 0x03, 0xfe, 0x13, 0x20, 0x0d, 0x9d, 0x48, 0x03, 0x1d, 0x0f, 0x80, 0x39,
		0x80, 0x39, 0xe0, 0x3f, 0x81, 0xff, 0x04, 0x20, 0x06, 0x20, 0x06, 0xfe, 0x93, 0xb4, 0xa1, 0x9a,
		0x75, 0xec, 0x78, 0x40, 0xa8, 0xd1, 0xcf, 0x91, 0x7b, 0x1c, 0x1c, 0x0d, 0xbe, 0x2c, 0x0d, 0x6d,
		0x0d, 0xec, 0x96, 0xf8, 0xa1, 0xd0, 0xd7, 0x20, 0x58, 0x4e, 0x6b, 0x6c, 0xb0, 0x87, 0xc6, 0x06,
		0x71, 0x62, 0xc5, 0x4d, 0x6a, 0x6c, 0x40, 0x46, 0x80, 0xe1, 0x79, 0xf7, 0xec, 0x81, 0xf8, 0x21,
		0x1c, 0xf7, 0xb8, 0x6b, 0xc7, 0x21, 0x61, 0xed, 0xe8, 0xb1, 0x69, 0x98, 0x8c, 0x01, 0xee, 0x0a,
		0xbb, 0xd7, 0x11, 0xee, 0x50, 0xf2, 0xaa, 0xc3, 0xdd, 0x62, 0x59, 0x61, 0x8f, 0xba, 0xdd, 0xeb,
		0x0c, 0x4e, 0x30, 0x56, 0xcb, 0x81, 0x81, 0x84, 0x3d, 0xcb, 0xf6, 0xf7, 0x4b, 0x0c, 0xd4, 0x3b,
		0x00, 0xb8, 0x07, 0xb8, 0xdf, 0x10, 0x70, 0x5f, 0x2e, 0x1d, 0x96, 0x0f, 0xab, 0x07, 0xa5, 0x43,
		0x40, 0xfa, 0xc4, 0x20, 0x7d, 0x23, 0x05, 0x60, 0xf4, 0xbb, 0x70, 0x6d, 0xd1, 0xa6, 0xa3, 0xd1,
		0xd1, 0x7a, 0xf4, 0xd9, 0x02, 0x1c, 0x4d, 0x15, 0x1c, 0x45, 0x9f, 0x2d, 0xf8, 0xff, 0xb5, 0x30,
		0x11, 0x3b, 0x33, 0x2d, 0x62, 0x2a, 0xe4, 0x1c, 0x20, 0xe7, 0x00, 0x88, 0x1e, 0x88, 0x3e, 0xea,
		0x11, 0x20, 0xe7, 0x20, 0x41, 0x28, 0x8f, 0x3e, 0x5b, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40,
		0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x69, 0x45, 0x1c, 0xe8, 0xb3, 0x05, 0xcc, 0x01, 0xcc,
		0x81, 0x3e, 0x5b, 0x93, 0x5b, 0x20, 0xcf, 0x11, 0x30, 0x66, 0xa3, 0x61, 0x0c, 0xf2, 0x1c, 0x33,
		0x8e, 0x6b, 0xd0, 0x67, 0x0b, 0x68, 0x06, 0x68, 0x06, 0x1e, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x78,
		0x50, 0x80, 0x34, 0xb4, 0x22, 0x0d, 0xf4, 0xd9, 0x02, 0xe6, 0x00, 0xe6, 0x40, 0x9d, 0x28, 0xfc,
		0x27, 0x00, 0x31, 0x00, 0x31, 0xf0, 0x9f, 0xac, 0x03, 0xaa, 0x41, 0x9f, 0x2d, 0x60, 0x19, 0x60,
		0x19, 0xf8, 0x4f, 0x00, 0x3d, 0x00, 0x3d, 0xe0, 0x3f, 0x01, 0xd2, 0xd0, 0x89, 0x34, 0xd0, 0x67,
		0x0b, 0x98, 0x03, 0x98, 0x03, 0xfe, 0x13, 0xf8, 0x4f, 0x00, 0x62, 0x00, 0x62, 0xe0, 0x3f, 0x49,
		0x1b, 0xaa, 0x59, 0xc7, 0x3e, 0x5b, 0xa4, 0x2a, 0xfd, 0x1c, 0xb9, 0xd3, 0xd6, 0xbf, 0x87, 0x5f,
		0x97, 0x82, 0xf6, 0x06, 0xb6, 0x45, 0xc0, 0x34, 0xa1, 0x8e, 0x0c, 0x56, 0xa3, 0xb5, 0x81, 0x3e,
		0xd4, 0x88, 0xd6, 0x06, 0x68, 0x6d, 0x00, 0x93, 0x0b, 0x26, 0xd7, 0x66, 0x98, 0x5c, 0x70, 0xf3,
		0xc2, 0x42, 0x82, 0x85, 0x44, 0xb1, 0x90, 0xe0, 0xe6, 0x4d, 0xd0, 0x20, 0x42, 0x6b, 0x03, 0x20,
		0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x8e, 0x94, 0x22, 0x0e,
		0xb4, 0x36, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x6b, 0x83, 0xc9, 0x2d, 0x10, 0x5a, 0x06, 0x8c, 0xd9,
		0x68, 0x18, 0x83, 0xd0, 0x72, 0xc6, 0x71, 0x0d, 0x5a, 0x1b, 0x00, 0xcd, 0x00, 0xcd, 0xc0, 0x83,
		0x02, 0xe8, 0x01, 0xe8, 0x01, 0x0f, 0x0a, 0x90, 0x86, 0x56, 0xa4, 0x81, 0xd6, 0x06, 0xc0, 0x1c,
		0xc0, 0x1c, 0x48, 0xcd, 0x87, 0xff, 0x04, 0x20, 0x06, 0x20, 0x06, 0xfe, 0x93, 0x75, 0x40, 0x35,
		0x68, 0x6d, 0x00, 0x2c, 0x03, 0x2c, 0x03, 0xff, 0x09, 0xa0, 0x07, 0xa0, 0x07, 0xfc, 0x27, 0x40,
		0x1a, 0x3a, 0x91, 0x06, 0x5a, 0x1b, 0x00, 0x73, 0x00, 0x73, 0xc0, 0x7f, 0x02, 0xff, 0x09, 0x40,
		0x0c, 0x40, 0x0c, 0xfc, 0x27, 0x69, 0x43, 0x35, 0xeb, 0xd8, 0xda, 0x80, 0x50, 0xa3, 0x9f, 0x23,
		0x37, 0x36, 0x38, 0x19, 0x7c, 0x59, 0x0a, 0xda, 0x1a, 0x78, 0xce, 0x9d, 0xff, 0x97, 0xe9, 0x8a,
		0x61, 0x9e, 0xa5, 0xdb, 0xeb, 0xfa, 0xf4, 0x26, 0x07, 0x73, 0xf6, 0x42, 0xcb, 0x03, 0x7d, 0x68,
		0x12, 0x2d, 0x0f, 0xd0, 0xf2, 0x00, 0xa6, 0x18, 0x4c, 0xb1, 0xcd, 0x30, 0xc5, 0xe0, 0xfe, 0x85,
		0xe5, 0x04, 0xcb, 0x89, 0x62, 0x39, 0xc1, 0xfd, 0x9b, 0xa0, 0xa1, 0x84, 0x96, 0x07, 0x40, 0x1c,
		0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x29, 0x45, 0x1c, 0x68,
		0x79, 0x00, 0xcc, 0x01, 0xcc, 0x81, 0x96, 0x07, 0x93, 0x5b, 0x20, 0xe4, 0x0c, 0x18, 0xb3, 0xd1,
		0x30, 0x06, 0x21, 0xe7, 0x8c, 0xe3, 0x1a, 0xb4, 0x3c, 0x00, 0x9a, 0x01, 0x9a, 0x81, 0x07, 0x05,
		0xd0, 0x03, 0xd0, 0x03, 0x1e, 0x14, 0x20, 0x0d, 0xad, 0x48, 0x03, 0x2d, 0x0f, 0x80, 0x39, 0x80,
		0x39, 0x90, 0xb2, 0x0f, 0xff, 0x09, 0x40, 0x0c, 0x40, 0x0c, 0xfc, 0x27, 0xeb, 0x80, 0x6a, 0xd0,
		0xf2, 0x00, 0x58, 0x06, 0x58, 0x06, 0xfe, 0x13, 0x40, 0x0f, 0x40, 0x0f, 0xf8, 0x4f, 0x80, 0x34,
		0x74, 0x22, 0x0d, 0xb4, 0x3c, 0x00, 0xe6, 0x00, 0xe6, 0x80, 0xff, 0x04, 0xfe, 0x13, 0x80, 0x18,
		0x80, 0x18, 0xf8, 0x4f, 0xd2, 0x86, 0x6a, 0xd6, 0xb1, 0xe5, 0x81, 0x72, 0xc5, 0x7e, 0x8e, 0xdc,
		0x00, 0xe1, 0x62, 0xf4, 0xd5, 0x47, 0xe1, 0x37, 0xa7, 0xa0, 0x1b, 0x82, 0xef, 0xf8, 0x84, 0x2c,
		0xe8, 0x57, 0xdd, 0x19, 0x2c, 0x47, 0xcf, 0x03, 0x7d, 0x70, 0x12, 0x3d, 0x0f, 0xd0, 0xf3, 0x00,
		0xb6, 0x18, 0x6c, 0xb1, 0xcd, 0xb0, 0xc5, 0xe0, 0xff, 0x85, 0xe9, 0x04, 0xd3, 0x89, 0x62, 0x3a,
		0xc1, 0xff, 0x9b, 0xa0, 0xa5, 0x84, 0x9e, 0x07, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c,
		0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x29, 0x45, 0x1c, 0xe8, 0x79, 0x00, 0xcc, 0x01, 0xcc, 0x81,
		0x9e, 0x07, 0x93, 0x5b, 0x20, 0xe6, 0x0c, 0x18, 0xb3, 0xd1, 0x30, 0x06, 0x31, 0xe7, 0x8c, 0xe3,
		0x1a, 0xf4, 0x3c, 0x00, 0x9a, 0x01, 0x9a, 0x81, 0x07, 0x05, 0xd0, 0x03, 0xd0, 0x03, 0x1e, 0x14,
		0x20, 0x0d, 0xad, 0x48, 0x03, 0x3d, 0x0f, 0x80, 0x39, 0x80, 0x39, 0x90, 0xb3, 0x0f, 0xff, 0x09,
		0x40, 0x0c, 0x40, 0x0c, 0xfc, 0x27, 0xeb, 0x80, 0x6a, 0xd0, 0xf3, 0x00, 0x58, 0x06, 0x58, 0x06,
		0xfe, 0x13, 0x40, 0x0f, 0x40, 0x0f, 0xf8, 0x4f, 0x80, 0x34, 0x74, 0x22, 0x0d, 0xf4, 0x3c, 0x00,
		0xe6, 0x00, 0xe6, 0x80, 0xff, 0x04, 0xfe, 0x13, 0x80, 0x18, 0x80, 0x18, 0xf8, 0x4f, 0xd2, 0x86,
		0x6a, 0xd6, 0xb1, 0xe7, 0x01, 0xa5, 0x48, 0x3f, 0x47, 0x6e, 0x73, 0x70, 0x19, 0x7c, 0x5b, 0x0a,
		0x5a, 0x1b, 0xf4, 0x3c, 0xe1, 0xd2, 0x3b, 0x1b, 0x04, 0xab, 0xd1, 0xd8, 0x40, 0x1f, 0x66, 0x44,
		0x63, 0x03, 0x34, 0x36, 0x80, 0xc1, 0x05, 0x83, 0x6b, 0x33, 0x0c, 0x2e, 0x38, 0x79, 0x61, 0x1f,
		0xc1, 0x3e, 0xa2, 0xd8, 0x47, 0x70, 0xf2, 0x26, 0x68, 0x0e, 0xa1, 0xb1, 0x01, 0x10, 0x07, 0x10,
		0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x47, 0x4a, 0x11, 0x07, 0x1a, 0x1b,
		0x00, 0x73, 0x00, 0x73, 0xa0, 0xb1, 0xc1, 0xe4, 0x16, 0x08, 0x2c, 0x03, 0xc6, 0x6c, 0x34, 0x8c,
		0x41, 0x60, 0x39, 0xe3, 0xb8, 0x06, 0x8d, 0x0d, 0x80, 0x66, 0x80, 0x66, 0xe0, 0x41, 0x01, 0xf4,
		0x00, 0xf4, 0x80, 0x07, 0x05, 0x48, 0x43, 0x2b, 0xd2, 0x40, 0x63, 0x03, 0x60, 0x0e, 0x60, 0x0e,
		0x24, 0xe6, 0xc3, 0x7f, 0x02, 0x10, 0x03, 0x10, 0x03, 0xff, 0xc9, 0x3a, 0xa0, 0x1a, 0x34, 0x36,
		0x00, 0x96, 0x01, 0x96, 0x81, 0xff, 0x04, 0xd0, 0x03, 0xd0, 0x03, 0xfe, 0x13, 0x20, 0x0d, 0x9d,
		0x48, 0x03, 0x8d, 0x0d, 0x80, 0x39, 0x80, 0x39, 0xe0, 0x3f, 0x81, 0xff, 0x04, 0x20, 0x06, 0x20,
		0x06, 0xfe, 0x93, 0xb4, 0xa1, 0x9a, 0x75, 0x6c, 0x6c, 0x40, 0xa8, 0xd1, 0xcf, 0x91, 0xfb, 0x1a,
		0x7c, 0x1b, 0x7c, 0x59, 0x0a, 0xda, 0x1a, 0xfc, 0x65, 0x5a, 0x3e, 0xbd, 0xad, 0x41, 0xb0, 0x1a,
		0x6d, 0x0d, 0xf4, 0x21, 0x46, 0xb4, 0x35, 0x40, 0x5b, 0x03, 0x98, 0x5b, 0x30, 0xb7, 0x36, 0xc3,
		0xdc, 0x82, 0x8b, 0x17, 0xd6, 0x11, 0xac, 0x23, 0x8a, 0x75, 0x04, 0x17, 0x6f, 0x82, 0xc6, 0x10,
		0xda, 0x1a, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71,
		0xa4, 0x14, 0x71, 0xa0, 0xad, 0x01, 0x30, 0x07, 0x30, 0x07, 0xda, 0x1a, 0x4c, 0x6e, 0x81, 0xb0,
		0x32, 0x60, 0xcc, 0x46, 0xc3, 0x18, 0x84, 0x95, 0x33, 0x8e, 0x6b, 0xd0, 0xd6, 0x00, 0x68, 0x06,
		0x68, 0x06, 0x1e, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x78, 0x50, 0x80, 0x34, 0xb4, 0x22, 0x0d, 0xb4,
		0x35, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x5a, 0x3e, 0xfc, 0x27, 0x00, 0x31, 0x00, 0x31, 0xf0, 0x9f,
		0xac, 0x03, 0xaa, 0x41, 0x5b, 0x03, 0x60, 0x19, 0x60, 0x19, 0xf8, 0x4f, 0x00, 0x3d, 0x00, 0x3d,
		0xe0, 0x3f, 0x01, 0xd2, 0xd0, 0x89, 0x34, 0xd0, 0xd6, 0x00, 0x98, 0x03, 0x98, 0x03, 0xfe, 0x13,
		0xf8, 0x4f, 0x00, 0x62, 0x00, 0x62, 0xe0, 0x3f, 0x49, 0x1b, 0xaa, 0x59, 0xc7, 0xb6, 0x06, 0x84,
		0x1a, 0xfd, 0x1c, 0xb9, 0xad, 0xc1, 0x7f, 0x07, 0x5f, 0xa6, 0xab, 0xad, 0xc1, 0x3b, 0xc6, 0x53,
		0xa1, 0x9e, 0x06, 0xf1, 0x14, 0x24, 0x0e, 0x80, 0x44, 0xf8, 0x68, 0x34, 0x5f, 0x4d, 0xc1, 0xe5,
		0x9f, 0x58, 0x41, 0xdb, 0x01, 0xfe, 0x1b, 0x26, 0x88, 0xb7, 0xc4, 0x2a, 0xe8, 0x97, 0x3f, 0xb6,
		0x3c, 0xbf, 0xe6, 0xfb, 0xd1, 0x2a, 0xf5, 0x07, 0xea, 0xb4, 0xde, 0x16, 0x03, 0xe4, 0xe6, 0x45,
		0x93, 0xc2, 0x03, 0xe9, 0x3f, 0xb1, 0x82, 0x26, 0x67, 0xf3, 0xa7, 0x6e, 0x4b, 0xb8, 0xa2, 0xf5,
		0x71, 0xf0, 0x5a, 0x76, 0xaf, 0xdd, 0x56, 0xa2, 0x8e, 0xe4, 0x8d, 0x93, 0xbe, 0x69, 0x11, 0xee,
		0x98, 0xe4, 0xdd, 0x5a, 0x7e, 0xab, 0x16, 0xdf, 0x95, 0xf9, 0xff, 0xb2, 0x80, 0x3e, 0x51, 0xe9,
		0x22, 0x45, 0x8f, 0x25, 0xb4, 0x90, 0xa0, 0xc1, 0xfc, 0xf7, 0x9f, 0x7d, 0xbb, 0x39, 0x6f, 0x96,
		0x6f, 0xd9, 0xde, 0xc2, 0xd7, 0x09, 0x81, 0xf8, 0xe0, 0x43, 0x0b, 0xa8, 0xb2, 0xbc, 0x4d, 0xca,
		0x4a, 0x1b, 0x34, 0x8a, 0x8d, 0x19, 0xbd, 0xbd, 0x49, 0x54, 0x0b, 0x51, 0xda, 0x02, 0x94, 0xb6,
		0xf0, 0xa4, 0xda, 0x8f, 0xc8, 0xdd, 0xc3, 0x55, 0x6d, 0x43, 0xf2, 0xcd, 0x31, 0xcd, 0x57, 0x10,
		0x61, 0x4c, 0xd6, 0xd1, 0xe7, 0x57, 0x09, 0xcd, 0x48, 0xfd, 0x70, 0x22, 0x3b, 0x1d, 0x64, 0x9c,
		0x0b, 0xf2, 0xfd, 0x6d, 0x64, 0x5d, 0x05, 0x64, 0x97, 0x00, 0xd9, 0xf4, 0x27, 0xf5, 0xa7, 0x51,
		0x53, 0x7b, 0x51, 0xfb, 0xcd, 0xe4, 0x3d, 0x61, 0xba, 0xcd, 0x87, 0xe8, 0xc4, 0x0b, 0x2b, 0x46,
		0x86, 0xeb, 0x22, 0x12, 0x40, 0xce, 0x54, 0x91, 0xf6, 0x66, 0x51, 0xbc, 0x57, 0xf4, 0x46, 0x4a,
		0x54, 0xdf, 0x94, 0xb2, 0x2f, 0x4a, 0xd9, 0xf7, 0xa4, 0xd4, 0x28, 0x89, 0x17, 0xeb, 0x4a, 0x7b,
		0x8e, 0x5e, 0x15, 0x94, 0xd3, 0x31, 0x2d, 0xdb, 0x08, 0x94, 0xa5, 0xc4, 0xa1, 0x8d, 0x65, 0x9a,
		0x84, 0x6b, 0x28, 0x7f, 0x2c, 0xec, 0xfb, 0x40, 0xb5, 0xcb, 0xf9, 0x6e, 0x08, 0x86, 0x94, 0x8a,
		0x6f, 0x46, 0xd5, 0x77, 0x1c, 0x1a, 0xfe, 0xc4, 0xf5, 0x0c, 0x56, 0x3d, 0xc5, 0x77, 0xaf, 0xe2,
		0x4b, 0xe1, 0x22, 0x59, 0xa9, 0xb2, 0x9f, 0x20, 0xd1, 0x34, 0x19, 0xb5, 0x0d, 0x09, 0x0e, 0x39,
		0x33, 0x7d, 0x5f, 0xb8, 0xb6, 0x34, 0x8b, 0xe4, 0xb7, 0xb6, 0xb6, 0xb6, 0xae, 0x4c, 0xe3, 0xef,
		0x9a, 0xf1, 0xc7, 0x9e, 0x71, 0x78, 0xd3, 0x98, 0xf8, 0xcb, 0xf5, 0xb5, 0x71, 0xd3, 0x28, 0x3c,
		0xef, 0x6d, 0x57, 0x8b, 0xfd, 0xc2, 0x4f, 0xaf, 0xbf, 0x6f, 0x5c, 0x5f, 0xef, 0x14, 0xfe, 0x45,
		0x59, 0xf5, 0x53, 0xe1, 0x65, 0xb0, 0x36, 0xaf, 0x87, 0x04, 0xa7, 0x17, 0x47, 0xbf, 0x91, 0xe9,
		0xf0, 0x67, 0x12, 0x84, 0xf8, 0x87, 0x04, 0x25, 0x58, 0xa5, 0xbe, 0x94, 0x85, 0x4d, 0xb7, 0xb4,
		0x59, 0x2d, 0xee, 0xb9, 0x96, 0x37, 0xb1, 0x39, 0x25, 0xa1, 0x9f, 0xa7, 0x4a, 0x24, 0x6c, 0x12,
		0x71, 0x38, 0xc3, 0xa7, 0x37, 0x6e, 0x9f, 0x28, 0x9e, 0x37, 0x8e, 0xa8, 0xd7, 0x14, 0xfa, 0xe8,
		0xe9, 0x6c, 0x36, 0x9a, 0x0a, 0xcf, 0x93, 0x2e, 0xdf, 0x4a, 0xcb, 0xf6, 0x76, 0x23, 0x99, 0x71,
		0x12, 0x9e, 0x85, 0xcf, 0xb6, 0x77, 0x33, 0x02, 0xdd, 0x54, 0xff, 0xca, 0x12, 0x4b, 0xfd, 0xc1,
		0xf1, 0x7c, 0x43, 0xd8, 0xbe, 0x6b, 0x09, 0x2f, 0xba, 0xa9, 0x3a, 0xb5, 0x0a, 0x06, 0x2b, 0x0c,
		0xd6, 0x37, 0x97, 0xe9, 0x49, 0xde, 0x68, 0x9d, 0x58, 0x2b, 0x67, 0xb8, 0x16, 0x61, 0xb8, 0xc2,
		0x70, 0x95, 0xbb, 0xa8, 0xb2, 0x2e, 0x3a, 0x35, 0x97, 0x9d, 0xe2, 0xc5, 0x25, 0x5f, 0x60, 0x95,
		0x8b, 0xac, 0x7e, 0xa1, 0x39, 0x30, 0x52, 0x0e, 0x2d, 0xad, 0x49, 0x36, 0xb8, 0x42, 0x4b, 0xeb,
		0xb6, 0x65, 0x7a, 0x0c, 0x4d, 0xad, 0x83, 0x6d, 0x90, 0x6e, 0x47, 0x67, 0x1b, 0x2e, 0xf6, 0x61,
		0x67, 0x23, 0x76, 0x76, 0x62, 0x65, 0x2b, 0x1a, 0x7b, 0x29, 0xb8, 0xba, 0x72, 0xdc, 0xcd, 0x9e,
		0x5c, 0xcb, 0xbe, 0x67, 0xc8, 0xb2, 0x2b, 0xbe, 0x8f, 0x95, 0x02, 0x24, 0xe7, 0x01, 0x9f, 0x33,
		0x41, 0xab, 0x73, 0x61, 0xa9, 0xb3, 0x61, 0x65, 0x98, 0x9f, 0xef, 0x86, 0x52, 0x1c, 0xb1, 0x03,
		0x54, 0x3d, 0x32, 0x30, 0x15, 0x45, 0x7a, 0xb8, 0x13, 0xa4, 0x3a, 0xa4, 0x3a, 0xa4, 0x7a, 0xb6,
		0xa4, 0x7a, 0x3c, 0x2d, 0x43, 0xbb, 0x8f, 0x65, 0xc3, 0x6c, 0xb5, 0x5c, 0xe1, 0x31, 0x40, 0xc8,
		0xa9, 0xdd, 0x20, 0x73, 0x20, 0x73, 0x20, 0x73, 0xe2, 0xe6, 0x9f, 0x1c, 0x31, 0x36, 0x3f, 0xcb,
		0x07, 0xc4, 0x08, 0xdc, 0xcc, 0x46, 0x5b, 0x57, 0x7b, 0xc6, 0x61, 0xe3, 0xe5, 0xaa, 0x68, 0x1c,
		0x36, 0x86, 0xff, 0x5b, 0x0c, 0x7e, 0x3c, 0x97, 0xfa, 0x2f, 0xa5, 0xab, 0x3d, 0xa3, 0x3c, 0xfa,
		0x6d, 0xa9, 0x72, 0xb5, 0x67, 0x54, 0x1a, 0x85, 0xad, 0xeb, 0xeb, 0x1d, 0xd9, 0x35, 0x85, 0xe7,
		0xfd, 0x3e, 0xfd, 0xba, 0x34, 0x54, 0xc8, 0xa4, 0x12, 0xad, 0x9c, 0xd9, 0xed, 0xcf, 0xad, 0xb8,
		0xa8, 0x25, 0x13, 0xb3, 0x9c, 0xa1, 0x17, 0xcc, 0x14, 0x98, 0x29, 0x03, 0x61, 0x55, 0x65, 0x85,
		0x0e, 0x55, 0x40, 0x07, 0x40, 0x07, 0x40, 0x87, 0xc4, 0xf8, 0x27, 0x85, 0xd0, 0x21, 0xd0, 0x6c,
		0xa6, 0x71, 0x57, 0x33, 0xbe, 0x34, 0x9e, 0x8b, 0xdb, 0xe5, 0xfe, 0x87, 0xc2, 0xf3, 0x41, 0xff,
		0xed, 0x2f, 0x5f, 0xe6, 0x7d, 0xac, 0xb8, 0x7d, 0xd0, 0xff, 0xb0, 0xe0, 0x5f, 0xaa, 0xfd, 0x0f,
		0x11, 0xf7, 0xa8, 0xf4, 0xb7, 0x66, 0x3e, 0x3a, 0xf8, 0x7d, 0x69, 0xd1, 0x82, 0xf2, 0x82, 0x05,
		0xfb, 0x8b, 0x16, 0xec, 0x2f, 0x58, 0xb0, 0xf0, 0x91, 0x4a, 0x0b, 0x16, 0x54, 0xfa, 0x2f, 0x33,
		0x9f, 0xdf, 0x9a, 0xff, 0xd1, 0x6a, 0xbf, 0xf0, 0xb2, 0xe8, 0xdf, 0x0e, 0xfa, 0x2f, 0x1f, 0x0a,
		0x85, 0x35, 0x02, 0x53, 0xb8, 0x3e, 0xf1, 0x5f, 0x1f, 0x80, 0x4b, 0x80, 0x4b, 0xe2, 0x8a, 0xb4,
		0x96, 0xdc, 0xb6, 0x6c, 0x6f, 0x77, 0x32, 0x85, 0xea, 0xf5, 0x2f, 0x4f, 0xbb, 0xa4, 0x94, 0x82,
		0x9c, 0x5c, 0x3a, 0xd9, 0x2f, 0x8e, 0xe7, 0xd7, 0x87, 0x5f, 0x1d, 0xfe, 0xff, 0x53, 0xa4, 0x24,
		0x33, 0xfa, 0x79, 0xc8, 0x4c, 0x19, 0x27, 0x47, 0x2d, 0x54, 0xa3, 0x15, 0x44, 0xd8, 0x8f, 0xd4,
		0x0c, 0xa4, 0x66, 0x68, 0x87, 0xe9, 0xe1, 0x79, 0xb7, 0x85, 0x79, 0xe7, 0x8a, 0x3b, 0xca, 0x81,
		0x8f, 0x11, 0xf9, 0x01, 0x61, 0xed, 0xd9, 0x48, 0xac, 0xed, 0xec, 0x8c, 0x64, 0xd4, 0x6e, 0xc8,
		0x64, 0x29, 0x10, 0x19, 0xc3, 0xb2, 0x79, 0xb2, 0xbc, 0x90, 0xad, 0xba, 0xcf, 0x71, 0xe4, 0x71,
		0x95, 0x20, 0x2c, 0x20, 0x2c, 0x96, 0x3e, 0x21, 0xf2, 0xb8, 0xe0, 0x42, 0x83, 0x0b, 0x2d, 0x83,
		0x2e, 0x34, 0xe4, 0x71, 0xc1, 0x86, 0x65, 0x3c, 0x1b, 0xe4, 0x71, 0x41, 0xaa, 0x43, 0xaa, 0x43,
		0xaa, 0x23, 0x8f, 0x0b, 0x32, 0x07, 0x32, 0x67, 0xa3, 0x64, 0x0e, 0xf2, 0xb8, 0x90, 0xc7, 0x85,
		0x3c, 0x2e, 0x98, 0x29, 0xc8, 0xe3, 0x02, 0x74, 0x00, 0x74, 0x00, 0x74, 0x88, 0x97, 0x7f, 0x72,
		0xc8, 0xe3, 0x42, 0x22, 0x0e, 0xf2, 0xb8, 0x70, 0x7d, 0x90, 0xc7, 0x05, 0x70, 0xc9, 0x09, 0x2e,
		0xd7, 0x3e, 0x8f, 0x8b, 0x92, 0x51, 0x90, 0xe3, 0x48, 0xe3, 0x92, 0x68, 0xf0, 0x2f, 0x7f, 0x1a,
		0xbc, 0xfd, 0x7a, 0x46, 0x03, 0x00, 0x24, 0x43, 0x12, 0xeb, 0xd3, 0xa9, 0x30, 0x32, 0xc3, 0xa5,
		0x65, 0x4a, 0xc5, 0x92, 0x0b, 0xcf, 0x3f, 0xb2, 0x62, 0xe1, 0x15, 0xcf, 0xaf, 0x7d, 0x0f, 0x41,
		0x89, 0xfe, 0x7a, 0x74, 0x82, 0xea, 0x68, 0x27, 0xe8, 0x09, 0xf7, 0x51, 0xb8, 0x12, 0x9d, 0x04,
		0xc7, 0x0b, 0xd0, 0x44, 0x10, 0x4d, 0x04, 0x27, 0xaf, 0x10, 0xa5, 0xeb, 0x7d, 0xb0, 0x0e, 0xcd,
		0x03, 0x63, 0xf4, 0xe3, 0x6c, 0x74, 0xf3, 0x40, 0xaa, 0x9f, 0xf3, 0x35, 0xbb, 0x8e, 0xe4, 0x9a,
		0x41, 0x8e, 0x7a, 0x22, 0xae, 0x4a, 0xe4, 0xa8, 0xcb, 0x9c, 0x77, 0x6a, 0x72, 0xd4, 0xc7, 0x3c,
		0x96, 0x82, 0x14, 0x75, 0x34, 0x1b, 0x85, 0xb4, 0x58, 0x47, 0x69, 0x41, 0x4f, 0x52, 0xe7, 0x0a,
		0x14, 0x22, 0x46, 0x88, 0x18, 0x61, 0x42, 0xac, 0x45, 0x77, 0x81, 0xe6, 0x52, 0x12, 0x23, 0xe4,
		0x8c, 0x10, 0x1e, 0x2a, 0xec, 0x31, 0x7a, 0xa7, 0xc4, 0x47, 0x71, 0x33, 0x27, 0x5e, 0xcd, 0xd0,
		0xe8, 0x3d, 0xc3, 0x5e, 0x5c, 0xf1, 0xb0, 0x70, 0xc3, 0xf4, 0x27, 0x64, 0x8d, 0xff, 0x34, 0x38,
		0xc8, 0xc7, 0x19, 0x53, 0x0c, 0x77, 0xcd, 0x46, 0xa2, 0x56, 0x48, 0x47, 0xb5, 0xe1, 0xdc, 0xdb,
		0x29, 0x62, 0xd3, 0xea, 0xe6, 0xb0, 0x29, 0xa2, 0xd7, 0x99, 0x4b, 0x7e, 0xc8, 0x8c, 0xe0, 0xc2,
		0xb5, 0xca, 0x54, 0x52, 0x04, 0x93, 0x20, 0x8f, 0x3b, 0x29, 0x23, 0x96, 0x3c, 0xd4, 0xae, 0xe3,
		0xfa, 0xea, 0x66, 0x65, 0xb0, 0x0b, 0x11, 0xa1, 0x7f, 0x16, 0x77, 0x66, 0xaf, 0x1d, 0x98, 0x16,
		0x95, 0x7d, 0x18, 0xa6, 0x30, 0x4c, 0x61, 0x98, 0xca, 0x33, 0x9f, 0x61, 0xf7, 0x3a, 0xb7, 0xd2,
		0x53, 0x19, 0xe7, 0xb1, 0x50, 0x55, 0x61, 0x8b, 0x73, 0xd3, 0xbe, 0x4f, 0x85, 0x65, 0xaa, 0x32,
		0x88, 0x98, 0x59, 0xb6, 0xcc, 0x6c, 0x37, 0x9e, 0xba, 0xcb, 0xb5, 0x1f, 0xc3, 0x0c, 0x5e, 0x66,
		0x9b, 0x25, 0xa7, 0x3a, 0xd8, 0x38, 0xae, 0x23, 0xa8, 0x56, 0x2a, 0xfb, 0x95, 0x14, 0x1f, 0xc3,
		0xba, 0xe3, 0x95, 0xb5, 0x49, 0x6d, 0x1c, 0xe5, 0xe6, 0x8c, 0x7e, 0xc6, 0xd2, 0x99, 0xee, 0x62,
		0xf8, 0x95, 0xa3, 0x9f, 0x29, 0x6a, 0x49, 0x87, 0xfe, 0x52, 0x9a, 0x61, 0x1e, 0x42, 0x77, 0x09,
		0x48, 0x13, 0x84, 0xee, 0x60, 0x21, 0xc1, 0x42, 0x42, 0xe8, 0x0e, 0xa1, 0xbb, 0x48, 0x34, 0x42,
		0xe8, 0x4e, 0xcd, 0x53, 0x89, 0xd0, 0x1d, 0x42, 0x77, 0x08, 0xdd, 0x21, 0xc6, 0x82, 0xd0, 0x1d,
		0x42, 0x77, 0x08, 0xdd, 0x21, 0x74, 0x37, 0xef, 0x46, 0x23, 0x74, 0x07, 0xc3, 0x14, 0x86, 0x69,
		0xa6, 0x0d, 0x53, 0x84, 0xee, 0x66, 0x1e, 0x04, 0xa1, 0xbb, 0x5c, 0x82, 0x36, 0x4b, 0x0e, 0xa1,
		0x3b, 0x84, 0xee, 0x12, 0x77, 0xb6, 0x27, 0x18, 0xba, 0x8b, 0xa1, 0x19, 0xc9, 0x9b, 0xc8, 0x5d,
		0xf6, 0xba, 0x90, 0xc8, 0x39, 0x22, 0xd6, 0xa7, 0x09, 0x09, 0x31, 0xa2, 0xd9, 0xf3, 0xa4, 0xb5,
		0xbb, 0x0a, 0x0c, 0x9c, 0x84, 0x7e, 0xce, 0xf0, 0xe9, 0x8d, 0xdb, 0x27, 0xca, 0x95, 0xe6, 0x80,
		0x7c, 0x53, 0x30, 0x2f, 0xa0, 0x44, 0x26, 0x6e, 0xba, 0xf8, 0xe1, 0xbb, 0xa6, 0xd1, 0xb3, 0x3d,
		0xdf, 0xbc, 0x6d, 0xcb, 0x9d, 0xc3, 0x24, 0xd1, 0x65, 0xf1, 0x94, 0x42, 0x38, 0x99, 0x70, 0xcb,
		0x72, 0xcc, 0xc1, 0x64, 0xa5, 0xdb, 0x96, 0xd3, 0x16, 0x50, 0x96, 0xbf, 0x75, 0x04, 0x0d, 0xf7,
		0x8e, 0x57, 0x43, 0xa7, 0xa9, 0x8d, 0xd1, 0xb4, 0x86, 0xd4, 0xd3, 0xbd, 0x68, 0x5a, 0x27, 0xae,
		0x7f, 0xdb, 0xa2, 0x68, 0xcd, 0x7c, 0x68, 0x44, 0xd4, 0xd2, 0xad, 0x28, 0x52, 0x52, 0x8f, 0x54,
		0x12, 0x8f, 0x74, 0xa7, 0xa2, 0x12, 0x3a, 0x15, 0xb1, 0x3b, 0x54, 0x62, 0xeb, 0x54, 0x64, 0xba,
		0xcd, 0x07, 0x4a, 0xa7, 0xa2, 0x60, 0x9d, 0x5c, 0xa7, 0xa2, 0x3d, 0x74, 0x2a, 0x42, 0xa7, 0x22,
		0xa2, 0xa7, 0x2e, 0x3c, 0xaf, 0x96, 0xd3, 0x31, 0x2d, 0xdb, 0x90, 0x9c, 0xff, 0x44, 0x09, 0xac,
		0xe6, 0x8f, 0x85, 0x7d, 0x1f, 0xe8, 0x0c, 0xed, 0x58, 0x51, 0xc5, 0xb7, 0xa6, 0xea, 0xa7, 0x1f,
		0x3b, 0x6e, 0x8a, 0xc4, 0xf5, 0x0c, 0x4e, 0x1a, 0x4a, 0x90, 0x45, 0xc5, 0x17, 0xc6, 0x45, 0xb2,
		0x52, 0x65, 0x3f, 0x41, 0xa2, 0xe9, 0xc2, 0xc1, 0x12, 0x1c, 0x42, 0x0d, 0x06, 0xe7, 0xb7, 0xb6,
		0xb6, 0xb6, 0xae, 0x4c, 0xe3, 0xef, 0x9a, 0xf1, 0xc7, 0x9e, 0x71, 0x78, 0xd3, 0x98, 0xf8, 0xcb,
		0xf5, 0xb5, 0x71, 0xd3, 0x28, 0x3c, 0xef, 0x6d, 0x57, 0x8b, 0xfd, 0xc2, 0x4f, 0xaf, 0xbf, 0x6f,
		0x5c, 0x5f, 0xef, 0x14, 0xfe, 0x45, 0x59, 0xf5, 0x53, 0xe1, 0x65, 0xb0, 0x36, 0xaf, 0x87, 0x04,
		0x2a, 0x41, 0xf1, 0xfc, 0x9f, 0x49, 0x10, 0x42, 0x22, 0xec, 0xcb, 0x6b, 0x14, 0xc1, 0xe1, 0x04,
		0x87, 0x53, 0x6a, 0x1c, 0x4e, 0x59, 0x36, 0x52, 0x23, 0xfa, 0xc2, 0x65, 0x4c, 0xd4, 0xd5, 0xce,
		0xee, 0x25, 0x06, 0xea, 0x3b, 0x09, 0x0a, 0x45, 0xa5, 0x8c, 0x0c, 0x45, 0xf2, 0x4b, 0x2d, 0xe4,
		0x88, 0x34, 0x98, 0xff, 0xf6, 0xb3, 0xef, 0x36, 0xe7, 0xbd, 0xf2, 0x6d, 0xab, 0x29, 0x6c, 0x6f,
		0x31, 0x9b, 0xbe, 0x76, 0x15, 0x1c, 0x7d, 0x70, 0x01, 0x6d, 0x96, 0x9b, 0xde, 0x2b, 0x2d, 0xa3,
		0x28, 0x96, 0xd0, 0xa4, 0xe5, 0xb3, 0xfc, 0x69, 0x64, 0xe4, 0x8f, 0xb4, 0x75, 0x23, 0x2d, 0x53,
		0xde, 0x5a, 0x2f, 0xe3, 0x67, 0x67, 0xba, 0x95, 0xab, 0x4c, 0xe6, 0xf1, 0xc9, 0x49, 0x34, 0x86,
		0x0e, 0x57, 0x64, 0xa3, 0x33, 0xf4, 0xea, 0xcb, 0x90, 0x5d, 0x9f, 0xcb, 0xca, 0xcb, 0x12, 0xb3,
		0xdf, 0x65, 0x95, 0xbc, 0x20, 0xca, 0x0f, 0xe2, 0xd5, 0x4a, 0xcc, 0xf3, 0x22, 0xf7, 0x36, 0xeb,
		0xe5, 0x7d, 0x89, 0x7c, 0x25, 0xf5, 0x78, 0x60, 0xa4, 0x7b, 0x45, 0xa3, 0xf7, 0xab, 0xd6, 0x8b,
		0xcd, 0x01, 0xf8, 0x73, 0x99, 0x28, 0x22, 0x95, 0xbe, 0xf8, 0x44, 0x8f, 0x47, 0x6c, 0x85, 0xa4,
		0x4d, 0xdf, 0x7a, 0x64, 0x18, 0x6b, 0x3f, 0xda, 0x47, 0x3d, 0xe5, 0xf7, 0xce, 0x6c, 0x7b, 0x18,
		0x8e, 0xaf, 0xca, 0x88, 0x5c, 0x0c, 0xc9, 0xce, 0x98, 0xec, 0x0c, 0xca, 0xce, 0xa8, 0x34, 0x86,
		0x55, 0xf0, 0x06, 0xe7, 0x78, 0xb3, 0x7f, 0x6f, 0x1d, 0xa7, 0x2d, 0x4c, 0x9b, 0xa3, 0x26, 0xb5,
		0x98, 0xe2, 0x3a, 0x85, 0xd1, 0xf9, 0x1a, 0x2d, 0xd3, 0x37, 0xd5, 0xc5, 0xd7, 0xd4, 0x6e, 0x10,
		0x3e, 0x10, 0x3e, 0x10, 0x3e, 0x34, 0x27, 0xb1, 0x6d, 0x39, 0x36, 0xca, 0xe1, 0xdf, 0x48, 0x64,
		0xcb, 0x36, 0xdd, 0x27, 0xc6, 0x0a, 0xdb, 0xc3, 0x35, 0x29, 0x40, 0xf6, 0x7c, 0xd7, 0xb2, 0xef,
		0x59, 0x4b, 0x8f, 0x51, 0xd1, 0xb7, 0x50, 0x53, 0x5a, 0x2d, 0x3e, 0x3d, 0x69, 0xb5, 0xa0, 0x25,
		0xa1, 0x25, 0xa1, 0x25, 0x13, 0x92, 0x7b, 0x8a, 0xf2, 0x6e, 0x53, 0x2b, 0x73, 0x46, 0x17, 0x6e,
		0xfc, 0xd3, 0x0b, 0x7f, 0xa1, 0xbb, 0xb5, 0xde, 0xf1, 0xf0, 0x7b, 0xc6, 0x3f, 0xbd, 0xf0, 0x17,
		0xe9, 0x69, 0xb0, 0xa7, 0xa0, 0x25, 0xd4, 0xb5, 0x43, 0x56, 0x67, 0xea, 0xc1, 0x53, 0x9a, 0x39,
		0x4f, 0xe9, 0x1a, 0xcd, 0xd6, 0x9b, 0x60, 0x37, 0x74, 0xe8, 0x24, 0x89, 0x8d, 0x12, 0xc4, 0x06,
		0xc4, 0x46, 0xa4, 0xa7, 0x44, 0x80, 0x05, 0xd6, 0x1b, 0xac, 0x37, 0x58, 0x6f, 0x9b, 0x13, 0x60,
		0x69, 0x09, 0xaf, 0xe9, 0x5a, 0x5d, 0xb2, 0x55, 0x36, 0x45, 0xb3, 0xc9, 0xcd, 0x20, 0x7a, 0x20,
		0x7a, 0x20, 0x7a, 0x36, 0xc5, 0x71, 0x44, 0x90, 0x3c, 0xe2, 0x47, 0xd7, 0x72, 0x03, 0x77, 0x90,
		0xd1, 0xa2, 0xd8, 0x14, 0x33, 0x64, 0x7b, 0xbb, 0x21, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0xe9,
		0xde, 0xf4, 0x2c, 0xdb, 0xaf, 0x96, 0x19, 0x24, 0xd0, 0x7b, 0xb4, 0x95, 0x63, 0x15, 0x2f, 0x33,
		0xdb, 0xa1, 0xad, 0x5c, 0x6a, 0x8e, 0x40, 0xad, 0x78, 0x2f, 0xf6, 0x53, 0x41, 0x0c, 0x7d, 0x3e,
		0x24, 0x11, 0x2d, 0x26, 0x28, 0x22, 0x10, 0x3d, 0x07, 0x04, 0x01, 0x04, 0x81, 0xff, 0x65, 0xd9,
		0x33, 0x5a, 0xb6, 0xd1, 0xf3, 0x18, 0x8c, 0x9f, 0xd1, 0x3e, 0x10, 0x38, 0x10, 0x38, 0x10, 0x38,
		0x10, 0x38, 0x4b, 0x04, 0x8e, 0xe7, 0xf5, 0x04, 0x93, 0xc7, 0x65, 0x62, 0x2f, 0x08, 0x1e, 0x08,
		0x1e, 0x08, 0x1e, 0x38, 0x5b, 0xe0, 0x6c, 0x81, 0xb3, 0x05, 0xce, 0x16, 0x38, 0x5b, 0x56, 0x93,
		0x19, 0xa5, 0x7d, 0x00, 0x23, 0x00, 0x23, 0xa9, 0x03, 0x23, 0x28, 0xed, 0x9b, 0x63, 0x1a, 0xa2,
		0xb4, 0x6f, 0x3e, 0x61, 0x50, 0xda, 0x17, 0xa7, 0xa6, 0x44, 0x69, 0x1f, 0xb4, 0x24, 0xb4, 0x24,
		0x32, 0xb4, 0xe2, 0x92, 0x3b, 0x8f, 0x66, 0x9b, 0x43, 0xe4, 0x0c, 0xb7, 0x81, 0xb4, 0x81, 0xb4,
		0x81, 0xb4, 0xa1, 0xc1, 0xcf, 0x0c, 0x46, 0x26, 0xd6, 0xbb, 0x92, 0x58, 0xf3, 0xa4, 0xbf, 0x85,
		0x85, 0xc4, 0xd9, 0x9b, 0xf7, 0x27, 0x8d, 0x37, 0xd7, 0xa7, 0x03, 0xbb, 0xdd, 0x6b, 0xb7, 0x33,
		0x35, 0xb0, 0x6b, 0xd1, 0x75, 0xe7, 0x1f, 0xdb, 0xb5, 0xe8, 0x82, 0xaf, 0xf7, 0xf0, 0xae, 0xb7,
		0xf4, 0xe5, 0x6b, 0x8f, 0xfe, 0x96, 0x9e, 0xd9, 0xec, 0x92, 0x1e, 0xa1, 0xd5, 0xb7, 0x14, 0x39,
		0x94, 0xba, 0xa5, 0x3b, 0xf7, 0xf7, 0x03, 0x88, 0xbf, 0xba, 0x5b, 0xfa, 0xe8, 0x83, 0x29, 0xe9,
		0x96, 0xee, 0xdc, 0x67, 0xb3, 0x53, 0xba, 0x73, 0x1f, 0x5b, 0x97, 0xf4, 0xa6, 0x63, 0x7b, 0x4e,
		0x5b, 0x62, 0x22, 0xdd, 0x78, 0x41, 0x46, 0x7a, 0xa4, 0x3b, 0xf7, 0xeb, 0xd9, 0x1f, 0xdd, 0xb9,
		0x4f, 0x4d, 0x6f, 0x74, 0xc9, 0x46, 0xd3, 0xb4, 0x06, 0xd3, 0xa9, 0xef, 0x8c, 0xee, 0xdc, 0x6f,
		0x66, 0x57, 0x74, 0xe7, 0x3e, 0xa9, 0x8e, 0xe8, 0xda, 0x11, 0xe0, 0x50, 0x99, 0xed, 0x8e, 0x24,
		0x9e, 0x7c, 0xc7, 0xa4, 0xa8, 0x0a, 0x7a, 0xf8, 0x3d, 0x37, 0x9f, 0x86, 0xdf, 0x23, 0xd5, 0x20,
		0x29, 0x02, 0xfa, 0x8b, 0x82, 0xab, 0x44, 0x5b, 0x34, 0x7d, 0xc7, 0xf5, 0x28, 0x83, 0x25, 0xc7,
		0x4b, 0xc1, 0xc7, 0xe0, 0x63, 0x12, 0x1f, 0x4b, 0x4f, 0x36, 0x18, 0xdf, 0x39, 0x85, 0xce, 0x3b,
		0xe3, 0x1d, 0x36, 0x64, 0xba, 0x81, 0x73, 0x8f, 0xc6, 0x3b, 0xaa, 0x97, 0x3e, 0x1e, 0x6f, 0x1e,
		0xb9, 0xe9, 0x0e, 0x71, 0xdc, 0x87, 0x1a, 0x2a, 0x63, 0x62, 0x90, 0xf4, 0x46, 0x28, 0x9c, 0x7b,
		0x44, 0x27, 0xe2, 0x62, 0xac, 0x64, 0x22, 0x13, 0x54, 0x86, 0x0b, 0x37, 0xb8, 0x33, 0x9b, 0x56,
		0xdb, 0xf2, 0x9f, 0xd4, 0x8f, 0x79, 0x7c, 0xf1, 0xc2, 0x1d, 0x15, 0x0f, 0x85, 0x27, 0xdb, 0x54,
		0x99, 0x29, 0x39, 0x99, 0x93, 0x9f, 0x49, 0xb9, 0x99, 0x55, 0x1b, 0xd3, 0x6a, 0x63, 0x5e, 0x2d,
		0x4c, 0xac, 0xc6, 0xcc, 0x8a, 0x4c, 0x1d, 0xbe, 0x91, 0x72, 0xd8, 0x71, 0xe6, 0xbe, 0x59, 0x2d,
		0x61, 0xfb, 0x96, 0xff, 0x44, 0xeb, 0x86, 0xb9, 0x50, 0x5f, 0x32, 0xa4, 0x6b, 0xe7, 0x8f, 0x46,
		0x8f, 0xf6, 0xd1, 0xf4, 0x18, 0xaf, 0xf1, 0xf8, 0xc5, 0x2f, 0x7e, 0xbf, 0x38, 0x3e, 0xfd, 0xf9,
		0xe6, 0x4b, 0xed, 0xd3, 0xd1, 0xf1, 0xd1, 0xe5, 0xef, 0x79, 0xce, 0x14, 0x76, 0x4f, 0x39, 0xbf,
		0x71, 0xf2, 0xcf, 0x33, 0xdb, 0x4e, 0x53, 0x04, 0x38, 0x3e, 0xfd, 0x54, 0x3b, 0x3e, 0xc8, 0xb3,
		0x6d, 0xde, 0xdf, 0x4e, 0xfb, 0x1b, 0xd7, 0xbe, 0x5d, 0xfe, 0x72, 0x76, 0x7e, 0xf4, 0xeb, 0x66,
		0xbd, 0xf3, 0xe7, 0xa3, 0xcb, 0x4d, 0x7a, 0xe1, 0xe0, 0x5a, 0xef, 0x6f, 0xd2, 0x1b, 0x7f, 0xbb,
		0xa8, 0x9f, 0x6f, 0xdc, 0x09, 0xef, 0x6d, 0xdc, 0x1b, 0x97, 0x36, 0x4a, 0x6c, 0x1d, 0x1f, 0x6f,
		0xdc, 0x01, 0x17, 0x37, 0xe9, 0x8d, 0xbf, 0xd6, 0x8e, 0x36, 0xea, 0x84, 0x4f, 0x2e, 0xcf, 0x36,
		0xee, 0x42, 0x97, 0x37, 0xe9, 0x8d, 0xff, 0x5d, 0x3f, 0x3f, 0xa9, 0x6f, 0x9e, 0xd0, 0xaa, 0x6c,
		0x9a, 0x01, 0xb1, 0x49, 0xef, 0xfb, 0xe9, 0xf4, 0xe4, 0xe2, 0xf4, 0xb8, 0xbe, 0x71, 0x97, 0xba,
		0xba, 0x49, 0x6f, 0x3c, 0x74, 0x84, 0x6c, 0xd8, 0x1b, 0x5f, 0xd6, 0xbf, 0xde, 0x7c, 0xae, 0xd5,
		0xbf, 0x9e, 0x9e, 0x30, 0xbe, 0x38, 0xcb, 0x4e, 0x8d, 0xcc, 0xf6, 0x23, 0x50, 0x38, 0xf8, 0xbc,
		0x27, 0x1e, 0x85, 0xcb, 0x1a, 0x74, 0x08, 0x77, 0x44, 0xd0, 0x61, 0x25, 0xad, 0x10, 0x74, 0x40,
		0xd0, 0x61, 0xf1, 0x1b, 0xf1, 0x07, 0x1d, 0xbc, 0x27, 0xaf, 0xed, 0xdc, 0x1b, 0x4c, 0x2c, 0x3a,
		0xc9, 0xa6, 0xc5, 0x32, 0xc3, 0x5e, 0x75, 0xbb, 0xd7, 0x19, 0xbc, 0x70, 0x62, 0x82, 0x34, 0xd6,
		0x80, 0xb1, 0x62, 0xbd, 0xd5, 0xab, 0x08, 0x27, 0xa6, 0x21, 0x86, 0x19, 0x77, 0xe1, 0xff, 0xed,
		0x2a, 0xe5, 0x6c, 0xe4, 0xe8, 0x99, 0x8a, 0x17, 0xe3, 0x47, 0x09, 0xff, 0x8f, 0x34, 0xdd, 0x91,
		0x7e, 0x8e, 0x94, 0x42, 0x5e, 0xe5, 0x78, 0x3d, 0x57, 0x9c, 0x7e, 0xed, 0xca, 0x79, 0x91, 0x2c,
		0x13, 0xbf, 0xca, 0xcb, 0x6a, 0x19, 0x2f, 0x7d, 0xa2, 0xe4, 0x8c, 0x0a, 0x3b, 0x50, 0xd8, 0x63,
		0x76, 0xc2, 0x64, 0xc8, 0xd4, 0x29, 0x16, 0x61, 0xca, 0xe8, 0x9f, 0x0b, 0xf5, 0x43, 0x84, 0x41,
		0x84, 0x41, 0x84, 0xa5, 0x4d, 0x84, 0x85, 0x4c, 0x9d, 0x66, 0x11, 0xe6, 0xb3, 0x34, 0x5d, 0xa6,
		0xf6, 0x1e, 0xc8, 0x71, 0x26, 0x2b, 0x97, 0x20, 0xbc, 0x20, 0xbc, 0x62, 0x11, 0x5e, 0x48, 0x56,
		0x86, 0xdf, 0x10, 0x7e, 0x43, 0xf8, 0x0d, 0x23, 0xde, 0x37, 0x24, 0x2b, 0x23, 0x59, 0x99, 0xe7,
		0x0f, 0x92, 0x95, 0xd3, 0xf9, 0xce, 0x48, 0x56, 0x5e, 0xf3, 0x37, 0x46, 0xb2, 0xf2, 0x46, 0xbc,
		0x31, 0x92, 0x95, 0xd7, 0xfc, 0x80, 0x91, 0xac, 0xbc, 0xc6, 0xef, 0x8b, 0x64, 0xe5, 0x35, 0x7f,
		0x63, 0x24, 0x2b, 0x6f, 0x86, 0x01, 0x81, 0x64, 0xe5, 0xf5, 0xbf, 0xd4, 0x48, 0x56, 0x5e, 0xf7,
		0x37, 0x46, 0xb2, 0x32, 0xff, 0x6a, 0x24, 0x2b, 0x2f, 0xd9, 0x06, 0x41, 0x07, 0x1a, 0xf5, 0x11,
		0x74, 0x40, 0xb2, 0xb2, 0x04, 0x9b, 0x22, 0x59, 0x59, 0xfe, 0xc2, 0xa6, 0x2f, 0x59, 0x59, 0x25,
		0x65, 0x23, 0xc7, 0x9a, 0xab, 0x4c, 0x18, 0x20, 0x41, 0x3f, 0x45, 0xbd, 0x6d, 0x03, 0x47, 0x03,
		0x26, 0xc6, 0xc1, 0xf8, 0x1c, 0x91, 0xfb, 0x68, 0xf3, 0x26, 0xc2, 0xd5, 0xe4, 0xb9, 0x13, 0xaf,
		0x3b, 0x30, 0xce, 0x9f, 0x08, 0x37, 0x25, 0xcd, 0xa1, 0xa0, 0x9e, 0x44, 0x6c, 0xe3, 0x58, 0x56,
		0x72, 0x9a, 0xc6, 0x91, 0x2c, 0x2b, 0x79, 0x2b, 0x1b, 0x63, 0x59, 0xe2, 0xee, 0x20, 0x2d, 0xdb,
		0x2c, 0x99, 0xe3, 0x48, 0x62, 0xed, 0x23, 0x2d, 0x95, 0xd4, 0x47, 0x4a, 0xe2, 0x23, 0xf7, 0x8f,
		0x2e, 0xa1, 0x7f, 0x34, 0x27, 0x44, 0xde, 0xe0, 0x3e, 0xf0, 0xb2, 0x00, 0x86, 0xca, 0xc1, 0xd1,
		0xd1, 0x49, 0x66, 0x67, 0x00, 0x4d, 0x53, 0x96, 0x71, 0x04, 0xd0, 0x34, 0x2d, 0xc9, 0x13, 0x80,
		0x96, 0x4c, 0x8f, 0x71, 0x45, 0xc7, 0xf1, 0x85, 0xe1, 0x09, 0xf7, 0x51, 0x44, 0x68, 0x9c, 0x1f,
		0xca, 0x88, 0x37, 0xeb, 0x30, 0x46, 0x05, 0x63, 0x54, 0xe6, 0x5c, 0x28, 0x79, 0x25, 0x3a, 0xbd,
		0x1c, 0xc3, 0x18, 0xa0, 0x4c, 0x49, 0xca, 0x54, 0x7a, 0x18, 0x03, 0xb1, 0xef, 0xbc, 0x5a, 0xbf,
		0x79, 0x0c, 0x62, 0x48, 0xc4, 0xd1, 0x8a, 0x41, 0x0c, 0x11, 0x16, 0x3e, 0x38, 0x9e, 0xaf, 0x5e,
		0xd8, 0x14, 0xec, 0x82, 0xa2, 0x4c, 0xd4, 0x35, 0xc5, 0xcc, 0x54, 0xc9, 0xb8, 0xa9, 0xf9, 0x8a,
		0x32, 0x15, 0xf8, 0x66, 0x4a, 0xb1, 0x1c, 0x2a, 0xec, 0x31, 0x7a, 0x1b, 0xb5, 0x22, 0x01, 0xce,
		0x32, 0x90, 0xae, 0x61, 0xb6, 0x5a, 0xae, 0xf0, 0x3c, 0xce, 0x60, 0xcc, 0x21, 0xc3, 0x5e, 0x2c,
		0x94, 0xe2, 0xa3, 0xd8, 0x1c, 0xca, 0x3d, 0x96, 0x19, 0x69, 0x37, 0x43, 0xc3, 0xf7, 0x8c, 0x7b,
		0x9e, 0x99, 0xbe, 0x2f, 0x5c, 0x9b, 0xb5, 0x3a, 0x25, 0xd8, 0x78, 0xeb, 0x6a, 0xcf, 0x38, 0x6c,
		0xbc, 0x5c, 0x15, 0x8d, 0xc3, 0xc6, 0xf0, 0x7f, 0x8b, 0xc1, 0x8f, 0xe7, 0x52, 0xff, 0xa5, 0x74,
		0xb5, 0x67, 0x94, 0x47, 0xbf, 0x2d, 0x55, 0xae, 0xf6, 0x8c, 0x4a, 0xa3, 0xb0, 0x75, 0x7d, 0xbd,
		0x23, 0xbb, 0xa6, 0xf0, 0xbc, 0xdf, 0xe7, 0x4b, 0xd6, 0x68, 0x70, 0x92, 0xf5, 0xf4, 0xe2, 0xe8,
		0x37, 0x6d, 0xb4, 0xfd, 0x73, 0x2b, 0x2e, 0xea, 0x16, 0xfe, 0xc1, 0x48, 0x5f, 0x96, 0x9d, 0x98,
		0x72, 0x89, 0xf4, 0xb0, 0x7d, 0x15, 0x6c, 0x1f, 0xdc, 0x32, 0xd3, 0xb8, 0xab, 0x19, 0x5f, 0x1a,
		0xcf, 0xc5, 0xed, 0x72, 0xff, 0x43, 0xe1, 0xf9, 0xa0, 0xff, 0xf6, 0x97, 0x2f, 0xf3, 0x3e, 0x56,
		0xdc, 0x3e, 0xe8, 0x7f, 0x58, 0xf0, 0x2f, 0xd5, 0xfe, 0x87, 0x88, 0x7b, 0x54, 0xfa, 0x5b, 0x33,
		0x1f, 0x1d, 0xfc, 0xbe, 0xb4, 0x68, 0x41, 0x79, 0xc1, 0x82, 0xfd, 0x45, 0x0b, 0xf6, 0x17, 0x2c,
		0x58, 0xf8, 0x48, 0xa5, 0x05, 0x0b, 0x2a, 0xfd, 0x97, 0x99, 0xcf, 0x6f, 0xcd, 0xff, 0x68, 0xb5,
		0x5f, 0x78, 0x59, 0xf4, 0x6f, 0x07, 0xfd, 0x97, 0x0f, 0x85, 0xc2, 0x06, 0x0b, 0x42, 0x5c, 0xb7,
		0xf8, 0xaf, 0x5b, 0xfa, 0x14, 0xc3, 0xbb, 0x64, 0x9f, 0x43, 0x51, 0x31, 0x31, 0x22, 0xf7, 0x96,
		0xd3, 0x31, 0x2d, 0xdb, 0x08, 0xc2, 0x1d, 0x8c, 0xd0, 0x9d, 0x41, 0xff, 0xe4, 0x8f, 0x85, 0x7d,
		0x1f, 0xc4, 0x77, 0x52, 0x07, 0xde, 0xbf, 0x5a, 0x36, 0x5b, 0x8e, 0x22, 0x93, 0x4f, 0x65, 0xe1,
		0xb6, 0x41, 0x45, 0x39, 0xbd, 0x07, 0xcd, 0xc2, 0x7d, 0xbf, 0xb8, 0x66, 0xd3, 0xb7, 0x1c, 0xfb,
		0xb3, 0x75, 0x6f, 0x0d, 0x93, 0x71, 0xd2, 0x98, 0x02, 0x9e, 0xff, 0x6a, 0xfe, 0xc8, 0xdc, 0x51,
		0x95, 0x2a, 0xfb, 0x19, 0x3a, 0xac, 0xb4, 0x08, 0x64, 0x06, 0x89, 0xc3, 0x8d, 0x3d, 0xf2, 0x5b,
		0x5b, 0x5b, 0x5b, 0x57, 0xa6, 0xf1, 0x77, 0xcd, 0xf8, 0x63, 0xcf, 0x38, 0xbc, 0x69, 0x4c, 0xfc,
		0xe5, 0xfa, 0xda, 0xb8, 0x69, 0x14, 0x9e, 0xf7, 0xb6, 0xab, 0xc5, 0x7e, 0xe1, 0xa7, 0xd7, 0xdf,
		0x37, 0xae, 0xaf, 0x77, 0x0a, 0xff, 0xa2, 0xac, 0xfa, 0xa9, 0xf0, 0x32, 0x58, 0x9b, 0x4f, 0x07,
		0x29, 0x75, 0x60, 0xb9, 0x01, 0x86, 0x8b, 0x9f, 0xa0, 0x0c, 0xe8, 0xa5, 0x91, 0x50, 0x2a, 0x70,
		0x23, 0xc5, 0xfd, 0xd9, 0x46, 0xe1, 0xe4, 0xae, 0xe3, 0x32, 0x04, 0x33, 0x26, 0x37, 0xa3, 0x76,
		0xbe, 0x12, 0x77, 0x66, 0xaf, 0x1d, 0xb8, 0xb6, 0x2b, 0xc5, 0x32, 0x22, 0x23, 0x88, 0x8c, 0xc8,
		0x6c, 0x88, 0xc8, 0x48, 0x2e, 0x3f, 0xe0, 0x3e, 0xc3, 0xee, 0x75, 0x6e, 0x85, 0xcb, 0x10, 0x20,
		0xa9, 0x2a, 0x6c, 0x71, 0x6e, 0xda, 0xf7, 0xa9, 0x08, 0x90, 0x70, 0x5a, 0x0a, 0xcc, 0xb0, 0x33,
		0x84, 0x9b, 0x5c, 0xfb, 0x69, 0x00, 0x99, 0x0c, 0x96, 0x00, 0xab, 0x05, 0xa0, 0xeb, 0x08, 0xaa,
		0x95, 0xca, 0x7e, 0x25, 0xc5, 0xc7, 0x00, 0xf8, 0x32, 0x43, 0x66, 0x2f, 0x50, 0x6d, 0xa1, 0x0f,
		0x5f, 0xbd, 0xcf, 0xec, 0xf4, 0x7e, 0x80, 0x1f, 0x80, 0x1f, 0x80, 0x1f, 0x52, 0xf7, 0x85, 0x25,
		0x09, 0x61, 0x4d, 0xd3, 0x33, 0x58, 0x93, 0x0c, 0x58, 0xbd, 0xbc, 0xfc, 0x3e, 0x97, 0xcc, 0x24,
		0x13, 0xa4, 0xda, 0xcf, 0x92, 0xa1, 0xa4, 0x81, 0x75, 0x89, 0xc5, 0x30, 0x27, 0x05, 0xa4, 0x9c,
		0x4d, 0x11, 0x8d, 0xcd, 0x6c, 0xf0, 0x3f, 0xf5, 0x82, 0x0b, 0xd7, 0x2a, 0x93, 0x41, 0xfe, 0xb5,
		0x77, 0x93, 0xaf, 0x55, 0x5f, 0x80, 0xe9, 0x3a, 0xc3, 0xe9, 0xbf, 0xd2, 0x07, 0x06, 0x4a, 0xd6,
		0x5f, 0x9e, 0x07, 0xdf, 0x7a, 0x31, 0x7c, 0x86, 0xa9, 0xbf, 0x91, 0x06, 0x05, 0x4a, 0xf4, 0x09,
		0x90, 0x28, 0x1b, 0x23, 0x15, 0x6c, 0xa8, 0x24, 0x9c, 0x13, 0xfd, 0x00, 0xa8, 0x5e, 0x42, 0xf5,
		0x92, 0x76, 0xbb, 0x9d, 0x61, 0xba, 0x95, 0xca, 0x54, 0xab, 0x39, 0xd3, 0xac, 0x02, 0x06, 0x4b,
		0x81, 0x98, 0x78, 0x6d, 0xde, 0x41, 0x96, 0x15, 0x94, 0xfe, 0x1f, 0x39, 0x94, 0x3b, 0x42, 0x60,
		0xe4, 0xd2, 0x5b, 0xee, 0x18, 0x76, 0x1b, 0x62, 0x98, 0x45, 0x49, 0xee, 0x5b, 0x94, 0xe3, 0x1c,
		0xe7, 0x06, 0xef, 0x3a, 0xbc, 0xeb, 0xf1, 0x78, 0xd7, 0x95, 0xc7, 0xb9, 0x11, 0x8b, 0xef, 0x17,
		0x5e, 0x3b, 0xe5, 0x41, 0xe2, 0x0c, 0x8c, 0xc8, 0xc6, 0x90, 0x9c, 0x8c, 0xc9, 0xcf, 0xa0, 0xdc,
		0x8c, 0xaa, 0x8d, 0x61, 0xb5, 0x31, 0xae, 0x16, 0x06, 0x56, 0x77, 0x37, 0x30, 0x78, 0x9d, 0x95,
		0x19, 0x3b, 0xdc, 0x88, 0x6d, 0x5e, 0xe3, 0xcc, 0x05, 0x66, 0x9a, 0xdb, 0xa8, 0x68, 0xd3, 0x6a,
		0x67, 0x7e, 0x1d, 0x42, 0x40, 0x9f, 0x30, 0xd0, 0x25, 0x14, 0xb4, 0x0b, 0x07, 0xed, 0x42, 0x42,
		0xab, 0xb0, 0xe0, 0x11, 0x1a, 0x4c, 0xc2, 0x43, 0xdd, 0x86, 0x5f, 0x79, 0x5f, 0x79, 0xe7, 0x42,
		0xce, 0xe8, 0xfd, 0x0a, 0xe3, 0x9e, 0x5a, 0xe6, 0x44, 0xce, 0x10, 0x44, 0xcf, 0xbc, 0xc8, 0xf0,
		0x6b, 0x34, 0xcc, 0x8d, 0x1c, 0xff, 0x79, 0x66, 0xdf, 0x31, 0xa7, 0x73, 0x8e, 0x24, 0x33, 0x8f,
		0xc4, 0x48, 0x09, 0xfe, 0xf9, 0x92, 0x59, 0xa6, 0x05, 0xeb, 0xdc, 0xc9, 0xec, 0x12, 0x82, 0x7b,
		0x1e, 0x65, 0x76, 0x29, 0xc1, 0x3b, 0xa7, 0x32, 0xe3, 0x37, 0x62, 0x0f, 0x94, 0xe0, 0x9f, 0x6b,
		0x99, 0x61, 0x71, 0xc9, 0x39, 0xef, 0x32, 0xe3, 0x17, 0xa2, 0x08, 0x4a, 0x70, 0xcf, 0xc7, 0xcc,
		0x2e, 0x1d, 0x58, 0xe7, 0x66, 0x66, 0x9c, 0x31, 0xca, 0xa0, 0x04, 0xff, 0x9c, 0xcd, 0x8c, 0xdf,
		0x89, 0x0a, 0x28, 0xc1, 0x3d, 0x97, 0x33, 0xbb, 0x74, 0x60, 0x9f, 0xd7, 0x99, 0x71, 0xe6, 0xa8,
		0x82, 0x12, 0xfc, 0xf3, 0x3d, 0x33, 0x4d, 0x09, 0x1d, 0x73, 0x3f, 0x43, 0x82, 0xb0, 0xee, 0xd8,
		0x58, 0xbb, 0x06, 0x2f, 0x1c, 0xb5, 0xc0, 0x6c, 0x73, 0x42, 0x67, 0x2e, 0x07, 0xe3, 0x30, 0xc2,
		0x1c, 0x82, 0x5d, 0x08, 0x76, 0x8d, 0xbe, 0x00, 0xc1, 0xae, 0x0c, 0x04, 0xbb, 0xf8, 0xe7, 0x91,
		0xbe, 0x15, 0x03, 0x1c, 0x73, 0x49, 0xc3, 0x3d, 0x79, 0xe6, 0x93, 0x32, 0x0a, 0xf6, 0x44, 0x13,
		0x29, 0x98, 0xe6, 0x97, 0xbe, 0xaa, 0x18, 0xce, 0x2a, 0x8a, 0x39, 0xc3, 0x4d, 0x59, 0x12, 0xa8,
		0x72, 0xac, 0x85, 0x16, 0x73, 0x06, 0x9f, 0x52, 0x6a, 0x2f, 0xf8, 0xee, 0x85, 0xca, 0x28, 0x71,
		0xb6, 0x7c, 0x18, 0xee, 0x3c, 0x18, 0x8c, 0x12, 0x4f, 0x52, 0xe5, 0x23, 0xe9, 0x2d, 0x05, 0xb2,
		0x9a, 0x7f, 0x94, 0x38, 0xbd, 0x06, 0x65, 0xa1, 0xaa, 0x3e, 0xe0, 0xa9, 0xb6, 0x7e, 0x53, 0xa3,
		0x12, 0x0a, 0x91, 0x0c, 0x8a, 0x54, 0x36, 0xab, 0x8b, 0xdb, 0xda, 0x82, 0x48, 0x85, 0x48, 0x85,
		0x48, 0xdd, 0x54, 0x91, 0x1a, 0x0a, 0x91, 0x2c, 0x8a, 0x54, 0xa9, 0x39, 0xd8, 0xab, 0xe5, 0xa9,
		0xe4, 0xc0, 0xe1, 0xa5, 0xa7, 0xc5, 0x25, 0x4c, 0x4b, 0x10, 0xa6, 0x10, 0xa6, 0x99, 0x12, 0xa6,
		0x28, 0xca, 0x50, 0xdd, 0x0e, 0x7e, 0x6a, 0xf8, 0xa9, 0x63, 0x13, 0x16, 0x7c, 0x2e, 0xcc, 0x1c,
		0x8a, 0x32, 0x50, 0x94, 0x31, 0xf3, 0x35, 0x28, 0xca, 0xd0, 0xc4, 0x23, 0x31, 0x52, 0x02, 0x45,
		0x19, 0x28, 0xca, 0x98, 0xcf, 0x1e, 0x28, 0xca, 0x40, 0x51, 0x06, 0x8a, 0x32, 0xe6, 0x53, 0x02,
		0x45, 0x19, 0x28, 0xca, 0x40, 0x51, 0xc6, 0x5b, 0x4a, 0xa0, 0x28, 0x03, 0x45, 0x19, 0x28, 0xca,
		0x98, 0x43, 0x09, 0x14, 0x65, 0xa0, 0x28, 0x63, 0x9e, 0xe1, 0x05, 0x3a, 0xa0, 0x28, 0x03, 0x45,
		0x19, 0x73, 0x28, 0x81, 0xa2, 0x0c, 0x14, 0x65, 0xa4, 0x62, 0x17, 0x14, 0x65, 0x28, 0x6c, 0x87,
		0x60, 0x17, 0x82, 0x5d, 0x73, 0xbf, 0x00, 0xc1, 0x2e, 0x06, 0xde, 0x47, 0x51, 0x46, 0x72, 0x3b,
		0x6c, 0x5a, 0x51, 0x06, 0x47, 0xfe, 0x54, 0x4e, 0x77, 0x4d, 0xc6, 0x45, 0xf0, 0x90, 0x49, 0x25,
		0xbb, 0xc5, 0xda, 0xf6, 0xf8, 0xdf, 0xe2, 0x69, 0x32, 0xd9, 0x25, 0xa7, 0x28, 0x05, 0xf2, 0xc7,
		0x96, 0xe7, 0xd7, 0x7c, 0x5f, 0xb1, 0x97, 0xf2, 0x57, 0xcb, 0xae, 0xb7, 0xc5, 0x40, 0xb0, 0x7b,
		0x6a, 0x4a, 0x3f, 0xff, 0xd5, 0xfc, 0x31, 0xb1, 0x53, 0xf1, 0x7d, 0xb9, 0x5c, 0x3d, 0x28, 0x97,
		0xf7, 0x0e, 0xf6, 0x0f, 0xf6, 0x0e, 0x2b, 0x95, 0x62, 0x55, 0x25, 0x16, 0x9f, 0x3f, 0x75, 0x5b,
		0xc2, 0x15, 0xad, 0x8f, 0x03, 0x12, 0xda, 0xbd, 0x76, 0x3b, 0xd6, 0x93, 0x63, 0xe2, 0x7c, 0xdd,
		0x1c, 0x9f, 0x57, 0xca, 0xdd, 0xd4, 0xc6, 0xe3, 0x79, 0x0c, 0x32, 0xd2, 0x76, 0xf6, 0x89, 0xce,
		0x32, 0x0a, 0x8f, 0x3a, 0x15, 0x73, 0x4a, 0x48, 0xc9, 0xc7, 0x4a, 0xc9, 0xc6, 0xca, 0xf3, 0x49,
		0x4a, 0x98, 0x4f, 0x92, 0xa4, 0xa9, 0xb3, 0xce, 0xf3, 0x49, 0x48, 0xd3, 0xbd, 0x66, 0x2e, 0x0b,
		0x61, 0xca, 0x17, 0x93, 0x5f, 0x02, 0x73, 0x49, 0xe2, 0xf1, 0x23, 0x60, 0x2e, 0x09, 0xa3, 0xdd,
		0xcf, 0xc1, 0x37, 0xb9, 0xf5, 0x9d, 0xf7, 0xad, 0x63, 0x8c, 0xf0, 0x21, 0xc3, 0x5e, 0x2c, 0x94,
		0xe2, 0xa3, 0xd8, 0x1c, 0xca, 0xb1, 0x4e, 0x4a, 0x9f, 0xa1, 0xe1, 0x7b, 0xc6, 0x3d, 0xb9, 0x87,
		0xe7, 0x86, 0x1b, 0x67, 0x67, 0x82, 0xfa, 0xf8, 0x4f, 0x83, 0x93, 0xac, 0x3a, 0x06, 0x13, 0x87,
		0xbb, 0x67, 0x6b, 0xb2, 0x7a, 0x48, 0xdf, 0x34, 0x39, 0x8d, 0xf5, 0xb0, 0x7d, 0x15, 0x6c, 0x8f,
		0xd1, 0xd9, 0x99, 0x9d, 0xc8, 0x9e, 0x59, 0x41, 0x88, 0xeb, 0x96, 0xc9, 0x49, 0xed, 0xcc, 0x8a,
		0x21, 0xe9, 0xc9, 0xf1, 0xdb, 0x69, 0x41, 0xee, 0x2d, 0xa7, 0x63, 0x5a, 0xb6, 0x11, 0x78, 0x0c,
		0x19, 0xa1, 0x3b, 0x83, 0xfe, 0xc9, 0x1f, 0x0b, 0xfb, 0x3e, 0xf0, 0xa8, 0xa6, 0x0e, 0xbc, 0x7f,
		0xb5, 0x6c, 0x0d, 0x59, 0x04, 0xac, 0xb9, 0x1e, 0xe1, 0xb6, 0x41, 0x4d, 0xa0, 0x7a, 0x97, 0x84,
		0x99, 0x7d, 0xbf, 0xb8, 0x66, 0xd3, 0xb7, 0x1c, 0xfb, 0xb3, 0x75, 0x6f, 0x0d, 0xc3, 0x4b, 0x7c,
		0x19, 0x03, 0x8c, 0x3a, 0xe5, 0xab, 0xf9, 0x23, 0x73, 0x47, 0x55, 0xaa, 0xec, 0x67, 0xe8, 0xb0,
		0xd2, 0x22, 0x90, 0x79, 0x5a, 0xb6, 0xb0, 0x62, 0x8f, 0xfc, 0xd6, 0xd6, 0xd6, 0xd6, 0x95, 0x69,
		0xfc, 0x5d, 0x33, 0xfe, 0xd8, 0x33, 0x0e, 0x6f, 0x1a, 0x13, 0x7f, 0xb9, 0xbe, 0x36, 0x6e, 0x1a,
		0x85, 0xe7, 0xbd, 0xed, 0x6a, 0xb1, 0x5f, 0xf8, 0xe9, 0xf5, 0xf7, 0x8d, 0xeb, 0xeb, 0x9d, 0xc2,
		0xbf, 0x28, 0xab, 0x7e, 0x2a, 0xbc, 0x0c, 0xd6, 0xe6, 0xd3, 0x41, 0x4a, 0x1d, 0x58, 0x6e, 0x80,
		0xe1, 0xe2, 0x27, 0x28, 0x03, 0x7a, 0x69, 0x24, 0x94, 0x04, 0xd1, 0x88, 0x2b, 0x3c, 0x4b, 0x08,
		0x39, 0x8d, 0xa2, 0x9e, 0x5d, 0xc7, 0x65, 0x08, 0x66, 0x4c, 0x6e, 0x46, 0x9d, 0x5c, 0x2d, 0xee,
		0xcc, 0x5e, 0x3b, 0x70, 0x6d, 0x57, 0x8a, 0x65, 0x44, 0x46, 0x10, 0x19, 0x91, 0xd9, 0x10, 0x91,
		0x91, 0x5c, 0x7e, 0xc0, 0x7d, 0x86, 0xdd, 0xeb, 0xdc, 0x0a, 0x97, 0x21, 0x40, 0x52, 0x55, 0xd8,
		0xe2, 0xdc, 0xb4, 0xef, 0x53, 0x11, 0x20, 0xe1, 0xb4, 0x14, 0xb8, 0xb3, 0xc1, 0xc7, 0x70, 0x93,
		0x6b, 0x3f, 0x0d, 0x20, 0x93, 0x23, 0xdb, 0x9f, 0xd3, 0x02, 0xd0, 0x75, 0x04, 0xd5, 0x4a, 0x65,
		0xbf, 0x92, 0xe2, 0x63, 0x00, 0x7c, 0x99, 0x21, 0xb3, 0x17, 0xa8, 0xb6, 0xd0, 0x87, 0xaf, 0x8c,
		0x60, 0xde, 0xec, 0x07, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x21, 0x75, 0x5f, 0x58, 0x92, 0x10, 0xd6,
		0x34, 0x3d, 0x83, 0x35, 0xc9, 0x80, 0xd5, 0xcb, 0xcb, 0xef, 0x73, 0xc9, 0x4c, 0x32, 0x41, 0xaa,
		0xfd, 0x2c, 0x19, 0x4a, 0x1a, 0x58, 0x97, 0x58, 0x0c, 0x73, 0x52, 0x40, 0xca, 0xd9, 0x14, 0xd1,
		0xd8, 0xcc, 0x06, 0xff, 0x53, 0x2f, 0xb8, 0x70, 0xad, 0x32, 0x19, 0xe4, 0x5f, 0x7b, 0x37, 0xf9,
		0x06, 0x55, 0x31, 0x11, 0x0b, 0x54, 0x19, 0x2b, 0x98, 0xe4, 0xab, 0x4f, 0x25, 0xaa, 0x97, 0xde,
		0x31, 0x9e, 0xe0, 0xb8, 0x7a, 0x54, 0x22, 0xb3, 0x9c, 0x56, 0x20, 0x4a, 0x2f, 0x08, 0x65, 0x2d,
		0x00, 0xa5, 0x15, 0x7c, 0x46, 0x25, 0x26, 0x91, 0x0d, 0x58, 0xaf, 0x7f, 0x5e, 0xaa, 0xb8, 0x8d,
		0xe7, 0xc2, 0x47, 0xbb, 0xea, 0xab, 0x2f, 0xee, 0xf2, 0x4f, 0xac, 0x38, 0x05, 0x59, 0xea, 0x2b,
		0x52, 0x3d, 0x02, 0x9d, 0x55, 0xe8, 0xbb, 0x9c, 0xa4, 0x8b, 0x09, 0x35, 0xff, 0x5f, 0x16, 0x90,
		0x2e, 0x2a, 0xc9, 0x64, 0x49, 0xb5, 0x84, 0x36, 0x72, 0x34, 0x99, 0x4f, 0x85, 0xd9, 0x77, 0x9c,
		0xf3, 0x7e, 0xf9, 0x8e, 0xe8, 0x38, 0xee, 0xe2, 0x46, 0x3b, 0xa1, 0xe9, 0x33, 0xfa, 0xdc, 0x02,
		0x0a, 0x2d, 0xaf, 0xc5, 0x5c, 0xe9, 0xb5, 0x8c, 0xe2, 0x95, 0x9c, 0xf4, 0x3a, 0x7a, 0x4f, 0xcb,
		0x2e, 0x56, 0x54, 0xaf, 0xa2, 0xb4, 0xd7, 0x50, 0xda, 0x2b, 0xf8, 0xd6, 0xeb, 0x37, 0x78, 0x6e,
		0xa6, 0x3b, 0xb9, 0xaa, 0x36, 0x31, 0xdf, 0x1c, 0xd3, 0x7c, 0x05, 0x11, 0xc6, 0x64, 0x8d, 0x34,
		0x45, 0x34, 0x62, 0xd1, 0x6d, 0x64, 0x37, 0xb5, 0x8c, 0x3b, 0x3a, 0xfa, 0x05, 0xa0, 0xba, 0x97,
		0xc9, 0x6e, 0x64, 0xb2, 0xbb, 0x58, 0xea, 0x82, 0xa4, 0x5b, 0xfe, 0x0f, 0x05, 0x44, 0xf4, 0x61,
		0xb4, 0x11, 0x45, 0xdc, 0xd7, 0x60, 0xdb, 0x48, 0xd3, 0x63, 0x97, 0x88, 0xfb, 0xa5, 0x92, 0x36,
		0x4a, 0xe9, 0xba, 0x54, 0xa9, 0xba, 0x34, 0x97, 0x94, 0xc0, 0x25, 0x29, 0xe3, 0x92, 0xa8, 0xa5,
		0xdf, 0xf9, 0xa6, 0xd3, 0xb3, 0xfd, 0x01, 0x12, 0x89, 0x4c, 0xbe, 0x57, 0x81, 0x3b, 0x5a, 0x19,
		0xd5, 0x06, 0x91, 0xea, 0x77, 0x20, 0x1d, 0x29, 0xa4, 0x44, 0x06, 0xe5, 0x2f, 0x9b, 0x6a, 0xe4,
		0x4f, 0x39, 0xd2, 0xa7, 0x1c, 0xd9, 0x23, 0x5d, 0x46, 0x3d, 0x56, 0xa9, 0x6c, 0x7f, 0x82, 0x7c,
		0xd3, 0x71, 0x5d, 0xd1, 0xf4, 0xcd, 0xdb, 0xb6, 0x30, 0x44, 0xb3, 0x69, 0x08, 0xd7, 0x75, 0x5c,
		0x8f, 0xde, 0xb7, 0x63, 0xc1, 0x7e, 0xb4, 0x46, 0x1e, 0x7b, 0xd4, 0x46, 0x1e, 0x7b, 0xc9, 0x34,
		0xf2, 0x90, 0xbb, 0xf0, 0xaa, 0x17, 0x9f, 0x8d, 0x01, 0xd8, 0x18, 0x81, 0x85, 0x21, 0xe2, 0x71,
		0xbc, 0x91, 0x43, 0xd8, 0xe1, 0x79, 0xf7, 0x2c, 0xdb, 0xaf, 0x52, 0x72, 0x4e, 0xc7, 0xb7, 0x9b,
		0x10, 0xe2, 0x51, 0x4c, 0x92, 0x53, 0x6b, 0x4b, 0xc6, 0x90, 0x93, 0xc1, 0x33, 0x49, 0x99, 0x29,
		0x09, 0x8e, 0x33, 0xeb, 0xaa, 0xaf, 0xd6, 0xa7, 0x2d, 0x75, 0xa4, 0xe5, 0xed, 0x16, 0xc7, 0x4e,
		0xed, 0x98, 0x7c, 0xff, 0x8d, 0x14, 0xf4, 0xd1, 0xf2, 0x1d, 0xdf, 0x6c, 0xb3, 0xa8, 0xe6, 0x99,
		0x9d, 0xa0, 0x94, 0xa1, 0x94, 0xa1, 0x94, 0xa1, 0x94, 0xa1, 0x94, 0xa1, 0x94, 0xa1, 0x94, 0x65,
		0x94, 0x72, 0xcf, 0xe6, 0xb6, 0x9b, 0x17, 0xee, 0x08, 0x25, 0x0d, 0x25, 0x0d, 0x25, 0x0d, 0x25,
		0x0d, 0x25, 0x0d, 0x25, 0x0d, 0x25, 0xdd, 0xcf, 0x54, 0xda, 0xd1, 0x28, 0x00, 0x1a, 0x04, 0x08,
		0x77, 0x25, 0x83, 0x3b, 0x39, 0xe9, 0x80, 0x68, 0x90, 0x3c, 0x77, 0xf3, 0x69, 0xfc, 0x35, 0x5c,
		0xa9, 0x45, 0x11, 0xc2, 0x85, 0x77, 0xae, 0x10, 0xf2, 0xd1, 0xae, 0x60, 0x95, 0x5c, 0xa4, 0x6b,
		0x0f, 0x91, 0x2e, 0x44, 0xba, 0x88, 0x30, 0x84, 0x0e, 0x3f, 0x08, 0xb0, 0x83, 0x08, 0x37, 0x08,
		0xa0, 0x4a, 0x05, 0x5e, 0xa8, 0x96, 0x9e, 0x2a, 0xc2, 0x09, 0x0e, 0xc5, 0x46, 0x29, 0x03, 0x56,
		0x81, 0x0d, 0x5c, 0x24, 0xe3, 0x83, 0x09, 0x2c, 0x54, 0xd4, 0xa4, 0xae, 0x1b, 0x31, 0x2a, 0xa1,
		0xee, 0xc3, 0x93, 0x67, 0x35, 0xcd, 0xb6, 0xbc, 0x22, 0x0a, 0x57, 0x42, 0x19, 0x41, 0x19, 0x41,
		0x19, 0x41, 0x19, 0x41, 0x19, 0x41, 0x19, 0xa9, 0x29, 0x23, 0x57, 0x04, 0xd5, 0x0e, 0x2d, 0x79,
		0x65, 0x14, 0xae, 0x84, 0x32, 0x82, 0x32, 0x82, 0x32, 0x82, 0x32, 0x82, 0x32, 0x82, 0x32, 0x52,
		0x53, 0x46, 0x3d, 0x8f, 0xa2, 0x88, 0x82, 0x55, 0x50, 0x42, 0x50, 0x42, 0x50, 0x42, 0x50, 0x42,
		0x50, 0x42, 0x50, 0x42, 0xd4, 0x4f, 0x24, 0x5c, 0x7e, 0x18, 0xb5, 0xab, 0x05, 0x21, 0xd8, 0x96,
		0xcd, 0x5a, 0xf3, 0xa5, 0x75, 0xdb, 0xd2, 0x94, 0x50, 0xab, 0x34, 0xf7, 0x3c, 0xf3, 0x5e, 0x78,
		0x51, 0x6a, 0xcd, 0x47, 0x9f, 0x4c, 0x47, 0xb5, 0xf9, 0x8a, 0xc7, 0xc9, 0xa5, 0xba, 0xe4, 0x3c,
		0x7c, 0x78, 0xd4, 0x9d, 0x13, 0x31, 0xa6, 0xe4, 0x55, 0xa0, 0x02, 0xcb, 0xe4, 0xcb, 0x6a, 0x57,
		0x5f, 0x15, 0x1e, 0x15, 0x10, 0xb9, 0xb6, 0xd6, 0x13, 0x8f, 0xc2, 0xb5, 0xfc, 0x27, 0x79, 0x73,
		0x26, 0x5c, 0xb9, 0x1e, 0x26, 0x8d, 0xc4, 0xb5, 0x5b, 0x3f, 0xbb, 0x26, 0xfa, 0xb5, 0x4c, 0x9b,
		0x71, 0xe3, 0x3d, 0x79, 0x6d, 0xe7, 0xde, 0x90, 0xbc, 0x8c, 0x53, 0xf2, 0xae, 0x2c, 0xb1, 0xa6,
		0x6e, 0xf7, 0x3a, 0x83, 0x07, 0xed, 0xaf, 0x39, 0xd0, 0x1b, 0x5e, 0x07, 0x0d, 0x9d, 0x26, 0x86,
		0x1b, 0x6b, 0xec, 0x35, 0xd1, 0x12, 0xb7, 0xbd, 0x7b, 0x43, 0xd8, 0xbe, 0x6b, 0x09, 0x2f, 0xba,
		0x8a, 0x9c, 0x5e, 0x06, 0x4d, 0x09, 0x4d, 0x39, 0xff, 0x62, 0x79, 0xc2, 0x7d, 0xb4, 0x9a, 0x84,
		0xe4, 0xbc, 0xe9, 0xe5, 0xeb, 0xd1, 0x8f, 0x02, 0x3a, 0x33, 0x41, 0x9d, 0x49, 0xe8, 0x4c, 0x11,
		0xc9, 0x6a, 0x50, 0xb3, 0x22, 0x14, 0xaf, 0x30, 0xf9, 0x2a, 0xab, 0x5c, 0x69, 0xa6, 0xab, 0xad,
		0x7a, 0xc5, 0xd9, 0xae, 0x3a, 0xdb, 0x95, 0xe7, 0xbb, 0xfa, 0x44, 0xc7, 0x9b, 0xe4, 0xd9, 0xcb,
		0xb2, 0x44, 0xb8, 0x50, 0xd8, 0xe6, 0x6d, 0x5b, 0x22, 0xa6, 0xb3, 0xf0, 0xe6, 0x8c, 0x37, 0x52,
		0x1f, 0xbf, 0x76, 0x67, 0xb6, 0x3d, 0x81, 0x09, 0x28, 0xaa, 0xcc, 0xc8, 0xc5, 0x94, 0xec, 0xcc,
		0xc9, 0xce, 0xa4, 0xfc, 0xcc, 0x4a, 0x63, 0x5a, 0x85, 0x48, 0x45, 0x8e, 0x77, 0x16, 0xca, 0xad,
		0xe3, 0xb4, 0x85, 0x69, 0x73, 0x0c, 0x42, 0x29, 0xa6, 0x79, 0x08, 0x93, 0x24, 0x24, 0x5d, 0xe2,
		0xd1, 0x91, 0x01, 0xa7, 0x10, 0x3a, 0x10, 0x3a, 0x10, 0x3a, 0x33, 0x37, 0xc7, 0x6a, 0x09, 0xdb,
		0xb7, 0xfc, 0x27, 0x57, 0xdc, 0x71, 0x08, 0x1e, 0x85, 0x52, 0xc7, 0xfc, 0xd1, 0xe8, 0x51, 0x3e,
		0x9a, 0x1e, 0xc3, 0x1d, 0x1c, 0xbf, 0xe0, 0xe7, 0xfa, 0xc7, 0x6f, 0x3f, 0xdf, 0x5c, 0xd4, 0xcf,
		0x7f, 0x3d, 0xfa, 0x54, 0xcf, 0xa7, 0xbe, 0x70, 0x72, 0x3d, 0xc6, 0x0d, 0x84, 0x1e, 0xb9, 0x29,
		0x3f, 0xd5, 0xee, 0x94, 0x53, 0x61, 0x97, 0x64, 0xa0, 0x51, 0xbc, 0x77, 0x9f, 0x07, 0x5f, 0x5b,
		0x1f, 0x3e, 0xc3, 0xf0, 0x2f, 0x17, 0xc3, 0x47, 0x88, 0xe4, 0xd7, 0xa3, 0x9f, 0x90, 0x4c, 0x47,
		0x09, 0xaa, 0x56, 0x54, 0xd4, 0x86, 0x59, 0xed, 0x17, 0x01, 0x7b, 0x37, 0x83, 0xf6, 0xae, 0x7a,
		0xe7, 0x88, 0xb6, 0x30, 0xef, 0x68, 0x9a, 0x2a, 0xd4, 0x50, 0x07, 0x84, 0xb5, 0x67, 0x23, 0x81,
		0xb7, 0xb3, 0x33, 0x12, 0x5a, 0xbb, 0x63, 0x6e, 0x4b, 0x83, 0xe4, 0x88, 0xd4, 0xad, 0x7a, 0xb1,
		0xdc, 0x20, 0x0c, 0x7d, 0x51, 0xf6, 0x92, 0x95, 0x20, 0x35, 0x20, 0x35, 0xe0, 0x25, 0x83, 0xc1,
		0x0a, 0x83, 0x15, 0x06, 0x2b, 0xbc, 0x64, 0xf0, 0x92, 0x41, 0xe8, 0x40, 0xe8, 0xc0, 0x4b, 0x06,
		0x2f, 0x19, 0xbc, 0x64, 0x6f, 0xbd, 0x64, 0x9a, 0x87, 0x72, 0x46, 0x70, 0x92, 0x65, 0x6f, 0x28,
		0xa7, 0x64, 0xda, 0x12, 0xe6, 0x72, 0x32, 0x73, 0x02, 0x2b, 0x07, 0xe8, 0xe8, 0x97, 0xb7, 0xea,
		0xce, 0xe7, 0x37, 0x23, 0x5f, 0x56, 0x26, 0x8b, 0x54, 0x95, 0xbe, 0x18, 0xd4, 0x86, 0x64, 0xd9,
		0xd4, 0x26, 0xcb, 0x8e, 0x1e, 0x48, 0x3e, 0x4d, 0x76, 0xbc, 0x50, 0x73, 0x82, 0x6c, 0x09, 0x09,
		0xb2, 0xec, 0xd6, 0x4e, 0xe6, 0x13, 0x64, 0xcd, 0x6e, 0xd7, 0x18, 0x89, 0x62, 0xa2, 0xef, 0x3f,
		0xdc, 0x01, 0x41, 0x43, 0xcd, 0x46, 0x3f, 0xdc, 0xff, 0x54, 0x63, 0x4c, 0x3d, 0x68, 0xe8, 0xf9,
		0xee, 0xf2, 0xd1, 0xda, 0x2b, 0xc5, 0xf5, 0x7b, 0xad, 0x6f, 0x28, 0x7e, 0xf8, 0xae, 0x69, 0xf4,
		0x6c, 0x2f, 0x98, 0xfd, 0x40, 0x7b, 0x57, 0x57, 0xdc, 0x09, 0x57, 0xd8, 0xcd, 0x44, 0x3a, 0xdc,
		0x8f, 0x09, 0x7d, 0x54, 0xbf, 0xfc, 0x92, 0x3b, 0xff, 0xf2, 0x29, 0x57, 0x29, 0x97, 0xca, 0xdb,
		0xb9, 0x0b, 0x11, 0xf4, 0x3d, 0xc8, 0x55, 0x77, 0x4a, 0x3b, 0x95, 0x9d, 0x94, 0x79, 0xdc, 0x5e,
		0x09, 0x96, 0x66, 0xa7, 0xdb, 0x72, 0x8a, 0x62, 0x54, 0x4b, 0x04, 0x72, 0x76, 0x3c, 0x85, 0x1a,
		0x92, 0xc1, 0x62, 0xe8, 0x46, 0xe8, 0x46, 0xe8, 0x46, 0x2e, 0xdd, 0xa8, 0x8b, 0xc7, 0xad, 0x96,
		0x12, 0x97, 0x5b, 0x2d, 0xf0, 0x39, 0xf8, 0x1c, 0x7c, 0x0e, 0x0c, 0xac, 0x0f, 0x03, 0x1f, 0x00,
		0x03, 0x33, 0x63, 0xe0, 0x03, 0x60, 0xe0, 0x48, 0xe4, 0xec, 0xba, 0x96, 0x23, 0xd5, 0x35, 0x67,
		0xe6, 0x5a, 0x87, 0x3b, 0x40, 0x4b, 0x42, 0x4b, 0xae, 0xad, 0x96, 0xec, 0x59, 0xb6, 0xff, 0x5e,
		0x41, 0x49, 0x56, 0x30, 0x97, 0x90, 0xb6, 0x0d, 0xe6, 0x12, 0x6a, 0x27, 0x6d, 0xa9, 0x82, 0x31,
		0x84, 0x00, 0xad, 0xd2, 0xa0, 0xb5, 0x08, 0xcc, 0xca, 0x8b, 0x59, 0x8b, 0x80, 0xac, 0xd1, 0x20,
		0xab, 0xd3, 0x54, 0xf1, 0xe9, 0x8c, 0xd6, 0x03, 0xae, 0x02, 0xae, 0xc2, 0xa9, 0x03, 0xa7, 0x8e,
		0x36, 0xfd, 0x58, 0x85, 0x53, 0x87, 0x59, 0x41, 0x56, 0x37, 0xd9, 0xa9, 0xc3, 0x9a, 0x51, 0x54,
		0xff, 0x11, 0xc0, 0xf4, 0xe8, 0x6c, 0x43, 0x4f, 0xe1, 0x72, 0x9a, 0x86, 0xf8, 0xe1, 0x7f, 0xf0,
		0x45, 0x5b, 0x74, 0x84, 0xef, 0x3e, 0x19, 0xa6, 0xef, 0x74, 0xac, 0xa6, 0x5a, 0x4e, 0x57, 0x50,
		0x2d, 0xa9, 0x90, 0xd4, 0xc5, 0x9d, 0xc9, 0xd5, 0x88, 0x48, 0x77, 0x05, 0xb9, 0xa7, 0x20, 0xef,
		0x14, 0x14, 0xc9, 0x14, 0x37, 0xe6, 0x8c, 0xdc, 0xe5, 0x83, 0xc8, 0x5d, 0x04, 0x9d, 0x8a, 0x73,
		0x67, 0xae, 0xe3, 0x3b, 0x4d, 0xa7, 0x9d, 0x30, 0xb4, 0x50, 0x95, 0x6a, 0x7a, 0xd0, 0x45, 0x14,
		0xba, 0x65, 0x6d, 0xd8, 0x47, 0xda, 0x2a, 0x03, 0x86, 0xc3, 0xf3, 0xe5, 0xf2, 0x6c, 0x73, 0x84,
		0x5c, 0xf5, 0xe1, 0xf4, 0xfc, 0xd1, 0x5f, 0xe3, 0x1c, 0x9e, 0x8f, 0x96, 0xf6, 0xc8, 0x3e, 0x46,
		0x4b, 0xfb, 0xc8, 0x6b, 0x36, 0xac, 0xa5, 0x3d, 0xfb, 0xf4, 0xa2, 0x49, 0x71, 0x97, 0xd5, 0xf9,
		0x45, 0xab, 0x87, 0xef, 0xc8, 0x51, 0x43, 0x69, 0x86, 0x91, 0xd3, 0xb3, 0x7d, 0xa3, 0xeb, 0x58,
		0xc3, 0x6a, 0xbe, 0x55, 0x73, 0x8c, 0x26, 0x3f, 0xad, 0x38, 0xcb, 0xa8, 0xc4, 0x33, 0xcb, 0x68,
		0xf9, 0x70, 0xc4, 0xf4, 0x8e, 0x31, 0x5a, 0x3a, 0xdc, 0x90, 0x79, 0x82, 0xd1, 0xc4, 0xb1, 0x45,
		0x2f, 0x37, 0x9b, 0x5c, 0x94, 0x8d, 0x09, 0x0d, 0xd1, 0xe6, 0x64, 0x66, 0xaf, 0xde, 0x2c, 0xd2,
		0x1c, 0xcc, 0x98, 0x4a, 0xcd, 0xa4, 0x2a, 0x76, 0xc2, 0xc3, 0x91, 0xa8, 0xd2, 0xc1, 0x30, 0xd6,
		0x1c, 0x86, 0xb1, 0x72, 0x81, 0x3b, 0xf9, 0x86, 0x7b, 0x94, 0x46, 0x7b, 0x93, 0x0d, 0xf6, 0x86,
		0xf6, 0x5e, 0x70, 0xdf, 0xe3, 0x34, 0xc2, 0xa4, 0x9a, 0xe8, 0x91, 0x9a, 0xe7, 0xa5, 0xbd, 0xf8,
		0x13, 0x7c, 0x19, 0x3b, 0x5f, 0xca, 0x97, 0x7c, 0x3e, 0x9a, 0x56, 0x9b, 0x14, 0x4c, 0x79, 0xad,
		0xf9, 0x0c, 0xb7, 0xd8, 0x8c, 0xd8, 0xa8, 0xdc, 0xb5, 0xd6, 0xe1, 0xbb, 0x4c, 0x67, 0x58, 0x54,
		0xea, 0xda, 0x13, 0x7d, 0x93, 0x89, 0x24, 0xf0, 0x49, 0xcd, 0x0e, 0x7f, 0x7b, 0xbb, 0xdf, 0x23,
		0x83, 0x8f, 0xb6, 0x0d, 0x32, 0xf8, 0xb4, 0x93, 0x96, 0x6f, 0x26, 0xb9, 0x16, 0x6a, 0x6f, 0x50,
		0x72, 0x92, 0x5a, 0xd7, 0x85, 0x0d, 0xea, 0xb8, 0x00, 0xe5, 0xbb, 0x41, 0xca, 0x77, 0x3d, 0x6a,
		0x49, 0x3d, 0xeb, 0x6f, 0x95, 0x6e, 0xea, 0x83, 0xd5, 0xe0, 0x6d, 0xf0, 0x36, 0x80, 0x35, 0x80,
		0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0xb5, 0xdc, 0x2c, 0x13, 0xc7, 0x35, 0xef, 0x85, 0xd1, 0x74,
		0x3a, 0x5d, 0xc7, 0x16, 0x11, 0xa2, 0x6d, 0x4b, 0xd0, 0xc8, 0xdb, 0xad, 0xa0, 0x96, 0xa1, 0x96,
		0xd7, 0x4c, 0x2d, 0x27, 0x3c, 0x0f, 0x69, 0xd7, 0x69, 0x1a, 0xdd, 0xb6, 0xe9, 0xdf, 0x39, 0x6e,
		0xe7, 0x43, 0xc8, 0x68, 0xde, 0xfc, 0x5f, 0x4f, 0xfd, 0x36, 0x7a, 0x7c, 0x47, 0xaf, 0xc0, 0xe9,
		0xf9, 0x56, 0xdb, 0xfa, 0x5b, 0x28, 0x14, 0x1a, 0x85, 0x3b, 0x40, 0xbc, 0x40, 0xbc, 0x00, 0xf5,
		0x03, 0xf5, 0x03, 0xf5, 0x03, 0xf5, 0x03, 0xf5, 0xf7, 0xb3, 0x55, 0x6d, 0x30, 0x91, 0x96, 0x39,
		0xf9, 0x17, 0xe9, 0xe9, 0x1b, 0x51, 0x13, 0x4f, 0x07, 0x5f, 0x71, 0x16, 0x7c, 0xdd, 0xc4, 0xff,
		0xcb, 0x4c, 0xda, 0xd0, 0x9d, 0xd8, 0x3c, 0x9a, 0xa4, 0x11, 0x21, 0x56, 0x21, 0x37, 0x3e, 0x43,
		0x7e, 0x6c, 0x06, 0xcb, 0xb8, 0x0c, 0xb9, 0x31, 0x19, 0x89, 0x65, 0x7d, 0x2f, 0xb8, 0x86, 0x8c,
		0xf9, 0xdf, 0x73, 0x2f, 0x5e, 0x46, 0xf3, 0xc0, 0x57, 0xe7, 0x52, 0xd3, 0x28, 0xa3, 0x92, 0x0e,
		0x6e, 0xfb, 0xdd, 0xd5, 0x59, 0xe0, 0x83, 0x0f, 0x29, 0x26, 0x7f, 0xef, 0x21, 0xf9, 0x3b, 0xae,
		0xe4, 0xef, 0xe6, 0x98, 0xe6, 0x11, 0xf3, 0xbe, 0x23, 0xcd, 0x35, 0x47, 0xca, 0x37, 0xaf, 0x7d,
		0x96, 0xe6, 0x94, 0xef, 0xe1, 0xfc, 0x58, 0xc3, 0xf6, 0xbb, 0x86, 0xd9, 0x0b, 0xa4, 0x9a, 0x64,
		0x9a, 0xe9, 0xdb, 0x0d, 0xa2, 0xa6, 0x17, 0xd2, 0x06, 0xcf, 0x22, 0x81, 0x3c, 0x87, 0x44, 0x55,
		0x45, 0x57, 0x82, 0xc2, 0xb8, 0x56, 0xc9, 0xf1, 0xac, 0x3c, 0xf9, 0xdf, 0xb2, 0xb3, 0xa2, 0x89,
		0xb3, 0xa1, 0xc1, 0x92, 0x60, 0x49, 0xb0, 0x64, 0x34, 0x96, 0x1c, 0x68, 0x3b, 0x2f, 0xb8, 0x28,
		0x86, 0xd9, 0x6a, 0xb9, 0xc2, 0xf3, 0x08, 0x65, 0x53, 0xb3, 0x7b, 0x80, 0xe1, 0xc0, 0x70, 0x31,
		0x33, 0x9c, 0xd5, 0x95, 0xbc, 0x7d, 0x53, 0x3c, 0x77, 0x28, 0xb1, 0x66, 0xf4, 0x8c, 0xb1, 0x35,
		0x8e, 0xb1, 0xba, 0x8f, 0x65, 0xc2, 0xbb, 0xcd, 0xbc, 0xe3, 0x7b, 0x5a, 0x10, 0xd2, 0x17, 0xae,
		0x4d, 0x8e, 0x14, 0xe4, 0xb7, 0xae, 0xf6, 0x8c, 0xc3, 0xc6, 0xcb, 0x55, 0xd1, 0x38, 0x6c, 0x0c,
		0xff, 0xb7, 0x18, 0xfc, 0x78, 0x2e, 0xf5, 0x5f, 0x4a, 0x57, 0x7b, 0x46, 0x79, 0xf4, 0xdb, 0x52,
		0xe5, 0x6a, 0xcf, 0xa8, 0x34, 0x0a, 0x5b, 0xd7, 0xd7, 0x3b, 0xb2, 0x6b, 0x0a, 0xcf, 0xfb, 0x7d,
		0xf9, 0xb8, 0x50, 0x83, 0x42, 0x8e, 0xd3, 0x8b, 0xa3, 0xdf, 0x94, 0x69, 0xf2, 0xe7, 0x56, 0x5c,
		0x54, 0x29, 0xfc, 0x23, 0x9f, 0xae, 0x76, 0xae, 0x6a, 0x6c, 0x50, 0xcd, 0x2e, 0x1b, 0x04, 0xa7,
		0x67, 0x1a, 0x77, 0x35, 0xe3, 0x4b, 0xe3, 0xb9, 0xb8, 0x5d, 0xee, 0x7f, 0x28, 0x3c, 0x1f, 0xf4,
		0xdf, 0xfe, 0xf2, 0x65, 0xde, 0xc7, 0x8a, 0xdb, 0x07, 0xfd, 0x0f, 0x0b, 0xfe, 0xa5, 0xda, 0xff,
		0x10, 0x71, 0x8f, 0x4a, 0x7f, 0x6b, 0xe6, 0xa3, 0x83, 0xdf, 0x97, 0x16, 0x2d, 0x28, 0x2f, 0x58,
		0xb0, 0xbf, 0x68, 0xc1, 0xfe, 0x82, 0x05, 0x0b, 0x1f, 0xa9, 0xb4, 0x60, 0x41, 0xa5, 0xff, 0x32,
		0xf3, 0xf9, 0xad, 0xf9, 0x1f, 0xad, 0xf6, 0x0b, 0x2f, 0x8b, 0xfe, 0xed, 0xa0, 0xff, 0xf2, 0xa1,
		0x50, 0xc8, 0xa0, 0x60, 0xc0, 0x35, 0x89, 0xff, 0x9a, 0xe8, 0x17, 0x94, 0xdc, 0x3d, 0xc4, 0x32,
		0xda, 0x74, 0xc7, 0xf6, 0xbb, 0xbb, 0x91, 0x9c, 0xb7, 0x12, 0x61, 0x85, 0x13, 0xbf, 0x7b, 0x33,
		0x32, 0x0e, 0x34, 0x0c, 0xc0, 0x1e, 0xd8, 0x37, 0xdf, 0xc5, 0x93, 0x17, 0xdd, 0x39, 0x1d, 0xae,
		0x80, 0x7b, 0x1a, 0xee, 0xe9, 0xa9, 0x4b, 0x44, 0xb3, 0xae, 0x07, 0x0b, 0x35, 0xf7, 0x3f, 0x80,
		0x49, 0xbd, 0xae, 0x26, 0xb5, 0x74, 0xff, 0x83, 0x88, 0xa1, 0xb8, 0x85, 0xc7, 0x1c, 0x59, 0xba,
		0x2b, 0x5c, 0x5c, 0xf2, 0x05, 0x56, 0xb9, 0xc8, 0xea, 0x17, 0x5a, 0xf5, 0x62, 0xb3, 0x5d, 0x70,
		0xb6, 0x8b, 0xce, 0x72, 0xe1, 0xe5, 0x31, 0x12, 0xc1, 0xf4, 0x94, 0x66, 0x84, 0x70, 0xe1, 0x77,
		0xf1, 0x64, 0x10, 0xc6, 0x24, 0xcc, 0x5c, 0x97, 0xd1, 0x3e, 0x44, 0x02, 0xab, 0x65, 0xe6, 0x91,
		0x19, 0x85, 0x83, 0x61, 0xf8, 0x18, 0x87, 0x8b, 0x81, 0xd8, 0x19, 0x89, 0x9d, 0xa1, 0x58, 0x19,
		0x8b, 0xc6, 0x60, 0x44, 0x46, 0xa3, 0x3b, 0x73, 0x17, 0xde, 0x97, 0x9e, 0x65, 0xfb, 0xc5, 0xaa,
		0xca, 0x7d, 0x19, 0x71, 0x4f, 0x55, 0x61, 0x0b, 0xb5, 0x9c, 0x69, 0xba, 0x07, 0x6c, 0xe6, 0x41,
		0x38, 0x72, 0xa8, 0x99, 0xc4, 0xca, 0xcc, 0x76, 0x4c, 0x39, 0xd5, 0xe1, 0x7e, 0x8c, 0xd9, 0xbe,
		0x8a, 0xd7, 0x79, 0xfa, 0x08, 0x18, 0x72, 0xad, 0x75, 0x1f, 0x41, 0xb5, 0x52, 0xd9, 0xaf, 0xa4,
		0xf8, 0x18, 0xde, 0x25, 0xb3, 0xba, 0x11, 0x53, 0xd2, 0x37, 0xe1, 0x9a, 0x05, 0x08, 0xc1, 0x57,
		0x91, 0x9a, 0x53, 0x58, 0x23, 0xd8, 0x09, 0x68, 0x03, 0x68, 0x03, 0x68, 0x43, 0xea, 0xbe, 0x58,
		0x2d, 0x61, 0xfb, 0x96, 0xff, 0x44, 0x2b, 0xfa, 0x9c, 0xb1, 0x68, 0x15, 0x64, 0x70, 0xfe, 0x68,
		0xf4, 0x28, 0x1f, 0x4d, 0x8f, 0xe1, 0xfa, 0x8d, 0x5f, 0xf0, 0xe4, 0xf2, 0xec, 0xa6, 0xf6, 0xed,
		0xf2, 0x97, 0x9b, 0xcb, 0xdf, 0xcf, 0xea, 0x79, 0x8e, 0x52, 0x1f, 0x4f, 0x19, 0x17, 0xf1, 0x60,
		0xa3, 0xf9, 0xaf, 0xf9, 0xf5, 0x73, 0x25, 0x9f, 0xb0, 0xbe, 0x6a, 0xa4, 0xbe, 0x48, 0x89, 0xaa,
		0xaf, 0x1e, 0x47, 0x70, 0x83, 0x41, 0x61, 0x0d, 0xb7, 0x82, 0xc6, 0x82, 0xc6, 0x82, 0xc6, 0x92,
		0xba, 0x2f, 0xe4, 0xae, 0x60, 0x33, 0xca, 0xea, 0x7d, 0x5c, 0xd2, 0x46, 0xab, 0xab, 0x8f, 0x58,
		0xca, 0x18, 0xae, 0x97, 0x09, 0x66, 0x8e, 0x83, 0x7d, 0xe3, 0xff, 0xd9, 0x25, 0xf9, 0xbf, 0x73,
		0x72, 0xd1, 0xce, 0x13, 0xbf, 0xfb, 0x6f, 0xf1, 0xe4, 0x8d, 0x7e, 0x46, 0x0a, 0x7e, 0xd2, 0x4f,
		0x40, 0xa6, 0xd7, 0x03, 0xd1, 0x57, 0xaa, 0xe6, 0x23, 0x45, 0x9f, 0x87, 0x44, 0x64, 0x3a, 0xfa,
		0x3c, 0xc8, 0x9c, 0x77, 0xc2, 0x6d, 0x64, 0x76, 0x76, 0x46, 0x82, 0x69, 0x77, 0xc4, 0x62, 0xa9,
		0xe8, 0x44, 0x25, 0x33, 0x10, 0x60, 0x8e, 0xd6, 0x93, 0xab, 0x1b, 0xcf, 0x71, 0xc4, 0x19, 0x4b,
		0x10, 0x15, 0x10, 0x15, 0x4b, 0x9f, 0x10, 0x71, 0x46, 0xd8, 0x51, 0xb0, 0xa3, 0x32, 0x69, 0x47,
		0x21, 0xce, 0x38, 0xf9, 0x20, 0x88, 0x33, 0xaa, 0x39, 0x0c, 0x11, 0x67, 0x4c, 0xc5, 0x31, 0x20,
		0xce, 0x38, 0x17, 0x69, 0x20, 0xce, 0x08, 0xb4, 0x01, 0xb4, 0x91, 0x24, 0xda, 0x40, 0x9c, 0x51,
		0x5a, 0xdd, 0x20, 0xce, 0xa8, 0x45, 0xeb, 0xe4, 0x10, 0x67, 0x84, 0xc6, 0x82, 0xc6, 0x82, 0xc6,
		0x5a, 0x71, 0x5f, 0x10, 0x67, 0x7c, 0x73, 0x27, 0x92, 0x8c, 0x33, 0x52, 0xdc, 0xdf, 0x39, 0xa5,
		0x30, 0xa3, 0x44, 0xeb, 0x54, 0x79, 0xfa, 0xf3, 0x56, 0x3d, 0x8d, 0x5a, 0xab, 0x4a, 0xb9, 0x42,
		0xe5, 0x9a, 0xac, 0x4e, 0xba, 0x49, 0xe4, 0x9a, 0xad, 0x4e, 0x5a, 0xf7, 0xca, 0x4d, 0x57, 0xc3,
		0xcd, 0xa4, 0x9a, 0xaf, 0xca, 0x92, 0x53, 0x77, 0x6f, 0xe0, 0x79, 0x17, 0x9c, 0xbf, 0x23, 0xf0,
		0xec, 0x95, 0xce, 0xaf, 0x7d, 0xad, 0x75, 0xc4, 0x5a, 0x64, 0x1a, 0x15, 0x75, 0x94, 0x5b, 0x7b,
		0xc2, 0x7d, 0x14, 0xae, 0x44, 0xb5, 0xf5, 0x78, 0x01, 0x8a, 0xad, 0x51, 0x6c, 0x3d, 0x79, 0x85,
		0x08, 0x93, 0xe6, 0x87, 0xeb, 0x50, 0x6a, 0x1d, 0x23, 0x70, 0xdf, 0xec, 0x51, 0xf3, 0x92, 0x3d,
		0xf7, 0x66, 0xce, 0x99, 0xd6, 0x0f, 0x09, 0xf9, 0x52, 0x89, 0xd8, 0xa6, 0xc8, 0x97, 0x92, 0x39,
		0xef, 0xd4, 0xe4, 0x4b, 0x8d, 0x79, 0x2c, 0x05, 0x09, 0x53, 0x68, 0xcd, 0x00, 0x69, 0xb1, 0x8e,
		0xd2, 0x82, 0x9c, 0x32, 0x45, 0x55, 0xa0, 0x4c, 0x8a, 0x14, 0x4e, 0x61, 0x38, 0x85, 0x37, 0xde,
		0x29, 0xfc, 0xe0, 0x78, 0x3e, 0x87, 0x4b, 0xf8, 0x50, 0x61, 0x0f, 0x52, 0x4f, 0xde, 0xb7, 0x7f,
		0x18, 0x52, 0xa6, 0x94, 0xba, 0x11, 0xeb, 0xa4, 0x10, 0x2f, 0xa5, 0xf8, 0x28, 0x36, 0x87, 0x72,
		0x4a, 0xdd, 0x8e, 0x57, 0xd2, 0xf0, 0x3d, 0xe3, 0x9e, 0xaa, 0x0d, 0x3f, 0x17, 0x6e, 0x9c, 0xde,
		0xae, 0xc9, 0x8b, 0xfe, 0x34, 0x38, 0xc9, 0xca, 0xd1, 0x4c, 0x75, 0xe1, 0xee, 0xe9, 0xee, 0xbe,
		0xbc, 0x90, 0xbe, 0x2c, 0x3b, 0xf5, 0xb7, 0x53, 0xcc, 0xf6, 0x55, 0xb0, 0x3d, 0xda, 0xff, 0x66,
		0xa6, 0x4b, 0xf4, 0xda, 0x08, 0x42, 0x5c, 0xb7, 0x4c, 0x74, 0x9b, 0xd6, 0xac, 0x18, 0xde, 0x25,
		0xfb, 0x1c, 0x8a, 0x8a, 0x89, 0x11, 0xb9, 0xb7, 0x9c, 0x8e, 0x69, 0xd9, 0x46, 0x84, 0x99, 0xac,
		0x71, 0xeb, 0x9f, 0xfc, 0xb1, 0xb0, 0xef, 0x03, 0xe7, 0x64, 0xea, 0xc0, 0x3b, 0x67, 0xa5, 0x08,
		0x93, 0x4f, 0x65, 0xe1, 0xb6, 0xe1, 0x68, 0x6a, 0xe6, 0x7d, 0x35, 0x94, 0x2e, 0x30, 0xc3, 0xb6,
		0x1c, 0x77, 0x45, 0x49, 0x5c, 0x47, 0x55, 0xaa, 0xec, 0x67, 0xe8, 0xb0, 0xd2, 0x22, 0x90, 0x19,
		0x24, 0x0e, 0x37, 0xf6, 0xc8, 0x6f, 0x6d, 0x6d, 0x6d, 0x5d, 0x99, 0xc6, 0xdf, 0x35, 0xe3, 0x8f,
		0x3d, 0xe3, 0xf0, 0xa6, 0x31, 0xf1, 0x97, 0xeb, 0x6b, 0xe3, 0xa6, 0x51, 0x78, 0xde, 0xdb, 0xae,
		0x16, 0xfb, 0x85, 0x9f, 0x5e, 0x7f, 0xdf, 0xb8, 0xbe, 0xde, 0x29, 0xfc, 0x8b, 0xb2, 0xea, 0xa7,
		0xc2, 0xcb, 0x60, 0x6d, 0x3e, 0x1d, 0xa4, 0xd4, 0x81, 0xe5, 0x06, 0x18, 0x2e, 0x7e, 0x82, 0x32,
		0xa0, 0x97, 0x06, 0x8a, 0xb2, 0x66, 0xce, 0xd2, 0xf4, 0x3c, 0xa7, 0x69, 0x05, 0x69, 0x60, 0x4c,
		0xc5, 0x59, 0x33, 0x3b, 0x12, 0x7d, 0xc5, 0x13, 0x03, 0x35, 0x2f, 0xea, 0xe7, 0xbf, 0xd6, 0xcf,
		0x11, 0x26, 0x41, 0x98, 0x44, 0x66, 0x43, 0x84, 0x49, 0x72, 0x79, 0x61, 0xf7, 0x3a, 0xc2, 0x1d,
		0x66, 0x79, 0x32, 0x44, 0x4b, 0xca, 0x0a, 0x7b, 0xd4, 0xed, 0x5e, 0x67, 0xf0, 0x52, 0x69, 0x2e,
		0xf9, 0xb1, 0x6e, 0x7b, 0xae, 0xe7, 0xab, 0xcb, 0xc0, 0xd1, 0x3e, 0xea, 0x92, 0x4f, 0x66, 0x94,
		0x30, 0x04, 0x1f, 0x04, 0x1f, 0x04, 0x1f, 0x79, 0x14, 0xf2, 0x42, 0xa1, 0x57, 0x4c, 0xb1, 0xc0,
		0xea, 0x3a, 0x2e, 0x83, 0xb8, 0x0a, 0x76, 0x51, 0x17, 0x56, 0xc5, 0xd2, 0x3e, 0x44, 0x15, 0x44,
		0x15, 0x44, 0x95, 0x3c, 0xf7, 0x19, 0x76, 0xaf, 0x73, 0x1b, 0xb9, 0x0a, 0x60, 0x19, 0x0b, 0xa1,
		0x09, 0x90, 0x5e, 0x3f, 0x21, 0x9a, 0x00, 0xa5, 0xe7, 0x08, 0xd0, 0x04, 0x28, 0x73, 0xfe, 0xa6,
		0x81, 0x1e, 0x12, 0x2e, 0x03, 0x64, 0x19, 0xee, 0x03, 0x0b, 0x0b, 0xb0, 0x05, 0xb0, 0x05, 0x16,
		0x96, 0x3e, 0x81, 0xf5, 0x28, 0x5c, 0x8f, 0xda, 0x6a, 0x61, 0x8a, 0x5e, 0xe3, 0x8d, 0xd4, 0x45,
		0x56, 0x19, 0xe2, 0x0a, 0xe2, 0x0a, 0xe2, 0x4a, 0xee, 0xbe, 0xf4, 0x2c, 0xdb, 0x7f, 0xcf, 0x20,
		0xac, 0x2a, 0xb0, 0xaf, 0xe2, 0x01, 0xf7, 0x45, 0xd8, 0x57, 0x49, 0x1f, 0x41, 0x19, 0xb6, 0x55,
		0x62, 0xb6, 0xd5, 0xda, 0xb4, 0x90, 0x1a, 0x75, 0x4a, 0x19, 0xfd, 0x8c, 0x65, 0x50, 0xcd, 0xc5,
		0xf0, 0x2b, 0x47, 0x3f, 0x53, 0x34, 0xa8, 0x06, 0xb3, 0x27, 0x34, 0x83, 0x3b, 0x14, 0x52, 0x27,
		0x20, 0x4d, 0x50, 0x48, 0x0d, 0xbb, 0x08, 0x76, 0x11, 0x0a, 0xa9, 0xc9, 0x7b, 0xa0, 0x90, 0x3a,
		0x56, 0x4a, 0xf1, 0x51, 0x6c, 0x0e, 0xe5, 0x50, 0x48, 0x8d, 0x42, 0x6a, 0x14, 0x52, 0xb3, 0x58,
		0x8d, 0x1a, 0xdc, 0x0e, 0x39, 0x14, 0x52, 0xa3, 0x90, 0x1a, 0x85, 0xd4, 0xeb, 0x23, 0x08, 0x71,
		0xdd, 0x50, 0x48, 0x8d, 0x42, 0x6a, 0x14, 0x52, 0xab, 0x3c, 0x19, 0x0a, 0xa9, 0x51, 0x48, 0x8d,
		0x42, 0x6a, 0x2e, 0x51, 0x9a, 0x43, 0x21, 0x35, 0x0a, 0xa9, 0x23, 0x63, 0x38, 0x14, 0x52, 0x6b,
		0xff, 0x5e, 0x14, 0x52, 0xa3, 0x90, 0x7a, 0x86, 0xb8, 0x08, 0x93, 0x44, 0xdf, 0x10, 0x61, 0x12,
		0x14, 0x52, 0x4b, 0x3e, 0x23, 0x0a, 0xa9, 0x21, 0xf8, 0x20, 0xf8, 0xd6, 0x41, 0xf0, 0x6d, 0x48,
		0x9a, 0xbf, 0x73, 0x77, 0xe7, 0x09, 0x06, 0x81, 0x35, 0xda, 0x07, 0x82, 0x06, 0x82, 0x06, 0x82,
		0x46, 0xea, 0xbe, 0xf4, 0x2c, 0xdb, 0xaf, 0x96, 0x19, 0xe4, 0xcc, 0x7b, 0x64, 0xe8, 0x6b, 0x75,
		0xf0, 0xa1, 0x02, 0x3a, 0x3d, 0x47, 0xa0, 0x36, 0xbe, 0x35, 0xf6, 0x53, 0x81, 0xdf, 0x68, 0x86,
		0xcc, 0x5d, 0xa7, 0xdd, 0x36, 0x2c, 0xdb, 0x17, 0xee, 0xa3, 0xd9, 0xe6, 0x68, 0xe5, 0x32, 0xb9,
		0x1d, 0x60, 0x08, 0x60, 0x08, 0x60, 0x88, 0x34, 0x0c, 0xd9, 0x2f, 0x31, 0xc0, 0x90, 0x03, 0xc0,
		0x10, 0xc0, 0x90, 0x4d, 0x29, 0x14, 0x2c, 0x1d, 0x96, 0x0f, 0xab, 0x07, 0xa5, 0x43, 0x80, 0x8f,
		0x8c, 0x81, 0x0f, 0xb4, 0x8f, 0x03, 0x60, 0x01, 0x60, 0xc9, 0xa1, 0x7d, 0x1c, 0xda, 0xc7, 0x01,
		0xb5, 0x6c, 0x18, 0x6a, 0x41, 0xfb, 0xb8, 0xec, 0x01, 0x16, 0xb4, 0x8f, 0x03, 0x6c, 0x01, 0x6c,
		0x59, 0x03, 0xd8, 0xb2, 0x21, 0x71, 0x65, 0xd7, 0x71, 0x7c, 0xa3, 0x25, 0xda, 0xe6, 0x93, 0xba,
		0xd0, 0x9a, 0xd8, 0x0b, 0x02, 0x07, 0x02, 0x07, 0x02, 0x47, 0xea, 0xbe, 0xc0, 0xb1, 0x0b, 0x13,
		0x09, 0x26, 0x92, 0xe4, 0x11, 0xc0, 0xb1, 0xcb, 0x6e, 0x27, 0x11, 0x05, 0xa1, 0xf8, 0xe1, 0xbb,
		0xa6, 0xd1, 0xb3, 0x3d, 0xdf, 0xbc, 0x6d, 0x2b, 0x8a, 0xc4, 0xc0, 0xf8, 0x11, 0x76, 0x33, 0x55,
		0x4d, 0x57, 0xce, 0xbf, 0x7c, 0xca, 0x55, 0x0e, 0xf7, 0x2a, 0x39, 0x23, 0x77, 0x22, 0xfc, 0xbf,
		0x1c, 0xf7, 0x7b, 0xee, 0xd2, 0xea, 0x88, 0xdc, 0x99, 0xeb, 0xf8, 0x4e, 0xd3, 0x69, 0xe7, 0x7e,
		0x1d, 0x36, 0xd0, 0xcd, 0x95, 0x3f, 0xbc, 0xfe, 0xce, 0xb4, 0x5b, 0xd7, 0x76, 0xad, 0x7d, 0xef,
		0xb8, 0x96, 0xff, 0xd0, 0xf1, 0x72, 0x17, 0x5d, 0xd1, 0xb4, 0xee, 0xac, 0xa6, 0x6a, 0xa2, 0x36,
		0x37, 0x46, 0x98, 0x87, 0x15, 0x5e, 0x4f, 0x81, 0x89, 0xb7, 0xb8, 0x61, 0xc3, 0x5c, 0xf8, 0xa0,
		0xe1, 0x98, 0xe0, 0x29, 0xd1, 0x66, 0x78, 0x58, 0x5e, 0x97, 0xab, 0x7f, 0xf5, 0xdb, 0x0d, 0x61,
		0x82, 0xc0, 0x04, 0x81, 0x09, 0x22, 0x6d, 0x82, 0x20, 0xc5, 0x15, 0x26, 0x08, 0x4c, 0x10, 0x89,
		0x23, 0x40, 0x8a, 0x2b, 0x8c, 0x11, 0x18, 0x23, 0x30, 0x46, 0x60, 0x8c, 0x64, 0xd7, 0x18, 0xf1,
		0x7c, 0xd7, 0xf4, 0x87, 0x55, 0xcb, 0x6a, 0x46, 0xc8, 0x78, 0x23, 0x18, 0x1f, 0x30, 0x3e, 0x60,
		0x7c, 0x48, 0x1b, 0x1f, 0x18, 0x80, 0x03, 0xdb, 0x03, 0xb6, 0x47, 0xf4, 0x23, 0x28, 0x55, 0x60,
		0x6a, 0xc0, 0xd4, 0x80, 0xa9, 0x01, 0x53, 0x03, 0xa6, 0x46, 0x46, 0x4c, 0x0d, 0xcc, 0xeb, 0x84,
		0xb9, 0x02, 0x73, 0x05, 0xe6, 0x0a, 0xcc, 0x95, 0x98, 0xb1, 0x32, 0xe6, 0x75, 0x26, 0x7e, 0x04,
		0x98, 0xd7, 0x99, 0x1c, 0x54, 0x59, 0xd7, 0x79, 0x9d, 0x94, 0x99, 0x93, 0x39, 0xa5, 0x71, 0x9d,
		0x17, 0xc1, 0x37, 0xea, 0x9a, 0xd6, 0xf9, 0x8e, 0xf1, 0x7c, 0x06, 0x50, 0x42, 0x7e, 0xfc, 0x60,
		0xfe, 0xd8, 0xf2, 0xfc, 0x9a, 0xef, 0xcb, 0x95, 0x31, 0x0d, 0x74, 0x40, 0xbd, 0x2d, 0x06, 0xb0,
		0xc0, 0x93, 0x13, 0x1d, 0x03, 0xd1, 0x35, 0xb1, 0x52, 0x2d, 0x9e, 0x9a, 0x3f, 0x75, 0x5b, 0xc2,
		0x15, 0xad, 0x8f, 0x83, 0x17, 0xb7, 0x7b, 0xed, 0x36, 0x2b, 0x3d, 0x89, 0xf7, 0x5c, 0xe1, 0x7e,
		0xe7, 0xa5, 0xa6, 0xb7, 0xd2, 0x6e, 0x74, 0xb4, 0xbb, 0xbc, 0xfa, 0x66, 0x2e, 0xff, 0xc4, 0x0a,
		0x1a, 0xcb, 0xd2, 0x96, 0x42, 0xd3, 0x08, 0xc4, 0x94, 0x27, 0xe2, 0x72, 0xea, 0x2d, 0xa6, 0xc9,
		0x12, 0x7a, 0x44, 0x9c, 0xc3, 0x2b, 0x35, 0x77, 0x37, 0xe2, 0x9c, 0xdd, 0xc8, 0x73, 0x75, 0x65,
		0x8c, 0x2f, 0x79, 0x23, 0x4b, 0xd6, 0x98, 0x22, 0x1b, 0x4d, 0x64, 0xe3, 0x88, 0x64, 0x04, 0xa9,
		0x71, 0x48, 0xd4, 0x39, 0xb6, 0x79, 0xb3, 0xe7, 0x3f, 0x18, 0x1d, 0xcb, 0xeb, 0x98, 0x7e, 0xf3,
		0x21, 0x3a, 0x0d, 0xc3, 0xc6, 0xee, 0x53, 0xcb, 0xa3, 0xaa, 0x1a, 0x29, 0xc8, 0x28, 0x6d, 0xfb,
		0x53, 0x6c, 0x7d, 0xba, 0x6d, 0x4f, 0xb5, 0xe5, 0x95, 0x6d, 0x77, 0x65, 0x5b, 0x5d, 0xc9, 0x36,
		0xe7, 0x05, 0x1f, 0xd2, 0xb6, 0x76, 0x78, 0x5e, 0x4d, 0xa7, 0x67, 0xfb, 0xc2, 0x95, 0x4a, 0x45,
		0x24, 0xa4, 0x1e, 0x12, 0xed, 0x67, 0x02, 0xbe, 0x55, 0xb1, 0x8f, 0x55, 0xbd, 0x6c, 0x8a, 0xe1,
		0x3a, 0x0e, 0x63, 0x8b, 0xe2, 0x27, 0x55, 0xb1, 0x67, 0xb9, 0x48, 0xc6, 0x97, 0xda, 0xc7, 0x42,
		0x45, 0x4d, 0x26, 0x47, 0x83, 0x0b, 0xfe, 0x45, 0x50, 0xeb, 0xc2, 0x36, 0x6f, 0xdb, 0xc2, 0xb0,
		0xfd, 0xae, 0x31, 0xd0, 0x32, 0xf2, 0xba, 0xe9, 0xed, 0x06, 0x11, 0x65, 0x11, 0xb1, 0x23, 0x02,
		0xb4, 0x1a, 0xb4, 0x1a, 0x9b, 0x56, 0x93, 0xef, 0x28, 0x20, 0xd9, 0x41, 0x80, 0x93, 0x45, 0x5b,
		0x54, 0xd6, 0x6c, 0x81, 0x25, 0xc1, 0x92, 0x60, 0x49, 0x56, 0x96, 0x1c, 0x68, 0x3b, 0x2f, 0xb8,
		0x28, 0xe1, 0x10, 0x6b, 0x69, 0xee, 0x9c, 0xb3, 0x07, 0x18, 0x0e, 0x0c, 0x17, 0x33, 0xc3, 0x59,
		0x5d, 0xc2, 0x18, 0xf6, 0x90, 0xe7, 0x0e, 0x25, 0xd6, 0x8c, 0x9e, 0x51, 0xbb, 0x69, 0x37, 0x31,
		0x62, 0xbe, 0xac, 0x30, 0x62, 0x5e, 0x65, 0x94, 0xaf, 0xf2, 0x20, 0xcd, 0x7c, 0x30, 0xac, 0xba,
		0xf1, 0x72, 0x55, 0x34, 0x0e, 0x1b, 0xc3, 0xff, 0x2d, 0x06, 0x3f, 0x9e, 0x4b, 0xfd, 0x97, 0xd2,
		0xd5, 0x9e, 0x51, 0x1e, 0xfd, 0xb6, 0x54, 0xb9, 0xda, 0x33, 0x2a, 0x8d, 0xc2, 0xd6, 0xf5, 0xf5,
		0x8e, 0xec, 0x9a, 0xc2, 0xf3, 0x7e, 0x5f, 0x3e, 0x4d, 0xa0, 0x41, 0x21, 0x07, 0xc7, 0x30, 0xcc,
		0xf1, 0x00, 0xf3, 0x18, 0xa8, 0x42, 0x19, 0x79, 0xd9, 0xd0, 0x19, 0xcf, 0x53, 0x63, 0x83, 0x6a,
		0x76, 0xd9, 0x00, 0x23, 0xeb, 0x13, 0x1a, 0x59, 0x9f, 0x41, 0xc1, 0x80, 0x6b, 0x12, 0xff, 0x35,
		0xd1, 0x2f, 0x28, 0xe3, 0xf7, 0x9a, 0xa5, 0x37, 0x68, 0x1a, 0x31, 0xb3, 0x42, 0x26, 0x64, 0xba,
		0x3a, 0x75, 0x62, 0x49, 0xc0, 0xf4, 0x9d, 0x04, 0x85, 0xa2, 0x52, 0x46, 0x86, 0x22, 0xf9, 0xa5,
		0x11, 0xdb, 0x88, 0x34, 0x98, 0xff, 0xf6, 0xb3, 0xef, 0x36, 0xe7, 0xbd, 0xf2, 0x5d, 0xd7, 0x69,
		0x0a, 0xcf, 0x13, 0x8b, 0xcd, 0xbf, 0x89, 0x06, 0xb2, 0xe3, 0x8f, 0x2e, 0xa0, 0xcf, 0xf2, 0x70,
		0xf0, 0x4a, 0x2b, 0x2e, 0x8a, 0xd5, 0x36, 0x69, 0xa5, 0x0d, 0x9e, 0x67, 0x19, 0xfd, 0x22, 0x9a,
		0x65, 0xd2, 0x66, 0x98, 0xb4, 0xd9, 0xf5, 0xd6, 0xcc, 0x0a, 0x1e, 0x9c, 0xe9, 0x4e, 0xae, 0x0a,
		0xe0, 0x8e, 0x4f, 0x2d, 0x7a, 0xe4, 0x7f, 0xbc, 0x20, 0x1b, 0xb1, 0xff, 0x15, 0x97, 0x80, 0x6a,
		0xa3, 0x27, 0x1f, 0xfc, 0x5f, 0x7e, 0x49, 0x78, 0x44, 0x7d, 0xe4, 0xe8, 0x7f, 0xd7, 0x22, 0x38,
		0x6f, 0x07, 0x8b, 0xd6, 0xc3, 0x1f, 0x14, 0xf1, 0x92, 0xad, 0x9f, 0x43, 0x28, 0xda, 0x25, 0x4c,
		0x9b, 0x47, 0xa8, 0x2d, 0xcc, 0x3b, 0x57, 0xdc, 0x51, 0xdc, 0x41, 0x12, 0x8d, 0x4e, 0x07, 0xb6,
		0x61, 0xa0, 0xe0, 0x77, 0x76, 0x86, 0xb8, 0x66, 0x77, 0x70, 0xe1, 0x63, 0x74, 0xe1, 0x46, 0xcb,
		0xe8, 0x9a, 0xa1, 0x8e, 0x4c, 0x76, 0x6b, 0x44, 0x29, 0x2f, 0x2d, 0xed, 0xc1, 0x98, 0x19, 0x66,
		0xcc, 0xa8, 0x5a, 0x23, 0x5c, 0x60, 0xba, 0xf7, 0x9e, 0x3c, 0xcd, 0xc3, 0xd4, 0xb1, 0xc1, 0x6a,
		0x49, 0x6a, 0xd1, 0x92, 0x35, 0xc8, 0xd5, 0x63, 0x2a, 0x55, 0x63, 0x0a, 0xd7, 0x59, 0xf5, 0x5a,
		0xb3, 0x5d, 0x6f, 0xb6, 0x6b, 0xce, 0x73, 0xdd, 0xe5, 0x2d, 0x6f, 0x82, 0x43, 0x93, 0x5e, 0xf7,
		0x35, 0xd9, 0xd9, 0xc5, 0xb2, 0xef, 0x95, 0x5c, 0x9a, 0x5a, 0xdf, 0x90, 0x94, 0xb4, 0x1f, 0xae,
		0x26, 0x27, 0xef, 0xbf, 0xee, 0xc0, 0x98, 0xc4, 0x1f, 0x6e, 0x4a, 0x4a, 0xe6, 0x97, 0xbf, 0x51,
		0x12, 0xb4, 0xce, 0x37, 0xbb, 0x3d, 0xa3, 0xe7, 0x99, 0xf7, 0x62, 0xe4, 0x1f, 0xa0, 0xcb, 0xca,
		0x99, 0x9d, 0x20, 0x37, 0x21, 0x37, 0xd7, 0x4e, 0x6e, 0x52, 0x72, 0x79, 0xdf, 0x5e, 0x71, 0x4a,
		0x30, 0x48, 0xad, 0x36, 0x56, 0xa1, 0x40, 0x98, 0xa3, 0x16, 0x96, 0xa9, 0x00, 0x93, 0xab, 0x55,
		0x0f, 0x67, 0xc1, 0xa5, 0x42, 0xad, 0x2b, 0x4b, 0x8d, 0x2b, 0x37, 0x69, 0xf9, 0xdb, 0x7f, 0xb2,
		0x52, 0x3b, 0xa6, 0xf2, 0xd2, 0x46, 0xaa, 0x34, 0x73, 0xcf, 0x23, 0xcc, 0x60, 0x9b, 0xa3, 0x97,
		0x83, 0x7d, 0xa0, 0x95, 0xa1, 0x95, 0xa1, 0x95, 0xa1, 0x95, 0xa1, 0x95, 0xa1, 0x95, 0xa1, 0x95,
		0x69, 0x5a, 0xd9, 0xb7, 0xda, 0xd6, 0xdf, 0xb4, 0xfe, 0x10, 0xd3, 0x6a, 0x79, 0x62, 0x23, 0xe8,
		0x65, 0xe8, 0xe5, 0xb5, 0xd3, 0xcb, 0x5d, 0xe1, 0x36, 0x85, 0xed, 0x9b, 0xf7, 0x42, 0x41, 0x31,
		0x57, 0xa0, 0x98, 0xa1, 0x98, 0xd3, 0xaa, 0x98, 0xf7, 0xf6, 0xa0, 0x87, 0x93, 0xd0, 0xc3, 0x1d,
		0xd1, 0x71, 0xdc, 0xa7, 0xa1, 0x61, 0x4b, 0x57, 0xc2, 0x53, 0xbb, 0x40, 0x03, 0x43, 0x03, 0xaf,
		0x9d, 0x06, 0x26, 0xcf, 0xc0, 0x82, 0x59, 0x0c, 0xed, 0x0b, 0xb3, 0x18, 0xea, 0x58, 0x4e, 0x1d,
		0x73, 0x58, 0xc6, 0x73, 0xf6, 0x82, 0x6a, 0x86, 0x6a, 0x86, 0x71, 0x0c, 0xe3, 0x18, 0xea, 0x19,
		0xc6, 0x31, 0xb4, 0xf1, 0x4a, 0xb2, 0x8d, 0xea, 0xb6, 0x88, 0xfa, 0x37, 0x58, 0x0d, 0x8d, 0x0b,
		0x8d, 0x8b, 0xa4, 0xd7, 0xb7, 0xf7, 0x5b, 0x36, 0xe9, 0x55, 0x0b, 0x77, 0xcb, 0x14, 0x44, 0xcd,
		0x82, 0x8e, 0xc8, 0x85, 0x51, 0xe0, 0x6d, 0xf0, 0x36, 0x1c, 0x5d, 0x40, 0xd2, 0x40, 0xd2, 0x70,
		0x74, 0x01, 0x5a, 0x8f, 0xc9, 0xe6, 0xf9, 0xa6, 0xeb, 0x1b, 0xbe, 0xa5, 0x02, 0xb0, 0x27, 0xf6,
		0x80, 0x2a, 0x86, 0x2a, 0x5e, 0x3b, 0x55, 0x3c, 0xb8, 0xd9, 0xbe, 0xd5, 0xfc, 0xee, 0xc5, 0xae,
		0x8f, 0xbf, 0xd9, 0x43, 0x59, 0x96, 0xb7, 0x4d, 0xdb, 0xf1, 0x44, 0xd3, 0xb1, 0x5b, 0xa4, 0xb6,
		0x5d, 0xd0, 0xeb, 0xd0, 0xeb, 0xd0, 0xeb, 0x99, 0xd7, 0xeb, 0x99, 0x1a, 0x96, 0x14, 0xb6, 0x38,
		0x1a, 0xff, 0x9f, 0xf4, 0x2c, 0xb0, 0x88, 0x5d, 0x9b, 0xce, 0xc6, 0x5f, 0x34, 0xfe, 0x3f, 0x99,
		0x11, 0x60, 0xba, 0x3b, 0x80, 0x8d, 0x46, 0x7c, 0xad, 0x76, 0x53, 0xc8, 0x55, 0x08, 0xcb, 0x57,
		0x04, 0xb3, 0x54, 0x00, 0xcb, 0x55, 0xfc, 0x26, 0xd5, 0x1d, 0x6d, 0xe6, 0xe6, 0xf1, 0x75, 0x49,
		0x9b, 0xb9, 0x6b, 0xd9, 0xec, 0x96, 0xb6, 0xaa, 0xfd, 0x18, 0x85, 0x22, 0x2a, 0x9d, 0xd3, 0x3c,
		0xef, 0xc1, 0x18, 0x0d, 0x54, 0x5b, 0xd9, 0x3a, 0x6d, 0xe2, 0xb3, 0xe9, 0xe8, 0x9d, 0xe6, 0x3d,
		0x79, 0x86, 0x2f, 0xdc, 0x4e, 0x26, 0xfb, 0xa7, 0x85, 0x0f, 0x1f, 0x57, 0x0f, 0xb5, 0xe6, 0x98,
		0xfa, 0x11, 0x5b, 0xa8, 0x8d, 0x3e, 0xcf, 0xdc, 0x41, 0x6d, 0x4f, 0xdb, 0xf4, 0xb4, 0x55, 0x57,
		0x81, 0x6a, 0x0c, 0xa6, 0x62, 0x84, 0xda, 0x8a, 0xab, 0xc2, 0xa3, 0x32, 0x23, 0x77, 0x52, 0x1b,
		0x4e, 0xb4, 0xa0, 0x4e, 0xc2, 0x20, 0x0c, 0xc2, 0x18, 0xd0, 0x6e, 0x7d, 0xda, 0xf2, 0x47, 0xbd,
		0xa9, 0xaa, 0xee, 0x8b, 0x54, 0xf6, 0xe6, 0x8f, 0x78, 0x93, 0xf5, 0x40, 0xef, 0xb5, 0x9f, 0x88,
		0xd1, 0x75, 0x1d, 0xdf, 0x69, 0x3a, 0x6d, 0xe3, 0x51, 0xb8, 0x9e, 0x8c, 0x85, 0x31, 0xd9, 0x39,
		0x73, 0x7a, 0x07, 0x79, 0x6e, 0xfd, 0xb5, 0x04, 0x5e, 0x05, 0xaf, 0x26, 0xc7, 0xab, 0xc2, 0xee,
		0x75, 0x84, 0x2b, 0x9b, 0xf0, 0x19, 0xf2, 0xab, 0xc4, 0x34, 0xf6, 0x7c, 0xdd, 0xee, 0x05, 0x9d,
		0x8e, 0xfa, 0x31, 0xf2, 0xb8, 0x6b, 0xfa, 0xc2, 0x68, 0x5b, 0x1d, 0xcb, 0x97, 0xe7, 0xee, 0x89,
		0xb5, 0x60, 0x51, 0xb0, 0x68, 0x62, 0x2c, 0xda, 0xb3, 0x6c, 0xbf, 0x58, 0x25, 0x70, 0x67, 0x15,
		0x63, 0x4c, 0x59, 0x9d, 0xeb, 0x9b, 0x3c, 0xc6, 0xb4, 0x5a, 0xa9, 0xec, 0x63, 0x6e, 0xa9, 0x92,
		0x2e, 0xf2, 0x84, 0x37, 0x00, 0x89, 0x54, 0x75, 0x34, 0xbd, 0x1c, 0x1a, 0x09, 0x1a, 0x09, 0x1a,
		0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x89, 0xac, 0x91, 0x7c, 0xab, 0x23, 0x9c, 0x1e, 0x41, 0x17,
		0x8d, 0x17, 0x42, 0x0b, 0x41, 0x0b, 0x41, 0x0b, 0x41, 0x0b, 0x41, 0x0b, 0x41, 0x0b, 0x11, 0x3e,
		0x91, 0x54, 0xee, 0xc5, 0x6b, 0x74, 0x7e, 0x37, 0x52, 0xe4, 0x36, 0x17, 0x3d, 0xd3, 0xe0, 0xc2,
		0x7b, 0xb8, 0x08, 0x76, 0xbe, 0x19, 0x69, 0x31, 0x6a, 0xea, 0xc5, 0xd2, 0x9c, 0x87, 0x28, 0x73,
		0x60, 0xa4, 0xe6, 0xbf, 0xa4, 0x65, 0xba, 0x17, 0x62, 0xd3, 0x0c, 0x6c, 0x83, 0xd8, 0x34, 0x40,
		0x23, 0x40, 0xe3, 0xfc, 0x93, 0x43, 0x6c, 0x3a, 0x3a, 0xb7, 0x22, 0x36, 0x0d, 0x5e, 0x4d, 0x92,
		0x57, 0x11, 0x9b, 0x5e, 0x48, 0x1a, 0xc4, 0xa6, 0xc1, 0xa2, 0xf0, 0xc1, 0xc0, 0x07, 0x03, 0x1f,
		0x0c, 0x7c, 0x30, 0x1c, 0xba, 0x08, 0xb1, 0x69, 0x68, 0x24, 0x68, 0x24, 0x68, 0x24, 0x68, 0x24,
		0x68, 0xa4, 0x74, 0x68, 0x24, 0xc4, 0xa6, 0xa1, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0xa0,
		0x85, 0x34, 0x69, 0xa1, 0xb4, 0xc7, 0xa6, 0xa3, 0xb6, 0xa2, 0x90, 0x0e, 0x4d, 0x47, 0x68, 0x3d,
		0x91, 0xd6, 0xa6, 0x00, 0x2b, 0x0b, 0xeb, 0x29, 0x04, 0x51, 0xea, 0x0a, 0xb0, 0x34, 0x18, 0x1f,
		0x29, 0x08, 0x1f, 0xb9, 0x17, 0x40, 0x89, 0xad, 0x17, 0x40, 0x56, 0xdb, 0x00, 0xc4, 0xd6, 0x01,
		0xe0, 0xd6, 0x71, 0x22, 0x76, 0x9c, 0x9b, 0x0c, 0x2d, 0x46, 0x6a, 0x30, 0x17, 0x51, 0xbc, 0xc7,
		0xd1, 0x07, 0x60, 0x5d, 0xd3, 0x2c, 0x74, 0x67, 0x58, 0x44, 0x06, 0x86, 0xc4, 0xf6, 0x6c, 0x12,
		0xed, 0xd8, 0xa8, 0xed, 0xd7, 0x24, 0xd1, 0xa3, 0x04, 0x06, 0xa6, 0xa0, 0x45, 0x6a, 0x93, 0x45,
		0x22, 0x3a, 0x54, 0x81, 0x37, 0x32, 0x8d, 0x2b, 0x29, 0x28, 0x50, 0x95, 0x14, 0xea, 0xed, 0xcd,
		0x94, 0xa8, 0xc3, 0x04, 0xce, 0x1a, 0x1a, 0xf2, 0xe6, 0x9a, 0x3d, 0xd7, 0x15, 0xb6, 0x6f, 0xb4,
		0x4c, 0x5f, 0xc8, 0x89, 0xf6, 0x99, 0x95, 0x90, 0xf0, 0x90, 0xf0, 0x6f, 0xe8, 0x3d, 0xb8, 0x1b,
		0x86, 0x69, 0xb7, 0xa2, 0xf6, 0x98, 0x7d, 0x6d, 0x6f, 0x1f, 0xe1, 0xb3, 0x67, 0xa6, 0xef, 0x0b,
		0xd7, 0x8e, 0x2c, 0xae, 0xf3, 0x57, 0x7b, 0xc6, 0x61, 0xe3, 0xb9, 0xdc, 0xbf, 0xbe, 0x36, 0xb6,
		0xf6, 0xae, 0x8a, 0xc6, 0x61, 0xe3, 0xa5, 0x78, 0xb5, 0x67, 0x94, 0x1a, 0x85, 0x89, 0xdf, 0x5c,
		0x15, 0x4b, 0x8d, 0xe0, 0x83, 0x2f, 0xfb, 0x57, 0x7b, 0xc5, 0x46, 0xe1, 0xea, 0xd2, 0x6f, 0x6c,
		0xed, 0x0d, 0x7f, 0x53, 0x1c, 0xfe, 0x28, 0x5d, 0xed, 0x19, 0xfb, 0x8d, 0xc2, 0x87, 0xf1, 0xaf,
		0xaf, 0x8a, 0x46, 0x65, 0xb8, 0x66, 0xde, 0xef, 0x5e, 0xaa, 0x7b, 0x85, 0xad, 0xeb, 0xeb, 0x9d,
		0xe0, 0x2f, 0xff, 0xa7, 0xf0, 0xd3, 0xd6, 0xd5, 0x1f, 0x7f, 0x37, 0x5e, 0xb6, 0xae, 0xfe, 0x8f,
		0x21, 0xb1, 0x6f, 0xa1, 0xb0, 0xfa, 0x70, 0x1b, 0x51, 0x68, 0x76, 0x7a, 0x71, 0xf4, 0x9b, 0x34,
		0xe1, 0xfe, 0xdc, 0xca, 0x34, 0xe9, 0x0a, 0xff, 0xc8, 0x27, 0x22, 0x5b, 0x5b, 0x4e, 0xc7, 0xb4,
		0x6c, 0x23, 0xd2, 0x10, 0x94, 0x57, 0x96, 0x99, 0x58, 0x04, 0x89, 0x0a, 0x89, 0x4a, 0xbe, 0x1e,
		0xd2, 0xf2, 0xf4, 0x58, 0xd8, 0xf7, 0x81, 0xab, 0x61, 0x2d, 0xd0, 0x6f, 0x11, 0xe8, 0x77, 0x4c,
		0x8a, 0x52, 0x65, 0x3f, 0x83, 0x60, 0x57, 0x07, 0x02, 0xd8, 0xda, 0xda, 0xda, 0xba, 0x32, 0x8d,
		0xbf, 0x6b, 0xc6, 0x1f, 0x7b, 0xc6, 0xe1, 0x4d, 0x63, 0xe2, 0x2f, 0xd7, 0xd7, 0xc6, 0x4d, 0xa3,
		0xf0, 0xbc, 0xb7, 0x5d, 0x2d, 0xf6, 0x0b, 0x3f, 0xbd, 0xfe, 0xbe, 0x71, 0x7d, 0xbd, 0x53, 0xf8,
		0x17, 0x65, 0xd5, 0x4f, 0x85, 0x97, 0xc1, 0xda, 0x64, 0x15, 0x77, 0x02, 0x2f, 0x9c, 0x90, 0xb6,
		0x6d, 0x3b, 0xf7, 0x96, 0x6d, 0xdc, 0x9a, 0xb6, 0x2d, 0xdc, 0xe8, 0xea, 0x76, 0x6a, 0x15, 0xf4,
		0x2d, 0xf4, 0xed, 0x8c, 0x8f, 0x3a, 0xe2, 0xa4, 0xae, 0x88, 0x93, 0xb9, 0x68, 0x77, 0xbb, 0xe3,
		0xf8, 0x2d, 0xe9, 0xab, 0x3d, 0xb9, 0x08, 0x37, 0x1b, 0x37, 0x3b, 0xb9, 0x9b, 0x9d, 0x6c, 0x74,
		0x6c, 0x45, 0xc4, 0x30, 0x6a, 0x60, 0x6c, 0x71, 0x7c, 0x30, 0x5a, 0x50, 0xcc, 0x17, 0x6d, 0x5b,
		0xf8, 0x91, 0xbb, 0x65, 0x4f, 0x7f, 0x1c, 0x0d, 0xb3, 0xd1, 0x30, 0x3b, 0xca, 0x91, 0xc7, 0x29,
		0xaa, 0x51, 0x94, 0xbc, 0xbe, 0x45, 0xc9, 0x77, 0x66, 0xdb, 0x43, 0x55, 0x32, 0xd2, 0x05, 0x55,
		0x7d, 0x1e, 0xeb, 0x5f, 0x95, 0x8c, 0x8a, 0x45, 0xb0, 0x1a, 0x32, 0x73, 0x23, 0x2c, 0x41, 0x66,
		0xae, 0x5e, 0xc7, 0x2b, 0xc1, 0x1b, 0xad, 0xe4, 0x95, 0xe6, 0x26, 0x19, 0x32, 0x73, 0x95, 0x75,
		0x11, 0x2a, 0x16, 0xa1, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xa0, 0x91, 0xd2, 0xa1, 0x91,
		0x50, 0xb1, 0x08, 0x2d, 0x04, 0x2d, 0x04, 0x2d, 0x04, 0x2d, 0x04, 0x2d, 0xa4, 0x49, 0x0b, 0xa5,
		0xb2, 0x62, 0x71, 0x2a, 0x7a, 0xc7, 0xde, 0x50, 0xf7, 0x32, 0xd8, 0x1d, 0x3d, 0x75, 0x11, 0xbe,
		0x52, 0x54, 0xb8, 0x08, 0x5f, 0x01, 0x3b, 0x02, 0x3b, 0x6a, 0xc1, 0x8e, 0x08, 0x5f, 0x81, 0xd5,
		0xc0, 0x6a, 0x30, 0xd3, 0x60, 0xa6, 0xc1, 0x4c, 0x83, 0x99, 0x86, 0xf0, 0x15, 0x34, 0x12, 0x34,
		0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x52, 0x86, 0x34, 0x12, 0xc2, 0x57, 0xd0, 0x42, 0xd0, 0x42,
		0xd0, 0x42, 0xd0, 0x42, 0xd0, 0x42, 0x9a, 0xb4, 0x50, 0x06, 0xc2, 0x57, 0xcc, 0x3d, 0x37, 0xa7,
		0xa2, 0x57, 0x19, 0x6e, 0xbb, 0x19, 0xa5, 0x42, 0x8f, 0x48, 0x96, 0xc8, 0x75, 0x86, 0xef, 0x96,
		0xbc, 0xf8, 0xaa, 0x17, 0x8e, 0xfa, 0xa2, 0xf9, 0xb9, 0x1d, 0x3e, 0x23, 0xbc, 0xd2, 0xf4, 0x5b,
		0xbc, 0x3e, 0xeb, 0xf0, 0xff, 0x46, 0x4f, 0xbb, 0xe8, 0x29, 0xf3, 0x96, 0xf7, 0xc5, 0xfc, 0x2e,
		0xce, 0x1d, 0x67, 0x56, 0x8d, 0xbf, 0x7d, 0xf2, 0xfc, 0xe4, 0x3f, 0x4d, 0x3d, 0xd9, 0x67, 0xf1,
		0x68, 0x35, 0x47, 0xf7, 0xab, 0xff, 0xae, 0xff, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0xd4, 0xe8, 0x6c, 0x4e, 0xf5, 0x05, 0x34, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/access-points/access-point/radios/radio/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/radios/radio/neighbors/neighbor/state/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode)(0)),
	},
	"/access-points/access-point/radios/radio/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/radios/radio/state/channel-change-reason": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CHANGE_REASON_TYPE)(0)),
	},
	"/access-points/access-point/radios/radio/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-capabilities/state/client-capabilities": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_CAPABILITIES)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-connection/state/client-state": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_STATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-rf/state/connection-mode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/basic-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/basic-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/supported-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/supported-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/dot11r/config/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/access-points/access-point/ssids/ssid/dot11r/state/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/basic-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/basic-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/supported-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/supported-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/config/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/config/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/state/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/state/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/config/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/state/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/users/user/config/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/users/user/state/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/config/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/state/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/server-groups/server-group/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/server-groups/server-group/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/access-points/access-point/system/alarms/alarm/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/access-points/access-point/system/alarms/alarm/state/type-id": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/access-points/access-point/system/cpus/cpu/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0)),
	},
	"/access-points/access-point/system/cpus/cpu/state/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/messages/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/messages/debug-entries/debug-service/config/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/access-points/access-point/system/messages/debug-entries/debug-service/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/access-points/access-point/system/messages/debug-entries/debug-service/state/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/access-points/access-point/system/messages/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/ntp/ntp-keys/ntp-key/config/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/access-points/access-point/system/ntp/ntp-keys/ntp-key/state/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/access-points/access-point/system/ntp/servers/server/config/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/access-points/access-point/system/ntp/servers/server/state/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/access-points/access-point/system/ssh-server/config/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/access-points/access-point/system/ssh-server/state/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/components/component/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
	},
	"/joined-aps/joined-ap/state/opstate": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_AP_STATE)(0)),
	},
	"/joined-aps/joined-ap/state/power-source": []reflect.Type{
		reflect.TypeOf((E_OpenconfigApManager_JoinedAps_JoinedAp_State_PowerSource)(0)),
	},
	"/messages/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/messages/debug-entries/debug-service/config/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/debug-entries/debug-service/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/debug-entries/debug-service/state/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/messages/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/radios/radio/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/radios/radio/neighbors/neighbor/state/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State_Opmode)(0)),
	},
	"/radios/radio/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/radios/radio/state/channel-change-reason": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CHANGE_REASON_TYPE)(0)),
	},
	"/radios/radio/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/ssids/ssid/clients/client/client-capabilities/state/client-capabilities": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_CAPABILITIES)(0)),
	},
	"/ssids/ssid/clients/client/client-connection/state/client-state": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_STATE)(0)),
	},
	"/ssids/ssid/clients/client/client-rf/state/connection-mode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0)),
	},
	"/ssids/ssid/config/basic-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/config/basic-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/ssids/ssid/config/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/ssids/ssid/config/supported-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/config/supported-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/dot11r/config/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/ssids/ssid/dot11r/state/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/ssids/ssid/state/basic-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/state/basic-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/ssids/ssid/state/opmode": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/ssids/ssid/state/supported-data-rates-2g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/ssids/ssid/state/supported-data-rates-5g": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/system/aaa/accounting/config/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/record": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/state/accounting-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/config/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/state/authentication-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/users/user/config/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authentication/users/user/state/role": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authorization/config/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/config/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/state/event-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/state/authorization-method": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/config/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/state/type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/alarms/alarm/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/system/alarms/alarm/state/type-id": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/system/cpus/cpu/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/cpus/cpu/state/index": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/logging/console/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/facility": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/messages/config/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/system/messages/debug-entries/debug-service/config/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/debug-entries/debug-service/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/debug-entries/debug-service/state/service": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_DEBUG_SERVICE)(0)),
	},
	"/system/messages/state/severity": []reflect.Type{
		reflect.TypeOf((E_OpenconfigMessages_SyslogSeverity)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/config/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/state/key-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/servers/server/config/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ntp/servers/server/state/association-type": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ssh-server/config/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/system/ssh-server/state/protocol-version": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
}

